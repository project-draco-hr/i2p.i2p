{
  database=new NamedDB();
  ServerSocket listener=null;
  int i=0;
  boolean save=false;
  String configLocation=System.getProperty(PROP_CONFIG_LOCATION,"bob.config");
  RetransmissionTimer Y=RetransmissionTimer.getInstance();
  SimpleScheduler Y1=SimpleScheduler.getInstance();
  SimpleTimer2 Y2=SimpleTimer2.getInstance();
  i=Y.hashCode();
  i=Y1.hashCode();
  i=Y2.hashCode();
  try {
{
      File cfg=new File(configLocation);
      if (!cfg.isAbsolute())       cfg=new File(I2PAppContext.getGlobalContext().getConfigDir(),configLocation);
      try {
        FileInputStream fi=new FileInputStream(cfg);
        props.load(fi);
        fi.close();
      }
 catch (      FileNotFoundException fnfe) {
        warn("Unable to load up the BOB config file " + cfg.getAbsolutePath() + ", Using defaults.");
        warn(fnfe.toString());
        save=true;
      }
catch (      IOException ioe) {
        warn("IOException on BOB config file " + cfg.getAbsolutePath() + ", using defaults.");
        warn(ioe.toString());
      }
    }
    if (!props.containsKey(I2PClient.PROP_TCP_HOST)) {
      props.setProperty(I2PClient.PROP_TCP_HOST,"localhost");
    }
    if (!props.containsKey(I2PClient.PROP_TCP_PORT)) {
      props.setProperty(I2PClient.PROP_TCP_PORT,"7654");
    }
    if (!props.containsKey(I2PClient.PROP_RELIABILITY)) {
      props.setProperty(I2PClient.PROP_RELIABILITY,I2PClient.PROP_RELIABILITY_BEST_EFFORT);
    }
    if (!props.containsKey(PROP_BOB_PORT)) {
      props.setProperty(PROP_BOB_PORT,"2827");
    }
    if (!props.containsKey("inbound.length")) {
      props.setProperty("inbound.length","1");
    }
    if (!props.containsKey("outbound.length")) {
      props.setProperty("outbound.length","1");
    }
    if (!props.containsKey("inbound.lengthVariance")) {
      props.setProperty("inbound.lengthVariance","0");
    }
    if (!props.containsKey("outbound.lengthVariance")) {
      props.setProperty("outbound.lengthVariance","0");
    }
    if (!props.containsKey(PROP_BOB_HOST)) {
      props.setProperty(PROP_BOB_HOST,"localhost");
    }
    if (save) {
      File cfg=new File(configLocation);
      if (!cfg.isAbsolute())       cfg=new File(I2PAppContext.getGlobalContext().getConfigDir(),configLocation);
      try {
        warn("Writing new defaults file " + cfg.getAbsolutePath());
        FileOutputStream fo=new FileOutputStream(cfg);
        props.store(fo,cfg.getAbsolutePath());
        fo.close();
      }
 catch (      IOException ioe) {
        error("IOException on BOB config file " + cfg.getAbsolutePath() + ", "+ ioe);
      }
    }
    i=0;
    boolean g=false;
    try {
      info("BOB is now running.");
      listener=new ServerSocket(Integer.parseInt(props.getProperty(PROP_BOB_PORT)),10,InetAddress.getByName(props.getProperty(PROP_BOB_HOST)));
      Socket server=null;
      listener.setSoTimeout(500);
      while (spin.get()) {
        try {
          server=listener.accept();
          g=true;
        }
 catch (        ConnectException ce) {
          g=false;
        }
catch (        SocketTimeoutException ste) {
          g=false;
        }
        if (g) {
          DoCMDS conn_c=new DoCMDS(spin,lock,server,props,database,_log);
          Thread t=new Thread(conn_c);
          t.setName("BOB.DoCMDS " + i);
          t.start();
          i++;
        }
      }
    }
 catch (    IOException ioe) {
      error("IOException on socket listen: " + ioe);
      ioe.printStackTrace();
    }
  }
  finally {
    info("BOB is now shutting down...");
    try {
      listener.close();
    }
 catch (    Exception ex) {
    }
    visitAllThreads();
    database.getReadLock();
    int all=database.getcount();
    database.releaseReadLock();
    NamedDB nickinfo;
    for (i=0; i < all; i++) {
      database.getReadLock();
      nickinfo=(NamedDB)database.getnext(i);
      nickinfo.getReadLock();
      if (nickinfo.get(P_RUNNING).equals(Boolean.TRUE) && nickinfo.get(P_STOPPING).equals(Boolean.FALSE) && nickinfo.get(P_STARTING).equals(Boolean.FALSE)) {
        nickinfo.releaseReadLock();
        database.releaseReadLock();
        database.getWriteLock();
        nickinfo.getWriteLock();
        nickinfo.add(P_STOPPING,new Boolean(true));
        nickinfo.releaseWriteLock();
        database.releaseWriteLock();
      }
 else {
        nickinfo.releaseReadLock();
        database.releaseReadLock();
      }
    }
    info("BOB is now stopped.");
  }
}
