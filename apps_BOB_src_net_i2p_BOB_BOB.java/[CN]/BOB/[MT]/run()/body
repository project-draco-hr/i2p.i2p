{
  if (listener == null)   return;
  changeState(RUNNING);
  _log.info("BOB is now running.");
  if (_mgr != null)   _mgr.register(this);
  int i=0;
  boolean g=false;
  spin.set(true);
  try {
    Socket server=null;
    while (spin.get()) {
      try {
        server=listener.accept();
        server.setKeepAlive(true);
        g=true;
      }
 catch (      ConnectException ce) {
        g=false;
      }
catch (      SocketTimeoutException ste) {
        g=false;
      }
      if (g) {
        DoCMDS conn_c=new DoCMDS(spin,lock,server,props,database,_log);
        Thread t=new I2PAppThread(conn_c);
        t.setName("BOB.DoCMDS " + i);
        t.start();
        i++;
      }
    }
    changeState(STOPPING);
  }
 catch (  Exception e) {
    if (spin.get())     _log.error("Unexpected error while listening for connections",e);
 else     e=null;
    changeState(STOPPING,e);
  }
 finally {
    _log.info("BOB is now shutting down...");
    try {
      listener.close();
    }
 catch (    Exception ex) {
    }
    visitAllThreads();
    database.getReadLock();
    int all=database.getcount();
    database.releaseReadLock();
    NamedDB nickinfo;
    for (i=0; i < all; i++) {
      database.getReadLock();
      nickinfo=(NamedDB)database.getnext(i);
      nickinfo.getReadLock();
      if (nickinfo.get(P_RUNNING).equals(Boolean.TRUE) && nickinfo.get(P_STOPPING).equals(Boolean.FALSE) && nickinfo.get(P_STARTING).equals(Boolean.FALSE)) {
        nickinfo.releaseReadLock();
        database.releaseReadLock();
        database.getWriteLock();
        nickinfo.getWriteLock();
        nickinfo.add(P_STOPPING,Boolean.valueOf(true));
        nickinfo.releaseWriteLock();
        database.releaseWriteLock();
      }
 else {
        nickinfo.releaseReadLock();
        database.releaseReadLock();
      }
    }
    changeState(STOPPED);
    _log.info("BOB is now stopped.");
  }
}
