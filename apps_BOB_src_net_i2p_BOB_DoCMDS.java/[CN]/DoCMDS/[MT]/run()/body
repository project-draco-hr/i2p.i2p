{
  dk=ns=ip=op=false;
  try {
    try {
      BufferedReader in=new BufferedReader(new InputStreamReader(server.getInputStream()));
      PrintStream out=new PrintStream(server.getOutputStream());
      quit: {
        die: {
          prikey=new ByteArrayOutputStream();
          out.println("BOB " + BOBversion);
          out.println("OK");
          while ((line=in.readLine()) != null) {
            StringTokenizer token=new StringTokenizer(line," ");
            String Command="";
            String Arg="";
            NamedDB info;
            if (token.countTokens() != 0) {
              Command=token.nextToken();
              Command=Command.toLowerCase();
              if (token.countTokens() != 0) {
                Arg=token.nextToken();
              }
 else {
                Arg="";
              }
              if (Command.equals(C_help)) {
                for (int i=0; !C_ALL[i][0].equals(" "); i++) {
                  if (C_ALL[i][0].equalsIgnoreCase(Arg)) {
                    out.println("OK " + C_ALL[i][1]);
                  }
                }
              }
 else               if (Command.equals(C_visit)) {
                visitAllThreads();
                out.println("OK ");
              }
 else               if (Command.equals(C_lookup)) {
                Destination dest=null;
                String reply=null;
                if (Arg.endsWith(".i2p")) {
                  try {
                    try {
                      dest=I2PTunnel.destFromName(Arg);
                    }
 catch (                    DataFormatException ex) {
                    }
                    reply=dest.toBase64();
                  }
 catch (                  NullPointerException npe) {
                  }
                }
                if (reply == null) {
                  out.println("ERROR Address Not found.");
                }
 else {
                  out.println("OK " + reply);
                }
              }
 else               if (Command.equals(C_getdest)) {
                if (ns) {
                  if (dk) {
                    try {
                      rlock();
                    }
 catch (                    Exception ex) {
                      break die;
                    }
                    try {
                      out.println("OK " + nickinfo.get(P_DEST));
                    }
 catch (                    Exception e) {
                      try {
                        runlock();
                      }
 catch (                      Exception ex) {
                        break die;
                      }
                      break die;
                    }
                    try {
                      runlock();
                    }
 catch (                    Exception ex) {
                      break die;
                    }
                  }
 else {
                    out.println("ERROR keys not set.");
                  }
                }
 else {
                  nns(out);
                }
              }
 else               if (Command.equals(C_list)) {
                database.getReadLock();
                for (int i=0; i < database.getcount(); i++) {
                  try {
                    info=(NamedDB)database.getnext(i);
                    out.print("DATA");
                  }
 catch (                  Exception e) {
                    database.releaseReadLock();
                    break die;
                  }
                  try {
                    info.getReadLock();
                  }
 catch (                  Exception ex) {
                    break die;
                  }
                  try {
                    nickprint(out,info);
                  }
 catch (                  Exception e) {
                    try {
                      info.releaseReadLock();
                      database.releaseReadLock();
                    }
 catch (                    Exception ex) {
                      break die;
                    }
                    break die;
                  }
                  try {
                    info.releaseReadLock();
                  }
 catch (                  Exception ex) {
                    break die;
                  }
                }
                try {
                  database.releaseReadLock();
                }
 catch (                Exception ex) {
                  break die;
                }
                out.println("OK Listing done");
              }
 else               if (Command.equals(C_quit)) {
                break quit;
              }
 else               if (Command.equals(C_zap)) {
                LIVE.set(false);
                break quit;
              }
 else               if (Command.equals(C_newkeys)) {
                if (ns) {
                  try {
                    if (tunnelactive(nickinfo)) {
                      out.println("ERROR tunnel is active");
                    }
 else {
                      try {
                        prikey=new ByteArrayOutputStream();
                        d=I2PClientFactory.createClient().createDestination(prikey);
                        try {
                          wlock();
                        }
 catch (                        Exception e) {
                          break die;
                        }
                        try {
                          nickinfo.add(P_KEYS,prikey.toByteArray());
                          nickinfo.add(P_DEST,d.toBase64());
                        }
 catch (                        Exception e) {
                          try {
                            wunlock();
                          }
 catch (                          Exception ex) {
                            break die;
                          }
                          break die;
                        }
                        dk=true;
                        try {
                          wunlock();
                        }
 catch (                        Exception ex) {
                          break die;
                        }
                        try {
                          rlock();
                        }
 catch (                        Exception ex) {
                          break die;
                        }
                        try {
                          out.println("OK " + nickinfo.get(P_DEST));
                        }
 catch (                        Exception e) {
                          runlock();
                          break die;
                        }
                        try {
                          runlock();
                        }
 catch (                        Exception ex) {
                          break die;
                        }
                      }
 catch (                      I2PException ipe) {
                        BOB.error("Error generating keys" + ipe);
                        out.println("ERROR generating keys");
                      }
                    }
                  }
 catch (                  Exception e) {
                    break die;
                  }
                }
 else {
                  try {
                    nns(out);
                  }
 catch (                  Exception ex) {
                    break die;
                  }
                }
              }
 else               if (Command.equals(C_getkeys)) {
                if (dk) {
                  prikey=new ByteArrayOutputStream();
                  try {
                    rlock();
                  }
 catch (                  Exception e) {
                    break die;
                  }
                  try {
                    prikey.write(((byte[])nickinfo.get(P_KEYS)));
                  }
 catch (                  Exception ex) {
                    try {
                      runlock();
                    }
 catch (                    Exception ee) {
                      break die;
                    }
                    break die;
                  }
                  try {
                    runlock();
                  }
 catch (                  Exception e) {
                    break die;
                  }
                  out.println("OK " + net.i2p.data.Base64.encode(prikey.toByteArray()));
                }
 else {
                  out.println("ERROR no public key has been set");
                }
              }
 else               if (Command.equals(C_quiet)) {
                if (ns) {
                  try {
                    if (tunnelactive(nickinfo)) {
                      out.println("ERROR tunnel is active");
                    }
 else {
                      try {
                        wlock();
                      }
 catch (                      Exception ex) {
                        break die;
                      }
                      try {
                        nickinfo.add(P_QUIET,new Boolean(Boolean.parseBoolean(Arg) == true));
                      }
 catch (                      Exception ex) {
                        try {
                          wunlock();
                        }
 catch (                        Exception ee) {
                          break die;
                        }
                        break die;
                      }
                      try {
                        wunlock();
                      }
 catch (                      Exception ex) {
                        break die;
                      }
                      out.println("OK Quiet set");
                    }
                  }
 catch (                  Exception ex) {
                    break die;
                  }
                }
 else {
                  try {
                    nns(out);
                  }
 catch (                  Exception ex) {
                    break die;
                  }
                }
              }
 else               if (Command.equals(C_verify)) {
                if (is64ok(Arg)) {
                  out.println("OK");
                }
 else {
                  out.println("ERROR not in BASE64 format");
                }
              }
 else               if (Command.equals(C_setkeys)) {
                if (ns) {
                  try {
                    if (tunnelactive(nickinfo)) {
                      out.println("ERROR tunnel is active");
                    }
 else {
                      try {
                        prikey=new ByteArrayOutputStream();
                        prikey.write(net.i2p.data.Base64.decode(Arg));
                        d=new Destination();
                        d.fromBase64(Arg);
                      }
 catch (                      Exception ex) {
                        Arg="";
                      }
                      if ((Arg.length() == 884) && is64ok(Arg)) {
                        try {
                          wlock();
                        }
 catch (                        Exception ex) {
                          break die;
                        }
                        try {
                          nickinfo.add(P_KEYS,prikey.toByteArray());
                          nickinfo.add(P_DEST,d.toBase64());
                        }
 catch (                        Exception ex) {
                          try {
                            wunlock();
                          }
 catch (                          Exception ee) {
                            break die;
                          }
                          break die;
                        }
                        dk=true;
                        try {
                          wunlock();
                        }
 catch (                        Exception ex) {
                          break die;
                        }
                        try {
                          rlock();
                        }
 catch (                        Exception ex) {
                          break die;
                        }
                        try {
                          out.println("OK " + nickinfo.get(P_DEST));
                        }
 catch (                        Exception e) {
                          try {
                            runlock();
                          }
 catch (                          Exception ex) {
                            break die;
                          }
                          break die;
                        }
                        try {
                          runlock();
                        }
 catch (                        Exception ex) {
                          break die;
                        }
                      }
 else {
                        out.println("ERROR not in BASE64 format");
                      }
                    }
                  }
 catch (                  Exception ex) {
                    break die;
                  }
                }
 else {
                  try {
                    nns(out);
                  }
 catch (                  Exception ex) {
                    break die;
                  }
                }
              }
 else               if (Command.equals(C_setnick)) {
                ns=dk=ip=op=false;
                try {
                  database.getReadLock();
                }
 catch (                Exception ex) {
                  break die;
                }
                try {
                  nickinfo=(NamedDB)database.get(Arg);
                  if (!tunnelactive(nickinfo)) {
                    nickinfo=null;
                    ns=true;
                  }
                }
 catch (                Exception b) {
                  nickinfo=null;
                  ns=true;
                }
                try {
                  database.releaseReadLock();
                }
 catch (                Exception ex) {
                  break die;
                }
                if (ns) {
                  nickinfo=new NamedDB();
                  try {
                    wlock();
                  }
 catch (                  Exception e) {
                    break die;
                  }
                  try {
                    database.add(Arg,nickinfo);
                    nickinfo.add(P_NICKNAME,Arg);
                    nickinfo.add(P_STARTING,new Boolean(false));
                    nickinfo.add(P_RUNNING,new Boolean(false));
                    nickinfo.add(P_STOPPING,new Boolean(false));
                    nickinfo.add(P_QUIET,new Boolean(false));
                    nickinfo.add(P_INHOST,"localhost");
                    nickinfo.add(P_OUTHOST,"localhost");
                    Properties Q=new Properties();
                    Lifted.copyProperties(this.props,Q);
                    Q.setProperty("inbound.nickname",Arg);
                    Q.setProperty("outbound.nickname",Arg);
                    nickinfo.add(P_PROPERTIES,Q);
                  }
 catch (                  Exception e) {
                    try {
                      wunlock();
                      break die;
                    }
 catch (                    Exception ee) {
                      break die;
                    }
                  }
                  try {
                    wunlock();
                  }
 catch (                  Exception e) {
                    break die;
                  }
                  out.println("OK Nickname set to " + Arg);
                }
 else {
                  out.println("ERROR tunnel is active");
                }
              }
 else               if (Command.equals(C_option)) {
                if (ns) {
                  try {
                    if (tunnelactive(nickinfo)) {
                      out.println("ERROR tunnel is active");
                    }
 else {
                      StringTokenizer otoken=new StringTokenizer(Arg,"=");
                      if (otoken.countTokens() != 2) {
                        out.println("ERROR to many or no options.");
                      }
 else {
                        String pname=otoken.nextToken();
                        String pval=otoken.nextToken();
                        try {
                          rlock();
                        }
 catch (                        Exception ex) {
                          break die;
                        }
                        Properties Q=(Properties)nickinfo.get(P_PROPERTIES);
                        try {
                          runlock();
                        }
 catch (                        Exception ex) {
                          break die;
                        }
                        Q.setProperty(pname,pval);
                        try {
                          wlock();
                        }
 catch (                        Exception ex) {
                          break die;
                        }
                        try {
                          nickinfo.add(P_PROPERTIES,Q);
                        }
 catch (                        Exception ex) {
                          try {
                            wunlock();
                          }
 catch (                          Exception ee) {
                            break die;
                          }
                          break die;
                        }
                        try {
                          wunlock();
                        }
 catch (                        Exception ex) {
                          break die;
                        }
                        out.println("OK " + pname + " set to "+ pval);
                      }
                    }
                  }
 catch (                  Exception ex) {
                    break die;
                  }
                }
 else {
                  nns(out);
                }
              }
 else               if (Command.equals(C_getnick)) {
                try {
                  database.getReadLock();
                }
 catch (                Exception ex) {
                  break die;
                }
                try {
                  nickinfo=(NamedDB)database.get(Arg);
                  ns=true;
                }
 catch (                RuntimeException b) {
                  try {
                    nns(out);
                  }
 catch (                  Exception ex) {
                    try {
                      database.releaseReadLock();
                    }
 catch (                    Exception ee) {
                      break die;
                    }
                    break die;
                  }
                }
                database.releaseReadLock();
                if (ns) {
                  try {
                    rlock();
                  }
 catch (                  Exception e) {
                    break die;
                  }
                  try {
                    dk=nickinfo.exists(P_KEYS);
                    ip=nickinfo.exists(P_INPORT);
                    op=nickinfo.exists(P_OUTPORT);
                  }
 catch (                  Exception ex) {
                    try {
                      runlock();
                    }
 catch (                    Exception ee) {
                      break die;
                    }
                    break die;
                  }
                  try {
                    runlock();
                  }
 catch (                  Exception e) {
                    break die;
                  }
                  out.println("OK Nickname set to " + Arg);
                }
              }
 else               if (Command.equals(C_inport)) {
                if (ns) {
                  try {
                    if (tunnelactive(nickinfo)) {
                      out.println("ERROR tunnel is active");
                    }
 else {
                      int prt;
                      try {
                        wlock();
                      }
 catch (                      Exception ex) {
                        break die;
                      }
                      try {
                        nickinfo.kill(P_INPORT);
                      }
 catch (                      Exception ex) {
                        try {
                          wunlock();
                        }
 catch (                        Exception ee) {
                          break die;
                        }
                        break die;
                      }
                      try {
                        prt=Integer.parseInt(Arg);
                        if (prt > 1 && prt < 65536) {
                          try {
                            nickinfo.add(P_INPORT,new Integer(prt));
                          }
 catch (                          Exception ex) {
                            try {
                              wunlock();
                            }
 catch (                            Exception ee) {
                              break die;
                            }
                            break die;
                          }
                        }
                      }
 catch (                      NumberFormatException nfe) {
                        out.println("ERROR not a number");
                      }
                      try {
                        wunlock();
                      }
 catch (                      Exception ex) {
                        break die;
                      }
                      try {
                        rlock();
                      }
 catch (                      Exception ex) {
                        break die;
                      }
                      try {
                        ip=nickinfo.exists(P_INPORT);
                      }
 catch (                      Exception ex) {
                        try {
                          runlock();
                        }
 catch (                        Exception ee) {
                          break die;
                        }
                        break die;
                      }
                      try {
                        runlock();
                      }
 catch (                      Exception ex) {
                        break die;
                      }
                      if (ip) {
                        out.println("OK inbound port set");
                      }
 else {
                        out.println("ERROR port out of range");
                      }
                    }
                  }
 catch (                  Exception ex) {
                    break die;
                  }
                }
 else {
                  nns(out);
                }
              }
 else               if (Command.equals(C_outport)) {
                if (ns) {
                  try {
                    if (tunnelactive(nickinfo)) {
                      out.println("ERROR tunnel is active");
                    }
 else {
                      int prt;
                      try {
                        wlock();
                      }
 catch (                      Exception ex) {
                        break die;
                      }
                      try {
                        nickinfo.kill(P_OUTPORT);
                      }
 catch (                      Exception ex) {
                        try {
                          wunlock();
                        }
 catch (                        Exception ee) {
                          break die;
                        }
                        break die;
                      }
                      try {
                        prt=Integer.parseInt(Arg);
                        if (prt > 1 && prt < 65536) {
                          try {
                            nickinfo.add(P_OUTPORT,new Integer(prt));
                          }
 catch (                          Exception ex) {
                            try {
                              wunlock();
                            }
 catch (                            Exception ee) {
                              break die;
                            }
                            break die;
                          }
                        }
                      }
 catch (                      NumberFormatException nfe) {
                        out.println("ERROR not a number");
                      }
                      try {
                        wunlock();
                      }
 catch (                      Exception ex) {
                        break die;
                      }
                      try {
                        rlock();
                      }
 catch (                      Exception ex) {
                        break die;
                      }
                      try {
                        ip=nickinfo.exists(P_OUTPORT);
                      }
 catch (                      Exception ex) {
                        try {
                          runlock();
                        }
 catch (                        Exception ee) {
                          break die;
                        }
                        break die;
                      }
                      try {
                        runlock();
                      }
 catch (                      Exception ex) {
                        break die;
                      }
                      if (ip) {
                        out.println("OK outbound port set");
                      }
 else {
                        out.println("ERROR port out of range");
                      }
                    }
                  }
 catch (                  Exception ex) {
                    break die;
                  }
                }
 else {
                  try {
                    nns(out);
                  }
 catch (                  Exception ex) {
                    break die;
                  }
                }
              }
 else               if (Command.equals(C_inhost)) {
                if (ns) {
                  try {
                    if (tunnelactive(nickinfo)) {
                      out.println("ERROR tunnel is active");
                    }
 else {
                      try {
                        wlock();
                      }
 catch (                      Exception ex) {
                        break die;
                      }
                      try {
                        nickinfo.add(P_INHOST,Arg);
                      }
 catch (                      Exception ex) {
                        try {
                          wunlock();
                        }
 catch (                        Exception ee) {
                          break die;
                        }
                        break die;
                      }
                      try {
                        wunlock();
                      }
 catch (                      Exception ex) {
                        break die;
                      }
                      out.println("OK inhost set");
                    }
                  }
 catch (                  Exception ex) {
                    break die;
                  }
                }
 else {
                  try {
                    nns(out);
                  }
 catch (                  Exception ex) {
                    break die;
                  }
                }
              }
 else               if (Command.equals(C_outhost)) {
                if (ns) {
                  try {
                    if (tunnelactive(nickinfo)) {
                      out.println("ERROR tunnel is active");
                    }
 else {
                      try {
                        wlock();
                      }
 catch (                      Exception ex) {
                        break die;
                      }
                      try {
                        nickinfo.add(P_OUTHOST,Arg);
                      }
 catch (                      Exception ex) {
                        try {
                          wunlock();
                        }
 catch (                        Exception ee) {
                          break die;
                        }
                        break die;
                      }
                      try {
                        wunlock();
                      }
 catch (                      Exception ex) {
                        break die;
                      }
                      out.println("OK outhost set");
                    }
                  }
 catch (                  Exception ex) {
                    break die;
                  }
                }
 else {
                  try {
                    nns(out);
                  }
 catch (                  Exception ex) {
                    break die;
                  }
                }
              }
 else               if (Command.equals(C_show)) {
                if (ns) {
                  out.print("OK");
                  try {
                    rlock();
                  }
 catch (                  Exception e) {
                    break die;
                  }
                  try {
                    nickprint(out,nickinfo);
                  }
 catch (                  Exception e) {
                    try {
                      runlock();
                    }
 catch (                    Exception ee) {
                      break die;
                    }
                    out.println();
                    break die;
                  }
                  try {
                    runlock();
                  }
 catch (                  Exception e) {
                    break die;
                  }
                }
 else {
                  try {
                    nns(out);
                  }
 catch (                  Exception e) {
                    break die;
                  }
                }
              }
 else               if (Command.equals(C_show_props)) {
                if (ns) {
                  out.print("OK");
                  try {
                    rlock();
                  }
 catch (                  Exception e) {
                    break die;
                  }
                  try {
                    propprint(out,nickinfo);
                  }
 catch (                  Exception e) {
                    try {
                      runlock();
                    }
 catch (                    Exception ee) {
                      break die;
                    }
                    out.println();
                    break die;
                  }
                  try {
                    runlock();
                  }
 catch (                  Exception e) {
                    break die;
                  }
                }
 else {
                  try {
                    nns(out);
                  }
 catch (                  Exception e) {
                    break die;
                  }
                }
              }
 else               if (Command.equals(C_start)) {
                if (ns && dk && (ip || op)) {
                  try {
                    if (tunnelactive(nickinfo)) {
                      out.println("ERROR tunnel is active");
                    }
 else {
                      MUXlisten tunnel;
                      try {
                        while (!lock.compareAndSet(false,true)) {
                        }
                        tunnel=new MUXlisten(lock,database,nickinfo,_log);
                        Thread t=new Thread(tunnel);
                        t.start();
                        out.println("OK tunnel starting");
                      }
 catch (                      I2PException e) {
                        lock.set(false);
                        out.println("ERROR starting tunnel: " + e);
                      }
catch (                      IOException e) {
                        lock.set(false);
                        out.println("ERROR starting tunnel: " + e);
                      }
                    }
                  }
 catch (                  Exception ex) {
                    break die;
                  }
                }
 else {
                  out.println("ERROR tunnel settings incomplete");
                }
              }
 else               if (Command.equals(C_stop)) {
                if (ns) {
                  try {
                    rlock();
                  }
 catch (                  Exception e) {
                    break die;
                  }
                  try {
                    if (nickinfo.get(P_RUNNING).equals(Boolean.TRUE) && nickinfo.get(P_STOPPING).equals(Boolean.FALSE) && nickinfo.get(P_STARTING).equals(Boolean.FALSE)) {
                      try {
                        runlock();
                      }
 catch (                      Exception e) {
                        break die;
                      }
                      try {
                        wlock();
                      }
 catch (                      Exception e) {
                        break die;
                      }
                      nickinfo.add(P_STOPPING,new Boolean(true));
                      try {
                        wunlock();
                      }
 catch (                      Exception e) {
                        break die;
                      }
                      out.println("OK tunnel stopping");
                    }
 else {
                      try {
                        runlock();
                      }
 catch (                      Exception e) {
                        break die;
                      }
                      out.println("ERROR tunnel is inactive");
                    }
                  }
 catch (                  Exception e) {
                    try {
                      runlock();
                    }
 catch (                    Exception ee) {
                      break die;
                    }
                    break die;
                  }
                }
 else {
                  try {
                    nns(out);
                  }
 catch (                  Exception e) {
                    break die;
                  }
                }
              }
 else               if (Command.equals(C_clear)) {
                if (ns) {
                  try {
                    if (tunnelactive(nickinfo)) {
                      out.println("ERROR tunnel is active");
                    }
 else {
                      try {
                        database.getWriteLock();
                      }
 catch (                      Exception e) {
                        break die;
                      }
                      try {
                        database.kill(nickinfo.get(P_NICKNAME));
                      }
 catch (                      Exception e) {
                        try {
                          database.releaseWriteLock();
                        }
 catch (                        Exception ee) {
                          break die;
                        }
                        break die;
                      }
                      try {
                        database.releaseWriteLock();
                      }
 catch (                      Exception e) {
                        break die;
                      }
                      dk=ns=ip=op=false;
                      out.println("OK cleared");
                    }
                  }
 catch (                  Exception ex) {
                    break die;
                  }
                }
 else {
                  try {
                    nns(out);
                  }
 catch (                  Exception e) {
                    break die;
                  }
                }
              }
 else               if (Command.equals(C_status)) {
                try {
                  if (database.exists(Arg)) {
                    out.print("OK ");
                    try {
                      ttlpnt(out,Arg);
                    }
 catch (                    Exception e) {
                      out.println();
                      break die;
                    }
                  }
 else {
                    try {
                      nns(out);
                    }
 catch (                    Exception e) {
                      break die;
                    }
                  }
                }
 catch (                Exception e) {
                  break die;
                }
              }
 else {
                out.println("ERROR UNKNOWN COMMAND! Try help");
              }
            }
          }
        }
        out.print("ERROR A really bad error just happened, ");
      }
      out.println("OK Bye!");
    }
 catch (    IOException ioe) {
    }
  }
  finally {
    try {
      server.close();
    }
 catch (    IOException ex) {
    }
  }
}
