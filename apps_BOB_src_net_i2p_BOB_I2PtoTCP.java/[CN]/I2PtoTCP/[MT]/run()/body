{
  try {
    database.getReadLock();
    info.getReadLock();
    String host=info.get("OUTHOST").toString();
    int port=Integer.parseInt(info.get("OUTPORT").toString());
    boolean tell=info.get("QUIET").equals(Boolean.FALSE);
    info.releaseReadLock();
    database.releaseReadLock();
    sock=new Socket(host,port);
    InputStream in=sock.getInputStream();
    OutputStream out=sock.getOutputStream();
    InputStream Iin=I2P.getInputStream();
    OutputStream Iout=I2P.getOutputStream();
    I2P.setReadTimeout(0);
    if (tell) {
      out.write(I2P.getPeerDestination().toBase64().getBytes());
      out.write(10);
      out.flush();
    }
    TCPio conn_c=new TCPio(in,Iout,info,database);
    TCPio conn_a=new TCPio(Iin,out,info,database);
    Thread t=new Thread(conn_c,"TCPioA");
    Thread q=new Thread(conn_a,"TCPioB");
    t.start();
    q.start();
    while (t.isAlive() && q.isAlive()) {
      try {
        Thread.sleep(10);
      }
 catch (      InterruptedException e) {
      }
    }
  }
 catch (  Exception e) {
  }
  try {
    I2P.close();
  }
 catch (  Exception e) {
  }
  try {
    sock.close();
  }
 catch (  Exception e) {
  }
}
