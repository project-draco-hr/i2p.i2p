{
  String host;
  int port;
  boolean tell;
  die: {
    try {
      try {
        rlock();
      }
 catch (      Exception e) {
        break die;
      }
      try {
        host=info.get("OUTHOST").toString();
        port=Integer.parseInt(info.get("OUTPORT").toString());
        tell=info.get("QUIET").equals(Boolean.FALSE);
      }
 catch (      Exception e) {
        runlock();
        break die;
      }
      try {
        runlock();
      }
 catch (      Exception e) {
        break die;
      }
      sock=new Socket(host,port);
      InputStream in=sock.getInputStream();
      OutputStream out=sock.getOutputStream();
      InputStream Iin=I2P.getInputStream();
      OutputStream Iout=I2P.getOutputStream();
      I2P.setReadTimeout(0);
      if (tell) {
        out.write(I2P.getPeerDestination().toBase64().getBytes());
        out.write(10);
        out.flush();
      }
      TCPio conn_c=new TCPio(in,Iout);
      TCPio conn_a=new TCPio(Iin,out);
      Thread t=new Thread(conn_c,"TCPioA");
      Thread q=new Thread(conn_a,"TCPioB");
      t.start();
      q.start();
      while (t.isAlive() && q.isAlive()) {
        try {
          Thread.sleep(10);
        }
 catch (        InterruptedException e) {
        }
      }
    }
 catch (    Exception e) {
      break die;
    }
  }
  try {
    I2P.close();
  }
 catch (  Exception e) {
    tell=false;
  }
  try {
    sock.close();
  }
 catch (  Exception e) {
    tell=false;
  }
}
