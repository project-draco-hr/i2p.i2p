{
  String host;
  int port;
  boolean tell;
  InputStream in=null;
  OutputStream out=null;
  InputStream Iin=null;
  OutputStream Iout=null;
  Thread t=null;
  Thread q=null;
  try {
    die: {
      try {
        try {
          rlock();
        }
 catch (        Exception e) {
          break die;
        }
        try {
          host=info.get("OUTHOST").toString();
          port=Integer.parseInt(info.get("OUTPORT").toString());
          tell=info.get("QUIET").equals(Boolean.FALSE);
        }
 catch (        Exception e) {
          runlock();
          break die;
        }
        try {
          runlock();
        }
 catch (        Exception e) {
          break die;
        }
        sock=new Socket(host,port);
        in=sock.getInputStream();
        out=sock.getOutputStream();
        Iin=I2P.getInputStream();
        Iout=I2P.getOutputStream();
        I2P.setReadTimeout(0);
        if (tell) {
          out.write(I2P.getPeerDestination().toBase64().getBytes());
          out.write(10);
          out.flush();
        }
        TCPio conn_c=new TCPio(in,Iout);
        TCPio conn_a=new TCPio(Iin,out);
        t=new Thread(conn_c,Thread.currentThread().getName() + " TCPioA");
        q=new Thread(conn_a,Thread.currentThread().getName() + " TCPioB");
        t.start();
        q.start();
        boolean spin=true;
        while (t.isAlive() && q.isAlive() && spin) {
          try {
            Thread.sleep(10);
          }
 catch (          InterruptedException e) {
            break die;
          }
          try {
            rlock();
          }
 catch (          Exception e) {
            break die;
          }
          try {
            spin=info.get("RUNNING").equals(Boolean.TRUE);
          }
 catch (          Exception e) {
            try {
              runlock();
            }
 catch (            Exception e2) {
              break die;
            }
            break die;
          }
        }
      }
 catch (      Exception e) {
        break die;
      }
    }
  }
  finally {
    try {
      t.interrupt();
    }
 catch (    Exception e) {
    }
    try {
      q.interrupt();
    }
 catch (    Exception e) {
    }
    try {
      in.close();
    }
 catch (    Exception ex) {
    }
    try {
      out.close();
    }
 catch (    Exception ex) {
    }
    try {
      Iin.close();
    }
 catch (    Exception ex) {
    }
    try {
      Iout.close();
    }
 catch (    Exception ex) {
    }
    try {
      I2P.close();
    }
 catch (    Exception e) {
      tell=false;
    }
    try {
      sock.close();
    }
 catch (    Exception e) {
      tell=false;
    }
  }
}
