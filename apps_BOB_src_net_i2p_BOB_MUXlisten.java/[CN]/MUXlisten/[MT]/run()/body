{
  I2PServerSocket SS=null;
  Thread t=null;
  Thread q=null;
  try {
    try {
      wlock();
      try {
        info.add("RUNNING",new Boolean(true));
      }
 catch (      Exception e) {
        wunlock();
        return;
      }
    }
 catch (    Exception e) {
      return;
    }
    try {
      wunlock();
    }
 catch (    Exception e) {
      return;
    }
    quit: {
      try {
        tg=new ThreadGroup(N);
        die: {
          if (go_out) {
            SS=socketManager.getServerSocket();
            I2Plistener conn=new I2Plistener(SS,socketManager,info,database,_log);
            t=new Thread(tg,conn,"BOBI2Plistener " + N);
            t.start();
          }
          if (come_in) {
            TCPlistener conn=new TCPlistener(listener,socketManager,info,database,_log);
            q=new Thread(tg,conn,"BOBTCPlistener " + N);
            q.start();
          }
          try {
            wlock();
            try {
              info.add("STARTING",new Boolean(false));
            }
 catch (            Exception e) {
              wunlock();
              break die;
            }
          }
 catch (          Exception e) {
            break die;
          }
          try {
            wunlock();
          }
 catch (          Exception e) {
            break die;
          }
          boolean spin=true;
          while (spin) {
            try {
              Thread.sleep(1000);
            }
 catch (            InterruptedException e) {
              break die;
            }
            try {
              rlock();
              try {
                spin=info.get("STOPPING").equals(Boolean.FALSE);
              }
 catch (              Exception e) {
                runlock();
                break die;
              }
            }
 catch (            Exception e) {
              break die;
            }
            try {
              runlock();
            }
 catch (            Exception e) {
              break die;
            }
          }
          try {
            wlock();
            try {
              info.add("RUNNING",new Boolean(false));
            }
 catch (            Exception e) {
              wunlock();
              break die;
            }
          }
 catch (          Exception e) {
            break die;
          }
          try {
            wunlock();
          }
 catch (          Exception e) {
            break die;
          }
        }
      }
 catch (      Exception e) {
        break quit;
      }
    }
  }
  finally {
    try {
      Thread.sleep(250);
    }
 catch (    InterruptedException ex) {
    }
    try {
      wlock();
      try {
        info.add("STARTING",new Boolean(false));
        info.add("STOPPING",new Boolean(false));
        info.add("RUNNING",new Boolean(false));
      }
 catch (      Exception e) {
        wunlock();
        return;
      }
      wunlock();
    }
 catch (    Exception e) {
    }
    if (SS != null) {
      try {
        SS.close();
      }
 catch (      I2PException ex) {
      }
    }
    if (listener != null) {
      try {
        listener.close();
      }
 catch (      IOException e) {
      }
    }
    try {
      socketManager.destroySocketManager();
    }
 catch (    Exception e) {
    }
    if (tg != null) {
      String boner=tg.getName();
      _log.warn("BOB: MUXlisten: Starting thread collection for: " + boner);
      if (tg.activeCount() + tg.activeGroupCount() != 0) {
        int foo=tg.activeCount() + tg.activeGroupCount();
        while (foo != 0) {
          foo=tg.activeCount() + tg.activeGroupCount();
          try {
            Thread.sleep(100);
          }
 catch (          InterruptedException ex) {
          }
        }
      }
      _log.warn("BOB: MUXlisten: Threads went away. Success: " + boner);
      tg.destroy();
      tg=null;
    }
  }
}
