{
  I2PServerSocket SS=null;
  int ticks=100;
  try {
    wlock();
    try {
      info.add("RUNNING",new Boolean(true));
    }
 catch (    Exception e) {
      wunlock();
      return;
    }
  }
 catch (  Exception e) {
    return;
  }
  try {
    wunlock();
  }
 catch (  Exception e) {
    return;
  }
  quit: {
    try {
      tg=new ThreadGroup(N);
      die: {
        if (go_out) {
          SS=socketManager.getServerSocket();
          I2Plistener conn=new I2Plistener(SS,socketManager,info,database,_log);
          Thread t=new Thread(tg,conn,"BOBI2Plistener " + N);
          t.start();
        }
        if (come_in) {
          TCPlistener conn=new TCPlistener(listener,socketManager,info,database,_log);
          Thread q=new Thread(tg,conn,"BOBTCPlistener" + N);
          q.start();
        }
        try {
          wlock();
          try {
            info.add("STARTING",new Boolean(false));
          }
 catch (          Exception e) {
            wunlock();
            break die;
          }
        }
 catch (        Exception e) {
          break die;
        }
        try {
          wunlock();
        }
 catch (        Exception e) {
          break die;
        }
        boolean spin=true;
        while (spin) {
          try {
            Thread.sleep(1000);
          }
 catch (          InterruptedException e) {
            break die;
          }
          try {
            rlock();
            try {
              spin=info.get("STOPPING").equals(Boolean.FALSE);
            }
 catch (            Exception e) {
              runlock();
              break die;
            }
          }
 catch (          Exception e) {
            break die;
          }
          try {
            runlock();
          }
 catch (          Exception e) {
            break die;
          }
        }
        try {
          wlock();
          try {
            info.add("RUNNING",new Boolean(false));
          }
 catch (          Exception e) {
            wunlock();
            break die;
          }
        }
 catch (        Exception e) {
          break die;
        }
        try {
          wunlock();
        }
 catch (        Exception e) {
          break die;
        }
      }
      if (SS != null) {
        try {
          SS.close();
        }
 catch (        I2PException ex) {
        }
      }
      if (this.come_in) {
        try {
          listener.close();
        }
 catch (        IOException e) {
        }
      }
      I2PSession session=socketManager.getSession();
      if (session != null) {
        try {
          session.destroySession();
        }
 catch (        I2PSessionException ex) {
        }
      }
      try {
        socketManager.destroySocketManager();
      }
 catch (      Exception e) {
      }
      if (tg.activeCount() + tg.activeGroupCount() != 0) {
        while ((tg.activeCount() + tg.activeGroupCount() != 0) && ticks != 0) {
          ticks--;
          try {
            Thread.sleep(100);
          }
 catch (          InterruptedException ex) {
            break quit;
          }
        }
        if (tg.activeCount() + tg.activeGroupCount() != 0) {
          break quit;
        }
      }
      tg.destroy();
      tg=null;
    }
 catch (    Exception e) {
      break quit;
    }
  }
  if (tg != null) {
    if (SS != null) {
      try {
        SS.close();
      }
 catch (      I2PException ex) {
      }
    }
    if (this.come_in) {
      try {
        listener.close();
      }
 catch (      IOException e) {
      }
    }
    try {
      socketManager.destroySocketManager();
    }
 catch (    Exception e) {
    }
    ticks=100;
    if (tg.activeCount() + tg.activeGroupCount() != 0) {
      while ((tg.activeCount() + tg.activeGroupCount() != 0) && ticks != 0) {
        tg.interrupt();
        ticks--;
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException ex) {
        }
      }
    }
    if (tg.activeCount() + tg.activeGroupCount() == 0) {
      tg.destroy();
      tg=null;
    }
 else {
      System.out.println("BOB: MUXlisten: Forcibly killing threads.");
      System.out.println("\n\nBOB: MUXlisten: ThreadGroup dump BEGIN");
      visit(tg,0);
      System.out.println("BOB: MUXlisten: ThreadGroup dump END\n\n");
      nuke(tg,0);
      tg.destroy();
      tg=null;
    }
  }
  try {
    wlock();
    try {
      info.add("STARTING",new Boolean(false));
      info.add("STOPPING",new Boolean(false));
      info.add("RUNNING",new Boolean(false));
    }
 catch (    Exception e) {
      wunlock();
      return;
    }
    wunlock();
  }
 catch (  Exception e) {
  }
}
