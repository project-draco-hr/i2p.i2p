{
  this.database.getWriteLock();
  this.info.getWriteLock();
  info.add("RUNNING",Boolean.TRUE);
  info.add("STARTING",Boolean.FALSE);
  this.info.releaseWriteLock();
  this.database.releaseWriteLock();
  try {
    tg=new ThreadGroup(N);
    this.database.getReadLock();
    this.info.getReadLock();
    boolean go_out=info.exists("OUTPORT");
    boolean come_in=info.exists("INPORT");
    this.database.releaseReadLock();
    this.info.releaseReadLock();
    if (go_out) {
      I2Plistener conn=new I2Plistener(socketManager,info,database,_log);
      Thread t=new Thread(tg,conn,"BOBI2Plistener " + N);
      t.start();
    }
    if (come_in) {
      TCPlistener conn=new TCPlistener(socketManager,info,database,_log);
      Thread q=new Thread(tg,conn,"BOBTCPlistener" + N);
      q.start();
    }
    boolean spin=true;
    while (spin) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      this.database.getReadLock();
      this.info.getReadLock();
      spin=info.get("STOPPING").equals(Boolean.FALSE);
      this.database.releaseReadLock();
      this.info.releaseReadLock();
    }
    this.database.getWriteLock();
    this.info.getWriteLock();
    info.add("RUNNING",Boolean.FALSE);
    this.info.releaseWriteLock();
    this.database.releaseWriteLock();
    while (tg.activeCount() + tg.activeGroupCount() != 0) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ex) {
      }
    }
    tg.destroy();
    tg=null;
  }
 catch (  Exception e) {
  }
  socketManager.destroySocketManager();
  this.database.getWriteLock();
  this.info.getWriteLock();
  info.add("STARTING",Boolean.FALSE);
  info.add("STOPPING",Boolean.FALSE);
  info.add("RUNNING",Boolean.FALSE);
  this.info.releaseWriteLock();
  this.database.releaseWriteLock();
}
