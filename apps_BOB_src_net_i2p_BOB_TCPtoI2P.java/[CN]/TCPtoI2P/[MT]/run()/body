{
  String line, input;
  InputStream Iin=null;
  OutputStream Iout=null;
  InputStream in=null;
  OutputStream out=null;
  Thread t=null;
  Thread q=null;
  try {
    try {
      in=sock.getInputStream();
      out=sock.getOutputStream();
      line=lnRead(in);
      input=line.toLowerCase(Locale.US);
      Destination dest=null;
      if (input.endsWith(".i2p")) {
        dest=I2PAppContext.getGlobalContext().namingService().lookup(input);
        if (dest != null) {
          line=dest.toBase64();
        }
 else {
          Emsg("Can't find destination: " + input,out);
          return;
        }
      }
      dest=new Destination();
      dest.fromBase64(line);
      try {
        I2P=socketManager.connect(dest);
        I2P.setReadTimeout(0);
        Iin=I2P.getInputStream();
        Iout=I2P.getOutputStream();
        TCPio conn_c=new TCPio(in,Iout,lives);
        TCPio conn_a=new TCPio(Iin,out,lives);
        t=new I2PAppThread(conn_c,Thread.currentThread().getName() + " TCPioA");
        q=new I2PAppThread(conn_a,Thread.currentThread().getName() + " TCPioB");
        t.start();
        q.start();
        while (t.isAlive() && q.isAlive() && lives.get()) {
          Thread.sleep(10);
        }
      }
 catch (      I2PException e) {
        Emsg(e.toString(),out);
      }
catch (      ConnectException e) {
        Emsg(e.toString(),out);
      }
catch (      NoRouteToHostException e) {
        Emsg(e.toString(),out);
      }
    }
 catch (    InterruptedIOException e) {
    }
catch (    InterruptedException e) {
    }
catch (    IOException e) {
      try {
        Emsg(e.toString(),out);
      }
 catch (      IOException ex) {
      }
    }
catch (    DataFormatException e) {
      try {
        Emsg(e.toString(),out);
      }
 catch (      IOException ex) {
      }
    }
  }
  finally {
    try {
      t.interrupt();
    }
 catch (    Exception e) {
    }
    try {
      q.interrupt();
    }
 catch (    Exception e) {
    }
    try {
      in.close();
    }
 catch (    Exception e) {
    }
    try {
      out.close();
    }
 catch (    Exception e) {
    }
    try {
      Iin.close();
    }
 catch (    Exception e) {
    }
    try {
      Iout.close();
    }
 catch (    Exception e) {
    }
    try {
      I2P.close();
    }
 catch (    Exception e) {
    }
    try {
      sock.close();
    }
 catch (    Exception e) {
    }
  }
}
