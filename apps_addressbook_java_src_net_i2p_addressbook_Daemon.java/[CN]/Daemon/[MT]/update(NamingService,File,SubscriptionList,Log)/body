{
  NamingService publishedNS=null;
  Iterator<AddressBook> iter=subscriptions.iterator();
  while (iter.hasNext()) {
    long start=System.currentTimeMillis();
    AddressBook sub=iter.next();
    long end=System.currentTimeMillis();
    if (DEBUG && log != null)     log.append("Fetch of " + sub.getLocation() + " took "+ (end - start));
    start=end;
    int old=0, nnew=0, invalid=0, conflict=0;
    for (Iterator<Map.Entry<String,String>> eIter=sub.iterator(); eIter.hasNext(); ) {
      Map.Entry<String,String> entry=eIter.next();
      String key=entry.getKey();
      Destination oldDest=router.lookup(key);
      try {
        if (oldDest == null) {
          if (AddressBook.isValidKey(key)) {
            Destination dest=new Destination(entry.getValue());
            boolean success=router.put(key,dest);
            if (log != null) {
              if (success)               log.append("New address " + key + " added to address book. From: "+ sub.getLocation());
 else               log.append("Save to naming service " + router + " failed for new key "+ key);
            }
            if (published != null) {
              if (publishedNS == null)               publishedNS=new SingleFileNamingService(I2PAppContext.getGlobalContext(),published.getAbsolutePath());
              success=publishedNS.putIfAbsent(key,dest);
              if (!success)               log.append("Save to published addressbook " + published.getAbsolutePath() + " failed for new key "+ key);
            }
            nnew++;
          }
 else           if (log != null) {
            log.append("Bad hostname " + key + " from "+ sub.getLocation());
            invalid++;
          }
        }
 else         if (DEBUG && log != null) {
          if (!oldDest.toBase64().equals(entry.getValue())) {
            log.append("Conflict for " + key + " from "+ sub.getLocation()+ ". Destination in remote address book is "+ entry.getValue());
            conflict++;
          }
 else {
            old++;
          }
        }
 else {
          old++;
        }
      }
 catch (      DataFormatException dfe) {
        if (log != null)         log.append("Invalid b64 for" + key + " From: "+ sub.getLocation());
        invalid++;
      }
    }
    if (DEBUG && log != null) {
      log.append("Merge of " + sub.getLocation() + " into "+ router+ " took "+ (System.currentTimeMillis() - start)+ " ms with "+ nnew+ " new, "+ old+ " old, "+ invalid+ " invalid, "+ conflict+ " conflicts");
    }
    sub.delete();
  }
}
