{
  String nsClass=router.getClass().getSimpleName();
  boolean isTextFile=nsClass.equals("HostsTxtNamingService") || nsClass.equals("SingleFileNamingService");
  Set<String> knownNames=null;
  NamingService publishedNS=null;
  Iterator<AddressBook> iter=subscriptions.iterator();
  while (iter.hasNext()) {
    long start=System.currentTimeMillis();
    AddressBook addressbook=iter.next();
    if (DEBUG && log != null && addressbook.getLocation() != null) {
      long end=System.currentTimeMillis();
      log.append("Fetch of " + addressbook.getLocation() + " took "+ (end - start));
      start=end;
    }
    int old=0, nnew=0, invalid=0, conflict=0, total=0;
    int deleted=0;
    for (    Map.Entry<String,HostTxtEntry> entry : addressbook) {
      total++;
      String key=entry.getKey();
      boolean isKnown;
      Destination oldDest;
      if (isTextFile) {
        if (knownNames == null) {
          Properties opts=new Properties();
          opts.setProperty("file","hosts.txt");
          knownNames=router.getNames(opts);
        }
        oldDest=null;
        isKnown=key != null ? knownNames.contains(key) : null;
      }
 else {
        oldDest=key != null ? router.lookup(key) : null;
        isKnown=oldDest != null;
      }
      try {
        HostTxtEntry he=entry.getValue();
        Properties hprops=he.getProps();
        boolean mustValidate=MUST_VALIDATE || hprops != null;
        String action=hprops != null ? hprops.getProperty(HostTxtEntry.PROP_ACTION) : null;
        if (key == null && !he.hasValidRemoveSig()) {
          if (log != null) {
            log.append("Bad signature of action " + action + " for key "+ hprops.getProperty(HostTxtEntry.PROP_NAME)+ ". From: "+ addressbook.getLocation());
          }
          invalid++;
        }
 else         if (key != null && mustValidate && !he.hasValidSig()) {
          if (log != null) {
            log.append("Bad signature of action " + action + " for key "+ key+ ". From: "+ addressbook.getLocation());
          }
          invalid++;
        }
 else         if (action != null || !isKnown) {
          if (key != null && AddressBook.isValidKey(key)) {
            Destination dest=new Destination(he.getDest());
            Properties props=new OrderedProperties();
            props.setProperty("s",addressbook.getLocation());
            boolean allowExistingKeyInPublished=false;
            if (mustValidate) {
              props.setProperty("v","true");
            }
            if (hprops != null) {
              for (              Map.Entry<Object,Object> e : hprops.entrySet()) {
                props.setProperty(RCVD_PROP_PREFIX + e.getKey(),(String)e.getValue());
              }
            }
            if (action != null) {
              if (action.equals(HostTxtEntry.ACTION_ADDDEST)) {
                String polddest=hprops.getProperty(HostTxtEntry.PROP_OLDDEST);
                if (polddest != null) {
                  Destination pod=new Destination(polddest);
                  List<Destination> pod2=router.lookupAll(key);
                  if (pod2 == null) {
                    if (!he.hasValidInnerSig()) {
                      logInner(log,action,key,addressbook);
                      invalid++;
                      continue;
                    }
                  }
 else                   if (pod2.contains(dest)) {
                    old++;
                    continue;
                  }
 else                   if (pod2.contains(pod)) {
                    if (!he.hasValidInnerSig()) {
                      logInner(log,action,key,addressbook);
                      invalid++;
                      continue;
                    }
                    boolean success=router.addDestination(key,dest,props);
                    if (log != null) {
                      if (success)                       log.append("Additional address for " + key + " added to address book. From: "+ addressbook.getLocation());
 else                       log.append("Failed to add additional address for " + key + " From: "+ addressbook.getLocation());
                    }
                    if (published != null) {
                      if (publishedNS == null)                       publishedNS=new SingleFileNamingService(I2PAppContext.getGlobalContext(),published.getAbsolutePath());
                      success=publishedNS.addDestination(key,dest,props);
                      if (log != null && !success)                       log.append("Add to published address book " + published.getAbsolutePath() + " failed for "+ key);
                    }
                    nnew++;
                    continue;
                  }
 else {
                    logMismatch(log,action,key,pod2,he.getDest(),addressbook);
                    invalid++;
                    continue;
                  }
                }
 else {
                  logMissing(log,action,key,addressbook);
                  invalid++;
                  continue;
                }
              }
 else               if (action.equals(HostTxtEntry.ACTION_ADDNAME)) {
                if (isKnown) {
                  old++;
                  continue;
                }
                String poldname=hprops.getProperty(HostTxtEntry.PROP_OLDNAME);
                if (poldname != null) {
                  List<Destination> pod=router.lookupAll(poldname);
                  if (pod == null) {
                  }
 else                   if (pod.contains(dest)) {
                  }
 else {
                    logMismatch(log,action,key,pod,he.getDest(),addressbook);
                    invalid++;
                    continue;
                  }
                }
 else {
                  logMissing(log,action,key,addressbook);
                  invalid++;
                  continue;
                }
              }
 else               if (action.equals(HostTxtEntry.ACTION_ADDSUBDOMAIN)) {
                if (isKnown) {
                  old++;
                  continue;
                }
                String polddest=hprops.getProperty(HostTxtEntry.PROP_OLDDEST);
                String poldname=hprops.getProperty(HostTxtEntry.PROP_OLDNAME);
                if (polddest != null && poldname != null) {
                  if (!AddressBook.isValidKey(poldname) || key.indexOf('.' + poldname) <= 0) {
                    if (log != null)                     log.append("Action: " + action + " failed because"+ " old name "+ poldname+ " is invalid"+ ". From: "+ addressbook.getLocation());
                    invalid++;
                    continue;
                  }
                  Destination pod=new Destination(polddest);
                  List<Destination> pod2=router.lookupAll(poldname);
                  if (pod2 == null) {
                    if (!he.hasValidInnerSig()) {
                      logInner(log,action,key,addressbook);
                      invalid++;
                      continue;
                    }
                  }
 else                   if (pod2.contains(pod)) {
                    if (!he.hasValidInnerSig()) {
                      logInner(log,action,key,addressbook);
                      invalid++;
                      continue;
                    }
                  }
 else {
                    logMismatch(log,action,key,pod2,polddest,addressbook);
                    invalid++;
                    continue;
                  }
                }
 else {
                  logMissing(log,action,key,addressbook);
                  invalid++;
                  continue;
                }
              }
 else               if (action.equals(HostTxtEntry.ACTION_CHANGEDEST)) {
                String polddest=hprops.getProperty(HostTxtEntry.PROP_OLDDEST);
                if (polddest != null) {
                  Destination pod=new Destination(polddest);
                  List<Destination> pod2=router.lookupAll(key);
                  if (pod2 == null) {
                    if (!he.hasValidInnerSig()) {
                      logInner(log,action,key,addressbook);
                      invalid++;
                      continue;
                    }
                  }
 else                   if (pod2.contains(dest)) {
                    old++;
                    continue;
                  }
 else                   if (pod2.contains(pod)) {
                    if (!he.hasValidInnerSig()) {
                      logInner(log,action,key,addressbook);
                      invalid++;
                      continue;
                    }
                    if (log != null) {
                      if (pod2.size() == 1)                       log.append("Changing destination for " + key + ". From: "+ addressbook.getLocation());
 else                       log.append("Replacing " + pod2.size() + " destinations for "+ key+ ". From: "+ addressbook.getLocation());
                    }
                    allowExistingKeyInPublished=true;
                    props.setProperty("m",Long.toString(I2PAppContext.getGlobalContext().clock().now()));
                  }
 else {
                    logMismatch(log,action,key,pod2,polddest,addressbook);
                    invalid++;
                    continue;
                  }
                }
 else {
                  logMissing(log,action,key,addressbook);
                  invalid++;
                  continue;
                }
              }
 else               if (action.equals(HostTxtEntry.ACTION_CHANGENAME)) {
                if (isKnown) {
                  old++;
                  continue;
                }
                String poldname=hprops.getProperty(HostTxtEntry.PROP_OLDNAME);
                if (poldname != null) {
                  List<Destination> pod=router.lookupAll(poldname);
                  if (pod == null) {
                  }
 else                   if (pod.contains(dest)) {
                    if (knownNames != null)                     knownNames.remove(poldname);
                    boolean success=router.remove(poldname,dest);
                    if (success)                     deleted++;
                    if (log != null) {
                      if (success)                       log.append("Removed: " + poldname + " to be replaced with "+ key+ ". From: "+ addressbook.getLocation());
 else                       log.append("Remove failed for: " + poldname + " to be replaced with "+ key+ ". From: "+ addressbook.getLocation());
                    }
                    if (published != null) {
                      if (publishedNS == null)                       publishedNS=new SingleFileNamingService(I2PAppContext.getGlobalContext(),published.getAbsolutePath());
                      success=publishedNS.remove(poldname,dest);
                      if (log != null && !success)                       log.append("Remove from published address book " + published.getAbsolutePath() + " failed for "+ poldname);
                    }
                  }
 else {
                    logMismatch(log,action,key,pod,he.getDest(),addressbook);
                    continue;
                  }
                }
 else {
                  logMissing(log,action,key,addressbook);
                  invalid++;
                  continue;
                }
              }
 else               if (action.equals(HostTxtEntry.ACTION_REMOVE) || action.equals(HostTxtEntry.ACTION_REMOVEALL)) {
                if (log != null)                 log.append("Action: " + action + " with name=dest invalid"+ ". From: "+ addressbook.getLocation());
                invalid++;
                continue;
              }
 else               if (action.equals(HostTxtEntry.ACTION_UPDATE)) {
                if (isKnown) {
                  allowExistingKeyInPublished=true;
                  props.setProperty("m",Long.toString(I2PAppContext.getGlobalContext().clock().now()));
                }
              }
 else {
                if (log != null)                 log.append("Action: " + action + " unrecognized"+ ". From: "+ addressbook.getLocation());
                invalid++;
                continue;
              }
            }
            boolean success=router.put(key,dest,props);
            if (log != null) {
              if (success)               log.append("New address " + key + " added to address book. From: "+ addressbook.getLocation());
 else               log.append("Save to naming service " + router + " failed for new key "+ key);
            }
            if (published != null) {
              if (publishedNS == null)               publishedNS=new SingleFileNamingService(I2PAppContext.getGlobalContext(),published.getAbsolutePath());
              if (allowExistingKeyInPublished)               success=publishedNS.put(key,dest,props);
 else               success=publishedNS.putIfAbsent(key,dest,props);
              if (log != null && !success) {
                log.append("Save to published address book " + published.getAbsolutePath() + " failed for new key "+ key);
              }
            }
            if (isTextFile)             knownNames.add(key);
            nnew++;
          }
 else           if (key == null) {
            if (action != null) {
              if (action.equals(HostTxtEntry.ACTION_REMOVE)) {
                String polddest=hprops.getProperty(HostTxtEntry.PROP_DEST);
                String poldname=hprops.getProperty(HostTxtEntry.PROP_NAME);
                if (polddest != null && poldname != null) {
                  Destination pod=new Destination(polddest);
                  List<Destination> pod2=router.lookupAll(poldname);
                  if (pod2 != null && pod2.contains(pod)) {
                    if (knownNames != null && pod2.size() == 1)                     knownNames.remove(poldname);
                    boolean success=router.remove(poldname,pod);
                    if (success)                     deleted++;
                    if (log != null) {
                      if (success)                       log.append("Removed: " + poldname + " as requested"+ ". From: "+ addressbook.getLocation());
 else                       log.append("Remove failed for: " + poldname + " as requested"+ ". From: "+ addressbook.getLocation());
                    }
                    if (published != null) {
                      if (publishedNS == null)                       publishedNS=new SingleFileNamingService(I2PAppContext.getGlobalContext(),published.getAbsolutePath());
                      success=publishedNS.remove(poldname,pod);
                      if (log != null && !success)                       log.append("Remove from published address book " + published.getAbsolutePath() + " failed for "+ poldname);
                    }
                  }
 else                   if (pod2 != null) {
                    logMismatch(log,action,key,pod2,polddest,addressbook);
                    invalid++;
                  }
 else {
                    old++;
                  }
                }
 else {
                  logMissing(log,action,"delete",addressbook);
                  invalid++;
                }
              }
 else               if (action.equals(HostTxtEntry.ACTION_REMOVEALL)) {
                String polddest=hprops.getProperty(HostTxtEntry.PROP_DEST);
                if (polddest != null) {
                  Destination pod=new Destination(polddest);
                  String poldname=hprops.getProperty(HostTxtEntry.PROP_NAME);
                  if (poldname != null) {
                    List<Destination> pod2=router.lookupAll(poldname);
                    if (pod2 != null && pod2.contains(pod)) {
                      if (knownNames != null)                       knownNames.remove(poldname);
                      boolean success=router.remove(poldname,pod);
                      if (success)                       deleted++;
                      if (log != null) {
                        if (success)                         log.append("Removed: " + poldname + " as requested"+ ". From: "+ addressbook.getLocation());
 else                         log.append("Remove failed for: " + poldname + " as requested"+ ". From: "+ addressbook.getLocation());
                      }
                      if (published != null) {
                        if (publishedNS == null)                         publishedNS=new SingleFileNamingService(I2PAppContext.getGlobalContext(),published.getAbsolutePath());
                        success=publishedNS.remove(poldname,pod);
                        if (log != null && !success)                         log.append("Remove from published address book " + published.getAbsolutePath() + " failed for "+ poldname);
                      }
                    }
 else                     if (pod2 != null) {
                      logMismatch(log,action,key,pod2,polddest,addressbook);
                      invalid++;
                    }
 else {
                      old++;
                    }
                  }
                  List<String> revs=router.reverseLookupAll(pod);
                  if (revs != null) {
                    for (                    String rev : revs) {
                      if (knownNames != null)                       knownNames.remove(rev);
                      boolean success=router.remove(rev,pod);
                      if (success)                       deleted++;
                      if (log != null) {
                        if (success)                         log.append("Removed: " + rev + " as requested"+ ". From: "+ addressbook.getLocation());
 else                         log.append("Remove failed for: " + rev + " as requested"+ ". From: "+ addressbook.getLocation());
                      }
                      if (published != null) {
                        if (publishedNS == null)                         publishedNS=new SingleFileNamingService(I2PAppContext.getGlobalContext(),published.getAbsolutePath());
                        success=publishedNS.remove(rev,pod);
                        if (log != null && !success)                         log.append("Remove from published address book " + published.getAbsolutePath() + " failed for "+ rev);
                      }
                    }
                  }
                }
 else {
                  logMissing(log,action,"delete",addressbook);
                  invalid++;
                }
              }
 else {
                if (log != null)                 log.append("Action: " + action + " w/o name=dest unrecognized"+ ". From: "+ addressbook.getLocation());
                invalid++;
              }
              continue;
            }
 else {
              if (log != null)               log.append("No action in command line" + ". From: " + addressbook.getLocation());
              invalid++;
              continue;
            }
          }
 else           if (log != null) {
            log.append("Bad hostname " + key + ". From: "+ addressbook.getLocation());
            invalid++;
          }
        }
 else {
          old++;
        }
      }
 catch (      DataFormatException dfe) {
        if (log != null)         log.append("Invalid b64 for " + key + " From: "+ addressbook.getLocation());
        invalid++;
      }
    }
    if (DEBUG && log != null && total > 0) {
      log.append("Merge of " + addressbook.getLocation() + " into "+ router+ " took "+ (System.currentTimeMillis() - start)+ " ms with "+ total+ " total, "+ nnew+ " new, "+ old+ " old, "+ deleted+ " deleted, "+ invalid+ " invalid, "+ conflict+ " conflicts");
    }
    addressbook.delete();
  }
  subscriptions.write();
}
