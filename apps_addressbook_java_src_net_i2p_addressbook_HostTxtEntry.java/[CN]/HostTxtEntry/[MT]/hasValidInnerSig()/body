{
  if (props == null)   return false;
  boolean rv=false;
  if (true) {
    StringBuilder buf=new StringBuilder(1024);
    String sig=null;
    String olddest=null;
    buf.append(name);
    buf.append(KV_SEPARATOR);
    buf.append(dest);
    boolean started=false;
    for (    Map.Entry<Object,Object> e : props.entrySet()) {
      String k=(String)e.getKey();
      String v=(String)e.getValue();
      if (k.equals(PROP_SIG)) {
        continue;
      }
      if (k.equals(PROP_OLDSIG)) {
        if (sig != null)         return false;
        sig=v;
        continue;
      }
      if (k.equals(PROP_OLDDEST)) {
        if (olddest != null)         return false;
        olddest=v;
      }
      if (started) {
        buf.append(PROP_SEPARATOR);
      }
 else {
        started=true;
        buf.append(PROPS_SEPARATOR);
      }
      buf.append(k);
      buf.append(KV_SEPARATOR);
      buf.append(v);
    }
    if (sig == null || olddest == null)     return false;
    byte[] sdata=Base64.decode(sig);
    if (sdata == null)     return false;
    Destination d;
    try {
      d=new Destination(olddest);
    }
 catch (    DataFormatException dfe) {
      return false;
    }
    SigningPublicKey spk=d.getSigningPublicKey();
    SigType type=spk.getType();
    if (type == null)     return false;
    Signature s;
    try {
      s=new Signature(type,sdata);
    }
 catch (    IllegalArgumentException iae) {
      return false;
    }
    rv=DSAEngine.getInstance().verifySignature(s,DataHelper.getUTF8(buf.toString()),spk);
  }
  return rv;
}
