{
  int astart=0;
  if (args.length > 0 && args[0].equals("-i"))   astart++;
  OrderedProperties props=new OrderedProperties();
  for (int i=astart; i < args.length; i++) {
    int eq=args[i].indexOf("=");
    props.setProperty(args[i].substring(0,eq),args[i].substring(eq + 1));
  }
  props.setProperty("zzzz","zzzzzzzzzzzzzzz");
  File f=new File("tmp-eepPriv.dat");
  PrivateKeyFile pkf=new PrivateKeyFile(f);
  pkf.createIfAbsent(SigType.EdDSA_SHA512_Ed25519);
  f.delete();
  PrivateKeyFile pkf2;
  if (astart != 0) {
    File f2=new File("tmp-eepPriv2.dat");
    pkf2=new PrivateKeyFile(f2);
    pkf2.createIfAbsent(SigType.DSA_SHA1);
    f2.delete();
    props.setProperty(PROP_OLDDEST,pkf2.getDestination().toBase64());
  }
 else {
    pkf2=null;
  }
  byte[] rand=new byte[5];
  RandomSource.getInstance().nextBytes(rand);
  String host=Base32.encode(rand) + ".i2p";
  HostTxtEntry he=new HostTxtEntry(host,pkf.getDestination().toBase64(),props);
  BufferedWriter out=new BufferedWriter(new OutputStreamWriter(System.out));
  SigningPrivateKey priv=pkf.getSigningPrivKey();
  if (astart != 0) {
    SigningPrivateKey priv2=pkf2.getSigningPrivKey();
    he.signInner(priv2);
  }
  he.sign(priv);
  he.write(out);
  out.flush();
  if (astart > 0 && !he.hasValidInnerSig())   throw new IllegalStateException("Inner fail 1");
  if (!he.hasValidSig())   throw new IllegalStateException("Outer fail 1");
  StringWriter sw=new StringWriter(1024);
  BufferedWriter buf=new BufferedWriter(sw);
  he.write(buf);
  buf.flush();
  String line=sw.toString();
  line=line.substring(line.indexOf(PROPS_SEPARATOR) + 2);
  HostTxtEntry he2=new HostTxtEntry(host,pkf.getDestination().toBase64(),line);
  if (astart > 0 && !he2.hasValidInnerSig())   throw new IllegalStateException("Inner fail 2");
  if (!he2.hasValidSig())   throw new IllegalStateException("Outer fail 2");
  he.getProps().remove(PROP_SIG);
  he.signRemove(priv);
  sw=new StringWriter(1024);
  buf=new BufferedWriter(sw);
  he.writeRemove(buf);
  buf.flush();
  out.write(sw.toString());
  out.flush();
  line=sw.toString().substring(2).trim();
  HostTxtEntry he3=new HostTxtEntry(line);
  if (!he3.hasValidRemoveSig())   throw new IllegalStateException("Remove verify fail");
}
