{
  EditBean bean=new EditBean();
  if (!bean.isClient(tunnelNumber)) {
    this.dispose();
  }
 else {
    this.tunnelName.setText(bean.getTunnelName(tunnelNumber));
    this.tunnelType.setText(bean.getTunnelType(tunnelNumber));
    this.tunnelPort.setText(bean.getClientPort(tunnelNumber));
    this.tunnelDestination.setText(bean.getClientDestination(tunnelNumber));
    if (bean.getTunnelType(tunnelNumber).equals(TYPE_STREAMR_CLIENT)) {
      tunnelProfile.setVisible(false);
      tunnelProfileLabel.setVisible(false);
      this.delayConnect.setVisible(false);
      this.sharedClient.setVisible(false);
      this.autoStart.setVisible(false);
    }
 else {
      if (bean.isInteractive(tunnelNumber)) {
        tunnelProfile.setSelectedIndex(TUNNEL_INTERACTIVE);
      }
 else {
        tunnelProfile.setSelectedIndex(TUNNEL_BULK);
      }
      this.delayConnect.setSelected(bean.shouldDelay(tunnelNumber));
      this.sharedClient.setSelected(bean.isSharedClient(tunnelNumber));
      this.autoStart.setSelected(bean.startAutomatically(tunnelNumber));
    }
    this.tunnelDepth.setSelectedIndex(bean.getTunnelDepth(tunnelNumber,2));
    int variance=bean.getTunnelVariance(tunnelNumber,0);
    if (variance == 0) {
      this.depthVariance.setSelectedIndex(0);
    }
 else     if (variance == 1) {
      this.depthVariance.setSelectedIndex(1);
    }
 else     if (variance == 2) {
      this.depthVariance.setSelectedIndex(2);
    }
 else     if (variance == -1) {
      this.depthVariance.setSelectedIndex(3);
    }
 else     if (variance == -2) {
      this.depthVariance.setSelectedIndex(4);
    }
    int tunnelQuantity=bean.getTunnelQuantity(tunnelNumber,2) - 1;
    if (tunnelQuantity >= 0 && tunnelQuantity <= 2) {
      this.tunnelCount.setSelectedIndex(tunnelQuantity);
    }
    int backupTunnelQuantity=bean.getTunnelBackupQuantity(tunnelNumber,0);
    if (backupTunnelQuantity >= 0 && backupTunnelQuantity <= 3) {
      this.backupTunnelCount.setSelectedIndex(backupTunnelQuantity);
    }
    if (bean.getTunnelType(tunnelNumber).equals(TYPE_STREAMR_CLIENT)) {
      this.reduceIdle.setVisible(false);
      this.closeIdle.setVisible(false);
      this.delayIdle.setVisible(false);
    }
 else {
      this.reduceIdle.setSelected(bean.getReduce(tunnelNumber));
      this.closeIdle.setSelected(bean.getClose(tunnelNumber));
      this.delayIdle.setSelected(bean.getDelayOpen(tunnelNumber));
    }
  }
}
