{
  ByteArrayInputStream bais=new ByteArrayInputStream(data);
  try {
    Destination from=new Destination();
    from.readBytes(bais);
    int series=(int)DataHelper.readLong(bais,2);
    long type=DataHelper.readLong(bais,1);
    Date sentOn=DataHelper.readDate(bais);
    Date receivedOn=null;
    if (type == TYPE_PONG) {
      receivedOn=DataHelper.readDate(bais);
    }
    int size=(int)DataHelper.readLong(bais,2);
    byte payload[]=new byte[size];
    int read=DataHelper.read(bais,payload);
    if (read != size)     throw new IOException("Malformed payload - read " + read + " instead of "+ size);
    if (_listener == null) {
      if (_log.shouldLog(Log.ERROR))       _log.error("Listener isn't set, but we received a valid message of type " + type + " sent from "+ from.calculateHash().toBase64());
      return;
    }
    if (type == TYPE_PING) {
      if (_log.shouldLog(Log.INFO))       _log.info("Ping received from " + from.calculateHash().toBase64() + " on series "+ series+ " sent on "+ sentOn+ " containing "+ size+ " bytes");
      _listener.receivePing(from,series,sentOn,payload);
    }
 else     if (type == TYPE_PONG) {
      if (_log.shouldLog(Log.INFO))       _log.info("Pong received from " + from.calculateHash().toBase64() + " on series "+ series+ " sent on "+ sentOn+ " with pong sent on "+ receivedOn+ " containing "+ size+ " bytes");
      _listener.receivePong(from,series,sentOn,receivedOn,payload);
    }
 else {
      throw new IOException("Invalid message type " + type);
    }
  }
 catch (  IOException ioe) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Error handling the message",ioe);
  }
catch (  DataFormatException dfe) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Error parsing the message",dfe);
  }
}
