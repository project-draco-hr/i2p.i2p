{
  I2PDatagramMaker datagramMaker=new I2PDatagramMaker(i2pSession);
  while (true) {
    if (packetQueue.isEmpty())     try {
      TimeUnit.SECONDS.sleep(1);
    }
 catch (    InterruptedException e) {
      log.warn("Interrupted while waiting for new packets.",e);
    }
 else {
      ScheduledPacket scheduledPacket=packetQueue.last();
      CommunicationPacket i2pBotePacket=scheduledPacket.data;
      if (maxBandwidth > 0) {
        int packetSizeBits=i2pBotePacket.getSize() * 8;
        int maxBWBitsPerSecond=maxBandwidth * 1024;
        long waitTimeMsecs=1000L * packetSizeBits / maxBWBitsPerSecond;
        if (System.currentTimeMillis() + waitTimeMsecs < scheduledPacket.earliestSendTime)         waitTimeMsecs=scheduledPacket.earliestSendTime;
        try {
          TimeUnit.MILLISECONDS.sleep(waitTimeMsecs);
        }
 catch (        InterruptedException e) {
          log.warn("Interrupted while waiting to send packet.",e);
        }
      }
      log.debug("Sending packet: [" + i2pBotePacket + "] to peer: "+ scheduledPacket.destination.toBase64());
      byte[] replyableDatagram=datagramMaker.makeI2PDatagram(i2pBotePacket.toByteArray());
      try {
        i2pSession.sendMessage(scheduledPacket.destination,replyableDatagram);
        scheduledPacket.data.setSentTime(System.currentTimeMillis());
        packetQueue.remove(scheduledPacket);
        if (scheduledPacket.batch != null)         scheduledPacket.batch.decrementSentLatch();
        scheduledPacket.decrementSentLatch();
        firePacketListeners(scheduledPacket.data);
      }
 catch (      I2PSessionException e) {
        log.error("Can't send packet.",e);
      }
    }
  }
}
