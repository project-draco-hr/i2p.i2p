{
  if (log.shouldLog(Log.DEBUG))   log.debug("Got handshake msg from " + peer);
  try {
    InputStream is=new ByteArrayInputStream(bs);
    BDecoder dec=new BDecoder(is);
    BEValue bev=dec.bdecodeMap();
    Map<String,BEValue> map=bev.getMap();
    peer.setHandshakeMap(map);
    Map<String,BEValue> msgmap=map.get("m").getMap();
    if (msgmap.get(TYPE_PEX) != null) {
      if (log.shouldLog(Log.DEBUG))       log.debug("Peer supports PEX extension: " + peer);
    }
    if (msgmap.get(TYPE_DHT) != null) {
      if (log.shouldLog(Log.DEBUG))       log.debug("Peer supports DHT extension: " + peer);
    }
    MagnetState state=peer.getMagnetState();
    if (msgmap.get(TYPE_METADATA) == null) {
      if (log.shouldLog(Log.DEBUG))       log.debug("Peer does not support metadata extension: " + peer);
synchronized (state) {
        if (!state.isInitialized()) {
          if (log.shouldLog(Log.DEBUG))           log.debug("Dropping peer, we need metadata! " + peer);
          peer.disconnect();
        }
      }
      return;
    }
    BEValue msize=map.get("metadata_size");
    if (msize == null) {
      if (log.shouldLog(Log.DEBUG))       log.debug("Peer does not have the metainfo size yet: " + peer);
synchronized (state) {
        if (!state.isInitialized()) {
          if (log.shouldLog(Log.DEBUG))           log.debug("Dropping peer, we need metadata! " + peer);
          peer.disconnect();
        }
      }
      return;
    }
    int metaSize=msize.getInt();
    if (log.shouldLog(Log.DEBUG))     log.debug("Got the metainfo size: " + metaSize);
    int remaining;
synchronized (state) {
      if (state.isComplete())       return;
      if (state.isInitialized()) {
        if (state.getSize() != metaSize) {
          if (log.shouldLog(Log.DEBUG))           log.debug("Wrong metainfo size " + metaSize + " from: "+ peer);
          peer.disconnect();
          return;
        }
      }
 else {
        if (metaSize > MAX_METADATA_SIZE) {
          if (log.shouldLog(Log.DEBUG))           log.debug("Huge metainfo size " + metaSize + " from: "+ peer);
          peer.disconnect(false);
          return;
        }
        if (log.shouldLog(Log.INFO))         log.info("Initialized state, metadata size = " + metaSize + " from "+ peer);
        state.initialize(metaSize);
      }
      remaining=state.chunksRemaining();
    }
    int count=Math.min(remaining,PARALLEL_REQUESTS);
    for (int i=0; i < count; i++) {
      int chk;
synchronized (state) {
        chk=state.getNextRequest();
      }
      if (log.shouldLog(Log.INFO))       log.info("Request chunk " + chk + " from "+ peer);
      sendRequest(peer,chk);
    }
  }
 catch (  Exception e) {
    if (log.shouldLog(Log.WARN))     log.warn("Handshake exception from " + peer,e);
  }
}
