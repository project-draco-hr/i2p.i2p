{
  if (_manager == null) {
    _connecting=true;
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Connecting to I2P",new Exception("I did it"));
    Properties opts=_context.getProperties();
    if (_opts != null) {
      for (Iterator iter=_opts.keySet().iterator(); iter.hasNext(); ) {
        String key=(String)iter.next();
        opts.setProperty(key,_opts.get(key).toString());
      }
    }
    if (opts.getProperty("inbound.nickname") == null)     opts.setProperty("inbound.nickname","I2PSnark");
    if (opts.getProperty("outbound.nickname") == null)     opts.setProperty("outbound.nickname","I2PSnark");
    if (opts.getProperty("outbound.priority") == null)     opts.setProperty("outbound.priority","-10");
    if (opts.getProperty(I2PSocketOptions.PROP_CONNECT_TIMEOUT) == null)     opts.setProperty(I2PSocketOptions.PROP_CONNECT_TIMEOUT,"75000");
    if (opts.getProperty("i2p.streaming.inactivityTimeout") == null)     opts.setProperty("i2p.streaming.inactivityTimeout","240000");
    if (opts.getProperty("i2p.streaming.inactivityAction") == null)     opts.setProperty("i2p.streaming.inactivityAction","1");
    if (opts.getProperty("i2p.streaming.initialWindowSize") == null)     opts.setProperty("i2p.streaming.initialWindowSize","1");
    if (opts.getProperty("i2p.streaming.slowStartGrowthRateFactor") == null)     opts.setProperty("i2p.streaming.slowStartGrowthRateFactor","1");
    if (opts.getProperty("i2p.streaming.maxConnsPerMinute") == null)     opts.setProperty("i2p.streaming.maxConnsPerMinute","2");
    if (opts.getProperty("i2p.streaming.maxTotalConnsPerMinute") == null)     opts.setProperty("i2p.streaming.maxTotalConnsPerMinute","8");
    if (opts.getProperty("i2p.streaming.maxConnsPerHour") == null)     opts.setProperty("i2p.streaming.maxConnsPerHour","20");
    if (opts.getProperty("i2p.streaming.enforceProtocol") == null)     opts.setProperty("i2p.streaming.enforceProtocol","true");
    if (opts.getProperty("i2p.streaming.disableRejectLogging") == null)     opts.setProperty("i2p.streaming.disableRejectLogging","true");
    _manager=I2PSocketManagerFactory.createManager(_i2cpHost,_i2cpPort,opts);
    _connecting=false;
  }
  if (_shouldUseDHT && _manager != null && _dht == null)   _dht=new KRPC(_context,_manager.getSession());
  return (_manager != null);
}
