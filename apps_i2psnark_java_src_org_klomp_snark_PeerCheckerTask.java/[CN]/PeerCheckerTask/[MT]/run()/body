{
  _runCount++;
  List<Peer> peerList=coordinator.peerList();
  if (peerList.isEmpty() || coordinator.halted()) {
    coordinator.setRateHistory(0,0);
    return;
  }
  long worstdownload=Long.MAX_VALUE;
  Peer worstDownloader=null;
  int uploaders=0;
  int removedCount=0;
  long uploaded=0;
  long downloaded=0;
  List<Peer> removed=new ArrayList();
  int uploadLimit=coordinator.allowedUploaders();
  boolean overBWLimit=coordinator.overUpBWLimit();
  for (  Peer peer : peerList) {
    if (!peer.isConnected()) {
      continue;
    }
    if (!peer.isChoking())     uploaders++;
    long upload=peer.getUploaded();
    uploaded+=upload;
    long download=peer.getDownloaded();
    downloaded+=download;
    peer.setRateHistory(upload,download);
    peer.resetCounters();
    _util.debug(peer + ":",Snark.DEBUG);
    _util.debug(" ul: " + upload * 1024 / KILOPERSECOND + " dl: " + download * 1024 / KILOPERSECOND + " i: " + peer.isInterested() + " I: " + peer.isInteresting() + " c: " + peer.isChoking() + " C: " + peer.isChoked(),Snark.DEBUG);
    boolean overBWLimitChoke=upload > 0 && ((overBWLimit && (random.nextInt(8) > (coordinator.completed() ? 2 : 4))) || (coordinator.overUpBWLimit(uploaded)));
    if (((coordinator.uploaders == uploadLimit && coordinator.interestedAndChoking > 0) || coordinator.uploaders > uploadLimit || overBWLimitChoke) && !peer.isChoking()) {
      if (!peer.isInterested()) {
        _util.debug("Choke uninterested peer: " + peer,Snark.INFO);
        peer.setChoking(true);
        uploaders--;
        coordinator.uploaders--;
        removed.add(peer);
      }
 else       if (overBWLimitChoke) {
        _util.debug("BW limit (" + upload + "/"+ uploaded+ "), choke peer: "+ peer,Snark.INFO);
        peer.setChoking(true);
        uploaders--;
        coordinator.uploaders--;
        removedCount++;
        removed.add(peer);
      }
 else       if (peer.isInteresting() && peer.isChoked()) {
        _util.debug("Choke choking peer: " + peer,Snark.DEBUG);
        peer.setChoking(true);
        uploaders--;
        coordinator.uploaders--;
        removedCount++;
        removed.add(peer);
      }
 else       if (!peer.isInteresting() && !coordinator.completed()) {
        _util.debug("Choke uninteresting peer: " + peer,Snark.DEBUG);
        peer.setChoking(true);
        uploaders--;
        coordinator.uploaders--;
        removedCount++;
        removed.add(peer);
      }
 else       if (peer.isInteresting() && !peer.isChoked() && download == 0) {
        _util.debug("Choke downloader that doesn't deliver:" + peer,Snark.DEBUG);
        peer.setChoking(true);
        uploaders--;
        coordinator.uploaders--;
        removedCount++;
        removed.add(peer);
      }
 else       if (peer.isInteresting() && !peer.isChoked() && download < worstdownload) {
        worstdownload=download;
        worstDownloader=peer;
      }
 else       if (upload < worstdownload && coordinator.completed()) {
        worstdownload=upload;
        worstDownloader=peer;
      }
    }
    peer.retransmitRequests();
    if ((_runCount % 17) == 0 && !peer.isCompleted())     coordinator.sendPeers(peer);
    peer.keepAlive();
    if (_util.getDHT() != null && (_runCount % 5) == 0) {
      _util.getDHT().announce(coordinator.getInfoHash(),peer.getPeerID().getDestHash());
    }
  }
  coordinator.uploaders=uploaders;
  if (((uploaders == uploadLimit && coordinator.interestedAndChoking > 0) || uploaders > uploadLimit) && worstDownloader != null) {
    _util.debug("Choke worst downloader: " + worstDownloader,Snark.DEBUG);
    worstDownloader.setChoking(true);
    coordinator.uploaders--;
    removedCount++;
    removed.add(worstDownloader);
  }
  if ((!overBWLimit) && !coordinator.overUpBWLimit(uploaded))   coordinator.unchokePeer();
synchronized (coordinator.peers) {
    for (    Peer peer : removed) {
      if (coordinator.peers.remove(peer))       coordinator.peers.add(peer);
    }
  }
  coordinator.interestedAndChoking+=removedCount;
  coordinator.setRateHistory(uploaded,downloaded);
  Storage storage=coordinator.getStorage();
  if (storage != null && (_runCount % 4) == 0) {
    storage.cleanRAFs();
  }
  if (_util.getDHT() != null && (_runCount % 16) == 0) {
    _util.getDHT().announce(coordinator.getInfoHash());
  }
}
