{
synchronized (coordinator.peers) {
    Iterator it=coordinator.peers.iterator();
    if ((!it.hasNext()) || coordinator.halted()) {
      coordinator.peerCount=0;
      coordinator.interestedAndChoking=0;
      coordinator.setRateHistory(0,0);
      coordinator.uploaders=0;
      if (coordinator.halted())       cancel();
      return;
    }
    long worstdownload=Long.MAX_VALUE;
    Peer worstDownloader=null;
    int peers=0;
    int uploaders=0;
    int downloaders=0;
    int removedCount=0;
    long uploaded=0;
    long downloaded=0;
    List removed=new ArrayList();
    int uploadLimit=coordinator.allowedUploaders();
    while (it.hasNext()) {
      Peer peer=(Peer)it.next();
      if (!peer.isConnected()) {
        it.remove();
        coordinator.removePeerFromPieces(peer);
        coordinator.peerCount=coordinator.peers.size();
        continue;
      }
      peers++;
      if (!peer.isChoking())       uploaders++;
      if (!peer.isChoked() && peer.isInteresting())       downloaders++;
      long upload=peer.getUploaded();
      uploaded+=upload;
      long download=peer.getDownloaded();
      downloaded+=download;
      peer.setRateHistory(upload,download);
      peer.resetCounters();
      Snark.debug(peer + ":",Snark.DEBUG);
      Snark.debug(" ul: " + upload / KILOPERSECOND + " dl: " + download / KILOPERSECOND + " i: " + peer.isInterested() + " I: " + peer.isInteresting() + " c: " + peer.isChoking() + " C: " + peer.isChoked(),Snark.DEBUG);
      if (((coordinator.uploaders == uploadLimit && coordinator.interestedAndChoking > 0) || coordinator.uploaders > uploadLimit) && !peer.isChoking()) {
        if (!peer.isInterested()) {
          Snark.debug("Choke uninterested peer: " + peer,Snark.INFO);
          peer.setChoking(true);
          uploaders--;
          coordinator.uploaders--;
          it.remove();
          removed.add(peer);
        }
 else         if (peer.isInteresting() && peer.isChoked()) {
          Snark.debug("Choke choking peer: " + peer,Snark.DEBUG);
          peer.setChoking(true);
          uploaders--;
          coordinator.uploaders--;
          removedCount++;
          it.remove();
          removed.add(peer);
        }
 else         if (!peer.isInteresting() && !coordinator.completed()) {
          Snark.debug("Choke uninteresting peer: " + peer,Snark.DEBUG);
          peer.setChoking(true);
          uploaders--;
          coordinator.uploaders--;
          removedCount++;
          it.remove();
          removed.add(peer);
        }
 else         if (peer.isInteresting() && !peer.isChoked() && download == 0) {
          Snark.debug("Choke downloader that doesn't deliver:" + peer,Snark.DEBUG);
          peer.setChoking(true);
          uploaders--;
          coordinator.uploaders--;
          removedCount++;
          it.remove();
          removed.add(peer);
        }
 else         if (peer.isInteresting() && !peer.isChoked() && download < worstdownload) {
          worstdownload=download;
          worstDownloader=peer;
        }
 else         if (upload < worstdownload && coordinator.completed()) {
          worstdownload=upload;
          worstDownloader=peer;
        }
      }
      peer.retransmitRequests();
      peer.keepAlive();
    }
    coordinator.uploaders=uploaders;
    if (((uploaders == uploadLimit && coordinator.interestedAndChoking > 0) || uploaders > uploadLimit) && worstDownloader != null) {
      Snark.debug("Choke worst downloader: " + worstDownloader,Snark.DEBUG);
      worstDownloader.setChoking(true);
      coordinator.uploaders--;
      removedCount++;
      coordinator.peers.remove(worstDownloader);
      coordinator.peerCount=coordinator.peers.size();
      removed.add(worstDownloader);
    }
    coordinator.unchokePeer();
    coordinator.peers.addAll(removed);
    coordinator.peerCount=coordinator.peers.size();
    coordinator.interestedAndChoking+=removedCount;
    coordinator.setRateHistory(uploaded,downloaded);
  }
}
