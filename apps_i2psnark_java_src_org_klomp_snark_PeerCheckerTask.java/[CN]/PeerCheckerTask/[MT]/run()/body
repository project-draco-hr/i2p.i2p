{
  _runCount++;
  List<Peer> peerList=coordinator.peerList();
  if (peerList.isEmpty() || coordinator.halted()) {
    coordinator.setRateHistory(0,0);
    return;
  }
  long worstdownload=Long.MAX_VALUE;
  Peer worstDownloader=null;
  int uploaders=0;
  int interestedUploaders=0;
  int removedCount=0;
  long uploaded=0;
  long downloaded=0;
  List<Peer> removed=new ArrayList<Peer>();
  int uploadLimit=coordinator.allowedUploaders();
  boolean overBWLimit=coordinator.overUpBWLimit();
  if (_log.shouldLog(Log.DEBUG))   _log.debug("START peers: " + peerList.size() + " uploaders: "+ coordinator.getUploaders()+ " interested: "+ coordinator.getInterestedUploaders()+ " limit: "+ uploadLimit+ " overBW? "+ overBWLimit);
  DHT dht=_util.getDHT();
  for (  Peer peer : peerList) {
    if (!peer.isConnected()) {
      continue;
    }
    if (peer.getInactiveTime() > PeerCoordinator.MAX_INACTIVE) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Disconnecting peer idle " + DataHelper.formatDuration(peer.getInactiveTime()) + ": "+ peer);
      peer.disconnect();
      continue;
    }
    if (peer.isInterested() && !peer.isChoking())     uploaders++;
    long upload=peer.getUploaded();
    uploaded+=upload;
    long download=peer.getDownloaded();
    downloaded+=download;
    peer.setRateHistory(upload,download);
    peer.resetCounters();
    if (_log.shouldLog(Log.DEBUG)) {
      _log.debug(peer + ":" + " ul: "+ upload * 1024 / KILOPERSECOND + " dl: " + download * 1024 / KILOPERSECOND + " i: " + peer.isInterested() + " I: " + peer.isInteresting() + " c: " + peer.isChoking() + " C: " + peer.isChoked());
    }
    boolean overBWLimitChoke=upload > 0 && ((overBWLimit && (random.nextInt(8) > (coordinator.completed() ? 2 : 4))) || (coordinator.overUpBWLimit(uploaded)));
    int cup=coordinator.getUploaders();
    if (((cup == uploadLimit && coordinator.getInterestedAndChoking() > 0) || cup > uploadLimit || overBWLimitChoke) && !peer.isChoking()) {
      if (!peer.isInterested()) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Choke uninterested peer: " + peer);
        peer.setChoking(true);
        uploaders--;
        coordinator.decrementUploaders(false);
        removed.add(peer);
      }
 else       if (overBWLimitChoke) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("BW limit (" + upload + "/"+ uploaded+ "), choke peer: "+ peer);
        peer.setChoking(true);
        uploaders--;
        interestedUploaders--;
        coordinator.decrementUploaders(true);
        removedCount++;
        removed.add(peer);
      }
 else       if (peer.isInteresting() && peer.isChoked()) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Choke choking peer: " + peer);
        peer.setChoking(true);
        uploaders--;
        interestedUploaders--;
        coordinator.decrementUploaders(true);
        removedCount++;
        removed.add(peer);
      }
 else       if (!peer.isInteresting() && !coordinator.completed()) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Choke uninteresting peer: " + peer);
        peer.setChoking(true);
        uploaders--;
        interestedUploaders--;
        coordinator.decrementUploaders(true);
        removedCount++;
        removed.add(peer);
      }
 else       if (peer.isInteresting() && !peer.isChoked() && download == 0) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Choke downloader that doesn't deliver: " + peer);
        peer.setChoking(true);
        uploaders--;
        interestedUploaders--;
        coordinator.decrementUploaders(true);
        removedCount++;
        removed.add(peer);
      }
 else       if (peer.isInteresting() && !peer.isChoked() && download < worstdownload) {
        worstdownload=download;
        worstDownloader=peer;
      }
 else       if (upload < worstdownload && coordinator.completed()) {
        worstdownload=upload;
        worstDownloader=peer;
      }
    }
    peer.retransmitRequests();
    if ((_runCount % 17) == 0 && !peer.isCompleted())     coordinator.sendPeers(peer);
    if (coordinator.getNeededLength() > 0 || !peer.isCompleted())     peer.keepAlive();
    if (dht != null && (_runCount % 5) == 0) {
      dht.announce(coordinator.getInfoHash(),peer.getPeerID().getDestHash(),peer.isCompleted());
    }
  }
  coordinator.setUploaders(uploaders,interestedUploaders);
  if (((uploaders == uploadLimit && coordinator.getInterestedAndChoking() > 0) || uploaders > uploadLimit) && worstDownloader != null) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Choke worst downloader: " + worstDownloader);
    worstDownloader.setChoking(true);
    coordinator.decrementUploaders(worstDownloader.isInterested());
    removedCount++;
    removed.add(worstDownloader);
  }
  boolean coordOver=coordinator.overUpBWLimit(uploaded);
synchronized (coordinator.peers) {
    if ((!overBWLimit) && !coordOver) {
      coordinator.unchokePeer();
    }
    for (    Peer peer : removed) {
      if (coordinator.peers.remove(peer))       coordinator.peers.add(peer);
    }
  }
  coordinator.addInterestedAndChoking(removedCount);
  coordinator.setRateHistory(uploaded,downloaded);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("END peers: " + peerList.size() + " uploaders: "+ uploaders+ " interested: "+ interestedUploaders);
  Storage storage=coordinator.getStorage();
  if (storage != null) {
    int files=storage.getFileCount();
    int skip;
    if (files == 1)     skip=6;
 else     if (files <= 4)     skip=4;
 else     if (files <= 20)     skip=3;
 else     if (files <= 50)     skip=2;
 else     skip=1;
    if ((_runCount % skip) == 0)     storage.cleanRAFs();
  }
  if (dht != null && (_runCount % 16) == 0) {
    dht.announce(coordinator.getInfoHash(),coordinator.completed());
  }
}
