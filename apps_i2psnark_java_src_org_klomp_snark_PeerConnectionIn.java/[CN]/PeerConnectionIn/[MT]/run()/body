{
  thread=Thread.currentThread();
  try {
    PeerState ps=peer.state;
    while (!quit && ps != null) {
      int piece;
      int begin;
      int len;
      int i=din.readInt();
      lastRcvd=System.currentTimeMillis();
      if (i < 0 || i > MAX_MSG_SIZE)       throw new IOException("Unexpected length prefix: " + i);
      if (i == 0) {
        ps.keepAliveMessage();
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Received keepalive from " + peer);
        continue;
      }
      byte b=din.readByte();
switch (b) {
case Message.CHOKE:
        ps.chokeMessage(true);
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Received choke from " + peer);
    break;
case Message.UNCHOKE:
  ps.chokeMessage(false);
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received unchoke from " + peer);
break;
case Message.INTERESTED:
ps.interestedMessage(true);
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received interested from " + peer);
break;
case Message.UNINTERESTED:
ps.interestedMessage(false);
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received not interested from " + peer);
break;
case Message.HAVE:
piece=din.readInt();
ps.haveMessage(piece);
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received havePiece(" + piece + ") from "+ peer);
break;
case Message.BITFIELD:
byte[] bitmap=new byte[i - 1];
din.readFully(bitmap);
ps.bitfieldMessage(bitmap);
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received bitmap from " + peer + ": size="+ (i - 1));
break;
case Message.REQUEST:
piece=din.readInt();
begin=din.readInt();
len=din.readInt();
ps.requestMessage(piece,begin,len);
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received request(" + piece + ","+ begin+ ") from "+ peer);
break;
case Message.PIECE:
piece=din.readInt();
begin=din.readInt();
len=i - 9;
Request req=ps.getOutstandingRequest(piece,begin,len);
if (req != null) {
req.read(din);
ps.pieceMessage(req);
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received data(" + piece + ","+ begin+ ") from "+ peer);
}
 else {
int rcvd=din.skipBytes(len);
if (rcvd != len) throw new IOException("EOF reading unwanted data");
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received UNWANTED data(" + piece + ","+ begin+ ") from "+ peer);
}
break;
case Message.CANCEL:
piece=din.readInt();
begin=din.readInt();
len=din.readInt();
ps.cancelMessage(piece,begin,len);
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received cancel(" + piece + ","+ begin+ ") from "+ peer);
break;
case Message.PORT:
int port=din.readUnsignedShort();
ps.portMessage(port);
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received port message from " + peer);
break;
case Message.EXTENSION:
int id=din.readUnsignedByte();
byte[] payload=new byte[i - 2];
din.readFully(payload);
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received extension message from " + peer);
ps.extensionMessage(id,payload);
break;
case Message.SUGGEST:
piece=din.readInt();
ps.suggestMessage(piece);
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received suggest(" + piece + ") from "+ peer);
break;
case Message.HAVE_ALL:
ps.haveMessage(true);
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received have_all from " + peer);
break;
case Message.HAVE_NONE:
ps.haveMessage(false);
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received have_none from " + peer);
break;
case Message.REJECT:
piece=din.readInt();
begin=din.readInt();
len=din.readInt();
ps.rejectMessage(piece,begin,len);
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received reject(" + piece + ','+ begin+ ','+ len+ ") from "+ peer);
break;
case Message.ALLOWED_FAST:
piece=din.readInt();
ps.allowedFastMessage(piece);
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received allowed_fast(" + piece + ") from "+ peer);
break;
default :
byte[] bs=new byte[i - 1];
din.readFully(bs);
ps.unknownMessage(b,bs);
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received unknown message from " + peer);
}
}
}
 catch (IOException ioe) {
if (_log.shouldLog(Log.INFO)) _log.info("IOError talking with " + peer,ioe);
}
catch (Throwable t) {
_log.error("Error talking with " + peer,t);
if (t instanceof OutOfMemoryError) throw (OutOfMemoryError)t;
}
 finally {
peer.disconnect();
}
}
