{
  thread=Thread.currentThread();
  try {
    PeerState ps=peer.state;
    while (!quit && ps != null) {
      int piece;
      int begin;
      int len;
      int i=din.readInt();
      if (i < 0)       throw new IOException("Unexpected length prefix: " + i);
      if (i == 0) {
        ps.keepAliveMessage();
        continue;
      }
      byte b=din.readByte();
      Message m=new Message();
      m.type=b;
switch (b) {
case 0:
        ps.chokeMessage(true);
      break;
case 1:
    ps.chokeMessage(false);
  break;
case 2:
ps.interestedMessage(true);
break;
case 3:
ps.interestedMessage(false);
break;
case 4:
piece=din.readInt();
ps.haveMessage(piece);
break;
case 5:
byte[] bitmap=new byte[i - 1];
din.readFully(bitmap);
ps.bitfieldMessage(bitmap);
break;
case 6:
piece=din.readInt();
begin=din.readInt();
len=din.readInt();
ps.requestMessage(piece,begin,len);
break;
case 7:
piece=din.readInt();
begin=din.readInt();
len=i - 9;
Request req=ps.getOutstandingRequest(piece,begin,len);
byte[] piece_bytes;
if (req != null) {
piece_bytes=req.bs;
din.readFully(piece_bytes,begin,len);
ps.pieceMessage(req);
}
 else {
piece_bytes=new byte[len];
din.readFully(piece_bytes);
}
break;
case 8:
piece=din.readInt();
begin=din.readInt();
len=din.readInt();
ps.cancelMessage(piece,begin,len);
break;
default :
byte[] bs=new byte[i - 1];
din.readFully(bs);
ps.unknownMessage(b,bs);
}
}
}
 catch (IOException ioe) {
}
catch (Throwable t) {
Snark.debug(peer + ": " + t,Snark.ERROR);
t.printStackTrace();
}
 finally {
peer.disconnect();
}
}
