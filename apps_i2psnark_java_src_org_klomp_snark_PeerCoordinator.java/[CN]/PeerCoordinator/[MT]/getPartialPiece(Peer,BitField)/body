{
  if (metainfo == null)   return null;
  if (storage != null && storage.isChecking())   return null;
synchronized (wantedPieces) {
    Collections.sort(partialPieces);
    for (Iterator<PartialPiece> iter=partialPieces.iterator(); iter.hasNext(); ) {
      PartialPiece pp=iter.next();
      int savedPiece=pp.getPiece();
      if (havePieces.get(savedPiece)) {
        boolean skipped=false;
        for (        Piece piece : wantedPieces) {
          if (piece.getId() == savedPiece) {
            if (peer.isCompleted() && piece.getPeerCount() > 1 && wantedPieces.size() > 2 * END_GAME_THRESHOLD) {
              int nonSeeds=0;
              for (              Peer pr : peers) {
                PeerState state=pr.state;
                if (state == null)                 continue;
                BitField bf=state.bitfield;
                if (bf == null)                 continue;
                if (bf.get(savedPiece) && !pr.isCompleted()) {
                  if (++nonSeeds > 1)                   break;
                }
              }
              if (nonSeeds > 1) {
                skipped=true;
                break;
              }
            }
            iter.remove();
            piece.setRequested(peer,true);
            if (_log.shouldLog(Log.INFO)) {
              _log.info("Restoring orphaned partial piece " + pp + " Partial list size now: "+ partialPieces.size());
            }
            return pp;
          }
        }
        if (_log.shouldLog(Log.INFO)) {
          if (skipped)           _log.info("Partial piece " + pp + " with multiple peers skipped for seeder");
 else           _log.info("Partial piece " + pp + " NOT in wantedPieces??");
        }
      }
    }
    if (_log.shouldLog(Log.INFO) && !partialPieces.isEmpty())     _log.info("Peer " + peer + " has none of our partials "+ partialPieces);
  }
  Piece piece=wantPiece(peer,havePieces,true);
  if (piece != null) {
    return new PartialPiece(piece,metainfo.getPieceLength(piece.getId()),_util.getTempDir());
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("We have no partial piece to return");
  return null;
}
