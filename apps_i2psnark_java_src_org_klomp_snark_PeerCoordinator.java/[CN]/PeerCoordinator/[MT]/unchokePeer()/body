{
  List<Peer> interested=new LinkedList<Peer>();
  int count=0;
  int unchokedCount=0;
  int maxUploaders=allowedUploaders();
  Iterator<Peer> it=peers.iterator();
  while (it.hasNext()) {
    Peer peer=it.next();
    if (peer.isChoking() && peer.isInterested()) {
      count++;
      if (uploaders.get() < maxUploaders) {
        if (peer.isInteresting() && !peer.isChoked())         interested.add(unchokedCount++,peer);
 else         interested.add(peer);
      }
    }
  }
  int up=uploaders.get();
  while (up < maxUploaders && !interested.isEmpty()) {
    Peer peer=interested.remove(0);
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Unchoke: " + peer);
    peer.setChoking(false);
    up=uploaders.incrementAndGet();
    interestedUploaders.incrementAndGet();
    count--;
    peers.remove(peer);
    peers.add(peer);
    peerCount=peers.size();
  }
  interestedAndChoking.set(count);
}
