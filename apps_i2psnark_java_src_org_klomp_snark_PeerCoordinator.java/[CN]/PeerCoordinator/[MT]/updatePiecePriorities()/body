{
  if (storage == null)   return;
  int[] pri=storage.getPiecePriorities();
  if (pri == null) {
    _log.debug("Updated piece priorities called but no priorities to set?");
    return;
  }
  List<Piece> toCancel=new ArrayList();
synchronized (wantedPieces) {
    BitField want=new BitField(pri.length);
    for (    Piece p : wantedPieces) {
      want.set(p.getId());
    }
    BitField bitfield=storage.getBitField();
    for (int i=0; i < pri.length; i++) {
      if (pri[i] >= 0 && !bitfield.get(i)) {
        if (!want.get(i)) {
          Piece piece=new Piece(i);
          wantedPieces.add(piece);
          for (          Peer p : peers) {
            PeerState s=p.state;
            if (s != null) {
              BitField bf=s.bitfield;
              if (bf != null && bf.get(i))               piece.addPeer(p);
            }
          }
        }
      }
    }
    for (Iterator<Piece> iter=wantedPieces.iterator(); iter.hasNext(); ) {
      Piece p=iter.next();
      int priority=pri[p.getId()];
      if (priority >= 0) {
        p.setPriority(priority);
      }
 else {
        iter.remove();
        toCancel.add(p);
      }
    }
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Updated piece priorities, now wanted: " + wantedPieces);
    Collections.shuffle(wantedPieces,_random);
  }
  if (!toCancel.isEmpty()) {
    for (    Peer peer : peers) {
      for (      Piece p : toCancel) {
        peer.cancel(p.getId());
      }
    }
  }
  for (  Peer peer : peers) {
    peer.request();
  }
}
