{
  if (halted) {
    if (_log.shouldLog(Log.WARN))     _log.warn("We don't want anything from the peer, as we are halted!  peer=" + peer);
    return null;
  }
  Piece piece=null;
  List<Piece> requested=new ArrayList();
  int wantedSize=END_GAME_THRESHOLD + 1;
synchronized (wantedPieces) {
    if (record)     Collections.sort(wantedPieces);
    Iterator<Piece> it=wantedPieces.iterator();
    while (piece == null && it.hasNext()) {
      Piece p=it.next();
      if (p.isDisabled())       break;
      if (havePieces.get(p.getId()) && !p.isRequested()) {
        piece=p;
      }
 else       if (p.isRequested()) {
        requested.add(p);
      }
    }
    if (piece == null)     wantedSize=wantedPieces.size();
    if (piece == null) {
      if (wantedSize > END_GAME_THRESHOLD)       return null;
      if (record)       Collections.shuffle(requested,_random);
      Iterator<Piece> it2=requested.iterator();
      while (piece == null && it2.hasNext()) {
        Piece p=it2.next();
        if (havePieces.get(p.getId())) {
          int requestedCount=p.getRequestCount();
          if (requestedCount < MAX_PARALLEL_REQUESTS && !p.isRequestedBy(peer)) {
            piece=p;
            break;
          }
        }
      }
      if (piece == null) {
        if (_log.shouldLog(Log.WARN))         _log.warn("nothing to even rerequest from " + peer + ": requested = "+ requested);
        return null;
      }
 else {
        if (_log.shouldLog(Log.INFO))         _log.info("parallel request (end game?) for " + peer + ": piece = "+ piece);
      }
    }
    if (record) {
      if (_log.shouldLog(Log.INFO))       _log.info(peer + " is now requesting: piece " + piece+ " priority "+ piece.getPriority());
      piece.setRequested(peer,true);
    }
    return piece;
  }
}
