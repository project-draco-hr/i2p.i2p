{
  if (halted) {
    if (_log.shouldLog(Log.WARN))     _log.warn("We don't want anything from the peer, as we are halted!  peer=" + peer);
    return -1;
  }
  Piece piece=null;
  List<Piece> requested=new ArrayList();
  int wantedSize=END_GAME_THRESHOLD + 1;
synchronized (wantedPieces) {
    if (record)     Collections.sort(wantedPieces);
    Iterator<Piece> it=wantedPieces.iterator();
    while (piece == null && it.hasNext()) {
      Piece p=it.next();
      if (p.isDisabled())       break;
      if (havePieces.get(p.getId()) && !p.isRequested()) {
        piece=p;
      }
 else       if (p.isRequested()) {
        requested.add(p);
      }
    }
    if (piece == null)     wantedSize=wantedPieces.size();
  }
  if (piece == null) {
    if (wantedSize > END_GAME_THRESHOLD)     return -1;
    if (record)     Collections.shuffle(requested,_random);
    Iterator<Piece> it2=requested.iterator();
    while (piece == null && it2.hasNext()) {
      Piece p=it2.next();
      if (havePieces.get(p.getId())) {
        int requestedCount=0;
        for (        Peer pr : peers) {
          if (pr.isRequesting(p.getId())) {
            if (pr.equals(peer)) {
              requestedCount=MAX_PARALLEL_REQUESTS;
              break;
            }
            if (++requestedCount >= MAX_PARALLEL_REQUESTS)             break;
          }
        }
        if (requestedCount >= MAX_PARALLEL_REQUESTS)         continue;
        piece=p;
      }
    }
    if (piece == null) {
      if (_log.shouldLog(Log.WARN))       _log.warn("nothing to even rerequest from " + peer + ": requested = "+ requested);
      return -1;
    }
 else {
      if (_log.shouldLog(Log.INFO))       _log.info("parallel request (end game?) for " + peer + ": piece = "+ piece);
    }
  }
  if (record) {
    if (_log.shouldLog(Log.INFO))     _log.info(peer + " is now requesting: piece " + piece+ " priority "+ piece.getPriority());
    piece.setRequested(true);
  }
  return piece.getId();
}
