{
  int peers=0;
  int uploaders=0;
  int downloaders=0;
  int interested=0;
  int interesting=0;
  int choking=0;
  int choked=0;
synchronized (coordinator.peers) {
    Iterator it=coordinator.peers.iterator();
    while (it.hasNext()) {
      Peer peer=(Peer)it.next();
      if (!peer.isConnected())       continue;
      peers++;
      if (!peer.isChoking())       uploaders++;
      if (!peer.isChoked() && peer.isInteresting())       downloaders++;
      if (peer.isInterested())       interested++;
      if (peer.isInteresting())       interesting++;
      if (peer.isChoking())       choking++;
      if (peer.isChoked())       choked++;
    }
  }
  long downloaded=coordinator.getDownloaded();
  String totalDown;
  if (downloaded >= 10 * 1024 * 1024)   totalDown=(downloaded / (1024 * 1024)) + "MB";
 else   totalDown=(downloaded / 1024) + "KB";
  long uploaded=coordinator.getUploaded();
  String totalUp;
  if (uploaded >= 10 * 1024 * 1024)   totalUp=(uploaded / (1024 * 1024)) + "MB";
 else   totalUp=(uploaded / 1024) + "KB";
  int needP=coordinator.storage.needed();
  long needMB=needP * coordinator.metainfo.getPieceLength(0) / (1024 * 1024);
  int totalP=coordinator.metainfo.getPieces();
  long totalMB=coordinator.metainfo.getTotalLength() / (1024 * 1024);
  System.out.println();
  System.out.println("Down: " + (downloaded - lastDownloaded) / KILOPERSECOND + "KB/s" + " (" + totalDown + ")" + " Up: " + (uploaded - lastUploaded) / KILOPERSECOND + "KB/s" + " (" + totalUp + ")" + " Need " + needP + " (" + needMB + "MB)" + " of " + totalP + " (" + totalMB + "MB)" + " pieces");
  System.out.println(peers + ": Download #" + downloaders+ " Upload #"+ uploaders+ " Interested #"+ interested+ " Interesting #"+ interesting+ " Choking #"+ choking+ " Choked #"+ choked);
  System.out.println();
  lastDownloaded=downloaded;
  lastUploaded=uploaded;
}
