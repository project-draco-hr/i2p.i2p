{
  if (_log.shouldLog(Log.DEBUG))   _log.debug("getChunk(" + piece + ","+ begin+ ","+ length+ ") "+ peer);
  int r=getFirstOutstandingRequest(piece);
  if (r == -1) {
    if (_log.shouldLog(Log.INFO))     _log.info("Unrequested 'piece: " + piece + ", "+ begin+ ", "+ length+ "' received from "+ peer);
    downloaded=0;
    return null;
  }
  Request req;
synchronized (this) {
    req=outstandingRequests.get(r);
    while (req.piece == piece && req.off != begin && r < outstandingRequests.size() - 1) {
      r++;
      req=outstandingRequests.get(r);
    }
    if (req.piece != piece || req.off != begin || req.len != length) {
      if (_log.shouldLog(Log.INFO))       _log.info("Unrequested or unneeded 'piece: " + piece + ", "+ begin+ ", "+ length+ "' received from "+ peer);
      downloaded=0;
      return null;
    }
    if (r != 0) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Some requests dropped, got " + req + ", wanted for peer: "+ peer);
      for (int i=0; i < r; i++) {
        Request dropReq=outstandingRequests.remove(0);
        outstandingRequests.add(dropReq);
        if (!choked)         out.sendRequest(dropReq);
        if (_log.shouldLog(Log.WARN))         _log.warn("dropped " + dropReq + " with peer "+ peer);
      }
    }
    outstandingRequests.remove(0);
  }
  addRequest();
  pendingRequest=req;
  return req;
}
