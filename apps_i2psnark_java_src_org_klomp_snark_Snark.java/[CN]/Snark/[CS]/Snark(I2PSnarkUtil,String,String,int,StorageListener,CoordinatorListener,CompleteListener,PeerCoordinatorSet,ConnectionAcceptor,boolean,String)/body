{
  if (slistener == null)   slistener=this;
  completeListener=complistener;
  _util=util;
  _log=util.getContext().logManager().getLog(Snark.class);
  _peerCoordinatorSet=peerCoordinatorSet;
  acceptor=connectionAcceptor;
  this.torrent=torrent;
  this.rootDataDir=rootDir;
  stopped=true;
  activity="Network setup";
  id=generateID();
  if (_log.shouldLog(Log.INFO))   _log.info("My peer id: " + PeerID.idencode(id));
  meta=null;
  File f=null;
  InputStream in=null;
  byte[] x_infoHash=null;
  try {
    f=new File(torrent);
    if (f.exists())     in=new FileInputStream(f);
 else {
      throw new IOException("not found");
    }
    meta=new MetaInfo(in);
    x_infoHash=meta.getInfoHash();
  }
 catch (  IOException ioe) {
    if (f != null && f.exists())     if (ip == null)     fatal("'" + torrent + "' exists,"+ " but is not a valid torrent metainfo file."+ System.getProperty("line.separator"),ioe);
 else     fatal("I2PSnark does not support creating and tracking a torrent at the moment");
 else     fatal("Cannot open '" + torrent + "'",ioe);
  }
catch (  OutOfMemoryError oom) {
    fatal("ERROR - Out of memory, cannot create torrent " + torrent + ": "+ oom.getMessage());
  }
 finally {
    if (in != null)     try {
      in.close();
    }
 catch (    IOException ioe) {
    }
  }
  infoHash=x_infoHash;
  if (_log.shouldLog(Log.INFO))   _log.info(meta.toString());
  if (storage == null) {
    try {
      activity="Checking storage";
      storage=new Storage(_util,meta,slistener);
      if (completeListener != null) {
        storage.check(rootDataDir,completeListener.getSavedTorrentTime(this),completeListener.getSavedTorrentBitField(this));
      }
 else {
        storage.check(rootDataDir);
      }
    }
 catch (    IOException ioe) {
      try {
        storage.close();
      }
 catch (      IOException ioee) {
        ioee.printStackTrace();
      }
      fatal("Could not check or create storage",ioe);
    }
  }
  if (start)   startTorrent();
}
