{
  System.out.println(copyright);
  System.out.println();
  if ((args.length > 0) && ("--config".equals(args[0]))) {
    I2PThread.addOOMEventListener(new OOMListener());
    SnarkManager sm=SnarkManager.instance();
    if (args.length > 1)     sm.loadConfig(args[1]);
    System.out.println("Running in multitorrent mode");
    while (true) {
      try {
synchronized (sm) {
          sm.wait();
        }
      }
 catch (      InterruptedException ie) {
      }
    }
  }
  Snark snark=parseArguments(args);
  SnarkShutdown snarkhook=new SnarkShutdown(snark.storage,snark.coordinator,snark.acceptor,snark.trackerclient,snark);
  Timer timer=new Timer(true);
  TimerTask monitor=new PeerMonitorTask(snark.coordinator);
  timer.schedule(monitor,PeerMonitorTask.MONITOR_PERIOD,PeerMonitorTask.MONITOR_PERIOD);
  if (Snark.command_interpreter) {
    boolean quit=false;
    System.out.println();
    System.out.println(usage);
    System.out.println();
    try {
      BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
      String line=br.readLine();
      while (!quit && line != null) {
        line=line.toLowerCase();
        if ("quit".equals(line))         quit=true;
 else         if ("list".equals(line)) {
synchronized (snark.coordinator.peers) {
            System.out.println(snark.coordinator.peers.size() + " peers -" + " (i)nterested,"+ " (I)nteresting,"+ " (c)hoking,"+ " (C)hoked:");
            Iterator it=snark.coordinator.peers.iterator();
            while (it.hasNext()) {
              Peer peer=(Peer)it.next();
              System.out.println(peer);
              System.out.println("\ti: " + peer.isInterested() + " I: "+ peer.isInteresting()+ " c: "+ peer.isChoking()+ " C: "+ peer.isChoked());
            }
          }
        }
 else         if ("info".equals(line)) {
          System.out.println("Name: " + snark.meta.getName());
          System.out.println("Torrent: " + snark.torrent);
          System.out.println("Tracker: " + snark.meta.getAnnounce());
          List files=snark.meta.getFiles();
          System.out.println("Files: " + ((files == null) ? 1 : files.size()));
          System.out.println("Pieces: " + snark.meta.getPieces());
          System.out.println("Piece size: " + snark.meta.getPieceLength(0) / 1024 + " KB");
          System.out.println("Total size: " + snark.meta.getTotalLength() / (1024 * 1024) + " MB");
        }
 else         if ("".equals(line) || "help".equals(line)) {
          System.out.println(usage);
          System.out.println(help);
        }
 else {
          System.out.println("Unknown command: " + line);
          System.out.println(usage);
        }
        if (!quit) {
          System.out.println();
          line=br.readLine();
        }
      }
    }
 catch (    IOException ioe) {
      System.out.println("ERROR while reading stdin: " + ioe);
    }
    Runtime.getRuntime().removeShutdownHook(snarkhook);
    snarkhook.start();
  }
}
