{
  if (coordinator == null) {
    I2PServerSocket serversocket=I2PSnarkUtil.instance().getServerSocket();
    if (serversocket == null)     fatal("Unable to listen for I2P connections");
 else {
      Destination d=serversocket.getManager().getSession().getMyDestination();
      debug("Listening on I2P destination " + d.toBase64() + " / "+ d.calculateHash().toBase64(),NOTICE);
    }
    debug("Starting PeerCoordinator, ConnectionAcceptor, and TrackerClient",NOTICE);
    activity="Collecting pieces";
    coordinator=new PeerCoordinator(id,meta,storage,this,this);
    PeerCoordinatorSet set=PeerCoordinatorSet.instance();
    set.add(coordinator);
    ConnectionAcceptor acceptor=ConnectionAcceptor.instance();
    acceptor.startAccepting(set,serversocket);
    trackerclient=new TrackerClient(meta,coordinator);
  }
  stopped=false;
  boolean coordinatorChanged=false;
  if (coordinator.halted()) {
    PeerCoordinatorSet set=PeerCoordinatorSet.instance();
    set.remove(coordinator);
    PeerCoordinator newCoord=new PeerCoordinator(coordinator.getID(),coordinator.getMetaInfo(),coordinator.getStorage(),coordinator.getListener(),this);
    set.add(newCoord);
    coordinator=newCoord;
    coordinatorChanged=true;
  }
  if (!trackerclient.started() && !coordinatorChanged) {
    trackerclient.start();
  }
 else   if (trackerclient.halted() || coordinatorChanged) {
    try {
      storage.reopen(rootDataDir);
    }
 catch (    IOException ioe) {
      try {
        storage.close();
      }
 catch (      IOException ioee) {
        ioee.printStackTrace();
      }
      fatal("Could not reopen storage",ioe);
    }
    TrackerClient newClient=new TrackerClient(coordinator.getMetaInfo(),coordinator);
    if (!trackerclient.halted())     trackerclient.halt();
    trackerclient=newClient;
    trackerclient.start();
  }
}
