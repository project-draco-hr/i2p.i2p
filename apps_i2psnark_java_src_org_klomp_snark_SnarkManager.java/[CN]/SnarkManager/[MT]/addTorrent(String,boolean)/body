{
  if ((!dontAutoStart) && !_util.connected()) {
    addMessage(_("Connecting to I2P"));
    boolean ok=_util.connect();
    if (!ok) {
      addMessage(_("Error connecting to I2P - check your I2CP settings!"));
      return;
    }
  }
  File sfile=new File(filename);
  try {
    filename=sfile.getCanonicalPath();
  }
 catch (  IOException ioe) {
    _log.error("Unable to add the torrent " + filename,ioe);
    addMessage(_("Error: Could not add the torrent {0}",filename) + ": " + ioe.getMessage());
    return;
  }
  File dataDir=getDataDir();
  Snark torrent=null;
synchronized (_snarks) {
    torrent=(Snark)_snarks.get(filename);
  }
  if (torrent == null) {
synchronized (_addSnarkLock) {
synchronized (_snarks) {
        if (_snarks.get(filename) != null)         return;
      }
      FileInputStream fis=null;
      try {
        fis=new FileInputStream(sfile);
      }
 catch (      IOException ioe) {
        addMessage(_("Cannot open \"{0}\"",sfile.getName()) + ": " + ioe.getMessage());
        return;
      }
      try {
        MetaInfo info=new MetaInfo(fis);
        try {
          fis.close();
          fis=null;
        }
 catch (        IOException e) {
        }
        Snark snark=getTorrentByInfoHash(info.getInfoHash());
        if (snark != null) {
          addMessage(_("Torrent with this info hash is already running: {0}",snark.getBaseName()));
          return;
        }
        if (!TrackerClient.isValidAnnounce(info.getAnnounce())) {
          if (info.isPrivate()) {
            addMessage(_("ERROR - No I2P trackers in private torrent \"{0}\"",info.getName()));
          }
 else           if (_util.shouldUseOpenTrackers() && _util.getOpenTrackers() != null) {
            addMessage(_("Warning - No I2P trackers in \"{0}\", will announce to I2P open trackers only.",info.getName()));
          }
 else {
            addMessage(_("Warning - No I2P Trackers found in \"{0}\". Make sure Open Tracker is enabled before starting this torrent.",info.getName()));
            dontAutoStart=true;
          }
        }
        String rejectMessage=validateTorrent(info);
        if (rejectMessage != null) {
          sfile.delete();
          addMessage(rejectMessage);
          return;
        }
 else {
          torrent=new Snark(_util,filename,null,-1,null,null,this,_peerCoordinatorSet,_connectionAcceptor,false,dataDir.getPath());
          loadSavedFilePriorities(torrent);
synchronized (_snarks) {
            _snarks.put(filename,torrent);
          }
        }
      }
 catch (      IOException ioe) {
        addMessage(_("Torrent in \"{0}\" is invalid",sfile.getName()) + ": " + ioe.getMessage());
        if (sfile.exists())         sfile.delete();
        return;
      }
catch (      OutOfMemoryError oom) {
        addMessage(_("ERROR - Out of memory, cannot create torrent from {0}",sfile.getName()) + ": " + oom.getMessage());
        return;
      }
 finally {
        if (fis != null)         try {
          fis.close();
        }
 catch (        IOException ioe) {
        }
      }
    }
  }
 else {
    return;
  }
  if (!dontAutoStart && shouldAutoStart()) {
    torrent.startTorrent();
    addMessage(_("Torrent added and started: \"{0}\"",torrent.getBaseName()));
  }
 else {
    addMessage(_("Torrent added: \"{0}\"",torrent.getBaseName()));
  }
}
