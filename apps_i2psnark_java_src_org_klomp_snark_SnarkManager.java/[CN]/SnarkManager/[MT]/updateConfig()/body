{
  String i2cpHost=_config.getProperty(PROP_I2CP_HOST);
  int i2cpPort=getInt(PROP_I2CP_PORT,7654);
  String opts=_config.getProperty(PROP_I2CP_OPTS);
  Map i2cpOpts=new HashMap();
  if (opts != null) {
    StringTokenizer tok=new StringTokenizer(opts," ");
    while (tok.hasMoreTokens()) {
      String pair=tok.nextToken();
      int split=pair.indexOf('=');
      if (split > 0)       i2cpOpts.put(pair.substring(0,split),pair.substring(split + 1));
    }
  }
  _util.setI2CPConfig(i2cpHost,i2cpPort,i2cpOpts);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Configuring with I2CP options " + i2cpOpts);
  _util.setMaxUploaders(getInt(PROP_UPLOADERS_TOTAL,Snark.MAX_TOTAL_UPLOADERS));
  _util.setMaxUpBW(getInt(PROP_UPBW_MAX,DEFAULT_MAX_UP_BW));
  _util.setStartupDelay(getInt(PROP_STARTUP_DELAY,DEFAULT_STARTUP_DELAY));
  _util.setFilesPublic(areFilesPublic());
  String ot=_config.getProperty(PROP_OPENTRACKERS);
  if (ot != null)   _util.setOpenTrackers(getOpenTrackers());
  String useOT=_config.getProperty(PROP_USE_OPENTRACKERS);
  boolean bOT=useOT == null || Boolean.parseBoolean(useOT);
  _util.setUseOpenTrackers(bOT);
  _util.setUseDHT(Boolean.parseBoolean(_config.getProperty(PROP_USE_DHT,Boolean.toString(I2PSnarkUtil.DEFAULT_USE_DHT))));
  getDataDir().mkdirs();
  initTrackerMap();
}
