{
  boolean changed=false;
  if (eepHost != null) {
    int port=I2PSnarkUtil.instance().getEepProxyPort();
    try {
      port=Integer.parseInt(eepPort);
    }
 catch (    NumberFormatException nfe) {
    }
    String host=I2PSnarkUtil.instance().getEepProxyHost();
    if ((eepHost.trim().length() > 0) && (port > 0) && ((!host.equals(eepHost) || (port != I2PSnarkUtil.instance().getEepProxyPort())))) {
      I2PSnarkUtil.instance().setProxy(eepHost,port);
      changed=true;
      _config.setProperty(PROP_EEP_HOST,eepHost);
      _config.setProperty(PROP_EEP_PORT,eepPort + "");
      addMessage("EepProxy location changed to " + eepHost + ":"+ port);
    }
  }
  if (upLimit != null) {
    int limit=I2PSnarkUtil.instance().getMaxUploaders();
    try {
      limit=Integer.parseInt(upLimit);
    }
 catch (    NumberFormatException nfe) {
    }
    if (limit != I2PSnarkUtil.instance().getMaxUploaders()) {
      if (limit >= Snark.MIN_TOTAL_UPLOADERS) {
        I2PSnarkUtil.instance().setMaxUploaders(limit);
        changed=true;
        _config.setProperty(PROP_UPLOADERS_TOTAL,"" + limit);
        addMessage("Total uploaders limit changed to " + limit);
      }
 else {
        addMessage("Minimum total uploaders limit is " + Snark.MIN_TOTAL_UPLOADERS);
      }
    }
  }
  if (i2cpHost != null) {
    int oldI2CPPort=I2PSnarkUtil.instance().getI2CPPort();
    String oldI2CPHost=I2PSnarkUtil.instance().getI2CPHost();
    int port=oldI2CPPort;
    try {
      port=Integer.parseInt(i2cpPort);
    }
 catch (    NumberFormatException nfe) {
    }
    String host=oldI2CPHost;
    Map opts=new HashMap();
    if (i2cpOpts == null)     i2cpOpts="";
    StringTokenizer tok=new StringTokenizer(i2cpOpts," \t\n");
    while (tok.hasMoreTokens()) {
      String pair=tok.nextToken();
      int split=pair.indexOf('=');
      if (split > 0)       opts.put(pair.substring(0,split),pair.substring(split + 1));
    }
    Map oldOpts=new HashMap();
    String oldI2CPOpts=_config.getProperty(PROP_I2CP_OPTS);
    if (oldI2CPOpts == null)     oldI2CPOpts="";
    tok=new StringTokenizer(oldI2CPOpts," \t\n");
    while (tok.hasMoreTokens()) {
      String pair=tok.nextToken();
      int split=pair.indexOf('=');
      if (split > 0)       oldOpts.put(pair.substring(0,split),pair.substring(split + 1));
    }
    if ((i2cpHost.trim().length() > 0) && (port > 0) && ((!host.equals(i2cpHost) || (port != I2PSnarkUtil.instance().getI2CPPort()) || (!oldOpts.equals(opts))))) {
      boolean snarksActive=false;
      Set names=listTorrentFiles();
      for (Iterator iter=names.iterator(); iter.hasNext(); ) {
        Snark snark=getTorrent((String)iter.next());
        if ((snark != null) && (!snark.stopped)) {
          snarksActive=true;
          break;
        }
      }
      if (snarksActive) {
        addMessage("Cannot change the I2CP settings while torrents are active");
        _log.debug("i2cp host [" + i2cpHost + "] i2cp port "+ port+ " opts ["+ opts+ "] oldOpts ["+ oldOpts+ "]");
      }
 else {
        if (I2PSnarkUtil.instance().connected()) {
          I2PSnarkUtil.instance().disconnect();
          addMessage("Disconnecting old I2CP destination");
        }
        Properties p=new Properties();
        p.putAll(opts);
        addMessage("I2CP settings changed to " + i2cpHost + ":"+ port+ " ("+ i2cpOpts.trim()+ ")");
        I2PSnarkUtil.instance().setI2CPConfig(i2cpHost,port,p);
        boolean ok=I2PSnarkUtil.instance().connect();
        if (!ok) {
          addMessage("Unable to connect with the new settings, reverting to the old I2CP settings");
          I2PSnarkUtil.instance().setI2CPConfig(oldI2CPHost,oldI2CPPort,oldOpts);
          ok=I2PSnarkUtil.instance().connect();
          if (!ok)           addMessage("Unable to reconnect with the old settings!");
        }
 else {
          addMessage("Reconnected on the new I2CP destination");
          _config.setProperty(PROP_I2CP_HOST,i2cpHost.trim());
          _config.setProperty(PROP_I2CP_PORT,"" + port);
          _config.setProperty(PROP_I2CP_OPTS,i2cpOpts.trim());
          changed=true;
          for (Iterator iter=names.iterator(); iter.hasNext(); ) {
            String name=(String)iter.next();
            Snark snark=getTorrent(name);
            if ((snark != null) && (snark.acceptor != null)) {
              snark.acceptor.restart();
              addMessage("I2CP listener restarted for " + snark.meta.getName());
            }
          }
        }
      }
      changed=true;
    }
  }
  if (shouldAutoStart() != autoStart) {
    _config.setProperty(PROP_AUTO_START,autoStart + "");
    addMessage("Adjusted autostart to " + autoStart);
    changed=true;
  }
  if (shouldUseOpenTrackers() != useOpenTrackers) {
    _config.setProperty(PROP_USE_OPENTRACKERS,useOpenTrackers + "");
    addMessage((useOpenTrackers ? "En" : "Dis") + "abled open trackers - torrent restart required to take effect");
    changed=true;
  }
  if (openTrackers != null) {
    if (openTrackers.trim().length() > 0 && !openTrackers.trim().equals(getOpenTrackerString())) {
      _config.setProperty(PROP_OPENTRACKERS,openTrackers.trim());
      addMessage("Open Tracker list changed - torrent restart required to take effect");
      changed=true;
    }
  }
  if (changed) {
    saveConfig();
  }
 else {
    addMessage("Configuration unchanged");
  }
}
