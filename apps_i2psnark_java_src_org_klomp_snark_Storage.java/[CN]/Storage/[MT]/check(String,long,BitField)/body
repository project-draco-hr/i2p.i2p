{
  File base=new SecureFile(rootDir,filterName(metainfo.getName()));
  boolean useSavedBitField=savedTime > 0 && savedBitField != null;
  List<List<String>> files=metainfo.getFiles();
  if (files == null) {
    _util.debug("Creating/Checking file: " + base,Snark.NOTICE);
    if (!base.createNewFile() && !base.exists())     throw new IOException("Could not create file " + base);
    lengths=new long[1];
    rafs=new RandomAccessFile[1];
    names=new String[1];
    RAFlock=new Object[1];
    RAFtime=new long[1];
    RAFfile=new File[1];
    lengths[0]=metainfo.getTotalLength();
    RAFlock[0]=new Object();
    RAFfile[0]=base;
    if (useSavedBitField) {
      long lm=base.lastModified();
      if (lm <= 0 || lm > savedTime)       useSavedBitField=false;
    }
    names[0]=base.getName();
  }
 else {
    _util.debug("Creating/Checking directory: " + base,Snark.NOTICE);
    if (!base.mkdir() && !base.isDirectory())     throw new IOException("Could not create directory " + base);
    List<Long> ls=metainfo.getLengths();
    int size=files.size();
    long total=0;
    lengths=new long[size];
    rafs=new RandomAccessFile[size];
    names=new String[size];
    RAFlock=new Object[size];
    RAFtime=new long[size];
    RAFfile=new File[size];
    for (int i=0; i < size; i++) {
      List<String> path=files.get(i);
      File f=createFileFromNames(base,path);
      for (int j=0; j < i; j++) {
        if (f.equals(RAFfile[j])) {
          path=new ArrayList(path);
          int last=path.size() - 1;
          String lastPath=path.get(last);
          int dot=lastPath.lastIndexOf('.');
          if (dot >= 0)           lastPath=lastPath.substring(0,dot) + '_' + lastPath.substring(dot);
 else           lastPath='_' + lastPath;
          path.set(last,lastPath);
          f=createFileFromNames(base,path);
          j=0;
        }
      }
      lengths[i]=ls.get(i).longValue();
      RAFlock[i]=new Object();
      RAFfile[i]=f;
      total+=lengths[i];
      if (useSavedBitField) {
        long lm=f.lastModified();
        if (lm <= 0 || lm > savedTime)         useSavedBitField=false;
      }
      names[i]=f.getName();
    }
    long metalength=metainfo.getTotalLength();
    if (total != metalength)     throw new IOException("File lengths do not add up " + total + " != "+ metalength);
  }
  if (useSavedBitField) {
    bitfield=savedBitField;
    needed=metainfo.getPieces() - bitfield.count();
    _probablyComplete=complete();
    _util.debug("Found saved state and files unchanged, skipping check",Snark.NOTICE);
  }
 else {
    changed=true;
    checkCreateFiles(false);
  }
  if (complete()) {
    _util.debug("Torrent is complete",Snark.NOTICE);
  }
 else {
    if (files != null)     priorities=new int[files.size()];
    _util.debug("Still need " + needed + " out of "+ metainfo.getPieces()+ " pieces",Snark.NOTICE);
  }
}
