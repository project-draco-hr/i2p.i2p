{
  _checkProgress.set(0);
  boolean resume=false;
  _probablyComplete=true;
  int need=metainfo.getPieces();
  BitField bfield;
  if (recheck) {
    bfield=new BitField(need);
  }
 else {
    bfield=bitfield;
  }
  long lengthProgress=0;
  for (  TorrentFile tf : _torrentFiles) {
    long length=tf.RAFfile.length();
    lengthProgress+=tf.length;
    if (tf.RAFfile.exists() && length == tf.length) {
      if (listener != null)       listener.storageAllocated(this,length);
      _checkProgress.set(0);
      resume=true;
    }
 else     if (length == 0) {
      changed=true;
synchronized (tf) {
        allocateFile(tf);
        try {
          tf.closeRAF();
        }
 catch (        IOException ioe) {
        }
      }
      if (!resume)       _checkProgress.set((int)(pieces * lengthProgress / total_length));
    }
 else {
      String msg="File '" + tf.name + "' exists, but has wrong length (expected "+ tf.length+ " but found "+ length+ ") - repairing corruption";
      if (listener != null)       listener.addMessage(msg);
      _log.error(msg);
      changed=true;
      resume=true;
      _checkProgress.set(0);
      _probablyComplete=false;
synchronized (tf) {
        RandomAccessFile raf=tf.checkRAF();
        raf.setLength(tf.length);
        try {
          tf.closeRAF();
        }
 catch (        IOException ioe) {
        }
      }
    }
  }
  if (resume) {
    byte[] piece=new byte[piece_size];
    int file=0;
    long fileEnd=_torrentFiles.get(0).length;
    long pieceEnd=0;
    for (int i=0; i < pieces; i++) {
      _checkProgress.set(i);
      int length=getUncheckedPiece(i,piece);
      boolean correctHash=metainfo.checkPiece(i,piece,0,length);
      pieceEnd+=length;
      while (fileEnd <= pieceEnd) {
        TorrentFile tf=_torrentFiles.get(file);
synchronized (tf) {
          try {
            tf.closeRAF();
          }
 catch (          IOException ioe) {
          }
        }
        if (++file >= _torrentFiles.size())         break;
        fileEnd+=_torrentFiles.get(file).length;
      }
      if (correctHash) {
        bfield.set(i);
        need--;
      }
      if (listener != null)       listener.storageChecked(this,i,correctHash);
    }
  }
  _checkProgress.set(pieces);
  _probablyComplete=complete();
  needed=need;
  if (recheck && need > 0) {
synchronized (bitfield) {
      bitfield=bfield;
    }
  }
  if (listener != null) {
    listener.storageAllChecked(this);
    if (needed <= 0)     listener.storageCompleted(this);
  }
}
