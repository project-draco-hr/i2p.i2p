{
  StringBuilder buf=new StringBuilder(512);
  buf.append(tr.announce);
  if (tr.announce.contains("?"))   buf.append('&');
 else   buf.append('?');
  buf.append("info_hash=").append(infoHash).append("&peer_id=").append(peerID).append("&port=").append(port).append("&ip=").append(_util.getOurIPString()).append(".i2p").append("&uploaded=").append(uploaded).append("&downloaded=").append(downloaded).append("&left=");
  if (left >= 0)   buf.append(left);
 else   buf.append('1');
  buf.append("&compact=1");
  if (!event.equals(NO_EVENT))   buf.append("&event=").append(event);
  buf.append("&numwant=");
  if (left == 0 || event.equals(STOPPED_EVENT) || !coordinator.needPeers())   buf.append('0');
 else   buf.append(_util.getMaxConnections());
  String s=buf.toString();
  _util.debug("Sending TrackerClient request: " + s,Snark.INFO);
  tr.lastRequestTime=System.currentTimeMillis();
  File fetched=_util.get(s);
  if (fetched == null) {
    throw new IOException("Error fetching " + s);
  }
  InputStream in=null;
  try {
    in=new FileInputStream(fetched);
    TrackerInfo info=new TrackerInfo(in,snark.getID(),snark.getInfoHash(),snark.getMetaInfo());
    _util.debug("TrackerClient response: " + info,Snark.INFO);
    String failure=info.getFailureReason();
    if (failure != null)     throw new IOException(failure);
    tr.interval=info.getInterval() * 1000;
    return info;
  }
  finally {
    if (in != null)     try {
      in.close();
    }
 catch (    IOException ioe) {
    }
    fetched.delete();
  }
}
