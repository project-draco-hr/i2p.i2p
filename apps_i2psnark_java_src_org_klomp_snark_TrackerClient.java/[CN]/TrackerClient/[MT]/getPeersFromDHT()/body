{
  int rv=0;
  DHT dht=_util.getDHT();
  if (dht != null && (meta == null || !meta.isPrivate()) && (!stop) && (meta == null || _util.getContext().clock().now() > lastDHTAnnounce + MIN_DHT_ANNOUNCE_INTERVAL)) {
    int numwant;
    if (!coordinator.needOutboundPeers())     numwant=1;
 else     numwant=_util.getMaxConnections();
    Collection<Hash> hashes=dht.getPeersAndAnnounce(snark.getInfoHash(),numwant,5 * 60 * 1000,DHT_ANNOUNCE_PEERS,3 * 60 * 1000,coordinator.completed());
    if (!hashes.isEmpty()) {
      runStarted=true;
      lastDHTAnnounce=_util.getContext().clock().now();
      rv=hashes.size();
    }
 else {
      lastDHTAnnounce=0;
    }
    if (_log.shouldLog(Log.INFO))     _log.info("Got " + hashes + " from DHT");
    if ((!stop) && !hashes.isEmpty()) {
      List<Peer> peers=new ArrayList<Peer>(hashes.size());
      for (      Hash h : hashes) {
        try {
          PeerID pID=new PeerID(h.getData(),_util);
          peers.add(new Peer(pID,snark.getID(),snark.getInfoHash(),snark.getMetaInfo()));
        }
 catch (        InvalidBEncodingException ibe) {
        }
      }
      Random r=_util.getContext().random();
      Collections.shuffle(peers,r);
      Iterator<Peer> it=peers.iterator();
      while ((!stop) && it.hasNext() && coordinator.needOutboundPeers()) {
        Peer cur=it.next();
        if (coordinator.addPeer(cur) && it.hasNext()) {
          int delay=r.nextInt(DELAY_RAND) + DELAY_MIN;
          try {
            Thread.sleep(delay);
          }
 catch (          InterruptedException ie) {
          }
        }
      }
    }
  }
 else {
    if (_log.shouldLog(Log.INFO))     _log.info("Not getting DHT peers");
  }
  return rv;
}
