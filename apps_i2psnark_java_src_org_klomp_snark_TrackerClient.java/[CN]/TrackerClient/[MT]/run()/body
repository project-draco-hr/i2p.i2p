{
  String announce=meta.getAnnounce();
  String infoHash=urlencode(meta.getInfoHash());
  String peerID=urlencode(coordinator.getID());
  _log.debug("Announce: [" + meta.getAnnounce() + "] infoHash: "+ infoHash+ " xmitAnnounce: ["+ announce+ "]");
  long uploaded=coordinator.getUploaded();
  long downloaded=coordinator.getDownloaded();
  long left=coordinator.getLeft();
  boolean completed=(left == 0);
  try {
    if (!verifyConnected())     return;
    boolean started=false;
    while (!started) {
      try {
        TrackerInfo info=doRequest(announce,infoHash,peerID,uploaded,downloaded,left,STARTED_EVENT);
        Set peers=info.getPeers();
        coordinator.trackerSeenPeers=peers.size();
        if (!completed) {
          Iterator it=peers.iterator();
          while (it.hasNext()) {
            Peer cur=(Peer)it.next();
            coordinator.addPeer(cur);
            int delay=3000;
            int c=((int)cur.getPeerID().getAddress().calculateHash().toBase64().charAt(0)) % 10;
            try {
              Thread.sleep(delay * c);
            }
 catch (            InterruptedException ie) {
            }
          }
        }
        started=true;
        coordinator.trackerProblems=null;
      }
 catch (      IOException ioe) {
        Snark.debug("WARNING: Could not contact tracker at '" + announce + "': "+ ioe,Snark.WARNING);
        coordinator.trackerProblems=ioe.getMessage();
      }
      if (!started && !stop) {
        Snark.debug("         Retrying in one minute...",Snark.DEBUG);
        try {
          Thread.sleep(60 * 1000);
        }
 catch (        InterruptedException interrupt) {
        }
      }
    }
    Random r=new Random();
    while (!stop) {
      try {
        int delay=SLEEP * 60 * 1000 + r.nextInt(120 * 1000);
        Thread.sleep(delay);
      }
 catch (      InterruptedException interrupt) {
      }
      if (stop)       break;
      if (!verifyConnected())       return;
      uploaded=coordinator.getUploaded();
      downloaded=coordinator.getDownloaded();
      left=coordinator.getLeft();
      String event;
      if (!completed && left == 0) {
        completed=true;
        event=COMPLETED_EVENT;
      }
 else       event=NO_EVENT;
      if (event == COMPLETED_EVENT || coordinator.needPeers() || System.currentTimeMillis() > lastRequestTime + interval) {
        try {
          TrackerInfo info=doRequest(announce,infoHash,peerID,uploaded,downloaded,left,event);
          Set peers=info.getPeers();
          coordinator.trackerSeenPeers=peers.size();
          if ((left > 0) && (!completed)) {
            List ordered=new ArrayList(peers);
            Collections.shuffle(ordered);
            Iterator it=ordered.iterator();
            while (it.hasNext()) {
              Peer cur=(Peer)it.next();
              coordinator.addPeer(cur);
              int delay=3000;
              int c=((int)cur.getPeerID().getAddress().calculateHash().toBase64().charAt(0)) % 10;
              try {
                Thread.sleep(delay * c);
              }
 catch (              InterruptedException ie) {
              }
            }
          }
        }
 catch (        IOException ioe) {
          Snark.debug("WARNING: Could not contact tracker at '" + announce + "': "+ ioe,Snark.WARNING);
        }
      }
    }
  }
 catch (  Throwable t) {
    I2PSnarkUtil.instance().debug("TrackerClient: " + t,Snark.ERROR,t);
    if (t instanceof OutOfMemoryError)     throw (OutOfMemoryError)t;
  }
 finally {
    try {
      if (!verifyConnected())       return;
      TrackerInfo info=doRequest(announce,infoHash,peerID,uploaded,downloaded,left,STOPPED_EVENT);
    }
 catch (    IOException ioe) {
    }
  }
}
