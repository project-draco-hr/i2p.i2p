{
  if (!_isRunning)   return;
  long now=_context.clock().now();
  int torrentCount=0;
  int peerCount=0;
  for (Iterator<Peers> iter=_torrents.values().iterator(); iter.hasNext(); ) {
    Peers p=iter.next();
    int recent=0;
    for (Iterator<Peer> iterp=p.values().iterator(); iterp.hasNext(); ) {
      Peer peer=iterp.next();
      if (peer.lastSeen() < now - _expireTime)       iterp.remove();
 else {
        recent++;
        peerCount++;
      }
    }
    if (recent > MAX_PEERS_PER_TORRENT) {
      for (Iterator<Peer> iterp=p.values().iterator(); iterp.hasNext() && p.size() > MAX_PEERS_PER_TORRENT; ) {
        iterp.next();
        iterp.remove();
        peerCount--;
      }
      torrentCount++;
    }
 else     if (recent <= 0) {
      iter.remove();
    }
 else {
      torrentCount++;
    }
  }
  if (peerCount > MAX_PEERS)   _expireTime=Math.max(_expireTime - DELTA_EXPIRE_TIME,MIN_EXPIRE_TIME);
 else   _expireTime=Math.min(_expireTime + DELTA_EXPIRE_TIME,MAX_EXPIRE_TIME);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("DHT tracker cleaner done, now with " + torrentCount + " torrents, "+ peerCount+ " peers, "+ DataHelper.formatDuration(_expireTime)+ " expiration");
  _peerCount=peerCount;
  _torrentCount=torrentCount;
  schedule(CLEAN_TIME);
}
