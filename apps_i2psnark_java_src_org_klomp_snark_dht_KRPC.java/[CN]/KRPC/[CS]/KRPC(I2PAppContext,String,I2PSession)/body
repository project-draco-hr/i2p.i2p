{
  _context=ctx;
  _session=session;
  _log=ctx.logManager().getLog(KRPC.class);
  _tracker=new DHTTracker(ctx);
  _sentQueries=new ConcurrentHashMap<MsgID,ReplyWaiter>();
  _outgoingTokens=new ConcurrentHashMap<Token,NodeInfo>();
  _incomingTokens=new ConcurrentHashMap<NID,Token>();
  _blacklist=new ConcurrentHashSet<NID>();
  _qPort=TrackerClient.PORT + 10 + ctx.random().nextInt(65535 - 20 - TrackerClient.PORT);
  _rPort=_qPort + 1;
  if (SECURE_NID) {
    _myNID=NodeInfo.generateNID(session.getMyDestination().calculateHash(),_qPort,_context.random());
    _myID=_myNID.getData();
  }
 else {
    _myID=new byte[NID.HASH_LENGTH];
    ctx.random().nextBytes(_myID);
    _myNID=new NID(_myID);
  }
  _myNodeInfo=new NodeInfo(_myNID,session.getMyDestination(),_qPort);
  File conf=new File(ctx.getConfigDir(),baseName + ".config" + SnarkManager.CONFIG_DIR_SUFFIX);
  _dhtFile=new File(conf,"i2psnark" + DHT_FILE_SUFFIX);
  if (baseName.equals("i2psnark")) {
    _backupDhtFile=null;
  }
 else {
    File bconf=new File(ctx.getConfigDir(),"i2psnark.config" + SnarkManager.CONFIG_DIR_SUFFIX);
    _backupDhtFile=new File(bconf,"i2psnark" + DHT_FILE_SUFFIX);
  }
  _knownNodes=new DHTNodes(ctx,_myNID);
  start();
}
