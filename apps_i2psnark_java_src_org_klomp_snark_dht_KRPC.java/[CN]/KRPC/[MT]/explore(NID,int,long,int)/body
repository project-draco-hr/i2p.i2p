{
  List<NodeInfo> nodes=_knownNodes.findClosest(target,maxNodes);
  if (nodes.isEmpty()) {
    if (_log.shouldLog(Log.WARN))     _log.info("DHT is empty, cannot explore");
    return;
  }
  SortedSet<NodeInfo> toTry=new TreeSet(new NodeInfoComparator(target));
  toTry.addAll(nodes);
  Set<NodeInfo> tried=new HashSet();
  if (_log.shouldLog(Log.INFO))   _log.info("Starting explore of " + target);
  for (int i=0; i < maxNodes; i++) {
    if (!_isRunning)     break;
    NodeInfo nInfo;
    try {
      nInfo=toTry.first();
    }
 catch (    NoSuchElementException nsee) {
      break;
    }
    toTry.remove(nInfo);
    tried.add(nInfo);
    ReplyWaiter waiter=sendFindNode(nInfo,target);
    if (waiter == null)     continue;
synchronized (waiter) {
      try {
        waiter.wait(maxWait);
      }
 catch (      InterruptedException ie) {
      }
    }
    int replyType=waiter.getReplyCode();
    if (replyType == REPLY_NONE) {
      if (_log.shouldLog(Log.INFO))       _log.info("Got no reply");
    }
 else     if (replyType == REPLY_NODES) {
      List<NodeInfo> reply=(List<NodeInfo>)waiter.getReplyObject();
      if (_log.shouldLog(Log.INFO))       _log.info("Got " + reply.size() + " nodes");
      for (      NodeInfo ni : reply) {
        if (!(ni.equals(_myNodeInfo) || (toTry.contains(ni) && tried.contains(ni))))         toTry.add(ni);
      }
    }
 else {
      if (_log.shouldLog(Log.INFO))       _log.info("Got unexpected reply " + replyType + ": "+ waiter.getReplyObject());
    }
  }
  if (_log.shouldLog(Log.INFO))   _log.info("Finished explore of " + target);
}
