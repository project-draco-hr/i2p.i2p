{
  InputStream in=null;
  try {
    in=content.getInputStream();
  }
 catch (  IOException e) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Not found: " + content);
    response.sendError(404);
    return;
  }
  OutputStream out=null;
  try {
    out=response.getOutputStream();
  }
 catch (  IllegalStateException e) {
    out=new WriterOutputStream(response.getWriter());
  }
  long content_length=content.getContentLength();
  Enumeration<?> reqRanges=request.getHeaders("Range");
  if (reqRanges == null || !reqRanges.hasMoreElements()) {
    writeHeaders(response,content,content_length);
    if (content_length >= 0 && request.getMethod().equals("HEAD")) {
      if (_log.shouldLog(Log.INFO))       _log.info("HEAD: " + content);
    }
 else {
      copy(in,out);
    }
    return;
  }
  List<InclusiveByteRange> ranges=InclusiveByteRange.satisfiableRanges(reqRanges,content_length);
  if (ranges == null || ranges.size() != 1) {
    writeHeaders(response,content,content_length);
    response.setStatus(416);
    response.setHeader("Content-Range",InclusiveByteRange.to416HeaderRangeString(content_length));
    in.close();
    return;
  }
  InclusiveByteRange singleSatisfiableRange=ranges.get(0);
  long singleLength=singleSatisfiableRange.getSize(content_length);
  writeHeaders(response,content,singleLength);
  response.setStatus(206);
  response.setHeader("Content-Range",singleSatisfiableRange.toHeaderRangeString(content_length));
  copy(in,singleSatisfiableRange.getFirst(content_length),out,singleLength);
}
