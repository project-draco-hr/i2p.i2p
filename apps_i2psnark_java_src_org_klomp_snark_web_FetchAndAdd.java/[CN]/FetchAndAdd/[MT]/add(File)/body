{
  _mgr.addMessageNoEscape(_("Torrent fetched from {0}",urlify(_url)));
  FileInputStream in=null;
  try {
    in=new FileInputStream(file);
    byte[] fileInfoHash=new byte[20];
    String name=MetaInfo.getNameAndInfoHash(in,fileInfoHash);
    try {
      in.close();
    }
 catch (    IOException ioe) {
    }
    Snark snark=_mgr.getTorrentByInfoHash(fileInfoHash);
    if (snark != null) {
      _mgr.addMessage(_("Torrent with this info hash is already running: {0}",snark.getBaseName()));
      return;
    }
    String originalName=Storage.filterName(name);
    name=originalName + ".torrent";
    File torrentFile=new File(_mgr.getDataDir(),name);
    String canonical=torrentFile.getCanonicalPath();
    if (torrentFile.exists()) {
      if (_mgr.getTorrent(canonical) != null)       _mgr.addMessage(_("Torrent already running: {0}",name));
 else       _mgr.addMessage(_("Torrent already in the queue: {0}",name));
    }
 else {
      _mgr.copyAndAddTorrent(file,canonical);
      snark=_mgr.getTorrentByBaseName(originalName);
      if (snark != null)       snark.startTorrent();
 else       throw new IOException("Unknown error - check logs");
    }
  }
 catch (  IOException ioe) {
    _mgr.addMessageNoEscape(_("Torrent at {0} was not valid",urlify(_url)) + ": " + DataHelper.stripHTML(ioe.getMessage()));
  }
catch (  OutOfMemoryError oom) {
    _mgr.addMessageNoEscape(_("ERROR - Out of memory, cannot create torrent from {0}",urlify(_url)) + ": " + DataHelper.stripHTML(oom.getMessage()));
  }
 finally {
    try {
      if (in != null)       in.close();
    }
 catch (    IOException ioe) {
    }
  }
}
