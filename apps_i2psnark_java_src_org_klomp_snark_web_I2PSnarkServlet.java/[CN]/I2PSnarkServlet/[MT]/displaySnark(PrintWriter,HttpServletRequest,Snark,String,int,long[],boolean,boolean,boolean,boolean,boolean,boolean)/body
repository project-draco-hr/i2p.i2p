{
  long uploaded=snark.getUploaded();
  stats[0]+=snark.getDownloaded();
  stats[1]+=uploaded;
  long downBps=snark.getDownloadRate();
  long upBps=snark.getUploadRate();
  boolean isRunning=!snark.isStopped();
  if (isRunning) {
    stats[2]+=downBps;
    stats[3]+=upBps;
  }
  int curPeers=snark.getPeerCount();
  stats[4]+=curPeers;
  long total=snark.getTotalLength();
  if (total > 0)   stats[5]+=total;
  if (statsOnly)   return;
  String basename=snark.getBaseName();
  String fullBasename=basename;
  if (basename.length() > MAX_DISPLAYED_FILENAME_LENGTH) {
    String start=basename.substring(0,MAX_DISPLAYED_FILENAME_LENGTH);
    if (start.indexOf(" ") < 0 && start.indexOf("-") < 0) {
      basename=start + HELLIP;
    }
  }
  long remaining=snark.getRemainingLength();
  if (remaining > total)   remaining=total;
  long needed=snark.getNeededLength();
  if (needed > total)   needed=total;
  long remainingSeconds;
  if (downBps > 0 && needed > 0)   remainingSeconds=needed / downBps;
 else   remainingSeconds=-1;
  MetaInfo meta=snark.getMetaInfo();
  boolean isValid=meta != null;
  boolean isMultiFile=isValid && meta.getFiles() != null;
  String err=snark.getTrackerProblems();
  int knownPeers=Math.max(curPeers,snark.getTrackerSeenPeers());
  String rowClass=(row % 2 == 0 ? "snarkTorrentEven" : "snarkTorrentOdd");
  String statusString;
  if (snark.isChecking()) {
    statusString=toThemeImg("stalled","",_t("Checking")) + "</td>" + "<td class=\"snarkTorrentStatus\">"+ _t("Checking")+ ' '+ (new DecimalFormat("0.00%")).format(snark.getCheckingProgress());
  }
 else   if (snark.isAllocating()) {
    statusString=toThemeImg("stalled","",_t("Allocating")) + "</td>" + "<td class=\"snarkTorrentStatus\">"+ _t("Allocating");
  }
 else   if (err != null && isRunning && curPeers == 0) {
    statusString=toThemeImg("trackererror","",err) + "</td>" + "<td class=\"snarkTorrentStatus\">"+ _t("Tracker Error")+ ": "+ curPeers+ thinsp(noThinsp)+ ngettext("1 peer","{0} peers",knownPeers);
  }
 else   if (snark.isStarting()) {
    statusString=toThemeImg("stalled","",_t("Starting")) + "</td>" + "<td class=\"snarkTorrentStatus\">"+ _t("Starting");
  }
 else   if (remaining == 0 || needed == 0) {
    if (isRunning) {
      String img;
      String txt;
      if (remaining == 0) {
        img="seeding";
        txt=_t("Seeding");
      }
 else {
        img="complete";
        txt=_t("Complete");
      }
      if (curPeers > 0 && !showPeers)       statusString=toThemeImg(img,"",txt) + "</td>" + "<td class=\"snarkTorrentStatus\">"+ txt+ ": <a href=\""+ uri+ getQueryString(req,Base64.encode(snark.getInfoHash()),null,null)+ "\">"+ curPeers+ thinsp(noThinsp)+ ngettext("1 peer","{0} peers",knownPeers)+ "</a>";
 else       statusString=toThemeImg(img,"",txt) + "</td>" + "<td class=\"snarkTorrentStatus\">"+ txt+ ": "+ curPeers+ thinsp(noThinsp)+ ngettext("1 peer","{0} peers",knownPeers);
    }
 else {
      statusString=toThemeImg("complete","",_t("Complete")) + "</td>" + "<td class=\"snarkTorrentStatus\">"+ _t("Complete");
    }
  }
 else {
    if (isRunning && curPeers > 0 && downBps > 0 && !showPeers)     statusString=toThemeImg("downloading","",_t("OK")) + "</td>" + "<td class=\"snarkTorrentStatus\">"+ _t("OK")+ ": <a href=\""+ uri+ getQueryString(req,Base64.encode(snark.getInfoHash()),null,null)+ "\">"+ curPeers+ thinsp(noThinsp)+ ngettext("1 peer","{0} peers",knownPeers)+ "</a>";
 else     if (isRunning && curPeers > 0 && downBps > 0)     statusString=toThemeImg("downloading","",_t("OK")) + "</td>" + "<td class=\"snarkTorrentStatus\">"+ _t("OK")+ ": "+ curPeers+ thinsp(noThinsp)+ ngettext("1 peer","{0} peers",knownPeers);
 else     if (isRunning && curPeers > 0 && !showPeers)     statusString=toThemeImg("stalled","",_t("Stalled")) + "</td>" + "<td class=\"snarkTorrentStatus\">"+ _t("Stalled")+ ": <a href=\""+ uri+ getQueryString(req,Base64.encode(snark.getInfoHash()),null,null)+ "\">"+ curPeers+ thinsp(noThinsp)+ ngettext("1 peer","{0} peers",knownPeers)+ "</a>";
 else     if (isRunning && curPeers > 0)     statusString=toThemeImg("stalled","",_t("Stalled")) + "</td>" + "<td class=\"snarkTorrentStatus\">"+ _t("Stalled")+ ": "+ curPeers+ thinsp(noThinsp)+ ngettext("1 peer","{0} peers",knownPeers);
 else     if (isRunning && knownPeers > 0)     statusString=toThemeImg("nopeers","",_t("No Peers")) + "</td>" + "<td class=\"snarkTorrentStatus\">"+ _t("No Peers")+ ": 0"+ thinsp(noThinsp)+ knownPeers;
 else     if (isRunning)     statusString=toThemeImg("nopeers","",_t("No Peers")) + "</td>" + "<td class=\"snarkTorrentStatus\">"+ _t("No Peers");
 else     statusString=toThemeImg("stopped","",_t("Stopped")) + "</td>" + "<td class=\"snarkTorrentStatus\">"+ _t("Stopped");
  }
  out.write("<tr class=\"" + rowClass + "\">");
  out.write("<td class=\"center\">");
  out.write(statusString + "</td>\n\t");
  out.write("<td>");
  if (isValid) {
    String announce=meta.getAnnounce();
    if (announce == null)     announce=snark.getTrackerURL();
    if (announce != null) {
      String trackerLink=getTrackerLink(announce,snark.getInfoHash());
      if (trackerLink != null)       out.write(trackerLink);
    }
  }
  String encodedBaseName=encodePath(fullBasename);
  out.write("</td>\n<td>");
  if (isValid) {
    StringBuilder buf=new StringBuilder(128);
    buf.append("<a href=\"").append(encodedBaseName).append("/\" title=\"").append(_t("Torrent details")).append("\">");
    out.write(buf.toString());
  }
  String icon;
  if (isMultiFile)   icon="folder";
 else   if (isValid)   icon=toIcon(meta.getName());
 else   if (snark instanceof FetchAndAdd)   icon="basket_put";
 else   icon="magnet";
  if (isValid) {
    out.write(toImg(icon));
    out.write("</a>");
  }
 else {
    out.write(toImg(icon));
  }
  out.write("</td><td class=\"snarkTorrentName\"");
  if (isMultiFile) {
    out.write(" onclick=\"document.location='" + encodedBaseName + "/';\">");
  }
 else {
    out.write('>');
  }
  if (remaining == 0 || isMultiFile) {
    StringBuilder buf=new StringBuilder(128);
    buf.append("<a href=\"").append(encodedBaseName);
    if (isMultiFile)     buf.append('/');
    buf.append("\" title=\"");
    if (isMultiFile)     buf.append(_t("View files"));
 else     buf.append(_t("Open file"));
    buf.append("\">");
    out.write(buf.toString());
  }
  out.write(DataHelper.escapeHTML(basename));
  if (remaining == 0 || isMultiFile)   out.write("</a>");
  out.write("<td align=\"right\" class=\"snarkTorrentETA\">");
  if (isRunning && remainingSeconds > 0 && !snark.isChecking())   out.write(DataHelper.formatDuration2(Math.max(remainingSeconds,10) * 1000));
  out.write("</td>\n\t");
  out.write("<td align=\"right\" class=\"snarkTorrentDownloaded\">");
  if (remaining > 0)   out.write(formatSize(total - remaining) + thinsp(noThinsp) + formatSize(total));
 else   if (remaining == 0)   out.write(formatSize(total));
  out.write("</td>\n\t");
  out.write("<td align=\"right\" class=\"snarkTorrentUploaded\">");
  if (isValid) {
    if (showRatios) {
      if (total > 0) {
        double ratio=uploaded / ((double)total);
        out.write((new DecimalFormat("0.000")).format(ratio));
        out.write("&nbsp;x");
      }
    }
 else     if (uploaded > 0) {
      out.write(formatSize(uploaded));
    }
  }
  out.write("</td>\n\t");
  out.write("<td align=\"right\" class=\"snarkTorrentRateDown\">");
  if (isRunning && needed > 0)   out.write(formatSize(downBps) + "ps");
  out.write("</td>\n\t");
  out.write("<td align=\"right\" class=\"snarkTorrentRateUp\">");
  if (isRunning && isValid)   out.write(formatSize(upBps) + "ps");
  out.write("</td>\n\t");
  out.write("<td align=\"center\" class=\"snarkTorrentAction\">");
  String b64=Base64.encode(snark.getInfoHash());
  if (snark.isChecking()) {
  }
 else   if (isRunning) {
    if (isDegraded)     out.write("<a href=\"" + _contextPath + "/?action=Stop_"+ b64+ "&amp;nonce="+ _nonce+ getQueryString(req,"",null,null).replace("?","&amp;")+ "\"><img title=\"");
 else     out.write("<input type=\"image\" name=\"action_Stop_" + b64 + "\" value=\"foo\" title=\"");
    out.write(_t("Stop the torrent"));
    out.write("\" src=\"" + _imgPath + "stop.png\" alt=\"");
    out.write(_t("Stop"));
    out.write("\">");
    if (isDegraded)     out.write("</a>");
  }
 else   if (!snark.isStarting()) {
    if (!_manager.isStopping()) {
      if (noThinsp)       out.write("<a href=\"" + _contextPath + "/?action=Start_"+ b64+ "&amp;nonce="+ _nonce+ getQueryString(req,"",null,null).replace("?","&amp;")+ "\"><img title=\"");
 else       out.write("<input type=\"image\" name=\"action_Start_" + b64 + "\" value=\"foo\" title=\"");
      out.write(_t("Start the torrent"));
      out.write("\" src=\"" + _imgPath + "start.png\" alt=\"");
      out.write(_t("Start"));
      out.write("\">");
      if (isDegraded)       out.write("</a>");
    }
    if (isValid) {
      if (noThinsp)       out.write("<a href=\"" + _contextPath + "/?action=Remove_"+ b64+ "&amp;nonce="+ _nonce+ getQueryString(req,"",null,null).replace("?","&amp;")+ "\"><img title=\"");
 else       out.write("<input type=\"image\" name=\"action_Remove_" + b64 + "\" value=\"foo\" title=\"");
      out.write(_t("Remove the torrent from the active list, deleting the .torrent file"));
      out.write("\" onclick=\"if (!confirm('");
      out.write(_t("Are you sure you want to delete the file \\''{0}\\'' (downloaded data will not be deleted) ?",escapeJSString(snark.getName())));
      out.write("')) { return false; }\"");
      out.write(" src=\"" + _imgPath + "remove.png\" alt=\"");
      out.write(_t("Remove"));
      out.write("\">");
      if (isDegraded)       out.write("</a>");
    }
    if (noThinsp)     out.write("<a href=\"" + _contextPath + "/?action=Delete_"+ b64+ "&amp;nonce="+ _nonce+ getQueryString(req,"",null,null).replace("?","&amp;")+ "\"><img title=\"");
 else     out.write("<input type=\"image\" name=\"action_Delete_" + b64 + "\" value=\"foo\" title=\"");
    out.write(_t("Delete the .torrent file and the associated data file(s)"));
    out.write("\" onclick=\"if (!confirm('");
    out.write(_t("Are you sure you want to delete the torrent \\''{0}\\'' and all downloaded data?",escapeJSString(fullBasename)));
    out.write("')) { return false; }\"");
    out.write(" src=\"" + _imgPath + "delete.png\" alt=\"");
    out.write(_t("Delete"));
    out.write("\">");
    if (isDegraded)     out.write("</a>");
  }
  out.write("</td>\n</tr>\n");
  if (showPeers && isRunning && curPeers > 0) {
    List<Peer> peers=snark.getPeerList();
    if (!showDebug)     Collections.sort(peers,new PeerComparator());
    for (    Peer peer : peers) {
      if (!peer.isConnected())       continue;
      out.write("<tr class=\"" + rowClass + "\"><td></td>");
      out.write("<td colspan=\"4\" align=\"right\">");
      PeerID pid=peer.getPeerID();
      String ch=pid != null ? pid.toString().substring(0,4) : "????";
      String client;
      if ("AwMD".equals(ch))       client=_t("I2PSnark");
 else       if ("BFJT".equals(ch))       client="I2PRufus";
 else       if ("TTMt".equals(ch))       client="I2P-BT";
 else       if ("LUFa".equals(ch))       client="Vuze" + getAzVersion(pid.getID());
 else       if ("CwsL".equals(ch))       client="I2PSnarkXL";
 else       if ("ZV".equals(ch.substring(2,4)) || "VUZP".equals(ch))       client="Robert" + getRobtVersion(pid.getID());
 else       if (ch.startsWith("LV"))       client="Transmission" + getAzVersion(pid.getID());
 else       if ("LUtU".equals(ch))       client="KTorrent" + getAzVersion(pid.getID());
 else       client=_t("Unknown") + " (" + ch+ ')';
      out.write(client + "&nbsp;&nbsp;<tt>" + peer.toString().substring(5,9)+ "</tt>");
      if (showDebug)       out.write(" inactive " + (peer.getInactiveTime() / 1000) + "s");
      out.write("</td>\n\t");
      out.write("<td class=\"snarkTorrentStatus\">");
      out.write("</td>\n\t");
      out.write("<td align=\"right\" class=\"snarkTorrentStatus\">");
      float pct;
      if (isValid) {
        pct=(float)(100.0 * peer.completed() / meta.getPieces());
        if (pct >= 100.0)         out.write(_t("Seed"));
 else {
          String ps=String.valueOf(pct);
          if (ps.length() > 5)           ps=ps.substring(0,5);
          out.write(ps + "%");
        }
      }
 else {
        pct=(float)101.0;
      }
      out.write("</td>\n\t");
      out.write("<td class=\"snarkTorrentStatus\">");
      out.write("</td>\n\t");
      out.write("<td align=\"right\" class=\"snarkTorrentStatus\">");
      if (needed > 0) {
        if (peer.isInteresting() && !peer.isChoked()) {
          out.write("<span class=\"unchoked\">");
          out.write(formatSize(peer.getDownloadRate()) + "ps</span>");
        }
 else {
          out.write("<span class=\"choked\"><a title=\"");
          if (!peer.isInteresting())           out.write(_t("Uninteresting (The peer has no pieces we need)"));
 else           out.write(_t("Choked (The peer is not allowing us to request pieces)"));
          out.write("\">");
          out.write(formatSize(peer.getDownloadRate()) + "ps</a></span>");
        }
      }
 else       if (!isValid) {
        out.write("<span class=\"unchoked\">");
        out.write(formatSize(peer.getDownloadRate()) + "ps</span>");
      }
      out.write("</td>\n\t");
      out.write("<td align=\"right\" class=\"snarkTorrentStatus\">");
      if (isValid && pct < 100.0) {
        if (peer.isInterested() && !peer.isChoking()) {
          out.write("<span class=\"unchoked\">");
          out.write(formatSize(peer.getUploadRate()) + "ps</span>");
        }
 else {
          out.write("<span class=\"choked\"><a title=\"");
          if (!peer.isInterested())           out.write(_t("Uninterested (We have no pieces the peer needs)"));
 else           out.write(_t("Choking (We are not allowing the peer to request pieces)"));
          out.write("\">");
          out.write(formatSize(peer.getUploadRate()) + "ps</a></span>");
        }
      }
      out.write("</td>\n\t");
      out.write("<td class=\"snarkTorrentStatus\">");
      out.write("</td></tr>\n\t");
      if (showDebug)       out.write("<tr class=\"" + rowClass + "\"><td></td><td colspan=\"10\" align=\"right\">"+ peer.getSocket()+ "</td></tr>");
    }
  }
}
