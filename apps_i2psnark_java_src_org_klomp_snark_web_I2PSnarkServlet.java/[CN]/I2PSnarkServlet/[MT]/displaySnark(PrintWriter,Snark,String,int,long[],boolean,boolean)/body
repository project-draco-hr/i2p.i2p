{
  String filename=snark.torrent;
  File f=new File(filename);
  filename=f.getName();
  int i=filename.lastIndexOf(".torrent");
  if (i > 0)   filename=filename.substring(0,i);
  String fullFilename=filename;
  if (filename.length() > MAX_DISPLAYED_FILENAME_LENGTH) {
    fullFilename=new String(filename);
    filename=filename.substring(0,MAX_DISPLAYED_FILENAME_LENGTH) + "&hellip;";
  }
  long total=snark.meta.getTotalLength();
  long remaining=(long)snark.storage.needed() * (long)snark.meta.getPieceLength(0);
  if (remaining > total)   remaining=total;
  long downBps=0;
  long upBps=0;
  if (snark.coordinator != null) {
    downBps=snark.coordinator.getDownloadRate();
    upBps=snark.coordinator.getUploadRate();
  }
  long remainingSeconds;
  if (downBps > 0)   remainingSeconds=remaining / downBps;
 else   remainingSeconds=-1;
  boolean isRunning=!snark.stopped;
  long uploaded=0;
  if (snark.coordinator != null) {
    uploaded=snark.coordinator.getUploaded();
    stats[0]+=snark.coordinator.getDownloaded();
  }
  stats[1]+=uploaded;
  if (isRunning) {
    stats[2]+=downBps;
    stats[3]+=upBps;
  }
  stats[5]+=total;
  boolean isValid=snark.meta != null;
  boolean singleFile=snark.meta.getFiles() == null;
  String err=null;
  int curPeers=0;
  int knownPeers=0;
  if (snark.coordinator != null) {
    err=snark.coordinator.trackerProblems;
    curPeers=snark.coordinator.getPeerCount();
    stats[4]+=curPeers;
    knownPeers=Math.max(curPeers,snark.coordinator.trackerSeenPeers);
  }
  String statusString=_("Unknown");
  if (err != null) {
    if (isRunning && curPeers > 0 && !showPeers)     statusString="<img border=\"0\" src=\"/themes/snark/ubergine/images/trackererror.png\" title=\"" + _("Tracker Error") + "\"><a href=\""+ uri+ "?p="+ Base64.encode(snark.meta.getInfoHash())+ "\">"+ curPeers+ '/'+ ngettext("1 peer","{0} peers",knownPeers)+ "</a>";
 else     if (isRunning)     statusString="<img border=\"0\" src=\"/themes/snark/ubergine/images/trackererror.png\" title=\"" + _("Tracker Error") + "\">"+ curPeers+ '/'+ ngettext("1 peer","{0} peers",knownPeers)+ "</a>";
 else {
      if (err.length() > MAX_DISPLAYED_ERROR_LENGTH)       err=err.substring(0,MAX_DISPLAYED_ERROR_LENGTH) + "&hellip;";
      statusString="<img border=\"0\" src=\"/themes/snark/ubergine/images/trackererror.png\" title=\"" + _("Tracker Error") + "\">"+ err+ "</a>";
    }
  }
 else   if (remaining <= 0) {
    if (isRunning && curPeers > 0 && !showPeers)     statusString="<img border=\"0\" src=\"/themes/snark/ubergine/images/seeding.png\" title=\"" + _("Seeding") + "\">"+ "<a href=\""+ uri+ "?p="+ Base64.encode(snark.meta.getInfoHash())+ "\">"+ curPeers+ '/'+ ngettext("1 peer","{0} peers",knownPeers)+ "</a>";
 else     if (isRunning)     statusString="<img border=\"0\" src=\"/themes/snark/ubergine/images/seeding.png\" title=\"" + _("Seeding") + "\">"+ curPeers+ "/"+ ngettext("1 peer","{0} peers",knownPeers)+ "</a>";
 else     statusString="<img border=\"0\" src=\"/themes/snark/ubergine/images/complete.png\" title=\"" + _("Complete") + "\">"+ _("Not Seeding");
  }
 else {
    if (isRunning && curPeers > 0 && downBps > 0 && !showPeers)     statusString="<img border=\"0\" src=\"/themes/snark/ubergine/images/downloading.png\" title=\"" + _("Downloading") + "\">"+ "<a href=\""+ uri+ "?p="+ Base64.encode(snark.meta.getInfoHash())+ "\">"+ curPeers+ "/"+ ngettext("1 peer","{0} peers",knownPeers)+ "</a>";
 else     if (isRunning && curPeers > 0 && downBps > 0)     statusString="<img border=\"0\" src=\"/themes/snark/ubergine/images/downloading.png\" title=\"" + _("Downloading") + "\">"+ " ("+ curPeers+ "/"+ ngettext("1 peer","{0} peers",knownPeers);
 else     if (isRunning && curPeers > 0 && !showPeers)     statusString="<img border=\"0\" src=\"/themes/snark/ubergine/images/stalled.png\" title=\"" + _("Stalled") + "\">"+ "<a href=\""+ uri+ "?p="+ Base64.encode(snark.meta.getInfoHash())+ "\">"+ curPeers+ '/'+ ngettext("1 peer","{0} peers",knownPeers)+ "</a>";
 else     if (isRunning && curPeers > 0)     statusString="<img border=\"0\" src=\"/themes/snark/ubergine/images/stalled.png\" title=\"" + _("Stalled") + "\">"+ curPeers+ '/'+ ngettext("1 peer","{0} peers",knownPeers);
 else     if (isRunning)     statusString="<img border=\"0\" src=\"/themes/snark/ubergine/images/nopeers.png\" title=\"" + _("No Peers") + "\">"+ curPeers+ "/"+ ngettext("1 peer","{0} peers",knownPeers);
 else     statusString="<img border=\"0\" src=\"/themes/snark/ubergine/images/stopped.png\" title=\"" + _("Stopped") + "\">"+ _("Stopped");
  }
  String rowClass=(row % 2 == 0 ? "snarkTorrentEven" : "snarkTorrentOdd");
  out.write("<tr class=\"" + rowClass + "\">");
  out.write("<td align=\"center\" class=\"snarkTorrentStatus " + rowClass + "\">");
  out.write(statusString + "</td>\n\t");
  out.write("<td align=\"left\" class=\"snarkTorrentName " + rowClass + "\">");
  if (remaining == 0 || snark.meta.getFiles() != null) {
    out.write("<a href=\"" + snark.storage.getBaseName());
    if (snark.meta.getFiles() != null)     out.write("/");
    out.write("\" title=\"");
    if (snark.meta.getFiles() != null)     out.write(_("View files"));
 else     out.write(_("Open file"));
    out.write("\">");
  }
  String icon;
  if (snark.meta.getFiles() != null)   icon="folder";
 else   icon=toIcon(snark.meta.getName());
  out.write(toImg(icon));
  out.write(filename);
  if (remaining == 0 || snark.meta.getFiles() != null)   out.write("</a>");
  String announce=snark.meta.getAnnounce();
  if (announce.startsWith("http://YRgrgTLG") || announce.startsWith("http://8EoJZIKr") || announce.startsWith("http://lnQ6yoBT")|| announce.startsWith("http://tracker2.postman.i2p/")) {
    Map trackers=_manager.getTrackers();
    for (Iterator iter=trackers.entrySet().iterator(); iter.hasNext(); ) {
      Map.Entry entry=(Map.Entry)iter.next();
      String name=(String)entry.getKey();
      String baseURL=(String)entry.getValue();
      if (!(baseURL.startsWith(announce) || (announce.startsWith("http://lnQ6yoBT") && baseURL.startsWith("http://tracker2.postman.i2p/"))))       continue;
      int e=baseURL.indexOf('=');
      if (e < 0)       continue;
      baseURL=baseURL.substring(e + 1);
      out.write("&nbsp;<a href=\"" + baseURL + "details.php?dllist=1&filelist=1&info_hash=");
      out.write(TrackerClient.urlencode(snark.meta.getInfoHash()));
      out.write("\" title=\"" + name + _("Tracker")+ "\" target=\"_blank\">");
      out.write("<img border=\"0\" src=\"/themes/snark/ubergine/images/details.png\">");
      out.write("</a>");
      break;
    }
  }
  out.write("</td>\n\t");
  out.write("<td align=\"center\" class=\"snarkTorrentETA " + rowClass + "\">");
  if (isRunning && remainingSeconds > 0)   out.write(DataHelper.formatDuration(remainingSeconds * 1000));
  out.write("</td>\n\t");
  out.write("<td align=\"right\" class=\"snarkTorrentDownloaded " + rowClass + "\">");
  if (remaining > 0)   out.write("<i>" + formatSize(total - remaining) + "</i> /"+ formatSize(total));
 else   out.write(formatSize(total));
  out.write("</td>\n\t");
  out.write("<td align=\"right\" class=\"snarkTorrentUploaded " + rowClass + "\">"+ formatSize(uploaded)+ "</td>\n\t");
  out.write("<td align=\"right\" class=\"snarkTorrentRate\">");
  if (isRunning && remaining > 0)   out.write(formatSize(downBps) + "ps");
  out.write("</td>\n\t");
  out.write("<td align=\"right\" class=\"snarkTorrentRate\">");
  if (isRunning)   out.write(formatSize(upBps) + "ps");
  out.write("</td>\n\t");
  out.write("<td align=\"center\" class=\"snarkTorrentAction " + rowClass + "\">");
  String parameters="&nonce=" + _nonce + "&torrent="+ Base64.encode(snark.meta.getInfoHash());
  if (showPeers)   parameters=parameters + "&p=1";
  if (isRunning) {
    out.write("<a href=\"" + uri + "?action=Stop"+ parameters+ "\" title=\"");
    out.write(_("Stop the torrent"));
    out.write("\">");
    out.write("<img src=\"/themes/snark/ubergine/images/stop.png\" title=\"");
    out.write(_("Stop Torrent"));
    out.write("\" alt=\"");
    out.write(_("Stop"));
    out.write("\">");
    out.write("</a>");
  }
 else {
    if (isValid) {
      out.write("<a href=\"" + uri + "?action=Start"+ parameters+ "\" title=\"");
      out.write(_("Start the torrent"));
      out.write("\">");
      out.write("<img src=\"/themes/snark/ubergine/images/start.png\" title=\"");
      out.write(_("Start Torrent"));
      out.write("\" alt=\"");
      out.write(_("Start"));
      out.write("\">");
      out.write("</a>");
    }
    out.write("<a href=\"" + uri + "?action=Remove"+ parameters+ "\" title=\"");
    out.write(_("Remove the torrent from the active list, deleting the .torrent file"));
    out.write("\" onclick=\"if (!confirm('");
    out.write(_("Are you sure you want to delete the file \\''{0}.torrent\\'' (downloaded data will not be deleted) ?",fullFilename));
    out.write("')) { return false; }\">");
    out.write("<img src=\"/themes/snark/ubergine/images/remove.png\" title=\"");
    out.write(_("Remove Torrent"));
    out.write("\" alt=\"");
    out.write(_("Remove"));
    out.write("\">");
    out.write("</a>");
    out.write("<a href=\"" + uri + "?action=Delete"+ parameters+ "\" title=\"");
    out.write(_("Delete the .torrent file and the associated data file(s)"));
    out.write("\" onclick=\"if (!confirm('");
    out.write(_("Are you sure you want to delete the torrent \\''{0}\\'' and all downloaded data?",fullFilename));
    out.write("')) { return false; }\">");
    out.write("<img src=\"/themes/snark/ubergine/images/delete.png\" title=\"");
    out.write(_("Delete Torrent + Data"));
    out.write("\" alt=\"");
    out.write(_("Delete"));
    out.write("\">");
    out.write("</a>");
  }
  out.write("</td>\n</tr>\n");
  if (showPeers && isRunning && curPeers > 0) {
    List<Peer> peers=snark.coordinator.peerList();
    if (!showDebug)     Collections.sort(peers,new PeerComparator());
    for (    Peer peer : peers) {
      if (!peer.isConnected())       continue;
      out.write("<tr class=\"" + rowClass + "\">");
      out.write("<td align=\"center\" class=\"snarkTorrentStatus " + rowClass + "\">");
      out.write("</td>\n\t");
      out.write("<td align=\"right\" class=\"snarkTorrentStatus " + rowClass + "\">");
      String ch=peer.toString().substring(0,4);
      String client;
      if ("AwMD".equals(ch))       client=_("I2PSnark");
 else       if ("BFJT".equals(ch))       client="I2PRufus";
 else       if ("TTMt".equals(ch))       client="I2P-BT";
 else       if ("LUFa".equals(ch))       client="Azureus";
 else       if ("CwsL".equals(ch))       client="I2PSnarkXL";
 else       if ("ZV".equals(ch.substring(2,4)) || "VUZP".equals(ch))       client="Robert";
 else       if (ch.startsWith("LV"))       client="Transmission";
 else       client=_("Unknown") + " (" + ch+ ')';
      out.write(client + "&nbsp;&nbsp;<tt>" + peer.toString().substring(5,9)+ "</tt>");
      if (showDebug)       out.write(" inactive " + (peer.getInactiveTime() / 1000) + "s");
      out.write("</td>\n\t");
      out.write("<td class=\"snarkTorrentStatus " + rowClass + "\">");
      out.write("</td>\n\t");
      out.write("<td align=\"right\" class=\"snarkTorrentStatus " + rowClass + "\">");
      float pct=(float)(100.0 * (float)peer.completed() / snark.meta.getPieces());
      if (pct == 100.0)       out.write(_("Seed"));
 else {
        String ps=String.valueOf(pct);
        if (ps.length() > 5)         ps=ps.substring(0,5);
        out.write(ps + "%");
      }
      out.write("</td>\n\t");
      out.write("<td class=\"snarkTorrentStatus " + rowClass + "\">");
      out.write("</td>\n\t");
      out.write("<td align=\"right\" class=\"snarkTorrentStatus " + rowClass + "\">");
      if (remaining > 0) {
        if (peer.isInteresting() && !peer.isChoked()) {
          out.write("<font color=#00ff00>");
          out.write(formatSize(peer.getDownloadRate()) + "ps</font>");
        }
 else {
          out.write("<font color=#ff0000><a title=\"");
          if (!peer.isInteresting())           out.write(_("Uninteresting (The peer has no pieces we need)"));
 else           out.write(_("Choked (The peer is not allowing us to request pieces)"));
          out.write("\">");
          out.write(formatSize(peer.getDownloadRate()) + "ps</a></font>");
        }
      }
      out.write("</td>\n\t");
      out.write("<td align=\"right\" class=\"snarkTorrentStatus " + rowClass + "\">");
      if (pct != 100.0) {
        if (peer.isInterested() && !peer.isChoking()) {
          out.write("<font color=#00ff00>");
          out.write(formatSize(peer.getUploadRate()) + "ps</font>");
        }
 else {
          out.write("<font color=#ff0000><a title=\"");
          if (!peer.isInterested())           out.write(_("Uninterested (We have no pieces the peer needs)"));
 else           out.write(_("Choking (We are not allowing the peer to request pieces)"));
          out.write("\">");
          out.write(formatSize(peer.getUploadRate()) + "ps</a></font>");
        }
      }
      out.write("</td>\n\t");
      out.write("<td class=\"snarkTorrentStatus " + rowClass + "\">");
      out.write("</td></tr>\n\t");
      if (showDebug)       out.write("<tr><td colspan=\"8\" align=\"right\" class=\"snarkTorrentStatus " + rowClass + "\">"+ peer.getSocket()+ "</td></tr>");
    }
  }
}
