{
  String decodedBase=decodePath(base);
  String title=decodedBase;
  String cpath=_contextPath + '/';
  if (title.startsWith(cpath))   title=title.substring(cpath.length());
  String torrentName;
  String pathInTorrent;
  int slash=title.indexOf('/');
  if (slash > 0) {
    torrentName=title.substring(0,slash);
    pathInTorrent=title.substring(slash);
  }
 else {
    torrentName=title;
    pathInTorrent="/";
  }
  Snark snark=_manager.getTorrentByBaseName(torrentName);
  if (snark != null && postParams != null) {
    String[] val=postParams.get("nonce");
    if (val != null) {
      String nonce=val[0];
      if (String.valueOf(_nonce).equals(nonce))       savePriorities(snark,postParams);
 else       _manager.addMessage("Please retry form submission (bad nonce)");
    }
    return null;
  }
  File r;
  if (snark != null) {
    Storage storage=snark.getStorage();
    if (storage != null) {
      File sbase=storage.getBase();
      if (pathInTorrent.equals("/"))       r=sbase;
 else       r=new File(sbase,pathInTorrent);
    }
 else {
      r=new File("");
    }
  }
 else {
    r=new File("");
  }
  boolean showPriority=snark != null && snark.getStorage() != null && !snark.getStorage().complete() && r.isDirectory();
  StringBuilder buf=new StringBuilder(4096);
  buf.append(DOCTYPE).append("<HTML><HEAD><TITLE>");
  if (title.endsWith("/"))   title=title.substring(0,title.length() - 1);
  String directory=title;
  title=_("Torrent") + ": " + DataHelper.escapeHTML(title);
  buf.append(title);
  buf.append("</TITLE>\n").append(HEADER_A).append(_themePath).append(HEADER_B).append("<link rel=\"shortcut icon\" href=\"" + _themePath + "favicon.ico\">\n");
  if (showPriority)   buf.append("<script src=\"").append(_contextPath).append(WARBASE + "js/folder.js\" type=\"text/javascript\"></script>\n");
  buf.append("</HEAD><BODY");
  if (showPriority)   buf.append(" onload=\"setupbuttons()\"");
  buf.append(">\n<center><div class=\"snarknavbar\"><a href=\"").append(_contextPath).append("/\" title=\"Torrents\"");
  buf.append(" class=\"snarkRefresh\">");
  toThemeImg(buf,"arrow_refresh");
  buf.append("&nbsp;&nbsp;");
  if (_contextName.equals(DEFAULT_NAME))   buf.append(_("I2PSnark"));
 else   buf.append(_contextName);
  buf.append("</a></div></center>\n");
  if (parent)   buf.append("<div class=\"page\"><div class=\"mainsection\">");
  if (showPriority) {
    buf.append("<form action=\"").append(base).append("\" method=\"POST\">\n");
    buf.append("<input type=\"hidden\" name=\"nonce\" value=\"").append(_nonce).append("\" >\n");
    if (sortParam != null) {
      buf.append("<input type=\"hidden\" name=\"sort\" value=\"").append(DataHelper.stripHTML(sortParam)).append("\" >\n");
    }
  }
  if (snark != null) {
    buf.append("<table class=\"snarkTorrentInfo\">\n");
    buf.append("<tr><th><b>").append(_("Torrent")).append(":</b> ").append(DataHelper.escapeHTML(snark.getBaseName())).append("</th></tr>\n");
    String fullPath=snark.getName();
    String baseName=encodePath((new File(fullPath)).getName());
    buf.append("<tr><td>");
    toThemeImg(buf,"file");
    buf.append("&nbsp;<b>").append(_("Torrent file")).append(":</b> <a href=\"").append(_contextPath).append('/').append(baseName).append("\">").append(DataHelper.escapeHTML(fullPath)).append("</a></td></tr>\n");
    if (snark.getStorage() != null) {
      buf.append("<tr><td>");
      toThemeImg(buf,"file");
      buf.append("&nbsp;<b>").append(_("Data location")).append(":</b> ").append(DataHelper.escapeHTML(snark.getStorage().getBase().getPath())).append("</td></tr>\n");
    }
    String hex=I2PSnarkUtil.toHex(snark.getInfoHash());
    buf.append("<tr><td>");
    toThemeImg(buf,"details");
    buf.append("&nbsp;<b>").append(_("Info hash")).append(":</b> ").append(hex.toUpperCase(Locale.US)).append("</td></tr>\n");
    String announce=null;
    MetaInfo meta=snark.getMetaInfo();
    if (meta != null) {
      announce=meta.getAnnounce();
      if (announce == null)       announce=snark.getTrackerURL();
      if (announce != null) {
        announce=DataHelper.stripHTML(announce);
        buf.append("<tr><td>");
        String trackerLink=getTrackerLink(announce,snark.getInfoHash());
        if (trackerLink != null)         buf.append(trackerLink);
 else         toThemeImg(buf,"details");
        buf.append(" <b>").append(_("Primary Tracker")).append(":</b> ");
        buf.append(getShortTrackerLink(announce,snark.getInfoHash()));
        buf.append("</td></tr>");
      }
      List<List<String>> alist=meta.getAnnounceList();
      if (alist != null) {
        buf.append("<tr><td>");
        toThemeImg(buf,"details");
        buf.append(" <b>").append(_("Tracker List")).append(":</b> ");
        for (        List<String> alist2 : alist) {
          buf.append('[');
          boolean more=false;
          for (          String s : alist2) {
            if (more)             buf.append(' ');
 else             more=true;
            buf.append(getShortTrackerLink(DataHelper.stripHTML(s),snark.getInfoHash()));
          }
          buf.append("] ");
        }
        buf.append("</td></tr>");
      }
    }
    if (meta != null) {
      String com=meta.getComment();
      if (com != null) {
        if (com.length() > 1024)         com=com.substring(0,1024);
        buf.append("<tr><td>");
        toThemeImg(buf,"details");
        buf.append(" <b>").append(_("Comment")).append(":</b> ").append(DataHelper.stripHTML(com)).append("</td></tr>\n");
      }
      long dat=meta.getCreationDate();
      SimpleDateFormat fmt=new SimpleDateFormat("yyyy-MM-dd HH:mm");
      String systemTimeZone=_context.getProperty("i2p.systemTimeZone");
      if (systemTimeZone != null)       fmt.setTimeZone(TimeZone.getTimeZone(systemTimeZone));
      if (dat > 0) {
        String date=fmt.format(new Date(dat));
        buf.append("<tr><td>");
        toThemeImg(buf,"details");
        buf.append(" <b>").append(_("Created")).append(":</b> ").append(date).append("</td></tr>\n");
      }
      String cby=meta.getCreatedBy();
      if (cby != null) {
        if (cby.length() > 128)         cby=com.substring(0,128);
        buf.append("<tr><td>");
        toThemeImg(buf,"details");
        buf.append(" <b>").append(_("Created By")).append(":</b> ").append(DataHelper.stripHTML(cby)).append("</td></tr>\n");
      }
      long[] dates=_manager.getSavedAddedAndCompleted(snark);
      if (dates[0] > 0) {
        String date=fmt.format(new Date(dates[0]));
        buf.append("<tr><td>");
        toThemeImg(buf,"details");
        buf.append(" <b>").append(_("Added")).append(":</b> ").append(date).append("</td></tr>\n");
      }
      if (dates[1] > 0) {
        String date=fmt.format(new Date(dates[1]));
        buf.append("<tr><td>");
        toThemeImg(buf,"details");
        buf.append(" <b>").append(_("Completed")).append(":</b> ").append(date).append("</td></tr>\n");
      }
    }
    if (meta == null || !meta.isPrivate()) {
      buf.append("<tr><td><a href=\"").append(MagnetURI.MAGNET_FULL).append(hex);
      if (announce != null)       buf.append("&amp;tr=").append(announce);
      buf.append("\">").append(toImg("magnet",_("Magnet link"))).append("</a> <b>Magnet:</b> <a href=\"").append(MagnetURI.MAGNET_FULL).append(hex);
      if (announce != null)       buf.append("&amp;tr=").append(announce);
      buf.append("\">").append(MagnetURI.MAGNET_FULL).append(hex);
      if (announce != null)       buf.append("&amp;tr=").append(announce);
      buf.append("</a>").append("</td></tr>\n");
    }
 else {
      buf.append("<tr><td>").append(_("Private torrent")).append("</td></tr>\n");
    }
    buf.append("<tr><td>");
    toThemeImg(buf,"size");
    buf.append("&nbsp;<b>").append(_("Size")).append(":</b> ").append(formatSize(snark.getTotalLength()));
    int pieces=snark.getPieces();
    double completion=(pieces - snark.getNeeded()) / (double)pieces;
    buf.append("&nbsp;");
    toThemeImg(buf,"head_rx");
    buf.append("&nbsp;<b>");
    if (completion < 1.0)     buf.append(_("Completion")).append(":</b> ").append((new DecimalFormat("0.00%")).format(completion));
 else     buf.append(_("Complete")).append("</b>");
    buf.append("&nbsp;");
    toThemeImg(buf,"head_tx");
    buf.append("&nbsp;<b>").append(_("Upload ratio")).append(":</b> ");
    long uploaded=snark.getUploaded();
    if (uploaded > 0) {
      double ratio=uploaded / ((double)snark.getTotalLength());
      buf.append((new DecimalFormat("0.000")).format(ratio));
      buf.append("&nbsp;x");
    }
 else {
      buf.append('0');
    }
    long needed=snark.getNeededLength();
    if (needed < 0) {
      needed=snark.getRemainingLength();
    }
    if (needed > 0) {
      buf.append("&nbsp;");
      toThemeImg(buf,"head_rx");
      buf.append("&nbsp;<b>").append(_("Remaining")).append(":</b> ").append(formatSize(needed));
    }
    if (meta != null) {
      List<List<String>> files=meta.getFiles();
      int fileCount=files != null ? files.size() : 1;
      buf.append("&nbsp;");
      toThemeImg(buf,"file");
      buf.append("&nbsp;<b>").append(_("Files")).append(":</b> ").append(fileCount);
    }
    buf.append("&nbsp;");
    toThemeImg(buf,"file");
    buf.append("&nbsp;<b>").append(_("Pieces")).append(":</b> ").append(pieces);
    buf.append("&nbsp;");
    toThemeImg(buf,"file");
    buf.append("&nbsp;<b>").append(_("Piece size")).append(":</b> ").append(formatSize(snark.getPieceLength(0))).append("</td></tr>\n");
  }
 else {
    buf.append("<tr><th>Not found<br>resource=\"").append(r.toString()).append("\"<br>base=\"").append(base).append("\"<br>torrent=\"").append(torrentName).append("\"</th></tr>\n");
  }
  buf.append("</table>\n");
  if (snark != null && !r.exists()) {
    buf.append("<p>Does not exist<br>resource=\"").append(r.toString()).append("\"<br>base=\"").append(base).append("\"<br>torrent=\"").append(torrentName).append("\"</p></div></div></BODY></HTML>");
    return buf.toString();
  }
  File[] ls=null;
  if (r.isDirectory()) {
    ls=r.listFiles();
  }
  if (ls == null) {
    buf.append("</div></div></BODY></HTML>");
    return buf.toString();
  }
  Storage storage=snark != null ? snark.getStorage() : null;
  List<Sorters.FileAndIndex> fileList=new ArrayList<Sorters.FileAndIndex>(ls.length);
  for (int i=0; i < ls.length; i++) {
    fileList.add(new Sorters.FileAndIndex(ls[i],storage));
  }
  boolean showSort=fileList.size() > 1;
  if (showSort) {
    int sort=0;
    if (sortParam != null) {
      try {
        sort=Integer.parseInt(sortParam);
      }
 catch (      NumberFormatException nfe) {
      }
    }
    Collections.sort(fileList,Sorters.getFileComparator(sort,this));
  }
  buf.append("<table class=\"snarkDirInfo\"><thead>\n");
  buf.append("<tr>\n").append("<th colspan=2>");
  String tx=_("Directory");
  String sort;
  boolean isTypeSort=false;
  if (showSort) {
    if (sortParam == null || "0".equals(sortParam) || "1".equals(sortParam)) {
      sort="-1";
    }
 else     if ("-1".equals(sortParam)) {
      sort="12";
      isTypeSort=true;
    }
 else     if ("12".equals(sortParam)) {
      sort="-12";
      isTypeSort=true;
    }
 else {
      sort="";
    }
    buf.append("<a href=\"").append(base).append(getQueryString(sort)).append("\">");
  }
  toThemeImg(buf,"file",tx,showSort ? _("Sort by {0}",(isTypeSort ? _("File type") : _("Name"))) : tx + ": " + directory);
  if (showSort)   buf.append("</a>");
  int dirSlash=directory.indexOf("/");
  if (dirSlash > 0) {
    buf.append("&nbsp;");
    buf.append(DataHelper.escapeHTML(directory.substring(dirSlash + 1)));
  }
  buf.append("</th>\n<th align=\"right\">");
  if (showSort) {
    sort=("5".equals(sortParam)) ? "-5" : "5";
    buf.append("<a href=\"").append(base).append(getQueryString(sort)).append("\">");
  }
  tx=_("Size");
  toThemeImg(buf,"size",tx,showSort ? _("Sort by {0}",tx) : tx);
  if (showSort)   buf.append("</a>");
  buf.append("</th>\n<th class=\"headerstatus\">");
  boolean showRemainingSort=showSort && showPriority;
  if (showRemainingSort) {
    sort=("10".equals(sortParam)) ? "-10" : "10";
    buf.append("<a href=\"").append(base).append(getQueryString(sort)).append("\">");
  }
  tx=_("Status");
  toThemeImg(buf,"status",tx,showRemainingSort ? _("Sort by {0}",_("Remaining")) : tx);
  if (showRemainingSort)   buf.append("</a>");
  if (showPriority) {
    buf.append("</th>\n<th class=\"headerpriority\">");
    if (showSort) {
      sort=("13".equals(sortParam)) ? "-13" : "13";
      buf.append("<a href=\"").append(base).append(getQueryString(sort)).append("\">");
    }
    tx=_("Priority");
    toThemeImg(buf,"priority",tx,showSort ? _("Sort by {0}",tx) : tx);
    if (showSort)     buf.append("</a>");
  }
  buf.append("</th>\n</tr>\n</thead>\n");
  buf.append("<tr><td colspan=\"" + (showPriority ? '5' : '4') + "\" class=\"ParentDir\"><A HREF=\"");
  URIUtil.encodePath(buf,addPaths(decodedBase,"../"));
  buf.append("\">");
  toThemeImg(buf,"up");
  buf.append(' ').append(_("Up to higher level directory")).append("</A></td></tr>\n");
  boolean showSaveButton=false;
  boolean rowEven=true;
  for (  Sorters.FileAndIndex fai : fileList) {
    File item=fai.file;
    String rowClass=(rowEven ? "snarkTorrentEven" : "snarkTorrentOdd");
    rowEven=!rowEven;
    buf.append("<TR class=\"").append(rowClass).append("\">");
    boolean complete=false;
    String status="";
    long length=item.length();
    int fileIndex=fai.index;
    int priority=0;
    if (fai.isDirectory) {
      complete=true;
    }
 else {
      if (snark == null || snark.getStorage() == null) {
        complete=true;
        status=toImg("cancel") + ' ' + _("Torrent not found?");
      }
 else {
        long remaining=fai.remaining;
        if (remaining < 0) {
          complete=true;
          status=toImg("cancel") + ' ' + _("File not found in torrent?");
        }
 else         if (remaining == 0 || length <= 0) {
          complete=true;
          status=toImg("tick") + ' ' + _("Complete");
        }
 else {
          priority=fai.priority;
          if (priority < 0)           status=toImg("cancel");
 else           if (priority == 0)           status=toImg("clock");
 else           status=toImg("clock_red");
          status+=" " + (100 * (length - remaining) / length) + "% "+ _("complete")+ " ("+ DataHelper.formatSize2(remaining)+ "B "+ _("remaining")+ ")";
        }
      }
    }
    String path=addPaths(decodedBase,item.getName());
    if (item.isDirectory() && !path.endsWith("/"))     path=addPaths(path,"/");
    path=encodePath(path);
    String icon=toIcon(item);
    buf.append("<TD class=\"snarkFileIcon\">");
    if (complete) {
      buf.append("<a href=\"").append(path).append("\">");
      String plc=item.toString().toLowerCase(Locale.US);
      if (plc.endsWith(".jpg") || plc.endsWith(".jpeg") || plc.endsWith(".png")|| plc.endsWith(".gif")|| plc.endsWith(".ico")) {
        buf.append("<img alt=\"\" border=\"0\" class=\"thumb\" src=\"").append(path).append("\"></a>");
      }
 else {
        buf.append(toImg(icon,_("Open"))).append("</a>");
      }
    }
 else {
      buf.append(toImg(icon));
    }
    buf.append("</TD><TD class=\"snarkFileName\">");
    if (complete)     buf.append("<a href=\"").append(path).append("\">");
    buf.append(DataHelper.escapeHTML(item.getName()));
    if (complete)     buf.append("</a>");
    buf.append("</TD><TD ALIGN=right class=\"snarkFileSize\">");
    if (!item.isDirectory())     buf.append(DataHelper.formatSize2(length)).append('B');
    buf.append("</TD><TD class=\"snarkFileStatus\">");
    buf.append(status);
    buf.append("</TD>");
    if (showPriority) {
      buf.append("<td class=\"priority\">");
      if ((!complete) && (!item.isDirectory())) {
        buf.append("\n<input type=\"radio\" onclick=\"priorityclicked();\" class=\"prihigh\" value=\"5\" name=\"pri.").append(fileIndex).append("\" ");
        if (priority > 0)         buf.append("checked=\"checked\"");
        buf.append('>').append(_("High"));
        buf.append("\n<input type=\"radio\" onclick=\"priorityclicked();\" class=\"prinorm\" value=\"0\" name=\"pri.").append(fileIndex).append("\" ");
        if (priority == 0)         buf.append("checked=\"checked\"");
        buf.append('>').append(_("Normal"));
        buf.append("\n<input type=\"radio\" onclick=\"priorityclicked();\" class=\"priskip\" value=\"-9\" name=\"pri.").append(fileIndex).append("\" ");
        if (priority < 0)         buf.append("checked=\"checked\"");
        buf.append('>').append(_("Skip"));
        showSaveButton=true;
      }
      buf.append("</td>");
    }
    buf.append("</TR>\n");
  }
  if (showSaveButton) {
    buf.append("<thead><tr><th colspan=\"4\">&nbsp;</th><th class=\"headerpriority\">" + "<a class=\"control\" id=\"setallhigh\" href=\"javascript:void(null);\" onclick=\"setallhigh();\">").append(toImg("clock_red")).append(_("Set all high")).append("</a>\n" + "<a class=\"control\" id=\"setallnorm\" href=\"javascript:void(null);\" onclick=\"setallnorm();\">").append(toImg("clock")).append(_("Set all normal")).append("</a>\n" + "<a class=\"control\" id=\"setallskip\" href=\"javascript:void(null);\" onclick=\"setallskip();\">").append(toImg("cancel")).append(_("Skip all")).append("</a>\n" + "<br><br><input type=\"submit\" class=\"accept\" value=\"").append(_("Save priorities")).append("\" name=\"savepri\" >\n" + "</th></tr></thead>\n");
  }
  buf.append("</table>\n");
  if (showPriority)   buf.append("</form>");
  buf.append("</div></div></BODY></HTML>\n");
  return buf.toString();
}
