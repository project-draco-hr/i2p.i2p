{
  String action=req.getParameter("action");
  if (action == null) {
    Map params=req.getParameterMap();
    for (    Object o : params.keySet()) {
      String key=(String)o;
      if (key.startsWith("action_") && key.endsWith(".x")) {
        action=key.substring(0,key.length() - 2).substring(7);
        break;
      }
    }
    if (action == null) {
      _manager.addMessage("No action specified");
      return;
    }
  }
  if ("Add".equals(action)) {
    String newURL=req.getParameter("newURL");
    if (newURL != null) {
      if (newURL.startsWith("http://")) {
        FetchAndAdd fetch=new FetchAndAdd(_context,_manager,newURL);
        _manager.addDownloader(fetch);
      }
 else       if (newURL.startsWith(MAGNET) || newURL.startsWith(MAGGOT)) {
        addMagnet(newURL);
      }
 else       if (newURL.length() == 40 && newURL.replaceAll("[a-fA-F0-9]","").length() == 0) {
        addMagnet(MAGNET_FULL + newURL);
      }
 else {
        _manager.addMessage(_("Invalid URL: Must start with \"http://\", \"{0}\", or \"{1}\"",MAGNET,MAGGOT));
      }
    }
 else {
    }
  }
 else   if (action.startsWith("Stop_")) {
    String torrent=action.substring(5);
    if (torrent != null) {
      byte infoHash[]=Base64.decode(torrent);
      if ((infoHash != null) && (infoHash.length == 20)) {
        for (Iterator iter=_manager.listTorrentFiles().iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          Snark snark=_manager.getTorrent(name);
          if ((snark != null) && (DataHelper.eq(infoHash,snark.getInfoHash()))) {
            _manager.stopTorrent(snark,false);
            break;
          }
        }
      }
    }
  }
 else   if (action.startsWith("Start_")) {
    String torrent=action.substring(6);
    if (torrent != null) {
      byte infoHash[]=Base64.decode(torrent);
      if ((infoHash != null) && (infoHash.length == 20)) {
        for (        String name : _manager.listTorrentFiles()) {
          Snark snark=_manager.getTorrent(name);
          if ((snark != null) && (DataHelper.eq(infoHash,snark.getInfoHash()))) {
            snark.startTorrent();
            _manager.addMessage(_("Starting up torrent {0}",snark.getBaseName()));
            break;
          }
        }
      }
    }
  }
 else   if (action.startsWith("Remove_")) {
    String torrent=action.substring(7);
    if (torrent != null) {
      byte infoHash[]=Base64.decode(torrent);
      if ((infoHash != null) && (infoHash.length == 20)) {
        for (Iterator iter=_manager.listTorrentFiles().iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          Snark snark=_manager.getTorrent(name);
          if ((snark != null) && (DataHelper.eq(infoHash,snark.getInfoHash()))) {
            MetaInfo meta=snark.getMetaInfo();
            if (meta == null) {
              _manager.deleteMagnet(snark);
              _manager.addMessage(_("Magnet deleted: {0}",name));
              return;
            }
            _manager.stopTorrent(snark,true);
            File f=new File(name);
            f.delete();
            _manager.addMessage(_("Torrent file deleted: {0}",f.getAbsolutePath()));
            break;
          }
        }
      }
    }
  }
 else   if (action.startsWith("Delete_")) {
    String torrent=action.substring(7);
    if (torrent != null) {
      byte infoHash[]=Base64.decode(torrent);
      if ((infoHash != null) && (infoHash.length == 20)) {
        for (Iterator iter=_manager.listTorrentFiles().iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          Snark snark=_manager.getTorrent(name);
          if ((snark != null) && (DataHelper.eq(infoHash,snark.getInfoHash()))) {
            MetaInfo meta=snark.getMetaInfo();
            if (meta == null) {
              _manager.deleteMagnet(snark);
              _manager.addMessage(_("Magnet deleted: {0}",name));
              return;
            }
            _manager.stopTorrent(snark,true);
            File f=new File(name);
            f.delete();
            _manager.addMessage(_("Torrent file deleted: {0}",f.getAbsolutePath()));
            List<List<String>> files=meta.getFiles();
            String dataFile=snark.getBaseName();
            f=new File(_manager.getDataDir(),dataFile);
            if (files == null) {
              if (f.delete())               _manager.addMessage(_("Data file deleted: {0}",f.getAbsolutePath()));
 else               _manager.addMessage(_("Data file could not be deleted: {0}",f.getAbsolutePath()));
              break;
            }
            for (int i=0; i < files.size(); i++) {
              File df=Storage.getFileFromNames(f,files.get(i));
              if (df.delete())               _manager.addMessage(_("Data file deleted: {0}",df.getAbsolutePath()));
 else               _manager.addMessage(_("Data file could not be deleted: {0}",df.getAbsolutePath()));
            }
            Set<File> dirs=new TreeSet(Collections.reverseOrder());
            for (            List<String> list : files) {
              for (int i=1; i < list.size(); i++) {
                dirs.add(Storage.getFileFromNames(f,list.subList(0,i)));
              }
            }
            for (            File df : dirs) {
              if (df.delete()) {
                _manager.addMessage(_("Data dir deleted: {0}",df.getAbsolutePath()));
              }
 else               if (_log.shouldLog(Log.WARN)) {
                _log.warn("Could not delete dir " + df);
              }
            }
            if (f.delete()) {
              _manager.addMessage(_("Data dir deleted: {0}",f.getAbsolutePath()));
            }
 else             if (_log.shouldLog(Log.WARN)) {
              _log.warn("Could not delete dir " + f);
            }
            break;
          }
        }
      }
    }
  }
 else   if ("Save".equals(action)) {
    String dataDir=req.getParameter("dataDir");
    boolean filesPublic=req.getParameter("filesPublic") != null;
    boolean autoStart=req.getParameter("autoStart") != null;
    String seedPct=req.getParameter("seedPct");
    String eepHost=req.getParameter("eepHost");
    String eepPort=req.getParameter("eepPort");
    String i2cpHost=req.getParameter("i2cpHost");
    String i2cpPort=req.getParameter("i2cpPort");
    String i2cpOpts=buildI2CPOpts(req);
    String upLimit=req.getParameter("upLimit");
    String upBW=req.getParameter("upBW");
    String refreshDel=req.getParameter("refreshDelay");
    String startupDel=req.getParameter("startupDelay");
    boolean useOpenTrackers=req.getParameter("useOpenTrackers") != null;
    boolean useDHT=req.getParameter("useDHT") != null;
    String theme=req.getParameter("theme");
    _manager.updateConfig(dataDir,filesPublic,autoStart,refreshDel,startupDel,seedPct,eepHost,eepPort,i2cpHost,i2cpPort,i2cpOpts,upLimit,upBW,useOpenTrackers,useDHT,theme);
  }
 else   if ("Save2".equals(action)) {
    String taction=req.getParameter("taction");
    if (taction != null)     processTrackerForm(taction,req);
  }
 else   if ("Create".equals(action)) {
    String baseData=req.getParameter("baseFile");
    if (baseData != null && baseData.trim().length() > 0) {
      File baseFile=new File(_manager.getDataDir(),baseData);
      String announceURL=req.getParameter("announceURL");
      if (announceURL == null || announceURL.length() <= 0)       _manager.addMessage(_("Error creating torrent - you must select a tracker"));
 else       if (baseFile.exists()) {
        _lastAnnounceURL=announceURL;
        if (announceURL.equals("none"))         announceURL=null;
        try {
          boolean isPrivate=_manager.getPrivateTrackers().contains(announceURL);
          Storage s=new Storage(_manager.util(),baseFile,announceURL,isPrivate,null);
          s.close();
          MetaInfo info=s.getMetaInfo();
          File torrentFile=new File(_manager.getDataDir(),s.getBaseName() + ".torrent");
          _manager.addTorrent(info,s.getBitField(),torrentFile.getAbsolutePath(),true);
          _manager.addMessage(_("Torrent created for \"{0}\"",baseFile.getName()) + ": " + torrentFile.getAbsolutePath());
          if (announceURL != null && !_manager.util().getOpenTrackers().contains(announceURL))           _manager.addMessage(_("Many I2P trackers require you to register new torrents before seeding - please do so before starting \"{0}\"",baseFile.getName()));
        }
 catch (        IOException ioe) {
          _manager.addMessage(_("Error creating a torrent for \"{0}\"",baseFile.getAbsolutePath()) + ": " + ioe.getMessage());
        }
      }
 else {
        _manager.addMessage(_("Cannot create a torrent for the nonexistent data: {0}",baseFile.getAbsolutePath()));
      }
    }
 else {
      _manager.addMessage(_("Error creating torrent - you must enter a file or directory"));
    }
  }
 else   if ("StopAll".equals(action)) {
    _manager.addMessage(_("Stopping all torrents and closing the I2P tunnel."));
    List snarks=getSortedSnarks(req);
    for (int i=0; i < snarks.size(); i++) {
      Snark snark=(Snark)snarks.get(i);
      if (!snark.isStopped()) {
        _manager.stopTorrent(snark,false);
        try {
          Thread.sleep(50);
        }
 catch (        InterruptedException ie) {
        }
      }
    }
    if (_manager.util().connected()) {
      try {
        Thread.sleep(2000);
      }
 catch (      InterruptedException ie) {
      }
      _manager.util().disconnect();
      _manager.addMessage(_("I2P tunnel closed."));
    }
  }
 else   if ("StartAll".equals(action)) {
    _manager.addMessage(_("Opening the I2P tunnel and starting all torrents."));
    List snarks=getSortedSnarks(req);
    for (int i=0; i < snarks.size(); i++) {
      Snark snark=(Snark)snarks.get(i);
      if (snark.isStopped())       snark.startTorrent();
    }
  }
 else   if ("Clear".equals(action)) {
    _manager.clearMessages();
  }
 else {
    _manager.addMessage("Unknown POST action: \"" + action + '\"');
  }
}
