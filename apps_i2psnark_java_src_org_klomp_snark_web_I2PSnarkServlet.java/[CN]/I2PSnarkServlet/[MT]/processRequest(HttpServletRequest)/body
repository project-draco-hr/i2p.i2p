{
  String action=req.getParameter("action");
  if (action == null) {
  }
 else   if ("Add torrent".equals(action)) {
    String newFile=req.getParameter("newFile");
    String newURL=req.getParameter("newURL");
    File f=null;
    if ((newFile != null) && (newFile.trim().length() > 0))     f=new File(newFile.trim());
    if ((f != null) && (!f.exists())) {
      _manager.addMessage(_("Torrent file {0} does not exist",newFile));
    }
    if ((f != null) && (f.exists())) {
      File local=new File(_manager.getDataDir(),f.getName());
      String canonical=null;
      try {
        canonical=local.getCanonicalPath();
        if (local.exists()) {
          if (_manager.getTorrent(canonical) != null)           _manager.addMessage(_("Torrent already running: {0}",newFile));
 else           _manager.addMessage(_("Torrent already in the queue: {0}",newFile));
        }
 else {
          boolean ok=FileUtil.copy(f.getAbsolutePath(),local.getAbsolutePath(),true);
          if (ok) {
            _manager.addMessage(_("Copying torrent to {0}",local.getAbsolutePath()));
            _manager.addTorrent(canonical);
          }
 else {
            _manager.addMessage(_("Unable to copy the torrent to {0}",local.getAbsolutePath()) + ' ' + _("from {0}",f.getAbsolutePath()));
          }
        }
      }
 catch (      IOException ioe) {
        _log.warn("hrm: " + local,ioe);
      }
    }
 else     if (newURL != null) {
      if (newURL.startsWith("http://")) {
        _manager.addMessage(_("Fetching {0}",newURL));
        I2PAppThread fetch=new I2PAppThread(new FetchAndAdd(_manager,newURL),"Fetch and add");
        fetch.start();
      }
 else {
        _manager.addMessage(_("Invalid URL - must start with http://"));
      }
    }
 else {
    }
  }
 else   if ("Stop".equals(action)) {
    String torrent=req.getParameter("torrent");
    if (torrent != null) {
      byte infoHash[]=Base64.decode(torrent);
      if ((infoHash != null) && (infoHash.length == 20)) {
        for (Iterator iter=_manager.listTorrentFiles().iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          Snark snark=_manager.getTorrent(name);
          if ((snark != null) && (DataHelper.eq(infoHash,snark.meta.getInfoHash()))) {
            _manager.stopTorrent(name,false);
            break;
          }
        }
      }
    }
  }
 else   if ("Start".equals(action)) {
    String torrent=req.getParameter("torrent");
    if (torrent != null) {
      byte infoHash[]=Base64.decode(torrent);
      if ((infoHash != null) && (infoHash.length == 20)) {
        for (Iterator iter=_manager.listTorrentFiles().iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          Snark snark=_manager.getTorrent(name);
          if ((snark != null) && (DataHelper.eq(infoHash,snark.meta.getInfoHash()))) {
            snark.startTorrent();
            _manager.addMessage(_("Starting up torrent {0}",name));
            break;
          }
        }
      }
    }
  }
 else   if ("Remove".equals(action)) {
    String torrent=req.getParameter("torrent");
    if (torrent != null) {
      byte infoHash[]=Base64.decode(torrent);
      if ((infoHash != null) && (infoHash.length == 20)) {
        for (Iterator iter=_manager.listTorrentFiles().iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          Snark snark=_manager.getTorrent(name);
          if ((snark != null) && (DataHelper.eq(infoHash,snark.meta.getInfoHash()))) {
            _manager.stopTorrent(name,true);
            File f=new File(name);
            f.delete();
            _manager.addMessage(_("Torrent file deleted: {0}",f.getAbsolutePath()));
            break;
          }
        }
      }
    }
  }
 else   if ("Delete".equals(action)) {
    String torrent=req.getParameter("torrent");
    if (torrent != null) {
      byte infoHash[]=Base64.decode(torrent);
      if ((infoHash != null) && (infoHash.length == 20)) {
        for (Iterator iter=_manager.listTorrentFiles().iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          Snark snark=_manager.getTorrent(name);
          if ((snark != null) && (DataHelper.eq(infoHash,snark.meta.getInfoHash()))) {
            _manager.stopTorrent(name,true);
            File f=new File(name);
            f.delete();
            _manager.addMessage(_("Torrent file deleted: {0}",f.getAbsolutePath()));
            List files=snark.meta.getFiles();
            String dataFile=snark.meta.getName();
            f=new File(_manager.getDataDir(),dataFile);
            if (files == null) {
              if (f.delete())               _manager.addMessage(_("Data file deleted: {0}",f.getAbsolutePath()));
 else               _manager.addMessage(_("Data file could not be deleted: {0}",f.getAbsolutePath()));
              break;
            }
            for (int i=0; i < files.size(); i++) {
              File df=Storage.getFileFromNames(f,(List)files.get(i));
              if (df.delete())               _manager.addMessage(_("Data file deleted: {0}",df.getAbsolutePath()));
 else               _manager.addMessage(_("Data file could not be deleted: {0}",df.getAbsolutePath()));
            }
            for (int i=files.size() - 1; i >= 0; i--) {
              File df=Storage.getFileFromNames(f,(List)files.get(i));
              df=df.getParentFile();
              if (df == null || !df.exists())               continue;
              if (df.delete())               _manager.addMessage(_("Data dir deleted: {0}",df.getAbsolutePath()));
            }
            break;
          }
        }
      }
    }
  }
 else   if ("Save configuration".equals(action)) {
    String dataDir=req.getParameter("dataDir");
    boolean autoStart=req.getParameter("autoStart") != null;
    String seedPct=req.getParameter("seedPct");
    String eepHost=req.getParameter("eepHost");
    String eepPort=req.getParameter("eepPort");
    String i2cpHost=req.getParameter("i2cpHost");
    String i2cpPort=req.getParameter("i2cpPort");
    String i2cpOpts=req.getParameter("i2cpOpts");
    String upLimit=req.getParameter("upLimit");
    String upBW=req.getParameter("upBW");
    boolean useOpenTrackers=req.getParameter("useOpenTrackers") != null;
    String openTrackers=req.getParameter("openTrackers");
    _manager.updateConfig(dataDir,autoStart,seedPct,eepHost,eepPort,i2cpHost,i2cpPort,i2cpOpts,upLimit,upBW,useOpenTrackers,openTrackers);
  }
 else   if ("Create torrent".equals(action)) {
    String baseData=req.getParameter("baseFile");
    if (baseData != null && baseData.trim().length() > 0) {
      File baseFile=new File(_manager.getDataDir(),baseData);
      String announceURL=req.getParameter("announceURL");
      String announceURLOther=req.getParameter("announceURLOther");
      if ((announceURLOther != null) && (announceURLOther.trim().length() > "http://.i2p/announce".length()))       announceURL=announceURLOther;
      if (announceURL == null || announceURL.length() <= 0)       _manager.addMessage(_("Error creating torrent - you must select a tracker"));
 else       if (baseFile.exists()) {
        try {
          Storage s=new Storage(_manager.util(),baseFile,announceURL,null);
          s.create();
          s.close();
          MetaInfo info=s.getMetaInfo();
          File torrentFile=new File(baseFile.getParent(),baseFile.getName() + ".torrent");
          if (torrentFile.exists())           throw new IOException("Cannot overwrite an existing .torrent file: " + torrentFile.getPath());
          _manager.saveTorrentStatus(info,s.getBitField());
          FileOutputStream out=new FileOutputStream(torrentFile);
          out.write(info.getTorrentData());
          out.close();
          _manager.addMessage(_("Torrent created for {0}",baseFile.getName()) + ": " + torrentFile.getAbsolutePath());
          _manager.addTorrent(torrentFile.getCanonicalPath(),true);
          _manager.addMessage(_("Many I2P trackers require you to register new torrents before seeding - please do so before starting {0}",baseFile.getName()));
        }
 catch (        IOException ioe) {
          _manager.addMessage(_("Error creating a torrent for {0}",baseFile.getAbsolutePath()) + ": " + ioe.getMessage());
        }
      }
 else {
        _manager.addMessage(_("Cannot create a torrent for the nonexistent data: {0}",baseFile.getAbsolutePath()));
      }
    }
 else {
      _manager.addMessage(_("Error creating torrent - you must enter a file or directory"));
    }
  }
 else   if ("StopAll".equals(action)) {
    _manager.addMessage(_("Stopping all torrents and closing the I2P tunnel."));
    List snarks=getSortedSnarks(req);
    for (int i=0; i < snarks.size(); i++) {
      Snark snark=(Snark)snarks.get(i);
      if (!snark.stopped)       _manager.stopTorrent(snark.torrent,false);
    }
    if (_manager.util().connected()) {
      _manager.util().disconnect();
      _manager.addMessage(_("I2P tunnel closed."));
    }
  }
 else   if ("StartAll".equals(action)) {
    _manager.addMessage(_("Opening the I2P tunnel and starting all torrents."));
    List snarks=getSortedSnarks(req);
    for (int i=0; i < snarks.size(); i++) {
      Snark snark=(Snark)snarks.get(i);
      if (snark.stopped)       snark.startTorrent();
    }
  }
}
