{
  String action=req.getParameter("action");
  if (action == null) {
    @SuppressWarnings("unchecked") Map<String,String[]> params=req.getParameterMap();
    for (    Object o : params.keySet()) {
      String key=(String)o;
      if (key.startsWith("action_") && key.endsWith(".x")) {
        action=key.substring(0,key.length() - 2).substring(7);
        break;
      }
    }
    if (action == null) {
      _manager.addMessage("No action specified");
      return;
    }
  }
  if ("Add".equals(action)) {
    String newURL=req.getParameter("nofilter_newURL");
    if (newURL != null) {
      String newDir=req.getParameter("nofilter_newDir");
      File dir=null;
      if (newDir != null) {
        newDir=newDir.trim();
        if (newDir.length() > 0) {
          dir=new SecureFile(newDir);
          if (!dir.isAbsolute()) {
            _manager.addMessage(_("Data directory must be an absolute path") + ": " + dir);
            return;
          }
          if (!dir.isDirectory() && !dir.mkdirs()) {
            _manager.addMessage(_("Data directory cannot be created") + ": " + dir);
            return;
          }
          Collection<Snark> snarks=_manager.getTorrents();
          for (          Snark s : snarks) {
            Storage storage=s.getStorage();
            if (storage == null)             continue;
            File sbase=storage.getBase();
            if (isParentOf(sbase,dir)) {
              _manager.addMessage(_("Cannot add torrent {0} inside another torrent: {1}",dir.getAbsolutePath(),sbase));
              return;
            }
          }
        }
      }
      if (newURL.startsWith("http://")) {
        FetchAndAdd fetch=new FetchAndAdd(_context,_manager,newURL,dir);
        _manager.addDownloader(fetch);
      }
 else       if (newURL.startsWith(MagnetURI.MAGNET) || newURL.startsWith(MagnetURI.MAGGOT)) {
        addMagnet(newURL,dir);
      }
 else       if (newURL.length() == 40 && newURL.replaceAll("[a-fA-F0-9]","").length() == 0) {
        addMagnet(MagnetURI.MAGNET_FULL + newURL,dir);
      }
 else {
        _manager.addMessage(_("Invalid URL: Must start with \"http://\", \"{0}\", or \"{1}\"",MagnetURI.MAGNET,MagnetURI.MAGGOT));
      }
    }
 else {
    }
  }
 else   if (action.startsWith("Stop_")) {
    String torrent=action.substring(5);
    if (torrent != null) {
      byte infoHash[]=Base64.decode(torrent);
      if ((infoHash != null) && (infoHash.length == 20)) {
        for (        String name : _manager.listTorrentFiles()) {
          Snark snark=_manager.getTorrent(name);
          if ((snark != null) && (DataHelper.eq(infoHash,snark.getInfoHash()))) {
            _manager.stopTorrent(snark,false);
            break;
          }
        }
      }
    }
  }
 else   if (action.startsWith("Start_")) {
    String torrent=action.substring(6);
    if (torrent != null) {
      byte infoHash[]=Base64.decode(torrent);
      if ((infoHash != null) && (infoHash.length == 20)) {
        _manager.startTorrent(infoHash);
      }
    }
  }
 else   if (action.startsWith("Remove_")) {
    String torrent=action.substring(7);
    if (torrent != null) {
      byte infoHash[]=Base64.decode(torrent);
      if ((infoHash != null) && (infoHash.length == 20)) {
        for (        String name : _manager.listTorrentFiles()) {
          Snark snark=_manager.getTorrent(name);
          if ((snark != null) && (DataHelper.eq(infoHash,snark.getInfoHash()))) {
            MetaInfo meta=snark.getMetaInfo();
            if (meta == null) {
              _manager.deleteMagnet(snark);
              _manager.addMessage(_("Magnet deleted: {0}",name));
              return;
            }
            _manager.stopTorrent(snark,true);
            File f=new File(name);
            f.delete();
            _manager.addMessage(_("Torrent file deleted: {0}",f.getAbsolutePath()));
            break;
          }
        }
      }
    }
  }
 else   if (action.startsWith("Delete_")) {
    String torrent=action.substring(7);
    if (torrent != null) {
      byte infoHash[]=Base64.decode(torrent);
      if ((infoHash != null) && (infoHash.length == 20)) {
        for (        String name : _manager.listTorrentFiles()) {
          Snark snark=_manager.getTorrent(name);
          if ((snark != null) && (DataHelper.eq(infoHash,snark.getInfoHash()))) {
            MetaInfo meta=snark.getMetaInfo();
            if (meta == null) {
              _manager.deleteMagnet(snark);
              if (snark instanceof FetchAndAdd)               _manager.addMessage(_("Download deleted: {0}",name));
 else               _manager.addMessage(_("Magnet deleted: {0}",name));
              return;
            }
            _manager.stopTorrent(snark,true);
            File f=new File(name);
            f.delete();
            _manager.addMessage(_("Torrent file deleted: {0}",f.getAbsolutePath()));
            Storage storage=snark.getStorage();
            if (storage == null)             break;
            List<List<String>> files=meta.getFiles();
            if (files == null) {
              for (              File df : storage.getFiles()) {
                if (df.delete())                 _manager.addMessage(_("Data file deleted: {0}",df.getAbsolutePath()));
 else                 _manager.addMessage(_("Data file could not be deleted: {0}",df.getAbsolutePath()));
              }
              break;
            }
            for (            File df : storage.getFiles()) {
              if (df.delete()) {
              }
 else {
                _manager.addMessage(_("Data file could not be deleted: {0}",df.getAbsolutePath()));
              }
            }
            Set<File> dirs=storage.getDirectories();
            if (dirs == null)             break;
            if (_log.shouldLog(Log.INFO))             _log.info("Dirs to delete: " + DataHelper.toString(dirs));
            boolean ok=false;
            for (            File df : dirs) {
              if (df.delete()) {
                ok=true;
              }
 else {
                ok=false;
                _manager.addMessage(_("Directory could not be deleted: {0}",df.getAbsolutePath()));
                if (_log.shouldLog(Log.WARN))                 _log.warn("Could not delete dir " + df);
              }
            }
            if (ok)             _manager.addMessage(_("Directory deleted: {0}",storage.getBase()));
            break;
          }
        }
      }
    }
  }
 else   if ("Save".equals(action)) {
    String dataDir=req.getParameter("nofilter_dataDir");
    boolean filesPublic=req.getParameter("filesPublic") != null;
    boolean autoStart=req.getParameter("autoStart") != null;
    String seedPct=req.getParameter("seedPct");
    String eepHost=req.getParameter("eepHost");
    String eepPort=req.getParameter("eepPort");
    String i2cpHost=req.getParameter("i2cpHost");
    String i2cpPort=req.getParameter("i2cpPort");
    String i2cpOpts=buildI2CPOpts(req);
    String upLimit=req.getParameter("upLimit");
    String upBW=req.getParameter("upBW");
    String refreshDel=req.getParameter("refreshDelay");
    String startupDel=req.getParameter("startupDelay");
    String pageSize=req.getParameter("pageSize");
    boolean useOpenTrackers=req.getParameter("useOpenTrackers") != null;
    boolean useDHT=req.getParameter("useDHT") != null;
    String theme=req.getParameter("theme");
    _manager.updateConfig(dataDir,filesPublic,autoStart,refreshDel,startupDel,pageSize,seedPct,eepHost,eepPort,i2cpHost,i2cpPort,i2cpOpts,upLimit,upBW,useOpenTrackers,useDHT,theme);
    try {
      setResourceBase(_manager.getDataDir());
    }
 catch (    ServletException se) {
    }
  }
 else   if ("Save2".equals(action)) {
    String taction=req.getParameter("taction");
    if (taction != null)     processTrackerForm(taction,req);
  }
 else   if ("Create".equals(action)) {
    String baseData=req.getParameter("nofilter_baseFile");
    if (baseData != null && baseData.trim().length() > 0) {
      File baseFile=new File(baseData.trim());
      if (!baseFile.isAbsolute())       baseFile=new File(_manager.getDataDir(),baseData);
      String announceURL=req.getParameter("announceURL");
      if (baseFile.exists()) {
        String torrentName=baseFile.getName();
        if (torrentName.toLowerCase(Locale.US).endsWith(".torrent")) {
          _manager.addMessage(_("Cannot add a torrent ending in \".torrent\": {0}",baseFile.getAbsolutePath()));
          return;
        }
        Snark snark=_manager.getTorrentByBaseName(torrentName);
        if (snark != null) {
          _manager.addMessage(_("Torrent with this name is already running: {0}",torrentName));
          return;
        }
        if (isParentOf(baseFile,_manager.getDataDir()) || isParentOf(baseFile,_manager.util().getContext().getBaseDir()) || isParentOf(baseFile,_manager.util().getContext().getConfigDir())) {
          _manager.addMessage(_("Cannot add a torrent including an I2P directory: {0}",baseFile.getAbsolutePath()));
          return;
        }
        Collection<Snark> snarks=_manager.getTorrents();
        for (        Snark s : snarks) {
          Storage storage=s.getStorage();
          if (storage == null)           continue;
          File sbase=storage.getBase();
          if (isParentOf(sbase,baseFile)) {
            _manager.addMessage(_("Cannot add torrent {0} inside another torrent: {1}",baseFile.getAbsolutePath(),sbase));
            return;
          }
          if (isParentOf(baseFile,sbase)) {
            _manager.addMessage(_("Cannot add torrent {0} including another torrent: {1}",baseFile.getAbsolutePath(),sbase));
            return;
          }
        }
        if (announceURL.equals("none"))         announceURL=null;
        _lastAnnounceURL=announceURL;
        List<String> backupURLs=new ArrayList<String>();
        Enumeration<?> e=req.getParameterNames();
        while (e.hasMoreElements()) {
          Object o=e.nextElement();
          if (!(o instanceof String))           continue;
          String k=(String)o;
          if (k.startsWith("backup_")) {
            String url=k.substring(7);
            if (!url.equals(announceURL))             backupURLs.add(DataHelper.stripHTML(url));
          }
        }
        List<List<String>> announceList=null;
        if (!backupURLs.isEmpty()) {
          if (announceURL == null) {
            _manager.addMessage(_("Error - Cannot include alternate trackers without a primary tracker"));
            return;
          }
          backupURLs.add(0,announceURL);
          boolean hasPrivate=false;
          boolean hasPublic=false;
          for (          String url : backupURLs) {
            if (_manager.getPrivateTrackers().contains(url))             hasPrivate=true;
 else             hasPublic=true;
          }
          if (hasPrivate && hasPublic) {
            _manager.addMessage(_("Error - Cannot mix private and public trackers in a torrent"));
            return;
          }
          announceList=new ArrayList<List<String>>(backupURLs.size());
          for (          String url : backupURLs) {
            announceList.add(Collections.singletonList(url));
          }
        }
        try {
          boolean isPrivate=_manager.getPrivateTrackers().contains(announceURL);
          Storage s=new Storage(_manager.util(),baseFile,announceURL,announceList,isPrivate,null);
          s.close();
          MetaInfo info=s.getMetaInfo();
          File torrentFile=new File(_manager.getDataDir(),s.getBaseName() + ".torrent");
          boolean ok=_manager.addTorrent(info,s.getBitField(),torrentFile.getAbsolutePath(),baseFile,true);
          if (!ok)           return;
          _manager.addMessage(_("Torrent created for \"{0}\"",baseFile.getName()) + ": " + torrentFile.getAbsolutePath());
          if (announceURL != null && !_manager.util().getOpenTrackers().contains(announceURL))           _manager.addMessage(_("Many I2P trackers require you to register new torrents before seeding - please do so before starting \"{0}\"",baseFile.getName()));
        }
 catch (        IOException ioe) {
          _manager.addMessage(_("Error creating a torrent for \"{0}\"",baseFile.getAbsolutePath()) + ": " + ioe);
          _log.error("Error creating a torrent",ioe);
        }
      }
 else {
        _manager.addMessage(_("Cannot create a torrent for the nonexistent data: {0}",baseFile.getAbsolutePath()));
      }
    }
 else {
      _manager.addMessage(_("Error creating torrent - you must enter a file or directory"));
    }
  }
 else   if ("StopAll".equals(action)) {
    _manager.stopAllTorrents(false);
  }
 else   if ("StartAll".equals(action)) {
    _manager.startAllTorrents();
  }
 else   if ("Clear".equals(action)) {
    _manager.clearMessages();
  }
 else {
    _manager.addMessage("Unknown POST action: \"" + action + '\"');
  }
}
