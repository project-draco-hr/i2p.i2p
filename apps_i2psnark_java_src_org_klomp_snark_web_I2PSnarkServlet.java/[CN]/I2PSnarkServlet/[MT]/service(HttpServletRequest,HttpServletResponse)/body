{
  String path=req.getServletPath();
  if (!(path == null || path.equals("/") || path.equals("/index.jsp") || path.equals("/index.html"))) {
    if (path.endsWith("/")) {
      String pathInfo=req.getPathInfo();
      String pathInContext=URI.addPaths(path,pathInfo);
      resp.setCharacterEncoding("UTF-8");
      resp.setContentType("text/html; charset=UTF-8");
      Resource resource=getResource(pathInContext);
      if (resource == null || (!resource.exists()) || !resource.isDirectory()) {
        resp.sendError(HttpResponse.__404_Not_Found);
      }
 else {
        String base=URI.addPaths(req.getRequestURI(),"/");
        String listing=getListHTML(resource,base,true);
        if (listing != null)         resp.getWriter().write(listing);
 else         resp.sendError(HttpResponse.__404_Not_Found);
      }
    }
 else {
      super.service(req,resp);
    }
    return;
  }
  req.setCharacterEncoding("UTF-8");
  resp.setCharacterEncoding("UTF-8");
  resp.setContentType("text/html; charset=UTF-8");
  final long stats[]={0,0,0,0,0,0};
  String nonce=req.getParameter("nonce");
  if ((nonce != null) && (nonce.equals(String.valueOf(_nonce))))   processRequest(req);
  String peerParam=req.getParameter("p");
  String peerString;
  if (peerParam == null) {
    peerString="";
  }
 else {
    peerString="?p=" + peerParam;
  }
  PrintWriter out=resp.getWriter();
  out.write("<html>\n" + "<head>\n" + "<title>");
  out.write(_("I2PSnark - Anonymous BitTorrent Client"));
  out.write("</title>\n");
  out.write("<meta http-equiv=\"refresh\" content=\"60;" + req.getRequestURI() + peerString+ "\">\n");
  out.write(HEADER);
  out.write("</head><body>");
  out.write("<center>");
  out.write("<div class=\"snarknavbar\"><a href=\"" + req.getRequestURI() + peerString+ "\" title=\"");
  out.write(_("Refresh page"));
  out.write("\" class=\"snarkRefresh\">");
  out.write(_("I2PSnark"));
  out.write("</a> <a href=\"http://forum.i2p/viewforum.php?f=21\" class=\"snarkRefresh\" target=\"_blank\">");
  out.write(_("Forum"));
  out.write("</a>\n");
  Map trackers=_manager.getTrackers();
  for (Iterator iter=trackers.entrySet().iterator(); iter.hasNext(); ) {
    Map.Entry entry=(Map.Entry)iter.next();
    String name=(String)entry.getKey();
    String baseURL=(String)entry.getValue();
    int e=baseURL.indexOf('=');
    if (e < 0)     continue;
    baseURL=baseURL.substring(e + 1);
    out.write(" <a href=\"" + baseURL + "\" class=\"snarkRefresh\" target=\"_blank\">"+ name+ "</a>");
  }
  out.write("</div>\n");
  out.write("<div class=\"page\"><div class=\"mainsection\"><div class=\"snarkMessages\"><table><tr><td align=\"left\"><pre>");
  List msgs=_manager.getMessages();
  for (int i=msgs.size() - 1; i >= 0; i--) {
    String msg=(String)msgs.get(i);
    out.write(msg + "\n");
  }
  out.write("</pre></td></tr></table></div>");
  List snarks=getSortedSnarks(req);
  String uri=req.getRequestURI();
  out.write(TABLE_HEADER);
  out.write(_("Status"));
  if (_manager.util().connected() && !snarks.isEmpty()) {
    out.write(" (<a href=\"");
    out.write(req.getRequestURI());
    if (peerParam != null) {
      out.write("\">");
      out.write(_("Hide Peers"));
    }
 else {
      out.write("?p=1\">");
      out.write(_("Show Peers"));
    }
    out.write("</a>)<br>\n");
  }
  out.write("</th>\n<th align=\"left\">");
  out.write(_("Torrent"));
  out.write("</th>\n<th align=\"center\">");
  out.write(_("ETA"));
  out.write("</th>\n<th align=\"right\">");
  out.write(_("Downloaded"));
  out.write("</th>\n<th align=\"right\">");
  out.write(_("Uploaded"));
  out.write("</th>\n<th align=\"right\">");
  out.write(_("Down Rate"));
  out.write("</th>\n<th align=\"right\">");
  out.write(_("Up Rate"));
  out.write("</th>\n");
  out.write("<th align=\"center\">");
  if (_manager.util().connected()) {
    out.write("<a href=\"" + uri + "?action=StopAll&nonce="+ _nonce+ "\" title=\"");
    out.write(_("Stop all torrents and the I2P tunnel"));
    out.write("\">");
    out.write(_("Stop All"));
    out.write("</a>");
  }
 else   if (!snarks.isEmpty()) {
    out.write("<a href=\"" + uri + "?action=StartAll&nonce="+ _nonce+ "\" title=\"");
    out.write(_("Start all torrents and the I2P tunnel"));
    out.write("\">");
    out.write(_("Start All"));
    out.write("</a>");
  }
 else {
    out.write("&nbsp;");
  }
  out.write("</th></tr></thead>\n");
  for (int i=0; i < snarks.size(); i++) {
    Snark snark=(Snark)snarks.get(i);
    boolean showDebug="2".equals(peerParam);
    boolean showPeers=showDebug || "1".equals(peerParam) || Base64.encode(snark.meta.getInfoHash()).equals(peerParam);
    displaySnark(out,snark,uri,i,stats,showPeers,showDebug);
  }
  if (snarks.isEmpty()) {
    out.write("<tr class=\"snarkTorrentEven\">" + "<td class=\"snarkTorrentEven\" align=\"center\"" + " colspan=\"8\"><i>");
    out.write(_("No torrents loaded."));
    out.write("</i></td></tr>\n");
  }
 else   if (snarks.size() > 1) {
    out.write("<tfoot><tr>\n" + "    <th align=\"left\" colspan=\"2\">");
    out.write(_("Totals"));
    out.write(" (");
    out.write(_("{0} torrents",snarks.size()));
    out.write(", ");
    out.write(DataHelper.formatSize(stats[5]) + "B, ");
    out.write(_("{0} connected peers",stats[4]));
    out.write(")</th>\n" + "    <th>&nbsp;</th>\n" + "    <th align=\"right\">" + formatSize(stats[0]) + "</th>\n"+ "    <th align=\"right\">"+ formatSize(stats[1])+ "</th>\n"+ "    <th align=\"right\">"+ formatSize(stats[2])+ "ps</th>\n"+ "    <th align=\"right\">"+ formatSize(stats[3])+ "ps</th>\n"+ "    <th>&nbsp;</th></tr>\n"+ "</tfoot>\n");
  }
  out.write(TABLE_FOOTER);
  writeAddForm(out,req);
  if (true)   writeSeedForm(out,req);
  writeConfigForm(out,req);
  out.write(FOOTER);
}
