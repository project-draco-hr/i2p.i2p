{
  final long stats[]={0,0,0,0,0,0};
  String peerParam=req.getParameter("p");
  List snarks=getSortedSnarks(req);
  String uri=req.getRequestURI();
  out.write(TABLE_HEADER);
  out.write("<img border=\"0\" src=\"/themes/snark/ubergine/images/status.png\" >");
  out.write("title=\"");
  out.write(_("Torrent Status"));
  out.write("\">");
  if (_manager.util().connected() && !snarks.isEmpty()) {
    out.write(" &raquo; <a href=\"");
    out.write(req.getRequestURI());
    if (peerParam != null) {
      out.write("\">");
      out.write("<img border=\"0\" src=\"/themes/snark/ubergine/images/showpeers.png\" title=\"");
      out.write(_("Toggle Peer Visibility"));
      out.write(" alt=\"Hide Peers\">");
      out.write(_("Hide Peers"));
      out.write("\">");
    }
 else {
      out.write("?p=1\">");
      out.write("<img border=\"0\" src=\"/themes/snark/ubergine/images/hidepeers.png\" title=\"");
      out.write(_("Toggle Peer Visibility"));
      out.write("\" alt=\"Show Peers\">");
    }
    out.write("</a><br>\n");
  }
  out.write("</th>\n<th align=\"left\">");
  out.write("<img border=\"0\" src=\"/themes/snark/ubergine/images/torrent.png\" title=\"");
  out.write(_("Loaded Torrents"));
  out.write("\">");
  out.write(_("Torrent"));
  out.write("</th>\n<th align=\"center\">");
  out.write("<img border=\"0\" src=\"/themes/snark/ubergine/images/eta.png\" title=\"");
  out.write(_("Estimated Download Time"));
  out.write("\">");
  out.write(_("ETA"));
  out.write("</th>\n<th align=\"center\">");
  out.write("<img border=\"0\" src=\"/themes/console/images/inbound.png\" title=\"");
  out.write(_("Data Downloaded"));
  out.write("\">");
  out.write(_("RX"));
  out.write("</th>\n<th align=\"center\">");
  out.write("<img border=\"0\" src=\"/themes/console/images/outbound.png\" title=\"");
  out.write(_("Data Uploaded"));
  out.write("\">");
  out.write(_("TX"));
  out.write("</th>\n<th align=\"center\">");
  out.write("<img border=\"0\" src=\"/themes/console/images/inbound.png\" title=\"");
  out.write(_("Download Speed"));
  out.write("\">Rate");
  out.write("</th>\n<th align=\"center\">");
  out.write("<img border=\"0\" src=\"/themes/console/images/outbound.png\" title=\"");
  out.write(_("Upload Speed"));
  out.write("\">");
  out.write(_("Rate"));
  out.write("</th>\n");
  out.write("<th align=\"center\">");
  if (_manager.util().connected()) {
    out.write("<a href=\"" + uri + "?action=StopAll&nonce="+ _nonce+ "\" title=\"");
    out.write(_("Stop all torrents and the I2P tunnel"));
    out.write("\">");
    out.write("<img src=\"/themes/snark/ubergine/images/stop_all.png\" title=\"");
    out.write(_("Stop All Torrents"));
    out.write("\" alt=\"");
    out.write(_("Stop All"));
    out.write("\">");
    out.write("</a>");
  }
 else   if (!snarks.isEmpty()) {
    out.write("<a href=\"" + uri + "?action=StartAll&nonce="+ _nonce+ "\" title=\"");
    out.write(_("Start all torrents and the I2P tunnel"));
    out.write("\">");
    out.write("<img src=\"/themes/snark/ubergine/images/start_all.png\" title=\"");
    out.write(_("Start All Torrents"));
    out.write("\" alt=\"Start All\">");
    out.write("</a>");
  }
 else {
    out.write("&nbsp;");
  }
  out.write("</th></tr></thead>\n");
  for (int i=0; i < snarks.size(); i++) {
    Snark snark=(Snark)snarks.get(i);
    boolean showDebug="2".equals(peerParam);
    boolean showPeers=showDebug || "1".equals(peerParam) || Base64.encode(snark.meta.getInfoHash()).equals(peerParam);
    displaySnark(out,snark,uri,i,stats,showPeers,showDebug);
  }
  if (snarks.isEmpty()) {
    out.write("<tr class=\"snarkTorrentNoneLoaded\">" + "<td class=\"snarkTorrentNoneLoaded\"" + " colspan=\"8\"><i>");
    out.write(_("No torrents loaded."));
    out.write("</i></td></tr>\n");
  }
 else   if (snarks.size() > 1) {
    out.write("<tfoot><tr>\n" + "    <th align=\"left\" colspan=\"2\">");
    out.write(_("Totals"));
    out.write(" &raquo;&nbsp;");
    out.write(ngettext("1 torrent","{0} torrents",snarks.size()));
    out.write(", ");
    out.write(DataHelper.formatSize2(stats[5]) + "B, ");
    out.write(ngettext("1 connected peer","{0} connected peers",(int)stats[4]));
    out.write("</th>\n" + "    <th>&nbsp;</th>\n" + "    <th align=\"right\">" + formatSize(stats[0]) + "</th>\n"+ "    <th align=\"right\">"+ formatSize(stats[1])+ "</th>\n"+ "    <th align=\"right\">"+ formatSize(stats[2])+ "ps</th>\n"+ "    <th align=\"right\">"+ formatSize(stats[3])+ "ps</th>\n"+ "    <th>&nbsp;</th></tr>\n"+ "</tfoot>\n");
  }
  out.write("</table>");
}
