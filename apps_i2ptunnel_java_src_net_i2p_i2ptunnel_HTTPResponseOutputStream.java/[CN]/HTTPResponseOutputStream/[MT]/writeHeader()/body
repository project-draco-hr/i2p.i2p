{
  String responseLine=null;
  boolean connectionSent=false;
  boolean proxyConnectionSent=false;
  int lastEnd=-1;
  for (int i=0; i < _headerBuffer.getValid(); i++) {
    if (isNL(_headerBuffer.getData()[i])) {
      if (lastEnd == -1) {
        responseLine=new String(_headerBuffer.getData(),0,i + 1);
        responseLine=filterResponseLine(responseLine);
        responseLine=(responseLine.trim() + "\r\n");
        out.write(responseLine.getBytes());
      }
 else {
        for (int j=lastEnd + 1; j < i; j++) {
          if (_headerBuffer.getData()[j] == ':') {
            int keyLen=j - (lastEnd + 1);
            int valLen=i - (j + 1);
            if ((keyLen <= 0) || (valLen < 0))             throw new IOException("Invalid header @ " + j);
            String key=new String(_headerBuffer.getData(),lastEnd + 1,keyLen);
            String val=null;
            if (valLen == 0)             val="";
 else             val=new String(_headerBuffer.getData(),j + 2,valLen).trim();
            if (_log.shouldLog(Log.INFO))             _log.info("Response header [" + key + "] = ["+ val+ "]");
            String lcKey=key.toLowerCase(Locale.US);
            if ("connection".equals(lcKey)) {
              out.write("Connection: close\r\n".getBytes());
              connectionSent=true;
            }
 else             if ("proxy-connection".equals(lcKey)) {
              out.write("Proxy-Connection: close\r\n".getBytes());
              proxyConnectionSent=true;
            }
 else             if ("content-encoding".equals(lcKey) && "x-i2p-gzip".equals(val.toLowerCase(Locale.US))) {
              _gzip=true;
            }
 else             if ("proxy-authenticate".equals(lcKey)) {
            }
 else {
              if ("content-length".equals(lcKey)) {
                try {
                  _dataExpected=Long.parseLong(val);
                }
 catch (                NumberFormatException nfe) {
                }
              }
 else               if ("content-type".equals(lcKey)) {
                _contentType=val;
              }
 else               if ("set-cookie".equals(lcKey)) {
                String lcVal=val.toLowerCase(Locale.US);
                if (lcVal.contains("domain=b32.i2p") || lcVal.contains("domain=.b32.i2p") || lcVal.contains("domain=i2p")|| lcVal.contains("domain=.i2p")) {
                  if (_log.shouldLog(Log.INFO))                   _log.info("Stripping \"" + key + ": "+ val+ "\" from response ");
                  break;
                }
              }
              out.write((key.trim() + ": " + val.trim()+ "\r\n").getBytes());
            }
            break;
          }
        }
      }
      lastEnd=i;
    }
  }
  if (!connectionSent)   out.write("Connection: close\r\n".getBytes());
  if (!proxyConnectionSent)   out.write("Proxy-Connection: close\r\n".getBytes());
  finishHeaders();
  boolean shouldCompress=shouldCompress();
  if (_log.shouldLog(Log.INFO))   _log.info("After headers: gzip? " + _gzip + " compress? "+ shouldCompress);
  if (_headerBuffer.getData().length == CACHE_SIZE)   _cache.release(_headerBuffer);
 else   _headerBuffer=null;
  if (shouldCompress) {
    beginProcessing();
  }
}
