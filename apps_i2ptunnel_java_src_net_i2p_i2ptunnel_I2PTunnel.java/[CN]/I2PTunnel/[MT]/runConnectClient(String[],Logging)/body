{
  if (args.length >= 1 && args.length <= 3) {
    int _port=-1;
    try {
      _port=Integer.parseInt(args[0]);
    }
 catch (    NumberFormatException nfe) {
      _log.error(getPrefix() + "Port specified is not valid: " + args[0],nfe);
    }
    if (_port <= 0)     throw new IllegalArgumentException(getPrefix() + "Bad port " + args[0]);
    String proxy="";
    boolean isShared=true;
    if (args.length > 1) {
      if (Boolean.parseBoolean(args[1].trim())) {
        isShared=true;
        if (args.length == 3)         proxy=args[2];
      }
 else       if ("false".equalsIgnoreCase(args[1].trim())) {
        _log.warn("args[1] == [" + args[1] + "] and rejected explicitly");
        isShared=false;
        if (args.length == 3)         proxy=args[2];
      }
 else       if (args.length == 3) {
        isShared=false;
        proxy=args[2];
        _log.warn("args[1] == [" + args[1] + "] but rejected");
      }
 else {
        isShared=true;
        proxy=args[1];
      }
    }
    I2PTunnelTask task;
    ownDest=!isShared;
    try {
      task=new I2PTunnelConnectClient(_port,l,ownDest,proxy,this,this);
      addtask(task);
    }
 catch (    IllegalArgumentException iae) {
      String msg="Invalid I2PTunnel configuration to create a CONNECT client connecting to the router at " + host + ':'+ port+ " and listening on "+ listenHost+ ':'+ _port;
      _log.error(getPrefix() + msg,iae);
      l.log(msg);
      throw iae;
    }
  }
 else {
    l.log("connectclient <port> [<sharedClient>] [<proxy>]\n" + "  creates a client that for SSL/HTTPS requests.\n" + "  <sharedClient> (optional) indicates if this client shares tunnels with other clients (true of false)\n"+ "  <proxy> (optional) indicates a proxy server to be used\n"+ "  when trying to access an address out of the .i2p domain\n");
  }
}
