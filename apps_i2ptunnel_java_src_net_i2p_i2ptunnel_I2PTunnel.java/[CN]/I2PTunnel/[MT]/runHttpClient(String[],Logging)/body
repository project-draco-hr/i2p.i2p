{
  if (args.length >= 1 && args.length <= 3) {
    int clientPort=-1;
    try {
      clientPort=Integer.parseInt(args[0]);
    }
 catch (    NumberFormatException nfe) {
      l.log("invalid port");
      _log.error(getPrefix() + "Port specified is not valid: " + args[0],nfe);
      notifyEvent("httpclientTaskId",Integer.valueOf(-1));
    }
    if (clientPort <= 0)     throw new IllegalArgumentException(getPrefix() + "Bad port " + args[0]);
    String proxy="";
    boolean isShared=true;
    if (args.length > 1) {
      if (Boolean.valueOf(args[1].trim()).booleanValue()) {
        isShared=true;
        if (args.length == 3)         proxy=args[2];
      }
 else       if ("false".equalsIgnoreCase(args[1].trim())) {
        _log.warn("args[1] == [" + args[1] + "] and rejected explicitly");
        isShared=false;
        if (args.length == 3)         proxy=args[2];
      }
 else       if (args.length == 3) {
        isShared=false;
        proxy=args[2];
        _log.warn("args[1] == [" + args[1] + "] but rejected");
      }
 else {
        isShared=true;
        proxy=args[1];
      }
    }
    I2PTunnelTask task;
    ownDest=!isShared;
    try {
      task=new I2PTunnelHTTPClient(clientPort,l,ownDest,proxy,this,this);
      addtask(task);
      notifyEvent("httpclientTaskId",Integer.valueOf(task.getId()));
    }
 catch (    IllegalArgumentException iae) {
      String msg="Invalid I2PTunnel configuration to create an HTTP Proxy connecting to the router at " + host + ':'+ port+ " and listening on "+ listenHost+ ':'+ clientPort;
      _log.error(getPrefix() + msg,iae);
      l.log(msg);
      notifyEvent("httpclientTaskId",Integer.valueOf(-1));
      throw iae;
    }
  }
 else {
    l.log("httpclient <port> [<sharedClient>] [<proxy>]");
    l.log("  creates a client that distributes HTTP requests.");
    l.log("  <sharedClient> (optional) indicates if this client shares tunnels with other clients (true of false)");
    l.log("  <proxy> (optional) indicates a proxy server to be used");
    l.log("  when trying to access an address out of the .i2p domain");
    notifyEvent("httpclientTaskId",Integer.valueOf(-1));
  }
}
