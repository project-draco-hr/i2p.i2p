{
  if (args.length >= 2) {
    int _port=-1;
    try {
      _port=Integer.parseInt(args[0]);
    }
 catch (    NumberFormatException nfe) {
      l.log("invalid port");
      _log.error(getPrefix() + "Port specified is not valid: " + args[0],nfe);
      notifyEvent("ircclientTaskId",Integer.valueOf(-1));
    }
    if (_port <= 0)     throw new IllegalArgumentException(getPrefix() + "Bad port " + args[0]);
    boolean isShared=true;
    if (args.length > 2) {
      if ("true".equalsIgnoreCase(args[2].trim())) {
        isShared=true;
      }
 else       if ("false".equalsIgnoreCase(args[2].trim())) {
        _log.warn("args[2] == [" + args[2] + "] and rejected explicitly");
        isShared=false;
      }
 else {
        isShared=true;
      }
    }
    I2PTunnelTask task;
    ownDest=!isShared;
    try {
      String privateKeyFile=null;
      if (args.length >= 4)       privateKeyFile=args[3];
      task=new I2PTunnelIRCClient(_port,args[1],l,ownDest,(EventDispatcher)this,this,privateKeyFile);
      addtask(task);
      notifyEvent("ircclientTaskId",Integer.valueOf(task.getId()));
    }
 catch (    IllegalArgumentException iae) {
      String msg="Invalid I2PTunnel configuration to create an IRC client connecting to the router at " + host + ':'+ port+ " and listening on "+ listenHost+ ':'+ _port;
      _log.error(getPrefix() + msg,iae);
      l.log(msg);
      notifyEvent("ircclientTaskId",Integer.valueOf(-1));
      throw iae;
    }
  }
 else {
    l.log("ircclient <port> [<sharedClient> [<privKeyFile>]]");
    l.log("  creates a client that filter IRC protocol.");
    l.log("  <sharedClient> (optional) indicates if this client shares tunnels with other clients (true of false)");
    notifyEvent("ircclientTaskId",Integer.valueOf(-1));
  }
}
