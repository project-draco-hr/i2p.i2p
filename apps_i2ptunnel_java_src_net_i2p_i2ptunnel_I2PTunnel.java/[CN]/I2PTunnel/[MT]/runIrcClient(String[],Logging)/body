{
  if (args.length >= 2 && args.length <= 3) {
    int port=-1;
    try {
      port=Integer.parseInt(args[0]);
    }
 catch (    NumberFormatException nfe) {
      l.log("invalid port");
      _log.error(getPrefix() + "Port specified is not valid: " + args[0],nfe);
      notifyEvent("ircclientTaskId",new Integer(-1));
      return;
    }
    boolean isShared=true;
    if (args.length > 1) {
      if ("true".equalsIgnoreCase(args[2].trim())) {
        isShared=true;
      }
 else       if ("false".equalsIgnoreCase(args[1].trim())) {
        _log.warn("args[1] == [" + args[1] + "] and rejected explicitly");
        isShared=false;
      }
 else {
        isShared=true;
      }
    }
    I2PTunnelTask task;
    ownDest=!isShared;
    try {
      task=new I2PTunnelIRCClient(port,args[1],l,ownDest,(EventDispatcher)this,this);
      addtask(task);
      notifyEvent("ircclientTaskId",new Integer(task.getId()));
    }
 catch (    IllegalArgumentException iae) {
      _log.error(getPrefix() + "Invalid I2PTunnel config to create an ircclient [" + host+ ":"+ port+ "]",iae);
      l.log("Invalid I2PTunnel configuration [" + host + ":"+ port+ "]");
      notifyEvent("ircclientTaskId",new Integer(-1));
    }
  }
 else {
    l.log("ircclient <port> [<sharedClient>]");
    l.log("  creates a client that filter IRC protocol.");
    l.log("  <sharedClient> (optional) indicates if this client shares tunnels with other clients (true of false)");
    notifyEvent("ircclientTaskId",new Integer(-1));
  }
}
