{
  super(localPort + " (uninitialized)",notifyThis,tunnel);
  _clientId=++__clientId;
  this.localPort=localPort;
  this.l=l;
  this.handlerName=handlerName + _clientId;
  tunnel.getClientOptions().setProperty("i2cp.dontPublishLeaseSet","true");
  while (sockMgr == null) {
synchronized (sockLock) {
      if (ownDest) {
        sockMgr=buildSocketManager();
      }
 else {
        sockMgr=getSocketManager();
      }
    }
    if (sockMgr == null) {
      _log.log(Log.CRIT,"Unable to create socket manager (our own? " + ownDest + ")");
      try {
        Thread.sleep(10 * 1000);
      }
 catch (      InterruptedException ie) {
      }
    }
  }
  if (sockMgr == null) {
    l.log("Invalid I2CP configuration");
    throw new IllegalArgumentException("Socket manager could not be created");
  }
  l.log("I2P session created");
  getTunnel().addSession(sockMgr.getSession());
  Thread t=new I2PThread(this);
  t.setName("Client " + _clientId);
  listenerReady=false;
  t.start();
  open=true;
synchronized (this) {
    while (!listenerReady && open) {
      try {
        wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
  configurePool(tunnel);
  if (open && listenerReady) {
    l.log("Ready! Port " + getLocalPort());
    notifyEvent("openBaseClientResult","ok");
  }
 else {
    l.log("Error listening - please see the logs!");
    notifyEvent("openBaseClientResult","error");
  }
}
