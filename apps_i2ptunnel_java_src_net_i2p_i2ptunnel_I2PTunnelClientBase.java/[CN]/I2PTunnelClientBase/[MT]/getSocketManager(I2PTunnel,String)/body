{
  Log _log=tunnel.getContext().logManager().getLog(I2PTunnelClientBase.class);
  if (socketManager != null && !socketManager.isDestroyed()) {
    I2PSession s=socketManager.getSession();
    if (s.isClosed() && _socketManagerState != SocketManagerState.INIT) {
      if (_log.shouldLog(Log.INFO))       _log.info(tunnel.getClientOptions().getProperty("inbound.nickname") + ": Building a new socket manager since the old one closed [s=" + s+ "]");
      tunnel.removeSession(s);
      socketManager.destroySocketManager();
      _socketManagerState=SocketManagerState.INIT;
      socketManager=buildSocketManager(tunnel,pkf);
      I2PSession sub=addSubsession(tunnel);
      if (sub != null && _log.shouldLog(Log.WARN))       _log.warn("Added subsession " + sub);
    }
 else {
      if (_log.shouldLog(Log.INFO))       _log.info(tunnel.getClientOptions().getProperty("inbound.nickname") + ": Not building a new socket manager since the old one is open [s=" + s+ "]");
      tunnel.addSession(s);
    }
  }
 else {
    if (_log.shouldLog(Log.INFO))     _log.info(tunnel.getClientOptions().getProperty("inbound.nickname") + ": Building a new socket manager since there is no other one");
    socketManager=buildSocketManager(tunnel,pkf);
    I2PSession sub=addSubsession(tunnel);
    if (sub != null && _log.shouldLog(Log.WARN))     _log.warn("Added subsession " + sub);
  }
  return socketManager;
}
