{
  InetAddress addr=getListenHost(l);
  if (addr == null) {
    close(true);
    open=false;
synchronized (this) {
      notifyAll();
    }
    return;
  }
  try {
    Properties opts=getTunnel().getClientOptions();
    boolean useSSL=Boolean.parseBoolean(opts.getProperty(PROP_USE_SSL));
    if (useSSL) {
      boolean wasCreated=SSLClientUtil.verifyKeyStore(opts);
      if (wasCreated) {
        _log.logAlways(Log.WARN,"Created new i2ptunnel SSL keys but can't save the config, disable and enable via i2ptunnel GUI");
      }
      SSLServerSocketFactory fact=SSLClientUtil.initializeFactory(opts);
      ss=fact.createServerSocket(localPort,0,addr);
      I2PSSLSocketFactory.setProtocolsAndCiphers((SSLServerSocket)ss);
    }
 else {
      ss=new ServerSocket(localPort,0,addr);
    }
    if (localPort == 0) {
      localPort=ss.getLocalPort();
    }
    notifyEvent("clientLocalPort",Integer.valueOf(ss.getLocalPort()));
synchronized (this) {
      listenerReady=true;
      notifyAll();
    }
synchronized (startLock) {
      while (!startRunning) {
        try {
          startLock.wait();
        }
 catch (        InterruptedException ie) {
        }
      }
    }
    TunnelControllerGroup tcg=TunnelControllerGroup.getInstance();
    if (tcg != null) {
      _executor=tcg.getClientExecutor();
    }
 else {
      _executor=new TunnelControllerGroup.CustomThreadPoolExecutor();
    }
    while (open) {
      Socket s=ss.accept();
      manageConnection(s);
    }
  }
 catch (  IOException ex) {
synchronized (sockLock) {
      mySockets.clear();
    }
    if (open) {
      _log.error("Error listening for connections on " + addr + " port "+ localPort,ex);
      notifyEvent("openBaseClientResult","error");
      close(true);
    }
synchronized (this) {
      notifyAll();
    }
  }
}
