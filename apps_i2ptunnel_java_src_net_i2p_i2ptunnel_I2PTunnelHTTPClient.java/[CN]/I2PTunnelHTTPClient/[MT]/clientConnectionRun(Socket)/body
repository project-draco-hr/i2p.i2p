{
  OutputStream out=null;
  String targetRequest=null;
  boolean usingWWWProxy=false;
  String currentProxy=null;
  long requestId=++__requestId;
  try {
    out=s.getOutputStream();
    BufferedReader br=new BufferedReader(new InputStreamReader(s.getInputStream(),"ISO-8859-1"));
    String line, method=null, protocol=null, host=null, destination=null;
    StringBuffer newRequest=new StringBuffer();
    while ((line=br.readLine()) != null) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug(getPrefix(requestId) + "Line=[" + line+ "]");
      if (line.startsWith("Connection: ") || line.startsWith("Keep-Alive: ") || line.startsWith("Proxy-Connection: "))       continue;
      if (method == null) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug(getPrefix(requestId) + "Method is null for [" + line+ "]");
        int pos=line.indexOf(" ");
        if (pos == -1)         break;
        method=line.substring(0,pos);
        String request=line.substring(pos + 1);
        if (request.startsWith("/") && getTunnel().getClientOptions().getProperty("i2ptunnel.noproxy") != null) {
          request="http://i2p" + request;
        }
 else         if (request.startsWith("/eepproxy/")) {
          String subRequest=request.substring("/eepproxy/".length());
          int protopos=subRequest.indexOf(" ");
          String uri=subRequest.substring(0,protopos);
          if (uri.indexOf("/") == -1) {
            uri=uri + "/";
          }
          request="http://" + uri + subRequest.substring(protopos);
        }
        pos=request.indexOf("//");
        if (pos == -1) {
          method=null;
          break;
        }
        protocol=request.substring(0,pos + 2);
        request=request.substring(pos + 2);
        targetRequest=request;
        pos=request.indexOf("/");
        if (pos == -1) {
          method=null;
          break;
        }
        host=request.substring(0,pos);
        if (host.toLowerCase().endsWith(".i2p")) {
          destination=host;
          host=getHostName(destination);
          if ((host != null) && ("i2p".equals(host))) {
            int pos2;
            if ((pos2=request.indexOf("?")) != -1) {
              String fragments=request.substring(pos2 + 1);
              String uriPath=request.substring(0,pos2);
              pos2=fragments.indexOf(" ");
              String protocolVersion=fragments.substring(pos2 + 1);
              String urlEncoding="";
              fragments=fragments.substring(0,pos2);
              fragments=fragments + "&";
              String fragment;
              while (fragments.length() > 0) {
                pos2=fragments.indexOf("&");
                fragment=fragments.substring(0,pos2);
                fragments=fragments.substring(pos2 + 1);
                if (fragment.startsWith("i2paddresshelper")) {
                  pos2=fragment.indexOf("=");
                  if (pos2 >= 0) {
                    addressHelpers.put(destination,fragment.substring(pos2 + 1));
                  }
                }
 else {
                  if ("".equals(urlEncoding)) {
                    urlEncoding="?" + fragment;
                  }
 else {
                    urlEncoding=urlEncoding + "&" + fragment;
                  }
                }
              }
              request=uriPath + urlEncoding + " "+ protocolVersion;
            }
            String addressHelper=(String)addressHelpers.get(destination);
            if (addressHelper != null) {
              destination=addressHelper;
              host=getHostName(destination);
            }
          }
          line=method + " " + request.substring(pos);
        }
 else         if (host.indexOf(".") != -1) {
          if (_log.shouldLog(Log.DEBUG))           _log.debug("Before selecting outproxy for " + host);
          currentProxy=selectProxy();
          if (_log.shouldLog(Log.DEBUG))           _log.debug("After selecting outproxy for " + host + ": "+ currentProxy);
          if (currentProxy == null) {
            if (_log.shouldLog(Log.WARN))             _log.warn(getPrefix(requestId) + "Host wants to be outproxied, but we dont have any!");
            l.log("No HTTP outproxy found for the request.");
            if (out != null) {
              out.write(ERR_NO_OUTPROXY);
              out.write("<p /><i>Generated on: ".getBytes());
              out.write(new Date().toString().getBytes());
              out.write("</i></body></html>\n".getBytes());
              out.flush();
            }
            s.close();
            return;
          }
          destination=currentProxy;
          usingWWWProxy=true;
          if (_log.shouldLog(Log.DEBUG))           _log.debug(getPrefix(requestId) + "Host doesnt end with .i2p and it contains a period [" + host+ "]: wwwProxy!");
        }
 else {
          request=request.substring(pos + 1);
          pos=request.indexOf("/");
          destination=request.substring(0,pos);
          line=method + " " + request.substring(pos);
        }
        boolean isValid=usingWWWProxy || isSupportedAddress(host,protocol);
        if (!isValid) {
          if (_log.shouldLog(Log.INFO))           _log.info(getPrefix(requestId) + "notValid(" + host+ ")");
          method=null;
          destination=null;
          break;
        }
 else         if (!usingWWWProxy) {
          if (_log.shouldLog(Log.INFO))           _log.info(getPrefix(requestId) + "host=getHostName(" + destination+ ")");
          host=getHostName(destination);
        }
        if (_log.shouldLog(Log.DEBUG)) {
          _log.debug(getPrefix(requestId) + "METHOD:" + method+ ":");
          _log.debug(getPrefix(requestId) + "PROTOC:" + protocol+ ":");
          _log.debug(getPrefix(requestId) + "HOST  :" + host+ ":");
          _log.debug(getPrefix(requestId) + "DEST  :" + destination+ ":");
        }
      }
 else {
        if (line.startsWith("Host: ") && !usingWWWProxy) {
          line="Host: " + host;
          if (_log.shouldLog(Log.INFO))           _log.info(getPrefix(requestId) + "Setting host = " + host);
        }
 else         if (line.startsWith("User-Agent: ")) {
          line=null;
          continue;
        }
 else         if (line.startsWith("Accept")) {
          line=null;
          continue;
        }
 else         if (line.startsWith("Referer: ")) {
          line=null;
          continue;
        }
 else         if (line.startsWith("Via: ")) {
          line=null;
          continue;
        }
 else         if (line.startsWith("From: ")) {
          line=null;
          continue;
        }
      }
      if (line.length() == 0) {
        newRequest.append("User-Agent: MYOB/6.66 (AN/ON)\r\n");
        newRequest.append("Connection: close\r\n\r\n");
        break;
      }
 else {
        newRequest.append(line).append("\r\n");
      }
    }
    if (_log.shouldLog(Log.DEBUG))     _log.debug(getPrefix(requestId) + "NewRequest header: [" + newRequest.toString()+ "]");
    while (br.ready()) {
      int i=br.read();
      if (i != -1) {
        newRequest.append((char)i);
      }
    }
    if (method == null || destination == null) {
      l.log("No HTTP method found in the request.");
      if (out != null) {
        out.write(ERR_REQUEST_DENIED);
        out.write("<p /><i>Generated on: ".getBytes());
        out.write(new Date().toString().getBytes());
        out.write("</i></body></html>\n".getBytes());
        out.flush();
      }
      s.close();
      return;
    }
    if (_log.shouldLog(Log.DEBUG))     _log.debug(getPrefix(requestId) + "Destination: " + destination);
    Destination dest=I2PTunnel.destFromName(destination);
    if (dest == null) {
      l.log("Could not resolve " + destination + ".");
      if (_log.shouldLog(Log.WARN))       _log.warn("Unable to resolve " + destination + " (proxy? "+ usingWWWProxy+ ", request: "+ targetRequest);
      writeErrorMessage(ERR_DESTINATION_UNKNOWN,out,targetRequest,usingWWWProxy,destination);
      s.close();
      return;
    }
    String remoteID;
    Properties opts=new Properties();
    opts.setProperty("i2p.streaming.inactivityTimeout","" + 120 * 1000);
    opts.setProperty("i2p.streaming.inactivityTimeoutAction","" + 1);
    I2PSocket i2ps=createI2PSocket(dest,getDefaultOptions(opts));
    byte[] data=newRequest.toString().getBytes("ISO-8859-1");
    Runnable onTimeout=new OnTimeout(s,s.getOutputStream(),targetRequest,usingWWWProxy,currentProxy,requestId);
    I2PTunnelRunner runner=new I2PTunnelRunner(s,i2ps,sockLock,data,mySockets,onTimeout);
  }
 catch (  SocketException ex) {
    _log.info(getPrefix(requestId) + "Error trying to connect",ex);
    l.log(ex.getMessage());
    handleHTTPClientException(ex,out,targetRequest,usingWWWProxy,currentProxy,requestId);
    closeSocket(s);
  }
catch (  IOException ex) {
    _log.info(getPrefix(requestId) + "Error trying to connect",ex);
    l.log(ex.getMessage());
    handleHTTPClientException(ex,out,targetRequest,usingWWWProxy,currentProxy,requestId);
    closeSocket(s);
  }
catch (  I2PException ex) {
    _log.info("getPrefix(requestId) + Error trying to connect",ex);
    l.log(ex.getMessage());
    handleHTTPClientException(ex,out,targetRequest,usingWWWProxy,currentProxy,requestId);
    closeSocket(s);
  }
}
