{
  OutputStream out=null;
  String targetRequest=null;
  boolean usingWWWProxy=false;
  String currentProxy=null;
  long requestId=++__requestId;
  try {
    out=s.getOutputStream();
    BufferedReader br=new BufferedReader(new InputStreamReader(s.getInputStream(),"ISO-8859-1"));
    String line, method=null, protocol=null, host=null, destination=null;
    StringBuffer newRequest=new StringBuffer();
    int ahelper=0;
    while ((line=br.readLine()) != null) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug(getPrefix(requestId) + "Line=[" + line+ "]");
      String lowercaseLine=line.toLowerCase();
      if (lowercaseLine.startsWith("connection: ") || lowercaseLine.startsWith("keep-alive: ") || lowercaseLine.startsWith("proxy-connection: "))       continue;
      if (method == null) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug(getPrefix(requestId) + "Method is null for [" + line+ "]");
        line=line.trim();
        int pos=line.indexOf(" ");
        if (pos == -1)         break;
        method=line.substring(0,pos);
        String request=line.substring(pos + 1);
        if (request.startsWith("/") && getTunnel().getClientOptions().getProperty("i2ptunnel.noproxy") != null) {
          request="http://i2p" + request;
        }
 else         if (request.startsWith("/eepproxy/")) {
          String subRequest=request.substring("/eepproxy/".length());
          int protopos=subRequest.indexOf(" ");
          String uri=subRequest.substring(0,protopos);
          if (uri.indexOf("/") == -1) {
            uri=uri + "/";
          }
          request="http://" + uri + subRequest.substring(protopos);
        }
        pos=request.indexOf("//");
        if (pos == -1) {
          method=null;
          break;
        }
        protocol=request.substring(0,pos + 2);
        request=request.substring(pos + 2);
        targetRequest=request;
        pos=request.indexOf("/");
        if (pos == -1) {
          method=null;
          break;
        }
        host=request.substring(0,pos);
        if (host.toLowerCase().endsWith(".i2p")) {
          destination=host;
          host=getHostName(destination);
          int pos2;
          if ((pos2=request.indexOf("?")) != -1) {
            String ahelperKey=null;
            boolean ahelperConflict=false;
            String fragments=request.substring(pos2 + 1);
            String uriPath=request.substring(0,pos2);
            pos2=fragments.indexOf(" ");
            String protocolVersion=fragments.substring(pos2 + 1);
            String urlEncoding="";
            fragments=fragments.substring(0,pos2);
            String initialFragments=fragments;
            fragments=fragments + "&";
            String fragment;
            while (fragments.length() > 0) {
              pos2=fragments.indexOf("&");
              fragment=fragments.substring(0,pos2);
              fragments=fragments.substring(pos2 + 1);
              if (fragment.startsWith("i2paddresshelper=")) {
                pos2=fragment.indexOf("=");
                ahelperKey=fragment.substring(pos2 + 1);
                if (ahelperKey != null) {
                  if ((host == null) || ("i2p".equals(host))) {
                    addressHelpers.put(destination,ahelperKey);
                  }
 else {
                    if (!host.equals(ahelperKey)) {
                      ahelperConflict=true;
                      if (_log.shouldLog(Log.WARN))                       _log.warn(getPrefix(requestId) + "Addresshelper key conflict for site [" + destination+ "], trusted key ["+ host+ "], specified key ["+ ahelperKey+ "].");
                    }
                  }
                }
              }
 else {
                if ("".equals(urlEncoding)) {
                  urlEncoding="?" + fragment;
                }
 else {
                  urlEncoding=urlEncoding + "&" + fragment;
                }
              }
            }
            request=uriPath + urlEncoding + " "+ protocolVersion;
            if (ahelperConflict) {
              String str;
              byte[] header;
              str=FileUtil.readTextFile("docs/ahelper-conflict-header.ht",100,true);
              if (str != null)               header=str.getBytes();
 else               header=ERR_AHELPER_CONFLICT;
              if (out != null) {
                long alias=I2PAppContext.getGlobalContext().random().nextLong();
                String trustedURL=protocol + uriPath + urlEncoding;
                String conflictURL=protocol + alias + ".i2p/?"+ initialFragments;
                out.write(header);
                out.write(("To visit the destination in your host database, click <a href=\"" + trustedURL + "\">here</a>. To visit the conflicting addresshelper link by temporarily giving it a random alias, click <a href=\""+ conflictURL+ "\">here</a>.<P/>").getBytes());
                out.write("</div><p><i>I2P HTTP Proxy Server<br>Generated on: ".getBytes());
                out.write(new Date().toString().getBytes());
                out.write("</i></body></html>\n".getBytes());
                out.flush();
              }
              s.close();
              return;
            }
          }
          String addressHelper=(String)addressHelpers.get(destination);
          if (addressHelper != null) {
            destination=addressHelper;
            host=getHostName(destination);
            ahelper=1;
          }
          line=method + " " + request.substring(pos);
        }
 else         if (host.indexOf(".") != -1) {
          if (_log.shouldLog(Log.DEBUG))           _log.debug("Before selecting outproxy for " + host);
          currentProxy=selectProxy();
          if (_log.shouldLog(Log.DEBUG))           _log.debug("After selecting outproxy for " + host + ": "+ currentProxy);
          if (currentProxy == null) {
            if (_log.shouldLog(Log.WARN))             _log.warn(getPrefix(requestId) + "Host wants to be outproxied, but we dont have any!");
            l.log("No HTTP outproxy found for the request.");
            if (out != null) {
              out.write(ERR_NO_OUTPROXY);
              out.write("<p /><i>Generated on: ".getBytes());
              out.write(new Date().toString().getBytes());
              out.write("</i></body></html>\n".getBytes());
              out.flush();
            }
            s.close();
            return;
          }
          destination=currentProxy;
          usingWWWProxy=true;
          if (_log.shouldLog(Log.DEBUG))           _log.debug(getPrefix(requestId) + "Host doesnt end with .i2p and it contains a period [" + host+ "]: wwwProxy!");
        }
 else {
          request=request.substring(pos + 1);
          pos=request.indexOf("/");
          if (pos < 0) {
            l.log("Invalid request url [" + request + "]");
            if (out != null) {
              out.write(ERR_REQUEST_DENIED);
              out.write("<p /><i>Generated on: ".getBytes());
              out.write(new Date().toString().getBytes());
              out.write("</i></body></html>\n".getBytes());
              out.flush();
            }
            s.close();
            return;
          }
          destination=request.substring(0,pos);
          line=method + " " + request.substring(pos);
        }
        boolean isValid=usingWWWProxy || isSupportedAddress(host,protocol);
        if (!isValid) {
          if (_log.shouldLog(Log.INFO))           _log.info(getPrefix(requestId) + "notValid(" + host+ ")");
          method=null;
          destination=null;
          break;
        }
 else         if (!usingWWWProxy) {
          if (_log.shouldLog(Log.INFO))           _log.info(getPrefix(requestId) + "host=getHostName(" + destination+ ")");
          host=getHostName(destination);
        }
        if (_log.shouldLog(Log.DEBUG)) {
          _log.debug(getPrefix(requestId) + "METHOD:" + method+ ":");
          _log.debug(getPrefix(requestId) + "PROTOC:" + protocol+ ":");
          _log.debug(getPrefix(requestId) + "HOST  :" + host+ ":");
          _log.debug(getPrefix(requestId) + "DEST  :" + destination+ ":");
        }
      }
 else {
        if (lowercaseLine.startsWith("host: ") && !usingWWWProxy) {
          line="Host: " + host;
          if (_log.shouldLog(Log.INFO))           _log.info(getPrefix(requestId) + "Setting host = " + host);
        }
 else         if (lowercaseLine.startsWith("user-agent: ")) {
          line=null;
          continue;
        }
 else         if (lowercaseLine.startsWith("accept")) {
          line=null;
          continue;
        }
 else         if (lowercaseLine.startsWith("referer: ")) {
          line=null;
          continue;
        }
 else         if (lowercaseLine.startsWith("via: ")) {
          line=null;
          continue;
        }
 else         if (lowercaseLine.startsWith("from: ")) {
          line=null;
          continue;
        }
      }
      if (line.length() == 0) {
        String ok=getTunnel().getContext().getProperty("i2ptunnel.gzip");
        boolean gzip=DEFAULT_GZIP;
        if (ok != null)         gzip=Boolean.valueOf(ok).booleanValue();
        if (gzip) {
          newRequest.append("Accept-Encoding: \r\n");
          newRequest.append("X-Accept-Encoding: x-i2p-gzip;q=1.0, identity;q=0.5, deflate;q=0, gzip;q=0, *;q=0\r\n");
        }
        newRequest.append("User-Agent: MYOB/6.66 (AN/ON)\r\n");
        newRequest.append("Connection: close\r\n\r\n");
        break;
      }
 else {
        newRequest.append(line.trim()).append("\r\n");
      }
    }
    if (_log.shouldLog(Log.DEBUG))     _log.debug(getPrefix(requestId) + "NewRequest header: [" + newRequest.toString()+ "]");
    while (br.ready()) {
      int i=br.read();
      if (i != -1) {
        newRequest.append((char)i);
      }
    }
    if (method == null || destination == null) {
      l.log("No HTTP method found in the request.");
      if (out != null) {
        out.write(ERR_REQUEST_DENIED);
        out.write("<p /><i>Generated on: ".getBytes());
        out.write(new Date().toString().getBytes());
        out.write("</i></body></html>\n".getBytes());
        out.flush();
      }
      s.close();
      return;
    }
    if (_log.shouldLog(Log.DEBUG))     _log.debug(getPrefix(requestId) + "Destination: " + destination);
    Destination dest=I2PTunnel.destFromName(destination);
    if (dest == null) {
      l.log("Could not resolve " + destination + ".");
      if (_log.shouldLog(Log.WARN))       _log.warn("Unable to resolve " + destination + " (proxy? "+ usingWWWProxy+ ", request: "+ targetRequest);
      String str;
      byte[] header;
      boolean showAddrHelper=false;
      if (usingWWWProxy)       str=FileUtil.readTextFile("docs/dnfp-header.ht",100,true);
 else       if (ahelper != 0)       str=FileUtil.readTextFile("docs/dnfb-header.ht",100,true);
 else {
        str=FileUtil.readTextFile("docs/dnfh-header.ht",100,true);
        showAddrHelper=true;
      }
      if (str != null)       header=str.getBytes();
 else       header=ERR_DESTINATION_UNKNOWN;
      writeErrorMessage(header,out,targetRequest,usingWWWProxy,destination,showAddrHelper);
      s.close();
      return;
    }
    String remoteID;
    Properties opts=new Properties();
    I2PSocket i2ps=createI2PSocket(dest,getDefaultOptions(opts));
    byte[] data=newRequest.toString().getBytes("ISO-8859-1");
    Runnable onTimeout=new OnTimeout(s,s.getOutputStream(),targetRequest,usingWWWProxy,currentProxy,requestId);
    I2PTunnelRunner runner=new I2PTunnelHTTPClientRunner(s,i2ps,sockLock,data,mySockets,onTimeout);
  }
 catch (  SocketException ex) {
    _log.info(getPrefix(requestId) + "Error trying to connect",ex);
    l.log(ex.getMessage());
    handleHTTPClientException(ex,out,targetRequest,usingWWWProxy,currentProxy,requestId);
    closeSocket(s);
  }
catch (  IOException ex) {
    _log.info(getPrefix(requestId) + "Error trying to connect",ex);
    l.log(ex.getMessage());
    handleHTTPClientException(ex,out,targetRequest,usingWWWProxy,currentProxy,requestId);
    closeSocket(s);
  }
catch (  I2PException ex) {
    _log.info("getPrefix(requestId) + Error trying to connect",ex);
    l.log(ex.getMessage());
    handleHTTPClientException(ex,out,targetRequest,usingWWWProxy,currentProxy,requestId);
    closeSocket(s);
  }
}
