{
  InputStream in=null;
  OutputStream out=null;
  String targetRequest=null;
  boolean usingWWWProxy=false;
  boolean usingInternalServer=false;
  String currentProxy=null;
  long requestId=++__requestId;
  try {
    out=s.getOutputStream();
    InputReader reader=new InputReader(s.getInputStream());
    String line, method=null, protocol=null, host=null, destination=null;
    StringBuilder newRequest=new StringBuilder();
    boolean ahelperPresent=false;
    boolean ahelperNew=false;
    String ahelperKey=null;
    String userAgent=null;
    String authorization=null;
    while ((line=reader.readLine(method)) != null) {
      line=line.trim();
      if (_log.shouldLog(Log.DEBUG))       _log.debug(getPrefix(requestId) + "Line=[" + line+ "]");
      String lowercaseLine=line.toLowerCase();
      if (lowercaseLine.startsWith("connection: ") || lowercaseLine.startsWith("keep-alive: ") || lowercaseLine.startsWith("proxy-connection: "))       continue;
      if (method == null) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug(getPrefix(requestId) + "First line [" + line+ "]");
        int pos=line.indexOf(" ");
        if (pos == -1)         break;
        method=line.substring(0,pos);
        String request=line.substring(pos + 1);
        if (request.startsWith("/") && getTunnel().getClientOptions().getProperty("i2ptunnel.noproxy") != null) {
          request="http://i2p" + request;
        }
 else         if (request.startsWith("/eepproxy/")) {
          String subRequest=request.substring("/eepproxy/".length());
          int protopos=subRequest.indexOf(" ");
          String uri=subRequest.substring(0,protopos);
          if (uri.indexOf("/") == -1) {
            uri=uri + "/";
          }
          request="http://" + uri + subRequest.substring(protopos);
        }
 else         if (request.toLowerCase().startsWith("http://i2p/")) {
          String subRequest=request.substring("http://i2p/".length());
          int protopos=subRequest.indexOf(" ");
          String uri=subRequest.substring(0,protopos);
          if (uri.indexOf("/") == -1) {
            uri=uri + "/";
          }
          request="http://" + uri + subRequest.substring(protopos);
        }
        pos=request.indexOf("//");
        if (pos == -1) {
          method=null;
          break;
        }
        protocol=request.substring(0,pos + 2);
        request=request.substring(pos + 2);
        targetRequest=request;
        pos=request.indexOf("/");
        if (pos == -1) {
          method=null;
          break;
        }
        host=request.substring(0,pos);
        int posPort=host.indexOf(":");
        int port=80;
        if (posPort != -1) {
          String[] parts=host.split(":");
          try {
            host=parts[0];
          }
 catch (          ArrayIndexOutOfBoundsException ex) {
            if (out != null) {
              out.write(getErrorPage("denied",ERR_REQUEST_DENIED));
              writeFooter(out);
            }
            s.close();
            return;
          }
          try {
            port=Integer.parseInt(parts[1]);
          }
 catch (          Exception exc) {
          }
        }
        if (host.length() >= 516 && host.indexOf(".") < 0) {
          destination=host;
          host=getHostName(destination);
          line=method + ' ' + request.substring(pos);
        }
 else         if (host.toLowerCase().equals(LOCAL_SERVER)) {
          destination=host;
          usingInternalServer=true;
        }
 else         if (host.toLowerCase().endsWith(".i2p")) {
          destination=host;
          host=getHostName(destination);
          int pos2;
          if ((pos2=request.indexOf("?")) != -1) {
            boolean ahelperConflict=false;
            String fragments=request.substring(pos2 + 1);
            String uriPath=request.substring(0,pos2);
            pos2=fragments.indexOf(" ");
            String protocolVersion=fragments.substring(pos2 + 1);
            String urlEncoding="";
            fragments=fragments.substring(0,pos2);
            String initialFragments=fragments;
            fragments=fragments + "&";
            String fragment;
            while (fragments.length() > 0) {
              pos2=fragments.indexOf("&");
              fragment=fragments.substring(0,pos2);
              fragments=fragments.substring(pos2 + 1);
              if (fragment.startsWith("i2paddresshelper=") && !Boolean.valueOf(getTunnel().getClientOptions().getProperty(PROP_DISABLE_HELPER)).booleanValue()) {
                pos2=fragment.indexOf("=");
                ahelperKey=fragment.substring(pos2 + 1);
                if (ahelperKey != null) {
                  if (ahelperKey.endsWith(".b32.i2p")) {
                    Destination dest=_context.namingService().lookup(ahelperKey);
                    if (dest == null)                     throw new RuntimeException("Could not find destination for " + ahelperKey);
                    ahelperKey=dest.toBase64();
                  }
                  ahelperPresent=true;
                  if (host == null || "i2p".equals(host)) {
                    String old=addressHelpers.putIfAbsent(destination.toLowerCase(),ahelperKey);
                    ahelperNew=old == null;
                    if ((!ahelperNew) && !old.equals(ahelperKey)) {
                      ahelperConflict=true;
                      if (_log.shouldLog(Log.WARN))                       _log.warn(getPrefix(requestId) + "Addresshelper key conflict for site [" + destination+ "], trusted key ["+ old+ "], specified key ["+ ahelperKey+ "].");
                    }
                  }
 else {
                    Destination hostDest=_context.namingService().lookup(destination);
                    if (hostDest != null) {
                      String destB64=hostDest.toBase64();
                      if (destB64 != null && !destB64.equals(ahelperKey)) {
                        ahelperConflict=true;
                        if (_log.shouldLog(Log.WARN))                         _log.warn(getPrefix(requestId) + "Addresshelper key conflict for site [" + destination+ "], trusted key ["+ destB64+ "], specified key ["+ ahelperKey+ "].");
                      }
                    }
                  }
                }
              }
 else {
                if ("".equals(urlEncoding)) {
                  urlEncoding="?" + fragment;
                }
 else {
                  urlEncoding=urlEncoding + "&" + fragment;
                }
              }
            }
            request=uriPath + urlEncoding + " "+ protocolVersion;
            targetRequest=request;
            if (ahelperConflict) {
              if (out != null) {
                String alias=getHostName(ahelperKey);
                if (alias.equals("i2p")) {
                  byte[] header=getErrorPage("dnfb",ERR_DESTINATION_UNKNOWN);
                  writeErrorMessage(header,out,targetRequest,false,destination,null);
                }
 else {
                  String trustedURL=protocol + uriPath + urlEncoding;
                  String conflictURL=protocol + alias + '/'+ urlEncoding;
                  byte[] header=getErrorPage("ahelper-conflict",ERR_AHELPER_CONFLICT);
                  out.write(header);
                  out.write(_("To visit the destination in your host database, click <a href=\"{0}\">here</a>. To visit the conflicting addresshelper destination, click <a href=\"{1}\">here</a>.",trustedURL,conflictURL).getBytes("UTF-8"));
                  out.write(("<p></div>").getBytes());
                  writeFooter(out);
                }
              }
              s.close();
              return;
            }
          }
          String addressHelper=addressHelpers.get(destination);
          if (addressHelper != null)           host=getHostName(addressHelper);
          line=method + " " + request.substring(pos);
        }
 else         if (host.toLowerCase().equals("localhost") || host.equals("127.0.0.1") || host.startsWith("192.168.")) {
          if (out != null) {
            out.write(getErrorPage("localhost",ERR_LOCALHOST));
            writeFooter(out);
          }
          s.close();
          return;
        }
 else         if (host.indexOf(".") != -1) {
          host=host + ":" + port;
          if (_log.shouldLog(Log.DEBUG))           _log.debug("Before selecting outproxy for " + host);
          currentProxy=selectProxy();
          if (_log.shouldLog(Log.DEBUG))           _log.debug("After selecting outproxy for " + host + ": "+ currentProxy);
          if (currentProxy == null) {
            if (_log.shouldLog(Log.WARN))             _log.warn(getPrefix(requestId) + "Host wants to be outproxied, but we dont have any!");
            l.log("No HTTP outproxy found for the request.");
            if (out != null) {
              out.write(getErrorPage("noproxy",ERR_NO_OUTPROXY));
              writeFooter(out);
            }
            s.close();
            return;
          }
          destination=currentProxy;
          usingWWWProxy=true;
          if (_log.shouldLog(Log.DEBUG))           _log.debug(getPrefix(requestId) + "Host doesnt end with .i2p and it contains a period [" + host+ "]: wwwProxy!");
        }
 else {
          request=request.substring(pos + 1);
          pos=request.indexOf("/");
          if (pos < 0) {
            l.log("Invalid request url [" + request + "]");
            if (out != null) {
              out.write(getErrorPage("denied",ERR_REQUEST_DENIED));
              writeFooter(out);
            }
            s.close();
            return;
          }
          destination=request.substring(0,pos);
          host=getHostName(destination);
          line=method + " " + request.substring(pos);
        }
        if (port != 80 && !usingWWWProxy) {
          if (out != null) {
            out.write(getErrorPage("denied",ERR_REQUEST_DENIED));
            writeFooter(out);
          }
          s.close();
          return;
        }
        boolean isValid=usingWWWProxy || usingInternalServer || isSupportedAddress(host,protocol);
        if (!isValid) {
          if (_log.shouldLog(Log.INFO))           _log.info(getPrefix(requestId) + "notValid(" + host+ ")");
          method=null;
          destination=null;
          break;
        }
        if (_log.shouldLog(Log.DEBUG)) {
          _log.debug(getPrefix(requestId) + "METHOD: \"" + method+ "\"");
          _log.debug(getPrefix(requestId) + "PROTOC: \"" + protocol+ "\"");
          _log.debug(getPrefix(requestId) + "HOST  : \"" + host+ "\"");
          _log.debug(getPrefix(requestId) + "DEST  : \"" + destination+ "\"");
        }
      }
 else {
        if (lowercaseLine.startsWith("host: ") && !usingWWWProxy) {
          line="Host: " + host;
          if (_log.shouldLog(Log.INFO))           _log.info(getPrefix(requestId) + "Setting host = " + host);
        }
 else         if (lowercaseLine.startsWith("user-agent: ")) {
          userAgent=lowercaseLine.substring(12);
          if (!Boolean.valueOf(getTunnel().getClientOptions().getProperty(PROP_USER_AGENT)).booleanValue()) {
            line=null;
            continue;
          }
        }
 else         if (lowercaseLine.startsWith("accept")) {
          line=null;
          continue;
        }
 else         if (lowercaseLine.startsWith("referer: ") && !Boolean.valueOf(getTunnel().getClientOptions().getProperty(PROP_REFERER)).booleanValue()) {
          line=null;
          continue;
        }
 else         if (lowercaseLine.startsWith("via: ") && !Boolean.valueOf(getTunnel().getClientOptions().getProperty(PROP_VIA)).booleanValue()) {
          line=null;
          continue;
        }
 else         if (lowercaseLine.startsWith("from: ")) {
          line=null;
          continue;
        }
 else         if (lowercaseLine.startsWith("authorization: ntlm ")) {
          line=null;
          continue;
        }
 else         if (lowercaseLine.startsWith("proxy-authorization: ")) {
          if (lowercaseLine.startsWith("proxy-authorization: basic "))           authorization=line.substring(27);
          line=null;
          continue;
        }
      }
      if (line.length() == 0) {
        String ok=getTunnel().getClientOptions().getProperty("i2ptunnel.gzip");
        boolean gzip=DEFAULT_GZIP;
        if (ok != null)         gzip=Boolean.valueOf(ok).booleanValue();
        if (gzip && !usingInternalServer) {
          newRequest.append("Accept-Encoding: \r\n");
          newRequest.append("X-Accept-Encoding: x-i2p-gzip;q=1.0, identity;q=0.5, deflate;q=0, gzip;q=0, *;q=0\r\n");
        }
        if (!Boolean.valueOf(getTunnel().getClientOptions().getProperty(PROP_USER_AGENT)).booleanValue()) {
          if (usingWWWProxy)           newRequest.append("User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.6) Gecko/20100625 Firefox/3.6.6\r\n");
 else           newRequest.append("User-Agent: MYOB/6.66 (AN/ON)\r\n");
        }
        if (usingWWWProxy && Boolean.valueOf(getTunnel().getClientOptions().getProperty(PROP_OUTPROXY_AUTH)).booleanValue()) {
          String user=getTunnel().getClientOptions().getProperty(PROP_OUTPROXY_USER_PREFIX + currentProxy);
          String pw=getTunnel().getClientOptions().getProperty(PROP_OUTPROXY_PW_PREFIX + currentProxy);
          if (user == null || pw == null) {
            user=getTunnel().getClientOptions().getProperty(PROP_OUTPROXY_USER);
            pw=getTunnel().getClientOptions().getProperty(PROP_OUTPROXY_PW);
          }
          if (user != null && pw != null) {
            newRequest.append("Proxy-Authorization: Basic ").append(Base64.encode((user + ':' + pw).getBytes(),true)).append("\r\n");
          }
        }
        newRequest.append("Connection: close\r\n\r\n");
        break;
      }
 else {
        newRequest.append(line).append("\r\n");
      }
    }
    if (_log.shouldLog(Log.DEBUG))     _log.debug(getPrefix(requestId) + "NewRequest header: [" + newRequest.toString()+ "]");
    if (method == null || destination == null) {
      if (out != null) {
        if ("http://".equalsIgnoreCase(protocol))         out.write(getErrorPage("denied",ERR_REQUEST_DENIED));
 else         out.write(getErrorPage("protocol",ERR_BAD_PROTOCOL));
        writeFooter(out);
      }
      s.close();
      return;
    }
    if (_log.shouldLog(Log.DEBUG))     _log.debug(getPrefix(requestId) + "Destination: " + destination);
    if (!authorize(s,requestId,authorization)) {
      if (_log.shouldLog(Log.WARN)) {
        if (authorization != null)         _log.warn(getPrefix(requestId) + "Auth failed, sending 407 again");
 else         _log.warn(getPrefix(requestId) + "Auth required, sending 407");
      }
      out.write(getErrorPage("auth",ERR_AUTH));
      writeFooter(out);
      s.close();
      return;
    }
    if (usingInternalServer) {
      if (targetRequest.startsWith(LOCAL_SERVER + "/add?") && Boolean.valueOf(getTunnel().getClientOptions().getProperty(PROP_DISABLE_HELPER)).booleanValue()) {
        out.write(ERR_HELPER_DISABLED);
      }
 else {
        serveLocalFile(out,method,targetRequest,_proxyNonce);
      }
      s.close();
      return;
    }
    Destination clientDest;
    String addressHelper=addressHelpers.get(destination.toLowerCase());
    if (addressHelper != null) {
      clientDest=_context.namingService().lookup(addressHelper);
      if (clientDest == null)       addressHelpers.remove(destination.toLowerCase());
    }
 else     if ("i2p".equals(host)) {
      clientDest=null;
    }
 else {
      clientDest=_context.namingService().lookup(destination);
    }
    if (clientDest == null) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Unable to resolve " + destination + " (proxy? "+ usingWWWProxy+ ", request: "+ targetRequest);
      byte[] header;
      String jumpServers=null;
      if (usingWWWProxy)       header=getErrorPage("dnfp",ERR_DESTINATION_UNKNOWN);
 else       if (ahelperPresent)       header=getErrorPage("dnfb",ERR_DESTINATION_UNKNOWN);
 else       if (destination.length() == 60 && destination.endsWith(".b32.i2p"))       header=getErrorPage("dnf",ERR_DESTINATION_UNKNOWN);
 else {
        header=getErrorPage("dnfh",ERR_DESTINATION_UNKNOWN);
        jumpServers=getTunnel().getClientOptions().getProperty(PROP_JUMP_SERVERS);
        if (jumpServers == null)         jumpServers=DEFAULT_JUMP_SERVERS;
      }
      writeErrorMessage(header,out,targetRequest,usingWWWProxy,destination,jumpServers);
      s.close();
      return;
    }
    if (ahelperNew && "GET".equals(method) && (userAgent == null || !userAgent.startsWith("Wget"))&& !Boolean.valueOf(getTunnel().getClientOptions().getProperty(PROP_DISABLE_HELPER)).booleanValue()) {
      writeHelperSaveForm(out,destination,ahelperKey,protocol + targetRequest);
      s.close();
      return;
    }
    if (ahelperPresent && !"POST".equals(method)) {
      String uri=protocol + targetRequest;
      int spc=uri.indexOf(" ");
      if (spc >= 0)       uri=uri.substring(0,spc);
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Auto redirecting to " + uri);
      out.write(("HTTP/1.1 301 Address Helper Accepted\r\n" + "Location: " + uri + "\r\n"+ "\r\n").getBytes("UTF-8"));
      s.close();
      return;
    }
    Properties opts=new Properties();
    I2PSocket i2ps=createI2PSocket(clientDest,getDefaultOptions(opts));
    byte[] data=newRequest.toString().getBytes("ISO-8859-1");
    Runnable onTimeout=new OnTimeout(s,s.getOutputStream(),targetRequest,usingWWWProxy,currentProxy,requestId);
    I2PTunnelRunner runner=new I2PTunnelHTTPClientRunner(s,i2ps,sockLock,data,mySockets,onTimeout);
  }
 catch (  SocketException ex) {
    if (_log.shouldLog(Log.INFO))     _log.info(getPrefix(requestId) + "Error trying to connect",ex);
    handleHTTPClientException(ex,out,targetRequest,usingWWWProxy,currentProxy,requestId);
    closeSocket(s);
  }
catch (  IOException ex) {
    if (_log.shouldLog(Log.INFO))     _log.info(getPrefix(requestId) + "Error trying to connect",ex);
    handleHTTPClientException(ex,out,targetRequest,usingWWWProxy,currentProxy,requestId);
    closeSocket(s);
  }
catch (  I2PException ex) {
    if (_log.shouldLog(Log.INFO))     _log.info("getPrefix(requestId) + Error trying to connect",ex);
    handleHTTPClientException(ex,out,targetRequest,usingWWWProxy,currentProxy,requestId);
    closeSocket(s);
  }
catch (  OutOfMemoryError oom) {
    IOException ex=new IOException("OOM");
    _log.error("getPrefix(requestId) + Error trying to connect",oom);
    handleHTTPClientException(ex,out,targetRequest,usingWWWProxy,currentProxy,requestId);
    closeSocket(s);
  }
}
