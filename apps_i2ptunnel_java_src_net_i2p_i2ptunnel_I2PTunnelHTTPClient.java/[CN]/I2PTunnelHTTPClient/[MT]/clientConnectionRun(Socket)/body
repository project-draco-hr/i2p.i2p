{
  OutputStream out=null;
  String targetRequest=null;
  boolean usingWWWProxy=false;
  boolean usingInternalOutproxy=false;
  Outproxy outproxy=null;
  boolean usingInternalServer=false;
  String internalPath=null;
  String internalRawQuery=null;
  String currentProxy=null;
  long requestId=__requestId.incrementAndGet();
  boolean shout=false;
  try {
    out=s.getOutputStream();
    InputReader reader=new InputReader(s.getInputStream());
    String line, method=null, protocol=null, host=null, destination=null;
    StringBuilder newRequest=new StringBuilder();
    boolean ahelperPresent=false;
    boolean ahelperNew=false;
    String ahelperKey=null;
    String userAgent=null;
    String authorization=null;
    int remotePort=0;
    String referer=null;
    while ((line=reader.readLine(method)) != null) {
      line=line.trim();
      if (_log.shouldLog(Log.DEBUG)) {
        _log.debug(getPrefix(requestId) + "Line=[" + line+ "]");
      }
      String lowercaseLine=line.toLowerCase(Locale.US);
      if (lowercaseLine.startsWith("connection: ") || lowercaseLine.startsWith("keep-alive: ") || lowercaseLine.startsWith("proxy-connection: ")) {
        continue;
      }
      if (method == null) {
        if (_log.shouldLog(Log.DEBUG)) {
          _log.debug(getPrefix(requestId) + "First line [" + line+ "]");
        }
        String[] params=line.split(" ",3);
        if (params.length != 3) {
          break;
        }
        String request=params[1];
        if (request.startsWith("/") && getTunnel().getClientOptions().getProperty("i2ptunnel.noproxy") != null) {
          request="http://i2p" + request;
        }
 else         if (request.startsWith("/eepproxy/")) {
          String subRequest=request.substring("/eepproxy/".length());
          if (subRequest.indexOf("/") == -1) {
            subRequest+="/";
          }
          request="http://" + subRequest;
        }
        method=params[0];
        if (method.toUpperCase(Locale.US).equals("CONNECT")) {
          request="https://" + request + '/';
        }
        URI requestURI;
        try {
          requestURI=new URI(request);
          if (requestURI.getRawUserInfo() != null || requestURI.getRawFragment() != null) {
            if (_log.shouldLog(Log.WARN)) {
              _log.warn(getPrefix(requestId) + "Removing userinfo or fragment [" + request+ "]");
            }
            requestURI=changeURI(requestURI,null,0,null);
          }
          if (requestURI.getPath() == null || requestURI.getPath().length() <= 0) {
            if (_log.shouldLog(Log.WARN)) {
              _log.warn(getPrefix(requestId) + "Adding / path to [" + request+ "]");
            }
            requestURI=changeURI(requestURI,null,0,"/");
          }
        }
 catch (        URISyntaxException use) {
          if (_log.shouldLog(Log.WARN)) {
            _log.warn(getPrefix(requestId) + "Bad request [" + request+ "]",use);
          }
          out.write(getErrorPage("baduri",ERR_BAD_URI));
          writeFooter(out);
          reader.drain();
          s.close();
          return;
        }
        String protocolVersion=params[2];
        protocol=requestURI.getScheme();
        host=requestURI.getHost();
        if (protocol == null || host == null) {
          _log.warn("Null protocol or host: " + request + ' '+ protocol+ ' '+ host);
          method=null;
          break;
        }
        int port=requestURI.getPort();
        String hostLowerCase=host.toLowerCase(Locale.US);
        if (hostLowerCase.equals(LOCAL_SERVER)) {
          destination=host;
          usingInternalServer=true;
          internalPath=requestURI.getPath();
          internalRawQuery=requestURI.getRawQuery();
        }
 else         if (hostLowerCase.equals("i2p")) {
          String oldPath=requestURI.getPath().substring(1);
          int slash=oldPath.indexOf("/");
          if (slash < 0) {
            slash=oldPath.length();
            oldPath+="/";
          }
          String _dest=oldPath.substring(0,slash);
          if (slash >= 516 && !_dest.contains(".")) {
            destination=_dest;
            host=getHostName(destination);
            targetRequest=requestURI.toASCIIString();
            String newURI=oldPath.substring(slash);
            String query=requestURI.getRawQuery();
            if (query != null) {
              newURI+='?' + query;
            }
            try {
              requestURI=new URI(newURI);
            }
 catch (            URISyntaxException use) {
              _log.warn(request,use);
              method=null;
              break;
            }
          }
 else {
            _log.warn("Bad http://i2p/b64dest " + request);
            host=null;
            break;
          }
        }
 else         if (hostLowerCase.endsWith(".i2p")) {
          destination=host;
          host=getHostName(destination);
          int rPort=requestURI.getPort();
          if (rPort > 0) {
            remotePort=rPort;
          }
 else           if ("https".equals(protocol) || method.toUpperCase(Locale.US).equals("CONNECT")) {
            remotePort=443;
          }
 else {
            remotePort=80;
          }
          String query=requestURI.getRawQuery();
          if (query != null) {
            boolean ahelperConflict=false;
            String[] helperStrings=removeHelper(query);
            if (helperStrings != null && !Boolean.parseBoolean(getTunnel().getClientOptions().getProperty(PROP_DISABLE_HELPER))) {
              query=helperStrings[0];
              if (query.equals("")) {
                query=null;
              }
              try {
                requestURI=replaceQuery(requestURI,query);
              }
 catch (              URISyntaxException use) {
                _log.warn(request,use);
                method=null;
                break;
              }
              ahelperKey=helperStrings[1];
              if (ahelperKey.length() > 0) {
                if (ahelperKey.endsWith(".i2p")) {
                  Destination _dest=_context.namingService().lookup(ahelperKey);
                  if (_dest == null) {
                    if (_log.shouldLog(Log.WARN)) {
                      _log.warn(getPrefix(requestId) + "Could not find destination for " + ahelperKey);
                    }
                    byte[] header=getErrorPage("ahelper-notfound",ERR_AHELPER_NOTFOUND);
                    out.write(header);
                    out.write(("<p>" + _("This seems to be a bad destination:") + " "+ ahelperKey+ " "+ _("i2paddresshelper cannot help you with a destination like that!")+ "</p>").getBytes("UTF-8"));
                    writeFooter(out);
                    closeSocket(s);
                    return;
                  }
                  ahelperKey=_dest.toBase64();
                }
                ahelperPresent=true;
                if (host == null || "i2p".equals(host)) {
                  String old=addressHelpers.putIfAbsent(destination.toLowerCase(Locale.US),ahelperKey);
                  ahelperNew=old == null;
                  if ((!ahelperNew) && !old.equals(ahelperKey)) {
                    ahelperConflict=true;
                    if (_log.shouldLog(Log.WARN)) {
                      _log.warn(getPrefix(requestId) + "Addresshelper key conflict for site [" + destination+ "], trusted key ["+ old+ "], specified key ["+ ahelperKey+ "].");
                    }
                  }
                }
 else {
                  Destination hostDest=_context.namingService().lookup(destination);
                  if (hostDest != null) {
                    String destB64=hostDest.toBase64();
                    if (destB64 != null && !destB64.equals(ahelperKey)) {
                      ahelperConflict=true;
                      if (_log.shouldLog(Log.WARN)) {
                        _log.warn(getPrefix(requestId) + "Addresshelper key conflict for site [" + destination+ "], trusted key ["+ destB64+ "], specified key ["+ ahelperKey+ "].");
                      }
                    }
                  }
                }
              }
            }
            if (ahelperConflict) {
              String alias=getHostName(ahelperKey);
              if (alias.equals("i2p")) {
                byte[] header=getErrorPage("dnfb",ERR_DESTINATION_UNKNOWN);
                writeErrorMessage(header,out,targetRequest,false,destination);
              }
 else {
                String trustedURL=requestURI.toASCIIString();
                URI conflictURI;
                try {
                  conflictURI=changeURI(requestURI,alias,0,null);
                }
 catch (                URISyntaxException use) {
                  _log.warn(request,use);
                  method=null;
                  break;
                }
                String conflictURL=conflictURI.toASCIIString();
                byte[] header=getErrorPage("ahelper-conflict",ERR_AHELPER_CONFLICT);
                out.write(header);
                out.write(_("To visit the destination in your host database, click <a href=\"{0}\">here</a>. To visit the conflicting addresshelper destination, click <a href=\"{1}\">here</a>.",trustedURL,conflictURL).getBytes("UTF-8"));
                out.write(("</p></div>").getBytes());
                writeFooter(out);
              }
              reader.drain();
              s.close();
              return;
            }
          }
          String addressHelper=addressHelpers.get(destination);
          if (addressHelper != null) {
            host=getHostName(addressHelper);
          }
          targetRequest=requestURI.toASCIIString();
          String newURI=requestURI.getRawPath();
          if (query != null) {
            newURI+='?' + query;
          }
          try {
            requestURI=new URI(newURI);
          }
 catch (          URISyntaxException use) {
            _log.warn(request,use);
            method=null;
            break;
          }
        }
 else         if (hostLowerCase.equals("localhost") || host.equals("127.0.0.1") || host.startsWith("192.168.")|| host.equals("[::1]")) {
          out.write(getErrorPage("localhost",ERR_LOCALHOST));
          writeFooter(out);
          reader.drain();
          s.close();
          return;
        }
 else         if (host.contains(".") || host.startsWith("[")) {
          if (Boolean.parseBoolean(getTunnel().getClientOptions().getProperty(PROP_USE_OUTPROXY_PLUGIN,"true"))) {
            ClientAppManager mgr=_context.clientAppManager();
            if (mgr != null) {
              ClientApp op=mgr.getRegisteredApp(Outproxy.NAME);
              if (op != null) {
                outproxy=(Outproxy)op;
                int rPort=requestURI.getPort();
                if (rPort > 0)                 remotePort=rPort;
 else                 if ("https".equals(protocol) || method.toUpperCase(Locale.US).equals("CONNECT"))                 remotePort=443;
 else                 remotePort=80;
                usingInternalOutproxy=true;
                targetRequest=requestURI.toASCIIString();
                if (_log.shouldLog(Log.DEBUG))                 _log.debug(getPrefix(requestId) + " [" + host+ "]: outproxy!");
              }
            }
          }
          if (!usingInternalOutproxy) {
            if (port >= 0) {
              host=host + ':' + port;
            }
            if (_log.shouldLog(Log.DEBUG)) {
              _log.debug("Before selecting outproxy for " + host);
            }
            if ("https".equals(protocol) || method.toUpperCase(Locale.US).equals("CONNECT"))             currentProxy=selectSSLProxy();
 else             currentProxy=selectProxy();
            if (_log.shouldLog(Log.DEBUG)) {
              _log.debug("After selecting outproxy for " + host + ": "+ currentProxy);
            }
            if (currentProxy == null) {
              if (_log.shouldLog(Log.WARN)) {
                _log.warn(getPrefix(requestId) + "Host wants to be outproxied, but we dont have any!");
              }
              l.log("No outproxy found for the request.");
              out.write(getErrorPage("noproxy",_ERR_NO_OUTPROXY));
              writeFooter(out);
              reader.drain();
              s.close();
              return;
            }
            destination=currentProxy;
            usingWWWProxy=true;
            targetRequest=requestURI.toASCIIString();
            if (_log.shouldLog(Log.DEBUG)) {
              _log.debug(getPrefix(requestId) + " [" + host+ "]: wwwProxy!");
            }
          }
        }
 else {
          if (_log.shouldLog(Log.WARN)) {
            _log.warn("NODOTS, NOI2P: " + request);
          }
          out.write(getErrorPage("denied",ERR_REQUEST_DENIED));
          writeFooter(out);
          reader.drain();
          s.close();
          return;
        }
        boolean isValid=usingInternalOutproxy || usingWWWProxy || usingInternalServer|| isSupportedAddress(host,protocol);
        if (!isValid) {
          if (_log.shouldLog(Log.INFO)) {
            _log.info(getPrefix(requestId) + "notValid(" + host+ ")");
          }
          method=null;
          destination=null;
          break;
        }
        if (method.toUpperCase(Locale.US).equals("CONNECT")) {
          line=method + ' ' + requestURI.getHost()+ ':'+ requestURI.getPort()+ ' '+ protocolVersion;
        }
 else {
          line=method + ' ' + requestURI.toASCIIString()+ ' '+ protocolVersion;
        }
        if (_log.shouldLog(Log.DEBUG)) {
          _log.debug(getPrefix(requestId) + "NEWREQ: \"" + line+ "\"");
          _log.debug(getPrefix(requestId) + "HOST  : \"" + host+ "\"");
          _log.debug(getPrefix(requestId) + "DEST  : \"" + destination+ "\"");
        }
      }
 else {
        if (lowercaseLine.startsWith("host: ") && !usingWWWProxy && !usingInternalOutproxy) {
          line="Host: " + host;
          if (_log.shouldLog(Log.INFO)) {
            _log.info(getPrefix(requestId) + "Setting host = " + host);
          }
        }
 else         if (lowercaseLine.startsWith("user-agent: ")) {
          userAgent=lowercaseLine.substring(12);
          if (!Boolean.parseBoolean(getTunnel().getClientOptions().getProperty(PROP_USER_AGENT))) {
            line=null;
            continue;
          }
        }
 else         if (lowercaseLine.startsWith("accept")) {
          line=null;
          continue;
        }
 else         if (lowercaseLine.startsWith("referer: ")) {
          referer=line.substring(9);
          if (!Boolean.parseBoolean(getTunnel().getClientOptions().getProperty(PROP_REFERER))) {
            line=null;
            continue;
          }
        }
 else         if (lowercaseLine.startsWith("via: ") && !Boolean.parseBoolean(getTunnel().getClientOptions().getProperty(PROP_VIA))) {
          line=null;
          continue;
        }
 else         if (lowercaseLine.startsWith("from: ")) {
          line=null;
          continue;
        }
 else         if (lowercaseLine.startsWith("authorization: ntlm ")) {
          line=null;
          continue;
        }
 else         if (lowercaseLine.startsWith("proxy-authorization: ")) {
          authorization=line.substring(21);
          line=null;
          continue;
        }
 else         if (lowercaseLine.startsWith("icy")) {
          shout=true;
        }
      }
      if (line.length() == 0) {
        String ok=getTunnel().getClientOptions().getProperty("i2ptunnel.gzip");
        boolean gzip=DEFAULT_GZIP;
        if (ok != null) {
          gzip=Boolean.parseBoolean(ok);
        }
        if (gzip && !usingInternalServer && !method.toUpperCase(Locale.US).equals("CONNECT")) {
          newRequest.append("Accept-Encoding: \r\n");
          if (!usingInternalOutproxy)           newRequest.append("X-Accept-Encoding: x-i2p-gzip;q=1.0, identity;q=0.5, deflate;q=0, gzip;q=0, *;q=0\r\n");
        }
        if (!shout && !method.toUpperCase(Locale.US).equals("CONNECT")) {
          if (!Boolean.parseBoolean(getTunnel().getClientOptions().getProperty(PROP_USER_AGENT))) {
            if (usingWWWProxy || usingInternalOutproxy) {
              newRequest.append("User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.6) Gecko/20100625 Firefox/3.6.6\r\n");
            }
 else {
              newRequest.append("User-Agent: MYOB/6.66 (AN/ON)\r\n");
            }
          }
        }
        if (usingWWWProxy && Boolean.parseBoolean(getTunnel().getClientOptions().getProperty(PROP_OUTPROXY_AUTH))) {
          String user=getTunnel().getClientOptions().getProperty(PROP_OUTPROXY_USER_PREFIX + currentProxy);
          String pw=getTunnel().getClientOptions().getProperty(PROP_OUTPROXY_PW_PREFIX + currentProxy);
          if (user == null || pw == null) {
            user=getTunnel().getClientOptions().getProperty(PROP_OUTPROXY_USER);
            pw=getTunnel().getClientOptions().getProperty(PROP_OUTPROXY_PW);
          }
          if (user != null && pw != null) {
            newRequest.append("Proxy-Authorization: Basic ").append(Base64.encode((user + ':' + pw).getBytes(),true)).append("\r\n");
          }
        }
        newRequest.append("Connection: close\r\n\r\n");
        break;
      }
 else {
        newRequest.append(line).append("\r\n");
      }
    }
    if (_log.shouldLog(Log.DEBUG)) {
      _log.debug(getPrefix(requestId) + "NewRequest header: [" + newRequest.toString()+ "]");
    }
    if (method == null || (destination == null && !usingInternalOutproxy)) {
      if (protocol != null && "http".equals(protocol.toLowerCase(Locale.US))) {
        out.write(getErrorPage("denied",ERR_REQUEST_DENIED));
      }
 else {
        out.write(getErrorPage("protocol",ERR_BAD_PROTOCOL));
      }
      writeFooter(out);
      s.close();
      return;
    }
    if (_log.shouldLog(Log.DEBUG)) {
      _log.debug(getPrefix(requestId) + "Destination: " + destination);
    }
    AuthResult result=authorize(s,requestId,method,authorization);
    if (result != AuthResult.AUTH_GOOD) {
      if (_log.shouldLog(Log.WARN)) {
        if (authorization != null) {
          _log.warn(getPrefix(requestId) + "Auth failed, sending 407 again");
        }
 else {
          _log.warn(getPrefix(requestId) + "Auth required, sending 407");
        }
      }
      out.write(getAuthError(result == AuthResult.AUTH_STALE).getBytes());
      writeFooter(out);
      s.close();
      return;
    }
    if (usingInternalServer) {
      if (internalPath.equals("/add") && Boolean.parseBoolean(getTunnel().getClientOptions().getProperty(PROP_DISABLE_HELPER))) {
        out.write(ERR_HELPER_DISABLED);
      }
 else {
        LocalHTTPServer.serveLocalFile(out,method,internalPath,internalRawQuery,_proxyNonce);
      }
      s.close();
      return;
    }
    if (usingInternalOutproxy) {
      Socket outSocket=outproxy.connect(host,remotePort);
      OnTimeout onTimeout=new OnTimeout(s,s.getOutputStream(),targetRequest,usingWWWProxy,currentProxy,requestId);
      byte[] data;
      byte[] response;
      if (method.toUpperCase(Locale.US).equals("CONNECT")) {
        data=null;
        response=I2PTunnelConnectClient.SUCCESS_RESPONSE;
      }
 else {
        data=newRequest.toString().getBytes("ISO-8859-1");
        response=null;
      }
      Thread t=new I2PTunnelOutproxyRunner(s,outSocket,sockLock,data,response,onTimeout);
      t.start();
      return;
    }
    Destination clientDest=null;
    String addressHelper=addressHelpers.get(destination.toLowerCase(Locale.US));
    if (addressHelper != null) {
      clientDest=_context.namingService().lookup(addressHelper);
      if (clientDest == null) {
        addressHelpers.remove(destination.toLowerCase(Locale.US));
        if (_log.shouldLog(Log.WARN)) {
          _log.warn(getPrefix(requestId) + "Could not find destination for " + addressHelper);
        }
        byte[] header=getErrorPage("ahelper-notfound",ERR_AHELPER_NOTFOUND);
        writeErrorMessage(header,out,targetRequest,false,destination);
        s.close();
        return;
      }
    }
 else     if ("i2p".equals(host)) {
      clientDest=null;
    }
 else     if (destination.length() == 60 && destination.toLowerCase(Locale.US).endsWith(".b32.i2p")) {
      verifySocketManager();
      I2PSession sess=sockMgr.getSession();
      if (!sess.isClosed()) {
        byte[] hData=Base32.decode(destination.substring(0,52));
        if (hData != null) {
          if (_log.shouldLog(Log.INFO)) {
            _log.info("lookup in-session " + destination);
          }
          Hash hash=Hash.create(hData);
          clientDest=sess.lookupDest(hash,20 * 1000);
        }
      }
 else {
        clientDest=_context.namingService().lookup(destination);
      }
    }
 else {
      clientDest=_context.namingService().lookup(destination);
    }
    if (clientDest == null) {
      if (_log.shouldLog(Log.WARN)) {
        _log.warn("Unable to resolve " + destination + " (proxy? "+ usingWWWProxy+ ", request: "+ targetRequest);
      }
      byte[] header;
      String jumpServers=null;
      if (usingWWWProxy) {
        header=getErrorPage("dnfp",ERR_DESTINATION_UNKNOWN);
      }
 else       if (ahelperPresent) {
        header=getErrorPage("dnfb",ERR_DESTINATION_UNKNOWN);
      }
 else       if (destination.length() == 60 && destination.toLowerCase(Locale.US).endsWith(".b32.i2p")) {
        header=getErrorPage("nols",ERR_DESTINATION_UNKNOWN);
      }
 else {
        header=getErrorPage("dnfh",ERR_DESTINATION_UNKNOWN);
        jumpServers=getTunnel().getClientOptions().getProperty(PROP_JUMP_SERVERS);
        if (jumpServers == null) {
          jumpServers=DEFAULT_JUMP_SERVERS;
        }
      }
      writeErrorMessage(header,out,targetRequest,usingWWWProxy,destination,jumpServers);
      s.close();
      return;
    }
    if (ahelperNew && "GET".equals(method) && (userAgent == null || !userAgent.startsWith("Wget"))&& !Boolean.parseBoolean(getTunnel().getClientOptions().getProperty(PROP_DISABLE_HELPER))) {
      writeHelperSaveForm(out,destination,ahelperKey,targetRequest,referer);
      s.close();
      return;
    }
    if (ahelperPresent && !"POST".equals(method)) {
      String uri=targetRequest;
      if (_log.shouldLog(Log.DEBUG)) {
        _log.debug("Auto redirecting to " + uri);
      }
      out.write(("HTTP/1.1 301 Address Helper Accepted\r\n" + "Location: " + uri + "\r\n"+ "\r\n").getBytes("UTF-8"));
      s.close();
      return;
    }
    Properties opts=new Properties();
    I2PSocketOptions sktOpts=getDefaultOptions(opts);
    if (remotePort > 0)     sktOpts.setPort(remotePort);
    I2PSocket i2ps=createI2PSocket(clientDest,sktOpts);
    OnTimeout onTimeout=new OnTimeout(s,s.getOutputStream(),targetRequest,usingWWWProxy,currentProxy,requestId);
    if (method.toUpperCase(Locale.US).equals("CONNECT")) {
      byte[] data;
      byte[] response;
      if (usingWWWProxy) {
        data=newRequest.toString().getBytes("ISO-8859-1");
        response=null;
      }
 else {
        data=null;
        response=I2PTunnelConnectClient.SUCCESS_RESPONSE;
      }
      Thread t=new I2PTunnelRunner(s,i2ps,sockLock,data,response,mySockets,onTimeout);
      t.start();
    }
 else {
      byte[] data=newRequest.toString().getBytes("ISO-8859-1");
      Thread t=new I2PTunnelHTTPClientRunner(s,i2ps,sockLock,data,mySockets,onTimeout);
      t.start();
    }
  }
 catch (  IOException ex) {
    if (_log.shouldLog(Log.INFO)) {
      _log.info(getPrefix(requestId) + "Error trying to connect",ex);
    }
    handleClientException(ex,out,targetRequest,usingWWWProxy,currentProxy,requestId);
    closeSocket(s);
  }
catch (  I2PException ex) {
    if (_log.shouldLog(Log.INFO)) {
      _log.info("getPrefix(requestId) + Error trying to connect",ex);
    }
    handleClientException(ex,out,targetRequest,usingWWWProxy,currentProxy,requestId);
    closeSocket(s);
  }
catch (  OutOfMemoryError oom) {
    IOException ex=new IOException("OOM");
    _log.error("getPrefix(requestId) + Error trying to connect",oom);
    handleClientException(ex,out,targetRequest,usingWWWProxy,currentProxy,requestId);
    closeSocket(s);
  }
}
