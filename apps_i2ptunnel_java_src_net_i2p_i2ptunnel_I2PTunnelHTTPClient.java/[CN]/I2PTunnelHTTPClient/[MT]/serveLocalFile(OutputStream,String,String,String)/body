{
  if (targetRequest.startsWith(LOCAL_SERVER + "/ ")) {
    try {
      out.write(("HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nCache-Control: max-age=86400\r\n\r\nI2P HTTP proxy OK").getBytes());
      out.flush();
    }
 catch (    IOException ioe) {
    }
    return;
  }
  if ((method.equals("GET") || method.equals("HEAD")) && targetRequest.startsWith(LOCAL_SERVER + "/themes/") && !targetRequest.contains("..")) {
    int space=targetRequest.indexOf(' ');
    String filename=null;
    try {
      filename=targetRequest.substring(LOCAL_SERVER.length() + 8,space);
    }
 catch (    IndexOutOfBoundsException ioobe) {
    }
    if (filename.startsWith("console/default/"))     filename=filename.replaceFirst("default",I2PAppContext.getGlobalContext().getProperty("routerconsole.theme","light"));
    File themesDir=new File(_errorDir,"themes");
    File file=new File(themesDir,filename);
    if (file.exists() && !file.isDirectory()) {
      String type;
      if (filename.endsWith(".css"))       type="text/css";
 else       if (filename.endsWith(".ico"))       type="image/x-icon";
 else       if (filename.endsWith(".png"))       type="image/png";
 else       if (filename.endsWith(".jpg"))       type="image/jpeg";
 else       type="text/html";
      try {
        out.write("HTTP/1.1 200 OK\r\nContent-Type: ".getBytes());
        out.write(type.getBytes());
        out.write("\r\nCache-Control: max-age=86400\r\n\r\n".getBytes());
        FileUtil.readFile(filename,themesDir.getAbsolutePath(),out);
      }
 catch (      IOException ioe) {
      }
      return;
    }
  }
  if (targetRequest.startsWith(LOCAL_SERVER + "/add?")) {
    int spc=targetRequest.indexOf(' ');
    String query=targetRequest.substring(LOCAL_SERVER.length() + 5,spc);
    Map<String,String> opts=new HashMap(8);
    StringTokenizer tok=new StringTokenizer(query,"=&;");
    while (tok.hasMoreTokens()) {
      String k=tok.nextToken();
      if (!tok.hasMoreTokens())       break;
      String v=tok.nextToken();
      opts.put(decode(k),decode(v));
    }
    String url=opts.get("url");
    String host=opts.get("host");
    String b64Dest=opts.get("dest");
    String nonce=opts.get("nonce");
    String book="privatehosts.txt";
    if (opts.get("master") != null)     book="userhosts.txt";
 else     if (opts.get("router") != null)     book="hosts.txt";
    Destination dest=null;
    if (b64Dest != null) {
      try {
        dest=new Destination(b64Dest);
      }
 catch (      DataFormatException dfe) {
        System.err.println("Bad dest to save?" + b64Dest);
      }
    }
    if (proxyNonce.equals(nonce) && url != null && host != null && dest != null) {
      try {
        NamingService ns=I2PAppContext.getGlobalContext().namingService();
        Properties nsOptions=new Properties();
        nsOptions.setProperty("list",book);
        nsOptions.setProperty("s",_("Added via address helper"));
        boolean success=ns.put(host,dest,nsOptions);
        writeRedirectPage(out,success,host,book,url);
        return;
      }
 catch (      IOException ioe) {
      }
    }
    try {
      out.write(ERR_ADD);
      out.flush();
    }
 catch (    IOException ioe) {
    }
    return;
  }
  try {
    out.write(ERR_404);
    out.flush();
  }
 catch (  IOException ioe) {
  }
}
