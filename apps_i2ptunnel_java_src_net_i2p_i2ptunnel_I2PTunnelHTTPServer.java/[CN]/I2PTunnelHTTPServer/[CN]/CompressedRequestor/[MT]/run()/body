{
  if (_log.shouldLog(Log.INFO))   _log.info("Compressed requestor running");
  OutputStream serverout=null;
  OutputStream browserout=null;
  InputStream browserin=null;
  InputStream serverin=null;
  try {
    serverout=_webserver.getOutputStream();
    if (_log.shouldLog(Log.INFO))     _log.info("request headers: " + _headers);
    serverout.write(_headers.getBytes());
    browserin=_browser.getInputStream();
    if ((!(_headers.startsWith("GET ") || _headers.startsWith("HEAD "))) || browserin.available() > 0) {
      I2PAppThread sender=new I2PAppThread(new Sender(serverout,browserin,"server: browser to server",_log),Thread.currentThread().getName() + "hcs");
      sender.start();
    }
 else {
    }
    browserout=_browser.getOutputStream();
    try {
      serverin=new BufferedInputStream(_webserver.getInputStream(),BUF_SIZE);
    }
 catch (    NullPointerException npe) {
      throw new IOException("getInputStream NPE");
    }
    CompressedResponseOutputStream compressedOut=new CompressedResponseOutputStream(browserout);
    StringBuilder command=new StringBuilder(128);
    Map<String,List<String>> headers=readHeaders(serverin,command,SERVER_SKIPHEADERS,_ctx);
    String modifiedHeaders=formatHeaders(headers,command);
    compressedOut.write(modifiedHeaders.getBytes());
    Sender s=new Sender(compressedOut,serverin,"server: server to browser",_log);
    if (_log.shouldLog(Log.INFO))     _log.info("Before pumping the compressed response");
    s.run();
    if (_log.shouldLog(Log.INFO))     _log.info("After pumping the compressed response: " + compressedOut.getTotalRead() + "/"+ compressedOut.getTotalCompressed());
  }
 catch (  SSLException she) {
    _log.error("SSL error",she);
    try {
      if (browserout == null)       browserout=_browser.getOutputStream();
      browserout.write(ERR_UNAVAILABLE.getBytes("UTF-8"));
    }
 catch (    IOException ioe) {
    }
  }
catch (  IOException ioe) {
    if (_log.shouldLog(Log.WARN))     _log.warn("error compressing",ioe);
  }
 finally {
    if (browserout != null)     try {
      browserout.close();
    }
 catch (    IOException ioe) {
    }
    if (serverout != null)     try {
      serverout.close();
    }
 catch (    IOException ioe) {
    }
    if (browserin != null)     try {
      browserin.close();
    }
 catch (    IOException ioe) {
    }
    if (serverin != null)     try {
      serverin.close();
    }
 catch (    IOException ioe) {
    }
  }
}
