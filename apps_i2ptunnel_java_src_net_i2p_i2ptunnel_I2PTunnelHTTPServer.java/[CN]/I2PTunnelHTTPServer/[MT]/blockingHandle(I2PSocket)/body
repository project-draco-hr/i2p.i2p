{
  long afterAccept=getTunnel().getContext().clock().now();
  long afterSocket=-1;
  try {
    socket.setReadTimeout(5 * 1000);
    InputStream in=socket.getInputStream();
    StringBuffer command=new StringBuffer(128);
    Properties headers=readHeaders(in,command);
    if ((_spoofHost != null) && (_spoofHost.trim().length() > 0))     headers.setProperty("Host",_spoofHost);
    headers.setProperty("Connection","close");
    String modifiedHeader=formatHeaders(headers,command);
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Modified header: [" + modifiedHeader + "]");
    socket.setReadTimeout(readTimeout);
    Socket s=new Socket(remoteHost,remotePort);
    afterSocket=getTunnel().getContext().clock().now();
    Properties opts=getTunnel().getClientOptions();
    boolean allowGZIP=true;
    if (opts != null) {
      String val=opts.getProperty("i2ptunnel.gzip");
      if ((val != null) && (!Boolean.valueOf(val).booleanValue()))       allowGZIP=false;
    }
    String enc=headers.getProperty("Accept-encoding");
    if (_log.shouldLog(Log.INFO))     _log.info("HTTP server encoding header: " + enc);
    if (allowGZIP && (enc != null) && (enc.indexOf("x-i2p-gzip") >= 0)) {
      I2PThread req=new I2PThread(new CompressedRequestor(s,socket,modifiedHeader),"http compressor");
      req.start();
    }
 else {
      new I2PTunnelRunner(s,socket,slock,null,modifiedHeader.getBytes(),null);
    }
  }
 catch (  SocketException ex) {
    try {
      socket.close();
    }
 catch (    IOException ioe) {
      if (_log.shouldLog(Log.ERROR))       _log.error("Error while closing the received i2p con",ex);
    }
  }
catch (  IOException ex) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Error while receiving the new HTTP request",ex);
  }
  long afterHandle=getTunnel().getContext().clock().now();
  long timeToHandle=afterHandle - afterAccept;
  getTunnel().getContext().statManager().addRateData("i2ptunnel.httpserver.blockingHandleTime",timeToHandle,0);
  if ((timeToHandle > 1000) && (_log.shouldLog(Log.WARN)))   _log.warn("Took a while to handle the request [" + timeToHandle + ", socket create: "+ (afterSocket - afterAccept)+ "]");
}
