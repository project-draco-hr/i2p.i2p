{
  if (_log.shouldLog(Log.DEBUG)) {
    String from=i2ps.getThisDestination().calculateHash().toBase64().substring(0,6);
    String to=i2ps.getPeerDestination().calculateHash().toBase64().substring(0,6);
    _log.debug(direction + ": Forwarding between " + from+ " and "+ to);
  }
  byte[] buffer=new byte[NETWORK_BUFFER_SIZE];
  try {
    int len;
    while ((len=in.read(buffer)) != -1) {
      out.write(buffer,0,len);
      if (len > 0)       updateActivity();
      if (in.available() == 0) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug(direction + ": " + len+ " bytes flushed through to "+ i2ps.getPeerDestination().calculateHash().toBase64().substring(0,6));
        try {
          Thread.sleep(I2PTunnel.PACKET_DELAY);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        if (in.available() <= 0)         out.flush();
      }
    }
  }
 catch (  SocketException ex) {
synchronized (finishLock) {
      if (!finished) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug(direction + ": Socket closed - error reading and writing",ex);
      }
    }
  }
catch (  InterruptedIOException ex) {
    if (_log.shouldLog(Log.WARN))     _log.warn(direction + ": Closing connection due to timeout (error: \"" + ex.getMessage()+ "\")");
  }
catch (  IOException ex) {
    if (!finished) {
      if (_log.shouldLog(Log.ERROR))       _log.error(direction + ": Error forwarding",ex);
    }
  }
 finally {
    try {
      out.close();
      in.close();
    }
 catch (    IOException ex) {
      if (_log.shouldLog(Log.WARN))       _log.warn(direction + ": Error closing streams",ex);
    }
synchronized (finishLock) {
      finished=true;
      finishLock.notifyAll();
    }
  }
}
