{
  boolean closedCleanly=false;
  try {
    InputStream in=s.getInputStream();
    OutputStream out=s.getOutputStream();
    i2ps.setSocketErrorListener(this);
    InputStream i2pin=i2ps.getInputStream();
    OutputStream i2pout=i2ps.getOutputStream();
    if (initialData != null) {
synchronized (slock) {
        i2pout.write(initialData);
      }
    }
    Thread t1=new StreamForwarder(in,i2pout,"toI2P");
    Thread t2=new StreamForwarder(i2pin,out,"fromI2P");
synchronized (finishLock) {
      while (!finished) {
        finishLock.wait();
      }
    }
    s.close();
    i2ps.close();
    t1.join();
    t2.join();
    closedCleanly=true;
  }
 catch (  InterruptedException ex) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Interrupted",ex);
  }
catch (  IOException ex) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Error forwarding",ex);
  }
catch (  Exception e) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Internal error",e);
  }
 finally {
    removeRef();
    try {
      if ((s != null) && (!closedCleanly))       s.close();
    }
 catch (    IOException ex) {
      if (_log.shouldLog(Log.ERROR))       _log.error("Could not close java socket",ex);
    }
    try {
      if (i2ps != null) {
        if (!closedCleanly)         i2ps.close();
        i2ps.setSocketErrorListener(null);
      }
    }
 catch (    IOException ex) {
      if (_log.shouldLog(Log.ERROR))       _log.error("Could not close I2PSocket",ex);
    }
  }
}
