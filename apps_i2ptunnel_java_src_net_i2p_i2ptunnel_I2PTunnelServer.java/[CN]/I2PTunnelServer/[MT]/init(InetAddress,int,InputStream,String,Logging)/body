{
  this.l=l;
  this.remoteHost=host;
  this.remotePort=port;
  Properties props=new Properties();
  props.putAll(getTunnel().getClientOptions());
  int portNum=7654;
  if (getTunnel().port != null) {
    try {
      portNum=Integer.parseInt(getTunnel().port);
    }
 catch (    NumberFormatException nfe) {
      _log.log(Log.CRIT,"Invalid port specified [" + getTunnel().port + "], reverting to "+ portNum);
    }
  }
  ByteArrayInputStream privDataCopy;
  try {
    privDataCopy=copyOfInputStream(privData);
  }
 catch (  IOException ioe) {
    _log.log(Log.CRIT,"Cannot read private key data for " + privkeyname,ioe);
    return;
  }
  while (sockMgr == null) {
synchronized (slock) {
      sockMgr=I2PSocketManagerFactory.createManager(privDataCopy,getTunnel().host,portNum,props);
    }
    if (sockMgr == null) {
      _log.log(Log.CRIT,"Unable to create socket manager");
      try {
        Thread.sleep(10 * 1000);
      }
 catch (      InterruptedException ie) {
      }
      privDataCopy.reset();
    }
  }
  sockMgr.setName("Server");
  getTunnel().addSession(sockMgr.getSession());
  l.log("Ready!");
  notifyEvent("openServerResult","ok");
  open=true;
}
