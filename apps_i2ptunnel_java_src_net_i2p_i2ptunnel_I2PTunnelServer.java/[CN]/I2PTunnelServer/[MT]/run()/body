{
  i2pss=sockMgr.getServerSocket();
  if (_log.shouldLog(Log.WARN)) {
    if (_usePool)     _log.warn("Starting executor with " + getHandlerCount() + " threads max");
 else     _log.warn("Threads disabled, running blockingHandles inline");
  }
  if (_usePool) {
    _executor=new CustomThreadPoolExecutor(getHandlerCount(),"ServerHandler pool " + remoteHost + ':'+ remotePort);
  }
  while (open) {
    try {
      I2PServerSocket ci2pss=i2pss;
      if (ci2pss == null)       throw new I2PException("I2PServerSocket closed");
      final I2PSocket i2ps=ci2pss.accept();
      if (i2ps == null)       throw new I2PException("I2PServerSocket closed");
      if (_usePool) {
        try {
          _executor.execute(new Handler(i2ps));
        }
 catch (        RejectedExecutionException ree) {
          try {
            i2ps.close();
          }
 catch (          IOException ioe) {
          }
          if (open)           _log.logAlways(Log.WARN,"ServerHandler queue full, dropping incoming connection to " + remoteHost + ':'+ remotePort+ "; increase server max threads or "+ PROP_HANDLER_COUNT);
        }
      }
 else {
        blockingHandle(i2ps);
      }
    }
 catch (    I2PException ipe) {
      if (_log.shouldLog(Log.ERROR))       _log.error("Error accepting - KILLING THE TUNNEL SERVER",ipe);
      open=false;
      break;
    }
catch (    ConnectException ce) {
      if (_log.shouldLog(Log.ERROR))       _log.error("Error accepting",ce);
      open=false;
      break;
    }
catch (    SocketTimeoutException ste) {
    }
catch (    Exception e) {
      if (_log.shouldLog(Log.ERROR))       _log.error("Uncaught exception accepting",e);
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException ie) {
      }
    }
  }
  if (_executor != null && !_executor.isTerminating() && !_executor.isShutdown())   _executor.shutdownNow();
}
