{
  I2PClient client=I2PClientFactory.createClient();
  String filename=getPrivKeyFile();
  if ((filename == null) || (filename.trim().length() <= 0)) {
    log("No filename specified for the private key");
    return;
  }
  File keyFile=new File(getPrivKeyFile());
  if (!keyFile.isAbsolute())   keyFile=new File(I2PAppContext.getGlobalContext().getConfigDir(),getPrivKeyFile());
  if (keyFile.exists()) {
    return;
  }
 else {
    File parent=keyFile.getParentFile();
    if ((parent != null) && (!parent.exists()))     parent.mkdirs();
  }
  FileOutputStream fos=null;
  try {
    fos=new SecureFileOutputStream(keyFile);
    Destination dest=client.createDestination(fos);
    String destStr=dest.toBase64();
    log("Private key created and saved in " + keyFile.getAbsolutePath());
    log("New destination: " + destStr);
    log("Base32: " + Base32.encode(dest.calculateHash().getData()) + ".b32.i2p");
  }
 catch (  I2PException ie) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Error creating new destination",ie);
    log("Error creating new destination: " + ie.getMessage());
  }
catch (  IOException ioe) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Error creating writing the destination to " + keyFile.getAbsolutePath(),ioe);
    log("Error writing the keys to " + keyFile.getAbsolutePath());
  }
 finally {
    if (fos != null)     try {
      fos.close();
    }
 catch (    IOException ioe) {
    }
  }
}
