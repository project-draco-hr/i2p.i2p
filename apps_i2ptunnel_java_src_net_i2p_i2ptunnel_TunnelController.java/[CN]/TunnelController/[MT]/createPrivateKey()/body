{
  I2PClient client=I2PClientFactory.createClient();
  File keyFile=getPrivateKeyFile();
  if (keyFile == null) {
    log("No filename specified for the private key");
    return false;
  }
  if (keyFile.exists()) {
    return true;
  }
 else {
    File parent=keyFile.getParentFile();
    if ((parent != null) && (!parent.exists()))     parent.mkdirs();
  }
  FileOutputStream fos=null;
  try {
    fos=new SecureFileOutputStream(keyFile);
    SigType stype=PREFERRED_SIGTYPE;
    String st=_config.getProperty(OPT_SIG_TYPE);
    if (st != null) {
      SigType type=SigType.parseSigType(st);
      if (type != null && type.isAvailable())       stype=type;
 else       log("Unsupported sig type " + st + ", reverting to "+ stype);
    }
    Destination dest=client.createDestination(fos,stype);
    String destStr=dest.toBase64();
    log("Private key created and saved in " + keyFile.getAbsolutePath());
    log("You should backup this file in a secure place.");
    log("New destination: " + destStr);
    String b32=dest.toBase32();
    log("Base32: " + b32);
    File backupDir=new SecureFile(I2PAppContext.getGlobalContext().getConfigDir(),KEY_BACKUP_DIR);
    if (backupDir.isDirectory() || backupDir.mkdir()) {
      String name=b32 + '-' + I2PAppContext.getGlobalContext().clock().now()+ ".dat";
      File backup=new File(backupDir,name);
      if (FileUtil.copy(keyFile,backup,false,true)) {
        SecureFileOutputStream.setPerms(backup);
        log("Private key backup saved to " + backup.getAbsolutePath());
      }
    }
  }
 catch (  I2PException ie) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Error creating new destination",ie);
    log("Error creating new destination: " + ie.getMessage());
    return false;
  }
catch (  IOException ioe) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Error creating writing the destination to " + keyFile.getAbsolutePath(),ioe);
    log("Error writing the keys to " + keyFile.getAbsolutePath());
    return false;
  }
 finally {
    if (fos != null)     try {
      fos.close();
    }
 catch (    IOException ioe) {
    }
  }
  return true;
}
