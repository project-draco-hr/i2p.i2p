{
  _log.debug("Processing [" + command + "]");
  StringTokenizer tok=new StringTokenizer(command);
  if (!tok.hasMoreTokens()) {
    _mgr.unknownCommand(command,out);
  }
 else {
    String cmd=tok.nextToken();
    if ("quit".equalsIgnoreCase(cmd)) {
      _mgr.processQuit(out);
    }
 else     if ("lookup".equalsIgnoreCase(cmd)) {
      if (tok.hasMoreTokens())       _mgr.processLookup(tok.nextToken(),out);
 else       _mgr.error("Usage: lookup <hostname>",out);
    }
 else     if ("testdestination".equalsIgnoreCase(cmd)) {
      if (tok.hasMoreTokens())       _mgr.processTestDestination(tok.nextToken(),out);
 else       _mgr.error("Usage: testdestination <publicDestination>",out);
    }
 else     if ("convertprivate".equalsIgnoreCase(cmd)) {
      if (tok.hasMoreTokens())       _mgr.processConvertPrivate(tok.nextToken(),out);
 else       _mgr.error("Usage: convertprivate <privateData>",out);
    }
 else     if ("close".equalsIgnoreCase(cmd)) {
      if (tok.hasMoreTokens()) {
        String closeArg;
        if ((closeArg=tok.nextToken()).equals("forced")) {
          if (tok.hasMoreTokens()) {
            _mgr.processClose(tok.nextToken(),true,out);
          }
 else {
            _mgr.error("Usage: close [forced] <jobnumber>|all",out);
          }
        }
 else {
          _mgr.processClose(closeArg,false,out);
        }
      }
 else {
        _mgr.error("Usage: close [forced] <jobnumber>|all",out);
      }
    }
 else     if ("genkey".equalsIgnoreCase(cmd)) {
      _mgr.processGenKey(out);
    }
 else     if ("list".equalsIgnoreCase(cmd)) {
      _mgr.processList(out);
    }
 else     if ("listen_on".equalsIgnoreCase(cmd)) {
      if (tok.hasMoreTokens()) {
        _mgr.processListenOn(tok.nextToken(),out);
      }
 else {
        _mgr.error("Usage: listen_on <ip>",out);
      }
    }
 else     if ("openclient".equalsIgnoreCase(cmd)) {
      int listenPort=0;
      String peer=null;
      String sharedClient=null;
      int numTokens=tok.countTokens();
      if (numTokens < 2 || numTokens > 3) {
        _mgr.error("Usage: openclient <listenPort> <peer> <sharedClient>",out);
        return;
      }
      try {
        listenPort=Integer.parseInt(tok.nextToken());
        peer=tok.nextToken();
        if (tok.hasMoreTokens())         sharedClient=tok.nextToken();
 else         sharedClient="true";
        _mgr.processOpenClient(listenPort,peer,sharedClient,out);
      }
 catch (      NumberFormatException nfe) {
        _mgr.error("Bad listen port",out);
        return;
      }
    }
 else     if ("openhttpclient".equalsIgnoreCase(cmd)) {
      int listenPort=0;
      String proxy="squid.i2p";
      String sharedClient="true";
      int numTokens=tok.countTokens();
      if (numTokens < 1 || numTokens > 3) {
        _mgr.error("Usage: openhttpclient <listenPort> [<sharedClient>] [<proxy>]",out);
        return;
      }
      try {
        listenPort=Integer.parseInt(tok.nextToken());
        if (tok.hasMoreTokens()) {
          String val=tok.nextToken();
          if (tok.hasMoreTokens()) {
            sharedClient=val;
            proxy=tok.nextToken();
          }
 else {
            if (("true".equals(val)) || ("false".equals(val))) {
              sharedClient=val;
            }
 else {
              proxy=val;
            }
          }
        }
        _mgr.processOpenHTTPClient(listenPort,sharedClient,proxy,out);
      }
 catch (      NumberFormatException nfe) {
        _mgr.error("Bad listen port",out);
        return;
      }
    }
 else     if ("opensockstunnel".equalsIgnoreCase(cmd)) {
      int listenPort=0;
      if (!tok.hasMoreTokens()) {
        _mgr.error("Usage: opensockstunnel <listenPort>",out);
        return;
      }
      try {
        String portStr=tok.nextToken();
        listenPort=Integer.parseInt(portStr);
      }
 catch (      NumberFormatException nfe) {
        _mgr.error("Bad listen port",out);
        return;
      }
      if (tok.hasMoreTokens()) {
        _mgr.error("Usage: opensockstunnel <listenport>",out);
        return;
      }
      _mgr.processOpenSOCKSTunnel(listenPort,out);
    }
 else     if ("openserver".equalsIgnoreCase(cmd)) {
      int listenPort=0;
      String serverHost=null;
      String serverKeys=null;
      if (!tok.hasMoreTokens()) {
        _mgr.error("Usage: openserver <serverHost> <serverPort> <serverKeys>",out);
        return;
      }
      serverHost=tok.nextToken();
      if (!tok.hasMoreTokens()) {
        _mgr.error("Usage: openserver <serverHost> <serverPort> <serverKeys>",out);
        return;
      }
      try {
        String portStr=tok.nextToken();
        listenPort=Integer.parseInt(portStr);
      }
 catch (      NumberFormatException nfe) {
        _mgr.error("Bad listen port",out);
        return;
      }
      if (!tok.hasMoreTokens()) {
        _mgr.error("Usage: openserver <serverHost> <serverPort> <serverKeys>",out);
        return;
      }
      serverKeys=tok.nextToken();
      _mgr.processOpenServer(serverHost,listenPort,serverKeys,out);
    }
 else {
      _mgr.unknownCommand(command,out);
    }
  }
}
