{
  int ctcp=msg.indexOf(0x01);
  if (ctcp > 0)   msg=msg.substring(0,ctcp);
  String[] args=DataHelper.split(msg," ",5);
  if (args.length <= 0)   return null;
  String type=args[0];
  boolean haveIP=true;
  if (type == "RESUME" || type == "ACCEPT") {
    haveIP=false;
  }
 else   if (!(type.equals("CHAT") || type.equals("SEND"))) {
    if (ALLOW_ALL_DCC_IN) {
      if (ctcp > 0)       return pfx + msg + (char)0x01;
      return pfx + msg;
    }
    return null;
  }
  if (helper == null || !helper.isEnabled())   return null;
  if (args.length < 3)   return null;
  if (haveIP && args.length < 4)   return null;
  String arg=args[1];
  int nextArg=2;
  String b32=null;
  if (haveIP)   b32=args[nextArg++];
  int cPort;
  try {
    String cp=args[nextArg++];
    cPort=Integer.parseInt(cp);
  }
 catch (  NumberFormatException nfe) {
    return null;
  }
  if (cPort < 0 || cPort > 65535)   return null;
  int port=-1;
  if (haveIP) {
    if (cPort > 0)     port=helper.newIncoming(b32,cPort,type);
 else     port=cPort;
  }
 else   if (type.equals("ACCEPT")) {
    port=helper.acceptIncoming(cPort);
  }
 else   if (type.equals("RESUME")) {
    port=helper.resumeIncoming(cPort);
  }
  if (port < 0)   return null;
  StringBuilder buf=new StringBuilder(256);
  buf.append(pfx).append(type).append(' ').append(arg).append(' ');
  if (haveIP) {
    if (port > 0) {
      byte[] myIP=helper.getLocalAddress();
      buf.append(DataHelper.fromLong(myIP,0,myIP.length)).append(' ');
    }
 else {
      buf.append("0 ");
    }
  }
  buf.append(port);
  while (args.length > nextArg) {
    buf.append(' ').append(args[nextArg++]);
  }
  if (pfx.indexOf(0x01) >= 0)   buf.append((char)0x01);
  return buf.toString();
}
