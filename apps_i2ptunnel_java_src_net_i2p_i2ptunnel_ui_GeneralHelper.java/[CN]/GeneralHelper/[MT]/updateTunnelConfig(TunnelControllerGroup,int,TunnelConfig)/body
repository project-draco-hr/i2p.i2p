{
  TunnelController cur=getController(tcg,tunnel);
  Properties props=config.getConfig();
  List<String> msgs=new ArrayList<String>();
  String type=props.getProperty(TunnelController.PROP_TYPE);
  if (TunnelController.TYPE_STD_CLIENT.equals(type) || TunnelController.TYPE_IRC_CLIENT.equals(type)) {
    if (Boolean.parseBoolean(props.getProperty(OPT + I2PTunnelClientBase.PROP_USE_SSL))) {
      try {
        boolean created=SSLClientUtil.verifyKeyStore(props,OPT);
        if (created) {
          msgs.add("Created new self-signed certificate for tunnel " + getTunnelName(tcg,tunnel));
        }
      }
 catch (      IOException ioe) {
        msgs.add("Failed to create new self-signed certificate for tunnel " + getTunnelName(tcg,tunnel) + ", check logs: "+ ioe);
      }
    }
  }
  if (cur == null) {
    cur=new TunnelController(props,"",true);
    tcg.addController(cur);
    if (cur.getStartOnLoad())     cur.startTunnelBackground();
  }
 else {
    cur.setConfig(props,"");
  }
  if (Boolean.parseBoolean(cur.getSharedClient()) && TunnelController.isClient(cur.getType())) {
    List<TunnelController> controllers=tcg.getControllers();
    for (int i=0; i < controllers.size(); i++) {
      TunnelController c=controllers.get(i);
      if (c == cur)       continue;
      if (Boolean.parseBoolean(c.getSharedClient()) && TunnelController.isClient(c.getType())) {
        Properties cOpt=c.getConfig("");
        config.updateTunnelQuantities(cOpt);
        cOpt.setProperty("option.inbound.nickname",TunnelConfig.SHARED_CLIENT_NICKNAME);
        cOpt.setProperty("option.outbound.nickname",TunnelConfig.SHARED_CLIENT_NICKNAME);
        c.setConfig(cOpt,"");
      }
    }
  }
  return msgs;
}
