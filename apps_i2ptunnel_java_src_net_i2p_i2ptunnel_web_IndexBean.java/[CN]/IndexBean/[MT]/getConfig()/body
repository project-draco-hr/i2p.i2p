{
  Properties config=new Properties();
  updateConfigGeneric(config);
  if ((isClient(_type) && !"streamrclient".equals(_type)) || "streamrserver".equals(_type)) {
    if (_reachableBy != null)     config.setProperty("interface",_reachableBy);
 else     config.setProperty("interface","");
  }
 else {
    if (_targetHost != null)     config.setProperty("targetHost",_targetHost);
  }
  if (isClient(_type)) {
    if (_port != null)     config.setProperty("listenPort",_port);
    config.setProperty("sharedClient",_sharedClient + "");
    for (    String p : _booleanClientOpts)     config.setProperty("option." + p,"" + _booleanOptions.contains(p));
    for (    String p : _otherClientOpts)     if (_otherOptions.containsKey(p))     config.setProperty("option." + p,_otherOptions.get(p));
  }
 else {
    if (_targetPort != null)     config.setProperty("targetPort",_targetPort);
    for (    String p : _booleanServerOpts)     config.setProperty("option." + p,"" + _booleanOptions.contains(p));
    for (    String p : _otherServerOpts)     if (_otherOptions.containsKey(p))     config.setProperty("option." + p,_otherOptions.get(p));
  }
  if ("httpclient".equals(_type) || "connectclient".equals(_type) || "sockstunnel".equals(_type)|| "socksirctunnel".equals(_type)) {
    for (    String p : _booleanProxyOpts)     config.setProperty("option." + p,"" + _booleanOptions.contains(p));
    if (_proxyList != null)     config.setProperty("proxyList",_proxyList);
  }
  if ("httpclient".equals(_type) || "connectclient".equals(_type)) {
    String puser="option." + I2PTunnelHTTPClientBase.PROP_USER;
    String user=config.getProperty(puser);
    String ppw="option." + I2PTunnelHTTPClientBase.PROP_PW;
    String pw=config.getProperty(ppw);
    if (user != null && pw != null && user.length() > 0 && pw.length() > 0) {
      String pmd5="option." + I2PTunnelHTTPClientBase.PROP_PROXY_DIGEST_PREFIX + user+ I2PTunnelHTTPClientBase.PROP_PROXY_DIGEST_SUFFIX;
      if (config.getProperty(pmd5) == null) {
        String realm=_type.equals("httpclient") ? I2PTunnelHTTPClient.AUTH_REALM : I2PTunnelConnectClient.AUTH_REALM;
        String hex=PasswordManager.md5Hex(realm,user,pw);
        if (hex != null) {
          config.setProperty(pmd5,hex);
          config.remove(puser);
          config.remove(ppw);
        }
      }
    }
    String auth=_otherOptions.get(I2PTunnelHTTPClientBase.PROP_AUTH);
    if (auth != null && !auth.equals("false")) {
      if (_newProxyUser != null && _newProxyPW != null && _newProxyUser.length() > 0 && _newProxyPW.length() > 0) {
        String pmd5="option." + I2PTunnelHTTPClientBase.PROP_PROXY_DIGEST_PREFIX + _newProxyUser+ I2PTunnelHTTPClientBase.PROP_PROXY_DIGEST_SUFFIX;
        String realm=_type.equals("httpclient") ? I2PTunnelHTTPClient.AUTH_REALM : I2PTunnelConnectClient.AUTH_REALM;
        String hex=PasswordManager.md5Hex(realm,_newProxyUser,_newProxyPW);
        if (hex != null)         config.setProperty(pmd5,hex);
      }
    }
  }
  if ("ircclient".equals(_type) || "client".equals(_type) || "streamrclient".equals(_type)) {
    if (_targetDestination != null)     config.setProperty("targetDestination",_targetDestination);
  }
 else   if ("httpserver".equals(_type) || "httpbidirserver".equals(_type)) {
    if (_spoofedHost != null)     config.setProperty("spoofedHost",_spoofedHost);
    for (    String p : _httpServerOpts)     if (_otherOptions.containsKey(p))     config.setProperty("option." + p,_otherOptions.get(p));
  }
  if ("httpbidirserver".equals(_type)) {
    if (_port != null)     config.setProperty("listenPort",_port);
    if (_reachableBy != null)     config.setProperty("interface",_reachableBy);
 else     if (_targetHost != null)     config.setProperty("interface",_targetHost);
 else     config.setProperty("interface","");
  }
  if ("ircclient".equals(_type)) {
    boolean dcc=_booleanOptions.contains(I2PTunnelIRCClient.PROP_DCC);
    config.setProperty("option." + I2PTunnelIRCClient.PROP_DCC,"" + dcc);
    if (dcc) {
      config.setProperty("option." + PROP_MAX_CONNS_MIN,"3");
      config.setProperty("option." + PROP_MAX_CONNS_HOUR,"10");
      config.setProperty("option." + PROP_MAX_TOTAL_CONNS_MIN,"5");
      config.setProperty("option." + PROP_MAX_TOTAL_CONNS_HOUR,"25");
    }
  }
  return config;
}
