{
  if (_privKeyFile == null || _privKeyFile.trim().length() <= 0)   return "Private Key File not specified";
  TunnelController tun=getController(_tunnel);
  Properties config=getConfig();
  if (tun == null) {
    tun=new TunnelController(config,"",true);
    _group.addController(tun);
    saveChanges();
  }
 else   if (tun.getIsRunning() || tun.getIsStarting()) {
    return "Tunnel must be stopped before modifying destination";
  }
  File keyFile=new File(_privKeyFile);
  if (!keyFile.isAbsolute())   keyFile=new File(_context.getConfigDir(),_privKeyFile);
  PrivateKeyFile pkf=new PrivateKeyFile(keyFile);
  try {
    pkf.createIfAbsent();
  }
 catch (  Exception e) {
    return "Create private key file failed: " + e;
  }
switch (_certType) {
case Certificate.CERTIFICATE_TYPE_NULL:
case Certificate.CERTIFICATE_TYPE_HIDDEN:
    pkf.setCertType(_certType);
  break;
case Certificate.CERTIFICATE_TYPE_HASHCASH:
pkf.setHashCashCert(_hashCashValue);
break;
case Certificate.CERTIFICATE_TYPE_SIGNED:
if (_certSigner == null || _certSigner.trim().length() <= 0) return "No signing destination specified";
String signerPKF=null;
for (int i=0; i < getTunnelCount(); i++) {
TunnelController c=getController(i);
if (_certSigner.equals(c.getConfig("").getProperty(TunnelController.PROP_NAME)) || _certSigner.equals(c.getConfig("").getProperty(TunnelController.PROP_SPOOFED_HOST))) {
signerPKF=c.getConfig("").getProperty(TunnelController.PROP_FILE);
break;
}
}
if (signerPKF == null || signerPKF.length() <= 0) return "Signing destination " + _certSigner + " not found";
if (_privKeyFile.equals(signerPKF)) return "Self-signed destinations not allowed";
Certificate c=pkf.setSignedCert(new PrivateKeyFile(signerPKF));
if (c == null) return "Signing failed - does signer destination exist?";
break;
default :
return "Unknown certificate type";
}
Destination newdest;
try {
pkf.write();
newdest=pkf.getDestination();
}
 catch (Exception e) {
return "Modification failed: " + e;
}
return "Destination modified - " + "New Base32 is " + Base32.encode(newdest.calculateHash().getData()) + ".b32.i2p "+ "New Destination is "+ newdest.toBase64();
}
