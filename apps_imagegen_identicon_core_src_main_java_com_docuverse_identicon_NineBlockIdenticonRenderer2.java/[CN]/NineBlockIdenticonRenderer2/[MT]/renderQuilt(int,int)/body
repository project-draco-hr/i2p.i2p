{
  int middleType=centerPatchTypes[code & 0x3];
  boolean middleInvert=((code >> 2) & 0x1) != 0;
  int cornerType=(code >> 3) & 0x0f;
  boolean cornerInvert=((code >> 7) & 0x1) != 0;
  int cornerTurn=(code >> 8) & 0x3;
  int sideType=(code >> 10) & 0x0f;
  boolean sideInvert=((code >> 14) & 0x1) != 0;
  int sideTurn=(code >> 15) & 0x3;
  int blue=(code >> 16) & 0x01f;
  int green=(code >> 21) & 0x01f;
  int red=(code >> 27) & 0x01f;
  Color fillColor=new Color(red << 3,green << 3,blue << 3);
  Color strokeColor=null;
  if (getColorDistance(fillColor,backgroundColor) < 32.0f)   strokeColor=getComplementaryColor(fillColor);
  BufferedImage targetImage=new BufferedImage(size,size,BufferedImage.TYPE_INT_RGB);
  Graphics2D g=targetImage.createGraphics();
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g.setBackground(backgroundColor);
  g.clearRect(0,0,size,size);
  float blockSize=size / 3.0f;
  float blockSize2=blockSize * 2.0f;
  drawPatch(g,blockSize,blockSize,blockSize,middleType,0,middleInvert,fillColor,strokeColor);
  drawPatch(g,blockSize,0,blockSize,sideType,sideTurn++,sideInvert,fillColor,strokeColor);
  drawPatch(g,blockSize2,blockSize,blockSize,sideType,sideTurn++,sideInvert,fillColor,strokeColor);
  drawPatch(g,blockSize,blockSize2,blockSize,sideType,sideTurn++,sideInvert,fillColor,strokeColor);
  drawPatch(g,0,blockSize,blockSize,sideType,sideTurn++,sideInvert,fillColor,strokeColor);
  drawPatch(g,0,0,blockSize,cornerType,cornerTurn++,cornerInvert,fillColor,strokeColor);
  drawPatch(g,blockSize2,0,blockSize,cornerType,cornerTurn++,cornerInvert,fillColor,strokeColor);
  drawPatch(g,blockSize2,blockSize2,blockSize,cornerType,cornerTurn++,cornerInvert,fillColor,strokeColor);
  drawPatch(g,0,blockSize2,blockSize,cornerType,cornerTurn++,cornerInvert,fillColor,strokeColor);
  g.dispose();
  return targetImage;
}
