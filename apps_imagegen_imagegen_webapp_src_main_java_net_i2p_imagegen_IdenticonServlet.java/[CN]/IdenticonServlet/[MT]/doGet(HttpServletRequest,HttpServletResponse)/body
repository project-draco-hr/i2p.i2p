{
  if (request.getCharacterEncoding() == null)   request.setCharacterEncoding("UTF-8");
  String codeParam=request.getParameter(PARAM_IDENTICON_CODE_SHORT);
  boolean codeSpecified=codeParam != null && codeParam.length() > 0;
  if (!codeSpecified) {
    response.setStatus(403);
    return;
  }
  String sizeParam=request.getParameter(PARAM_IDENTICON_SIZE_SHORT);
  int size=32;
  if (sizeParam != null) {
    try {
      size=Integer.parseInt(sizeParam);
      if (size < 16)       size=16;
 else       if (size > 512)       size=512;
    }
 catch (    NumberFormatException nfe) {
    }
  }
  String identiconETag=IdenticonUtil.getIdenticonETag(codeParam.hashCode(),size,version);
  String requestETag=request.getHeader("If-None-Match");
  if (requestETag != null && requestETag.equals(identiconETag)) {
    response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
  }
 else {
    int code;
    try {
      code=Integer.parseInt(codeParam);
    }
 catch (    NumberFormatException nfe) {
      Hash h=ConvertToHash.getHash(codeParam);
      if (h != null)       code=Arrays.hashCode(h.getData());
 else       code=codeParam.hashCode();
    }
    byte[] imageBytes=null;
    if (cache == null || (imageBytes=cache.get(identiconETag)) == null) {
      ByteArrayOutputStream byteOut=new ByteArrayOutputStream();
      RenderedImage image=renderer.render(code,size);
      ImageIO.write(image,IDENTICON_IMAGE_FORMAT,byteOut);
      imageBytes=byteOut.toByteArray();
      if (cache != null)       cache.add(identiconETag,imageBytes);
    }
 else {
      response.setStatus(403);
      return;
    }
    response.setHeader("ETag",identiconETag);
    if (codeSpecified) {
      long expires=System.currentTimeMillis() + identiconExpiresInMillis;
      response.addDateHeader("Expires",expires);
    }
    response.setContentType(IDENTICON_IMAGE_MIMETYPE);
    response.setContentLength(imageBytes.length);
    response.getOutputStream().write(imageBytes);
  }
}
