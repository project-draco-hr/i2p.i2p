{
  if (request.getCharacterEncoding() == null)   request.setCharacterEncoding("UTF-8");
  String codeParam=request.getParameter(PARAM_IDENTICON_CODE_SHORT);
  boolean codeSpecified=codeParam != null && codeParam.length() > 0;
  if (!codeSpecified) {
    response.setStatus(403);
    return;
  }
  String sizeParam=request.getParameter(PARAM_IDENTICON_SIZE_SHORT);
  int size=Math.max(50,(2 * 4) + (int)(2 * 5 * Math.sqrt(codeParam.length())));
  if (sizeParam != null) {
    try {
      size=Integer.parseInt(sizeParam);
      if (size < 40)       size=40;
 else       if (size > 512)       size=512;
    }
 catch (    NumberFormatException nfe) {
    }
  }
  String identiconETag=IdenticonUtil.getIdenticonETag(codeParam.hashCode(),size,version);
  String requestETag=request.getHeader("If-None-Match");
  if (requestETag != null && requestETag.equals(identiconETag)) {
    response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
  }
 else {
    byte[] imageBytes=null;
    if (cache == null || (imageBytes=cache.get(identiconETag)) == null) {
      ByteArrayOutputStream byteOut=new ByteArrayOutputStream();
      QRCodeWriter qrcw=new QRCodeWriter();
      BitMatrix matrix;
      try {
        matrix=qrcw.encode(codeParam,BarcodeFormat.QR_CODE,size,size);
      }
 catch (      WriterException we) {
        throw new IOException("encode failed",we);
      }
      String text=request.getParameter(PARAM_IDENTICON_TEXT_SHORT);
      if (text != null) {
        BufferedImage bi=MatrixToImageWriter.toBufferedImage(matrix);
        Graphics2D g=bi.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
        g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
        g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);
        g.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);
        g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);
        Font font=DEFAULT_LARGE_FONT;
        g.setFont(font);
        Color color=Color.RED;
        g.setColor(color);
        int width=bi.getWidth();
        int height=bi.getHeight();
        double swidth=font.getStringBounds(text,0,text.length(),g.getFontRenderContext()).getBounds().getWidth();
        int x=(width - (int)swidth) / 2;
        int y=height - 10;
        g.drawString(text,x,y);
        if (!ImageIO.write(bi,IDENTICON_IMAGE_FORMAT,byteOut))         throw new IOException("ImageIO.write() fail");
      }
 else {
        MatrixToImageWriter.writeToStream(matrix,IDENTICON_IMAGE_FORMAT,byteOut);
      }
      imageBytes=byteOut.toByteArray();
      if (cache != null)       cache.add(identiconETag,imageBytes);
    }
 else {
      response.setStatus(403);
      return;
    }
    response.setHeader("ETag",identiconETag);
    if (codeSpecified) {
      long expires=System.currentTimeMillis() + identiconExpiresInMillis;
      response.addDateHeader("Expires",expires);
    }
    response.setContentType(IDENTICON_IMAGE_MIMETYPE);
    response.setContentLength(imageBytes.length);
    response.getOutputStream().write(imageBytes);
  }
}
