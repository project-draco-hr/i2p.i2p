{
  final String augmentation_string=unicode ? U_augmentation_string : A_augmentation_string;
  final char BOX_TOP=unicode ? U_BOX_TOP : A_BOX_TOP;
  final char BOX_BOTTOM=unicode ? U_BOX_BOTTOM : A_BOX_BOTTOM;
  final char BOX_LEFT=unicode ? U_BOX_LEFT : A_BOX_LEFT;
  final char BOX_RIGHT=unicode ? U_BOX_RIGHT : A_BOX_RIGHT;
  final char BOX_TL=unicode ? U_BOX_TL : A_BOX_TL;
  final char BOX_TR=unicode ? U_BOX_TR : A_BOX_TR;
  final char BOX_BL=unicode ? U_BOX_BL : A_BOX_BL;
  final char BOX_BR=unicode ? U_BOX_BR : A_BOX_BR;
  final String NL=System.getProperty("line.separator");
  final int dgst_raw_len=dgst_raw.length;
  final byte[][] field=new byte[FLDSIZE_X][FLDSIZE_Y];
  final byte[][] color=new byte[FLDSIZE_X][FLDSIZE_Y];
  final int len=augmentation_string.length() - 1;
  int prefix_len=0;
  if (prefix != null)   prefix_len=prefix.length();
  int x=FLDSIZE_X / 2;
  int y=FLDSIZE_Y / 2;
  for (int i=0; i < dgst_raw_len; i++) {
    int input;
    input=dgst_raw[i];
    for (int b=0; b < 4; b++) {
      x+=((input & 0x1) != 0) ? 1 : -1;
      y+=((input & 0x2) != 0) ? 1 : -1;
      x=Math.max(x,0);
      y=Math.max(y,0);
      x=Math.min(x,FLDSIZE_X - 1);
      y=Math.min(y,FLDSIZE_Y - 1);
      if ((field[x][y] & 0xff) < len - 2)       field[x][y]++;
      color[x][y]=(byte)i;
      input=input >> 2;
    }
  }
  field[FLDSIZE_X / 2][FLDSIZE_Y / 2]=(byte)(len - 1);
  field[x][y]=(byte)len;
  final String size_txt;
  if (key_size > 0)   size_txt=String.format(" %4d",key_size);
 else   size_txt="";
  StringBuilder retval=new StringBuilder(1024);
  long base=0;
  if (html) {
    int clen=Math.min(3,dgst_raw_len);
    byte[] cbase=new byte[clen];
    for (int i=0; i < clen; i++) {
      cbase[i]=(byte)((dgst_raw[i] & 0xff) * 5 / 8);
    }
    base=DataHelper.fromLong(cbase,0,clen);
    retval.append("<font color=\"#").append(getColor(base,0)).append("\"><pre>\n");
  }
  if (prefix_len > 0)   retval.append(String.format("%s" + BOX_TL + BOX_TOP+ BOX_TOP+ "[%4s%s]",prefix,key_type,size_txt));
 else   retval.append(String.format("" + BOX_TL + BOX_TOP+ BOX_TOP+ "[%4s%s]",key_type,size_txt));
  for (int i=0; i < FLDSIZE_X - Math.max(key_type.length(),4) - 9; i++)   retval.append(BOX_TOP);
  retval.append(BOX_TR);
  retval.append(NL);
  if (prefix_len > 0) {
    retval.append(prefix);
  }
  for (y=0; y < FLDSIZE_Y; y++) {
    retval.append(BOX_LEFT);
    for (x=0; x < FLDSIZE_X; x++) {
      int idx=Math.min(field[x][y],len);
      if (html && idx != 0)       retval.append("<span style=\"color: #").append(getColor(base,color[x][y] & 0xff)).append("\">");
      retval.append(augmentation_string.charAt(idx));
      if (html && idx != 0)       retval.append("</span>");
    }
    retval.append(BOX_RIGHT);
    retval.append(NL);
    if (prefix_len > 0) {
      retval.append(prefix);
    }
  }
  retval.append(BOX_BL);
  for (int i=0; i < FLDSIZE_X; i++)   retval.append(BOX_BOTTOM);
  retval.append(BOX_BR);
  retval.append(NL);
  if (html)   retval.append("</pre></font>\n");
  return retval.toString();
}
