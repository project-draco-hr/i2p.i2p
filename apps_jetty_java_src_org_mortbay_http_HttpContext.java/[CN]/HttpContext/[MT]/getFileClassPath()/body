{
  ClassLoader loader=getClassLoader();
  if (loader == null)   throw new IllegalStateException("Context classloader not initialized");
  LinkedList paths=new LinkedList();
  LinkedList loaders=new LinkedList();
  while (loader != null) {
    loaders.add(0,loader);
    loader=loader.getParent();
  }
  loader=getClassLoader();
  if (loader instanceof ContextLoader && !((ContextLoader)loader).isJava2Compliant()) {
    loaders.remove(loader);
    loaders.add(0,loader);
  }
  for (int i=0; i < loaders.size(); i++) {
    loader=(ClassLoader)loaders.get(i);
    if (log.isDebugEnabled())     log.debug("extract paths from " + loader);
    if (loader instanceof URLClassLoader) {
      URL[] urls=((URLClassLoader)loader).getURLs();
      for (int j=0; urls != null && j < urls.length; j++) {
        try {
          Resource path=Resource.newResource(urls[j]);
          if (log.isTraceEnabled())           log.trace("path " + path);
          File file=path.getFile();
          if (file != null)           paths.add(file.getAbsolutePath());
        }
 catch (        Exception e) {
          LogSupport.ignore(log,e);
        }
      }
    }
  }
  String jcp=System.getProperty("java.class.path");
  if (jcp != null) {
    StringTokenizer tok=new StringTokenizer(jcp,File.pathSeparator);
    while (tok.hasMoreTokens()) {
      String path=tok.nextToken();
      if (!paths.contains(path)) {
        if (log.isTraceEnabled())         log.trace("PATH=" + path);
        paths.add(path);
      }
 else       if (log.isTraceEnabled())       log.trace("done=" + path);
    }
  }
  StringBuffer buf=new StringBuffer();
  Iterator iter=paths.iterator();
  while (iter.hasNext()) {
    if (buf.length() > 0)     buf.append(File.pathSeparator);
    buf.append(iter.next().toString());
  }
  if (log.isDebugEnabled())   log.debug("fileClassPath=" + buf);
  return buf.toString();
}
