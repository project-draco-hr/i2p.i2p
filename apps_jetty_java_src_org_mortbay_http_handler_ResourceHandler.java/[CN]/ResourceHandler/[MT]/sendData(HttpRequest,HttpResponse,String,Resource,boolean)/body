{
  long resLength=resource.length();
  Enumeration reqRanges=request.getDotVersion() > 0 ? request.getFieldValues(HttpFields.__Range) : null;
  if (!writeHeaders || reqRanges == null || !reqRanges.hasMoreElements()) {
    Resource data=resource;
    if (_minGzipLength > 0) {
      String accept=request.getField(HttpFields.__AcceptEncoding);
      if (accept != null && resLength > _minGzipLength && !pathInContext.endsWith(".gz")) {
        Resource gz=getHttpContext().getResource(pathInContext + ".gz");
        if (gz.exists() && accept.indexOf("gzip") >= 0) {
          if (log.isDebugEnabled())           log.debug("gzip=" + gz);
          response.setField(HttpFields.__ContentEncoding,"gzip");
          data=gz;
          resLength=data.length();
        }
      }
    }
    writeHeaders(response,resource,resLength);
    request.setHandled(true);
    OutputStream out=response.getOutputStream();
    data.writeTo(out,0,resLength);
    return;
  }
  List ranges=InclusiveByteRange.satisfiableRanges(reqRanges,resLength);
  if (log.isDebugEnabled())   log.debug("ranges: " + reqRanges + " == "+ ranges);
  if (ranges == null || ranges.size() == 0) {
    log.debug("no satisfiable ranges");
    writeHeaders(response,resource,resLength);
    response.setStatus(HttpResponse.__416_Requested_Range_Not_Satisfiable);
    response.setReason((String)HttpResponse.__statusMsg.get(TypeUtil.newInteger(HttpResponse.__416_Requested_Range_Not_Satisfiable)));
    response.setField(HttpFields.__ContentRange,InclusiveByteRange.to416HeaderRangeString(resLength));
    OutputStream out=response.getOutputStream();
    resource.writeTo(out,0,resLength);
    request.setHandled(true);
    return;
  }
  if (ranges.size() == 1) {
    InclusiveByteRange singleSatisfiableRange=(InclusiveByteRange)ranges.get(0);
    if (log.isDebugEnabled())     log.debug("single satisfiable range: " + singleSatisfiableRange);
    long singleLength=singleSatisfiableRange.getSize(resLength);
    writeHeaders(response,resource,singleLength);
    response.setStatus(HttpResponse.__206_Partial_Content);
    response.setReason((String)HttpResponse.__statusMsg.get(TypeUtil.newInteger(HttpResponse.__206_Partial_Content)));
    response.setField(HttpFields.__ContentRange,singleSatisfiableRange.toHeaderRangeString(resLength));
    OutputStream out=response.getOutputStream();
    resource.writeTo(out,singleSatisfiableRange.getFirst(resLength),singleLength);
    request.setHandled(true);
    return;
  }
  ResourceCache.ResourceMetaData metaData=(ResourceCache.ResourceMetaData)resource.getAssociate();
  String encoding=metaData.getMimeType();
  MultiPartResponse multi=new MultiPartResponse(response);
  response.setStatus(HttpResponse.__206_Partial_Content);
  response.setReason((String)HttpResponse.__statusMsg.get(TypeUtil.newInteger(HttpResponse.__206_Partial_Content)));
  String ctp;
  if (request.containsField(HttpFields.__RequestRange))   ctp="multipart/x-byteranges; boundary=";
 else   ctp="multipart/byteranges; boundary=";
  response.setContentType(ctp + multi.getBoundary());
  InputStream in=(resource instanceof CachedResource) ? null : resource.getInputStream();
  OutputStream out=response.getOutputStream();
  long pos=0;
  for (int i=0; i < ranges.size(); i++) {
    InclusiveByteRange ibr=(InclusiveByteRange)ranges.get(i);
    String header=HttpFields.__ContentRange + ": " + ibr.toHeaderRangeString(resLength);
    if (log.isDebugEnabled())     log.debug("multi range: " + encoding + " "+ header);
    multi.startPart(encoding,new String[]{header});
    long start=ibr.getFirst(resLength);
    long size=ibr.getSize(resLength);
    if (in != null) {
      if (start < pos) {
        in.close();
        in=resource.getInputStream();
        pos=0;
      }
      if (pos < start) {
        in.skip(start - pos);
        pos=start;
      }
      IO.copy(in,out,size);
      pos+=size;
    }
 else     resource.writeTo(out,start,size);
  }
  if (in != null)   in.close();
  multi.close();
  request.setHandled(true);
  return;
}
