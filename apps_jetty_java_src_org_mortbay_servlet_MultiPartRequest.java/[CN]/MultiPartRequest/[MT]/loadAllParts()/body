{
  String line=_in.readLine();
  if (line == null || !line.equals(_boundary)) {
    throw new IOException("Missing initial multi part boundary");
  }
  while (!_lastPart) {
    Part part=new Part();
    String content_disposition=null;
    while ((line=_in.readLine()) != null) {
      if (line.length() == 0)       break;
      int c=line.indexOf(':',0);
      if (c > 0) {
        String key=line.substring(0,c).trim().toLowerCase();
        String value=line.substring(c + 1,line.length()).trim();
        String ev=part._headers.get(key);
        part._headers.put(key,(ev != null) ? (ev + ';' + value) : value);
        if (key.equals("content-disposition"))         content_disposition=value;
      }
    }
    boolean form_data=false;
    if (content_disposition == null) {
      throw new IOException("Missing content-disposition");
    }
    StringTokenizer tok=new StringTokenizer(content_disposition,";");
    while (tok.hasMoreTokens()) {
      String t=tok.nextToken().trim();
      String tl=t.toLowerCase();
      if (t.startsWith("form-data"))       form_data=true;
 else       if (tl.startsWith("name="))       part._name=value(t);
 else       if (tl.startsWith("filename="))       part._filename=value(t);
    }
    if (!form_data) {
      continue;
    }
    if (part._name == null || part._name.length() == 0) {
      continue;
    }
    _partMap.add(part._name,part);
    part._data=readBytes();
  }
}
