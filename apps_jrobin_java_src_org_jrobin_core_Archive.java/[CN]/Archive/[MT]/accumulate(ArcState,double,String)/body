{
  if (Double.isNaN(value)) {
    state.setNanSteps(state.getNanSteps() + 1);
  }
 else {
    final double accumValue=state.getAccumValue();
    if (consolFunString.equals(CF_MIN)) {
      final double minValue=Util.min(accumValue,value);
      if (minValue != accumValue) {
        state.setAccumValue(minValue);
      }
    }
 else     if (consolFunString.equals(CF_MAX)) {
      final double maxValue=Util.max(accumValue,value);
      if (maxValue != accumValue) {
        state.setAccumValue(maxValue);
      }
    }
 else     if (consolFunString.equals(CF_LAST)) {
      state.setAccumValue(value);
    }
 else     if (consolFunString.equals(CF_AVERAGE)) {
      state.setAccumValue(Util.sum(accumValue,value));
    }
  }
}
