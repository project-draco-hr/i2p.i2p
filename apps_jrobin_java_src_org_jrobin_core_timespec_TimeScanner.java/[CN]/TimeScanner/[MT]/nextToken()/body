{
  StringBuffer buffer=new StringBuffer("");
  while (pos < dateString.length()) {
    char c=dateString.charAt(pos++);
    if (Character.isWhitespace(c) || c == '_' || c == ',') {
      continue;
    }
    buffer.append(c);
    if (Character.isDigit(c)) {
      while (pos < dateString.length()) {
        char next=dateString.charAt(pos);
        if (Character.isDigit(next)) {
          buffer.append(next);
          pos++;
        }
 else {
          break;
        }
      }
      String value=buffer.toString();
      return token=new TimeToken(value,TimeToken.NUMBER);
    }
    if (Character.isLetter(c)) {
      while (pos < dateString.length()) {
        char next=dateString.charAt(pos);
        if (Character.isLetter(next)) {
          buffer.append(next);
          pos++;
        }
 else {
          break;
        }
      }
      String value=buffer.toString();
      return token=new TimeToken(value,parseToken(value));
    }
switch (c) {
case ':':
      return token=new TimeToken(":",TimeToken.COLON);
case '.':
    return token=new TimeToken(".",TimeToken.DOT);
case '+':
  return token=new TimeToken("+",TimeToken.PLUS);
case '-':
return token=new TimeToken("-",TimeToken.MINUS);
case '/':
return token=new TimeToken("/",TimeToken.SLASH);
default :
pos--;
return token=new TimeToken(null,TimeToken.EOF);
}
}
return token=new TimeToken(null,TimeToken.EOF);
}
