{
  List<Double> valueList=new ArrayList<Double>();
  for (int i=0; i < timestamps.length; i++) {
    long left=Math.max(timestamps[i] - step,tStart);
    long right=Math.min(timestamps[i],tEnd);
    if (right > left && (!Double.isNaN(values[i]) || includenan)) {
      valueList.add(values[i]);
    }
  }
  int count=valueList.size();
  if (count > 1) {
    double[] valuesCopy=new double[count];
    for (int i=0; i < count; i++) {
      valuesCopy[i]=valueList.get(i);
    }
    Arrays.sort(valuesCopy);
    double topPercentile=(100.0 - percentile) / 100.0;
    count-=(int)Math.ceil(count * topPercentile);
    if (count > 0) {
      return valuesCopy[count - 1];
    }
  }
  return Double.NaN;
}
