{
  if (interpolationMethod == INTERPOLATE_REGRESSION) {
    return b0 + b1 * timestamp;
  }
  int count=timestamps.length;
  if (timestamp < timestamps[0] || timestamp > timestamps[count - 1]) {
    return Double.NaN;
  }
  int startIndex=lastIndexUsed;
  if (timestamp < timestamps[lastIndexUsed]) {
    startIndex=0;
  }
  for (int i=startIndex; i < count; i++) {
    if (timestamps[i] == timestamp) {
      return values[i];
    }
    if (i < count - 1 && timestamps[i] < timestamp && timestamp < timestamps[i + 1]) {
      lastIndexUsed=i;
switch (interpolationMethod) {
case INTERPOLATE_LEFT:
        return values[i];
case INTERPOLATE_RIGHT:
      return values[i + 1];
case INTERPOLATE_LINEAR:
    double slope=(values[i + 1] - values[i]) / (timestamps[i + 1] - timestamps[i]);
  return values[i] + slope * (timestamp - timestamps[i]);
default :
return Double.NaN;
}
}
}
return Double.NaN;
}
