{
  int rawCount=rawTimestamps.length;
  long rawStep=rawTimestamps[1] - rawTimestamps[0];
  if (rawCount == count && rawStep == step && rawTimestamps[0] == timestamps[0]) {
    return getCopyOf(rawValues);
  }
  double[] values=new double[count];
  Arrays.fill(values,Double.NaN);
  for (int rawSeg=0, seg=0; rawSeg < rawCount && seg < count; rawSeg++) {
    double rawValue=rawValues[rawSeg];
    if (!Double.isNaN(rawValue)) {
      long rawLeft=rawTimestamps[rawSeg] - rawStep;
      while (seg < count && rawLeft >= timestamps[seg]) {
        seg++;
      }
      boolean overlap=true;
      for (int fillSeg=seg; overlap && fillSeg < count; fillSeg++) {
        long left=timestamps[fillSeg] - step;
        long t1=Math.max(rawLeft,left);
        long t2=Math.min(rawTimestamps[rawSeg],timestamps[fillSeg]);
        if (t1 < t2) {
          values[fillSeg]=Util.sum(values[fillSeg],(t2 - t1) * rawValues[rawSeg]);
        }
 else {
          overlap=false;
        }
      }
    }
  }
  for (int seg=0; seg < count; seg++) {
    values[seg]/=step;
  }
  return values;
}
