{
  Token token=new Token();
  if (Util.isDouble(parsedText)) {
    token.id=TKN_NUM;
    token.number=Util.parseDouble(parsedText);
  }
 else   if (parsedText.equals("+")) {
    token.id=TKN_PLUS;
  }
 else   if (parsedText.equals("-")) {
    token.id=TKN_MINUS;
  }
 else   if (parsedText.equals("*")) {
    token.id=TKN_MULT;
  }
 else   if (parsedText.equals("/")) {
    token.id=TKN_DIV;
  }
 else   if (parsedText.equals("%")) {
    token.id=TKN_MOD;
  }
 else   if (parsedText.equals("SIN")) {
    token.id=TKN_SIN;
  }
 else   if (parsedText.equals("COS")) {
    token.id=TKN_COS;
  }
 else   if (parsedText.equals("LOG")) {
    token.id=TKN_LOG;
  }
 else   if (parsedText.equals("EXP")) {
    token.id=TKN_EXP;
  }
 else   if (parsedText.equals("FLOOR")) {
    token.id=TKN_FLOOR;
  }
 else   if (parsedText.equals("CEIL")) {
    token.id=TKN_CEIL;
  }
 else   if (parsedText.equals("ROUND")) {
    token.id=TKN_ROUND;
  }
 else   if (parsedText.equals("POW")) {
    token.id=TKN_POW;
  }
 else   if (parsedText.equals("ABS")) {
    token.id=TKN_ABS;
  }
 else   if (parsedText.equals("SQRT")) {
    token.id=TKN_SQRT;
  }
 else   if (parsedText.equals("RANDOM")) {
    token.id=TKN_RANDOM;
  }
 else   if (parsedText.equals("LT")) {
    token.id=TKN_LT;
  }
 else   if (parsedText.equals("LE")) {
    token.id=TKN_LE;
  }
 else   if (parsedText.equals("GT")) {
    token.id=TKN_GT;
  }
 else   if (parsedText.equals("GE")) {
    token.id=TKN_GE;
  }
 else   if (parsedText.equals("EQ")) {
    token.id=TKN_EQ;
  }
 else   if (parsedText.equals("IF")) {
    token.id=TKN_IF;
  }
 else   if (parsedText.equals("MIN")) {
    token.id=TKN_MIN;
  }
 else   if (parsedText.equals("MAX")) {
    token.id=TKN_MAX;
  }
 else   if (parsedText.equals("LIMIT")) {
    token.id=TKN_LIMIT;
  }
 else   if (parsedText.equals("DUP")) {
    token.id=TKN_DUP;
  }
 else   if (parsedText.equals("EXC")) {
    token.id=TKN_EXC;
  }
 else   if (parsedText.equals("POP")) {
    token.id=TKN_POP;
  }
 else   if (parsedText.equals("UN")) {
    token.id=TKN_UN;
  }
 else   if (parsedText.equals("UNKN")) {
    token.id=TKN_UNKN;
  }
 else   if (parsedText.equals("NOW")) {
    token.id=TKN_NOW;
  }
 else   if (parsedText.equals("TIME")) {
    token.id=TKN_TIME;
  }
 else   if (parsedText.equals("LTIME")) {
    token.id=TKN_LTIME;
  }
 else   if (parsedText.equals("PI")) {
    token.id=TKN_PI;
  }
 else   if (parsedText.equals("E")) {
    token.id=TKN_E;
  }
 else   if (parsedText.equals("AND")) {
    token.id=TKN_AND;
  }
 else   if (parsedText.equals("OR")) {
    token.id=TKN_OR;
  }
 else   if (parsedText.equals("XOR")) {
    token.id=TKN_XOR;
  }
 else   if (parsedText.equals("PREV")) {
    token.id=TKN_PREV;
    token.variable=sourceName;
    token.values=calculatedValues;
  }
 else   if (parsedText.startsWith("PREV(") && parsedText.endsWith(")")) {
    token.id=TKN_PREV;
    token.variable=parsedText.substring(5,parsedText.length() - 1);
    token.values=dataProcessor.getValues(token.variable);
  }
 else   if (parsedText.equals("INF")) {
    token.id=TKN_INF;
  }
 else   if (parsedText.equals("NEGINF")) {
    token.id=TKN_NEGINF;
  }
 else   if (parsedText.equals("STEP")) {
    token.id=TKN_STEP;
  }
 else   if (parsedText.equals("YEAR")) {
    token.id=TKN_YEAR;
  }
 else   if (parsedText.equals("MONTH")) {
    token.id=TKN_MONTH;
  }
 else   if (parsedText.equals("DATE")) {
    token.id=TKN_DATE;
  }
 else   if (parsedText.equals("HOUR")) {
    token.id=TKN_HOUR;
  }
 else   if (parsedText.equals("MINUTE")) {
    token.id=TKN_MINUTE;
  }
 else   if (parsedText.equals("SECOND")) {
    token.id=TKN_SECOND;
  }
 else   if (parsedText.equals("WEEK")) {
    token.id=TKN_WEEK;
  }
 else   if (parsedText.equals("SIGN")) {
    token.id=TKN_SIGN;
  }
 else   if (parsedText.equals("RND")) {
    token.id=TKN_RND;
  }
 else   if (parsedText.equals("ADDNAN")) {
    token.id=TKN_ADDNAN;
  }
 else   if (parsedText.equals("NE")) {
    token.id=TKN_NE;
  }
 else   if (parsedText.equals("ISINF")) {
    token.id=TKN_ISINF;
  }
 else   if (parsedText.equals("ATAN")) {
    token.id=TKN_ATAN;
  }
 else   if (parsedText.equals("ATAN2")) {
    token.id=TKN_ATAN2;
  }
 else   if (parsedText.equals("DEG2RAD")) {
    token.id=TKN_DEG2RAD;
  }
 else   if (parsedText.equals("RAD2DEG")) {
    token.id=TKN_RAD2DEG;
  }
 else   if (parsedText.equals("COUNT")) {
    token.id=TKN_COUNT;
  }
 else   if (parsedText.equals("SORT")) {
    token.id=TKN_SORT;
  }
 else   if (parsedText.equals("REV")) {
    token.id=TKN_REV;
  }
 else   if (parsedText.equals("AVG")) {
    token.id=TKN_AVG;
  }
 else   if (parsedText.equals("TREND")) {
    token.id=TKN_TREND;
  }
 else   if (parsedText.equals("TRENDNAN")) {
    token.id=TKN_TRENDNAN;
  }
 else   if (parsedText.equals("PREDICT")) {
    token.id=TKN_PREDICT;
  }
 else   if (parsedText.equals("PREDICTSIGMA")) {
    token.id=TKN_PREDICTSIGMA;
  }
 else {
    token.id=TKN_VAR;
    token.variable=parsedText;
    token.values=dataProcessor.getValues(token.variable);
  }
  return token;
}
