{
  int numRetries=0;
  long inactivityTimeout=INACTIVITY_TIMEOUT;
  String url=null;
  try {
    for (int i=0; i < args.length; i++) {
      if (args[i].equals("-n")) {
        numRetries=Integer.parseInt(args[i + 1]);
        i++;
      }
 else       if (args[i].equals("-t")) {
        inactivityTimeout=1000 * Integer.parseInt(args[i + 1]);
        i++;
      }
 else       if (args[i].startsWith("-")) {
        usage();
        return;
      }
 else {
        url=args[i];
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    usage();
    return;
  }
  if (url == null) {
    usage();
    return;
  }
  Properties opts=new Properties();
  opts.setProperty("i2cp.dontPublishLeaseSet","true");
  opts.setProperty("inbound.quantity","1");
  opts.setProperty("outbound.quantity","1");
  opts.setProperty("inbound.length","1");
  opts.setProperty("outbound.length","1");
  opts.setProperty("inbound.nickname","I2PSocketEepGet");
  I2PSocketManager mgr=I2PSocketManagerFactory.createManager(opts);
  if (mgr == null) {
    System.err.println("Error creating the socket manager");
    return;
  }
  I2PSocketEepGet get=new I2PSocketEepGet(I2PAppContext.getGlobalContext(),mgr,numRetries,suggestName(url),url);
  get.addStatusListener(get.new CLIStatusListener(1024,40));
  get.fetch(inactivityTimeout,-1,inactivityTimeout);
  mgr.destroySocketManager();
}
