{
  if (_outputStream == null) {
    File outFile=new File(_outputFile);
    if (outFile.exists())     _alreadyTransferred=outFile.length();
  }
  if (_proxyIn != null)   try {
    _proxyIn.close();
  }
 catch (  IOException ioe) {
  }
  if (_proxyOut != null)   try {
    _proxyOut.close();
  }
 catch (  IOException ioe) {
  }
  if (_socket != null)   try {
    _socket.close();
  }
 catch (  IOException ioe) {
  }
  try {
    URI url=new URI(_actualURL);
    if ("http".equals(url.getScheme())) {
      String host=url.getHost();
      int port=url.getPort();
      if (port <= 0 || port > 65535)       port=80;
      if ("i2p".equals(host)) {
        String file=url.getPath();
        try {
          int slash=1 + file.substring(1).indexOf("/");
          host=file.substring(1,slash);
          _actualURL="http://" + host + file.substring(slash);
        }
 catch (        IndexOutOfBoundsException ioobe) {
          throw new MalformedURLException("Bad /i2p/ format: " + _actualURL);
        }
      }
      Destination dest;
      I2PSession sess=_socketManager.getSession();
      if (sess != null && !sess.isClosed()) {
        try {
          if (host.length() == 60 && host.endsWith(".b32.i2p")) {
            byte[] b=Base32.decode(host.substring(0,52));
            if (b != null) {
              Hash h=Hash.create(b);
              dest=sess.lookupDest(h,20 * 1000);
            }
 else {
              dest=null;
            }
          }
 else {
            dest=sess.lookupDest(host,20 * 1000);
          }
        }
 catch (        I2PSessionException ise) {
          dest=null;
        }
      }
 else {
        dest=_context.namingService().lookup(host);
      }
      if (dest == null)       throw new UnknownHostException("Unknown or non-i2p host: " + host);
      Properties props=new Properties();
      props.setProperty(I2PSocketOptions.PROP_CONNECT_TIMEOUT,"" + CONNECT_TIMEOUT);
      props.setProperty(I2PSocketOptions.PROP_READ_TIMEOUT,"" + INACTIVITY_TIMEOUT);
      props.setProperty(PROP_CONNECT_DELAY,CONNECT_DELAY);
      I2PSocketOptions opts=_socketManager.buildOptions(props);
      opts.setPort(port);
      _socket=_socketManager.connect(dest,opts);
    }
 else {
      throw new MalformedURLException("Unsupported protocol: " + _actualURL);
    }
  }
 catch (  URISyntaxException use) {
    IOException ioe=new MalformedURLException("Bad URL");
    ioe.initCause(use);
    throw ioe;
  }
catch (  I2PException ie) {
    throw new IOException("I2P error",ie);
  }
  _proxyIn=_socket.getInputStream();
  _proxyOut=_socket.getOutputStream();
  String req=getRequest();
  _proxyOut.write(DataHelper.getUTF8(req));
  _proxyOut.flush();
}
