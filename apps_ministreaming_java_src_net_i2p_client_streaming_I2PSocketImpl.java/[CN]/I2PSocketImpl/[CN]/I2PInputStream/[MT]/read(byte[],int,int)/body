{
  if (_log.shouldLog(Log.DEBUG))   _log.debug(getStreamPrefix() + "Read called for " + len+ " bytes (avail="+ bc.getCurrentSize()+ "): "+ this.hashCode());
  if (len == 0)   return 0;
  long dieAfter=System.currentTimeMillis() + readTimeout;
  byte[] read=null;
synchronized (bc) {
    read=bc.startToByteArray(len);
    bc.notifyAll();
  }
  boolean timedOut=false;
  while ((read.length == 0) && (!inStreamClosed)) {
synchronized (flagLock) {
      if (closed) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug(getStreamPrefix() + "Closed is set after reading " + _bytesRead+ " and writing "+ _bytesWritten+ ", so closing stream: "+ hashCode());
        return -1;
      }
    }
    try {
synchronized (I2PSocketImpl.I2PInputStream.this) {
        if (readTimeout >= 0) {
          wait(readTimeout);
        }
 else {
          wait();
        }
      }
    }
 catch (    InterruptedException ex) {
    }
    if ((readTimeout >= 0) && (System.currentTimeMillis() >= dieAfter)) {
      throw new InterruptedIOException(getStreamPrefix() + "Timeout reading from I2PSocket (" + readTimeout+ " msecs)");
    }
synchronized (bc) {
      read=bc.startToByteArray(len);
      bc.notifyAll();
    }
  }
  if (read.length > len)   throw new RuntimeException("BUG");
  if ((inStreamClosed) && (read.length <= 0))   return -1;
  System.arraycopy(read,0,b,off,read.length);
  if (_log.shouldLog(Log.DEBUG)) {
    _log.debug(getStreamPrefix() + "Read from I2PInputStream " + hashCode()+ " returned "+ read.length+ " bytes");
  }
  return read.length;
}
