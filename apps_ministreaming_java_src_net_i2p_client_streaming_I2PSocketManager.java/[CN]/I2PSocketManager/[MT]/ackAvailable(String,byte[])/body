{
  long begin=_context.clock().now();
  I2PSocketImpl s=null;
synchronized (lock) {
    s=(I2PSocketImpl)_outSockets.get(id);
  }
  if (s == null) {
    _log.warn(getName() + ": No socket responsible for ACK packet");
    return;
  }
  long socketRetrieved=_context.clock().now();
  String remoteId=null;
  remoteId=s.getRemoteID(false);
  if ((payload.length == 3) && (remoteId == null)) {
    String newID=toString(payload);
    long beforeSetRemId=_context.clock().now();
    s.setRemoteID(newID);
    if (_log.shouldLog(Log.DEBUG)) {
      _log.debug(getName() + ": ackAvailable - socket retrieval took " + (socketRetrieved - begin)+ "ms, getRemoteId took "+ (beforeSetRemId - socketRetrieved)+ "ms, setRemoteId took "+ (_context.clock().now() - beforeSetRemId)+ "ms");
    }
    return;
  }
 else {
    if (_log.shouldLog(Log.WARN)) {
      if (payload.length != 3)       _log.warn(getName() + ": Ack packet had " + payload.length+ " bytes");
 else       _log.warn(getName() + ": Remote ID already exists? " + remoteId);
    }
    if (_log.shouldLog(Log.DEBUG)) {
      _log.debug(getName() + ": invalid ack - socket retrieval took " + (socketRetrieved - begin)+ "ms, overall took "+ (_context.clock().now() - begin)+ "ms");
    }
    return;
  }
}
