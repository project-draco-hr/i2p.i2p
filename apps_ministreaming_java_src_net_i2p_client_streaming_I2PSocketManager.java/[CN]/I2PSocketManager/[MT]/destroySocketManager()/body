{
  if (_serverSocket != null) {
    _serverSocket.close();
    _serverSocket=null;
  }
synchronized (lock) {
    Iterator iter;
    String id=null;
    I2PSocketImpl sock;
    iter=_inSockets.keySet().iterator();
    while (iter.hasNext()) {
      id=(String)iter.next();
      sock=(I2PSocketImpl)_inSockets.get(id);
      if (_log.shouldLog(Log.DEBUG))       _log.debug(getName() + ": Closing inSocket \"" + getReadableForm(sock.getLocalID())+ "\"");
      sock.internalClose();
    }
    iter=_outSockets.keySet().iterator();
    while (iter.hasNext()) {
      id=(String)iter.next();
      sock=(I2PSocketImpl)_outSockets.get(id);
      if (_log.shouldLog(Log.DEBUG))       _log.debug(getName() + ": Closing outSocket \"" + getReadableForm(sock.getLocalID())+ "\"");
      sock.internalClose();
    }
  }
  _log.debug(getName() + ": Waiting for all open sockets to really close...");
synchronized (lock) {
    while ((_inSockets.size() != 0) || (_outSockets.size() != 0)) {
      try {
        lock.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
  try {
    _log.debug(getName() + ": Destroying I2P session...");
    _session.destroySession();
    _log.debug(getName() + ": I2P session destroyed");
  }
 catch (  I2PSessionException e) {
    _log.warn(getName() + ": Error destroying I2P session",e);
  }
}
