{
  _name=name;
  _context=context;
  _log=_context.logManager().getLog(I2PSocketManager.class);
  _inSockets=new HashMap(16);
  _outSockets=new HashMap(16);
  _acceptTimeout=ACCEPT_TIMEOUT_DEFAULT;
  setSession(session);
  setDefaultOptions(buildOptions(opts));
  _context.statManager().createRateStat("streaming.lifetime","How long before the socket is closed?","streaming",new long[]{10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("streaming.sent","How many bytes are sent in the stream?","streaming",new long[]{10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("streaming.received","How many bytes are received in the stream?","streaming",new long[]{10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("streaming.transferBalance","How many streams send more than they receive (positive means more sent, negative means more received)?","streaming",new long[]{10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("streaming.synNoAck","How many times have we sent a SYN but not received an ACK?","streaming",new long[]{10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("streaming.ackSendFailed","How many times have we tried to send an ACK to a SYN and failed?","streaming",new long[]{10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("streaming.nackSent","How many times have we refused a SYN with a NACK?","streaming",new long[]{10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("streaming.nackReceived","How many times have we received a NACK to our SYN?","streaming",new long[]{10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
}
