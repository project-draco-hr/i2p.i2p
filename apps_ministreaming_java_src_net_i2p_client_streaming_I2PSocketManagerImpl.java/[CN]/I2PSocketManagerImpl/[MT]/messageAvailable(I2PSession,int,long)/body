{
  try {
    byte msg[]=session.receiveMessage(msgId);
    if (msg.length == 1 && msg[0] == -1) {
      _log.debug(getName() + ": Ping received");
      return;
    }
    if (msg.length < 4) {
      _log.warn(getName() + ": ==== packet too short ====");
      return;
    }
    int type=msg[0] & 0xff;
    String id=toString(new byte[]{msg[1],msg[2],msg[3]});
    byte[] payload=new byte[msg.length - 4];
    System.arraycopy(msg,4,payload,0,payload.length);
    if (_log.shouldLog(Log.DEBUG))     _log.debug(getName() + ": Message read: type = [" + Integer.toHexString(type)+ "] id = ["+ getReadableForm(id)+ "] payload length: ["+ payload.length+ "]");
switch (type) {
case ACK:
      ackAvailable(id,payload);
    return;
case CLOSE_OUT:
  disconnectAvailable(id,payload);
return;
case DATA_OUT:
sendOutgoingAvailable(id,payload);
return;
case SYN:
synIncomingAvailable(id,payload,session);
return;
case CLOSE_IN:
disconnectIncoming(id,payload);
return;
case DATA_IN:
sendIncoming(id,payload);
return;
case CHAFF:
return;
default :
handleUnknown(type,id,payload);
return;
}
}
 catch (I2PException ise) {
_log.warn(getName() + ": Error processing",ise);
}
catch (IllegalStateException ise) {
_log.debug(getName() + ": Error processing",ise);
}
}
