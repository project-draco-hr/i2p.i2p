{
  StreamSinkClient client=null;
  int sendSizeKB=-1;
  int writeDelayMs=-1;
  int concurrent=1;
switch (args.length) {
case 3:
case 4:
    try {
      sendSizeKB=Integer.parseInt(args[0]);
    }
 catch (    NumberFormatException nfe) {
      System.err.println("Send size invalid [" + args[0] + "]");
      return;
    }
  try {
    writeDelayMs=Integer.parseInt(args[1]);
  }
 catch (  NumberFormatException nfe) {
    System.err.println("Write delay ms invalid [" + args[1] + "]");
    return;
  }
if (args.length == 4) {
  try {
    concurrent=Integer.parseInt(args[3]);
  }
 catch (  NumberFormatException nfe) {
  }
}
client=new StreamSinkClient(sendSizeKB,writeDelayMs,args[2]);
break;
case 5:
case 6:
try {
int port=Integer.parseInt(args[1]);
sendSizeKB=Integer.parseInt(args[2]);
writeDelayMs=Integer.parseInt(args[3]);
client=new StreamSinkClient(args[0],port,sendSizeKB,writeDelayMs,args[4]);
}
 catch (NumberFormatException nfe) {
System.err.println("arg error");
}
if (args.length == 6) {
try {
concurrent=Integer.parseInt(args[5]);
}
 catch (NumberFormatException nfe) {
}
}
break;
default :
System.out.println("Usage: StreamSinkClient [i2cpHost i2cpPort] sendSizeKB writeDelayMs serverDestFile [concurrentSends]");
}
if (client != null) {
for (int i=0; i < concurrent; i++) new I2PThread(new Runner(client),"Client " + i).start();
}
}
