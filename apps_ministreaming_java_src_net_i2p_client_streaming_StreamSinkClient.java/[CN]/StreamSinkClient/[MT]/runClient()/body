{
  I2PSocketManager mgr=null;
  if (_i2cpHost != null)   mgr=I2PSocketManagerFactory.createManager(_i2cpHost,_i2cpPort,new Properties());
 else   mgr=I2PSocketManagerFactory.createManager();
  Destination peer=null;
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(_peerDestFile);
    peer=new Destination();
    peer.readBytes(fis);
  }
 catch (  IOException ioe) {
    _log.error("Error finding the peer destination to contact in " + _peerDestFile,ioe);
    return;
  }
catch (  DataFormatException dfe) {
    _log.error("Peer destination is not valid in " + _peerDestFile,dfe);
    return;
  }
 finally {
    if (fis != null)     try {
      fis.close();
    }
 catch (    IOException ioe) {
    }
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Send " + _sendSize + "KB to "+ peer.calculateHash().toBase64());
  while (true) {
    try {
      I2PSocket sock=mgr.connect(peer);
      byte buf[]=new byte[Math.min(32 * 1024,_sendSize * 1024)];
      Random rand=new Random();
      OutputStream out=sock.getOutputStream();
      long beforeSending=System.currentTimeMillis();
      for (int i=0; (_sendSize < 0) || (i < _sendSize); i+=buf.length / 1024) {
        rand.nextBytes(buf);
        out.write(buf);
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Wrote " + ((1 + i * buf.length) / 1024) + "/"+ _sendSize+ "KB");
        if (_writeDelay > 0) {
          try {
            Thread.sleep(_writeDelay);
          }
 catch (          InterruptedException ie) {
          }
        }
      }
      sock.close();
      long afterSending=System.currentTimeMillis();
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Sent " + _sendSize + "KB in "+ (afterSending - beforeSending)+ "ms");
    }
 catch (    InterruptedIOException iie) {
      _log.error("Timeout connecting to the peer",iie);
    }
catch (    NoRouteToHostException nrthe) {
      _log.error("Unable to connect to the peer",nrthe);
    }
catch (    ConnectException ce) {
      _log.error("Connection already dropped",ce);
    }
catch (    I2PException ie) {
      _log.error("Error connecting to the peer",ie);
      return;
    }
catch (    IOException ioe) {
      _log.error("IO error sending",ioe);
      return;
    }
  }
}
