{
  int numFast=0;
  int numReliable=0;
  int numNotFailing=0;
  int numFailing=0;
  Properties props=peer.getOptions();
  for (Iterator iter=props.keySet().iterator(); iter.hasNext(); ) {
    String key=(String)iter.next();
    if (key.startsWith("profile.")) {
      String val=(String)props.get(key);
      if (val.indexOf("fastReliable") != -1)       numFast++;
 else       if (val.indexOf("reliable") != -1)       numReliable++;
 else       if (val.indexOf("notFailing") != -1)       numNotFailing++;
 else       if (val.indexOf("failing") != -1)       numFailing++;
    }
  }
  long rankAs[]=new long[4];
  rankAs[0]=numFast;
  rankAs[1]=numReliable;
  rankAs[2]=numNotFailing;
  rankAs[3]=numFailing;
  String description="how we rank peers";
  String valDescr[]=new String[4];
  valDescr[0]="# peers we rank as fast";
  valDescr[1]="# peers we rank as reliable";
  valDescr[2]="# peers we rank as not failing";
  valDescr[3]="# peers we rank as failing";
  monitor.addData(peer.getIdentity().getHash().toBase64(),"rankAs",description,valDescr,peer.getPublished(),rankAs);
}
