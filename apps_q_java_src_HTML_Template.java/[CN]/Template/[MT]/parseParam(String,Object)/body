{
  if (key.equals("case_sensitive")) {
    this.case_sensitive=boolify(value);
    Util.debug_print("case_sensitive: " + value);
  }
 else   if (key.equals("strict")) {
    this.strict=boolify(value);
    Util.debug_print("strict: " + value);
  }
 else   if (key.equals("global_vars")) {
    this.global_vars=boolify(value);
    Util.debug_print("global_vars: " + value);
  }
 else   if (key.equals("die_on_bad_params")) {
    this.die_on_bad_params=boolify(value);
    Util.debug_print("die_obp: " + value);
  }
 else   if (key.equals("max_includes")) {
    this.max_includes=intify(value) + 1;
    Util.debug_print("max_includes: " + value);
  }
 else   if (key.equals("no_includes")) {
    this.no_includes=boolify(value);
    Util.debug_print("no_includes: " + value);
  }
 else   if (key.equals("search_path_on_include")) {
    this.search_path_on_include=boolify(value);
    Util.debug_print("path_includes: " + value);
  }
 else   if (key.equals("loop_context_vars")) {
    this.loop_context_vars=boolify(value);
    Util.debug_print("loop_c_v: " + value);
  }
 else   if (key.equals("debug")) {
    this.debug=boolify(value);
    Util.debug=this.debug;
    Util.debug_print("debug: " + value);
  }
 else   if (key.equals("filename")) {
    this.filename=(String)value;
    Util.debug_print("filename: " + value);
  }
 else   if (key.equals("scalarref")) {
    this.scalarref=(String)value;
    Util.debug_print("scalarref");
  }
 else   if (key.equals("arrayref")) {
    this.arrayref=(String[])value;
    Util.debug_print("arrayref");
  }
 else   if (key.equals("path")) {
    if (value.getClass().getName().startsWith("["))     this.path=(String[])value;
 else {
      this.path=new String[1];
      this.path[0]=(String)value;
    }
    Util.debug_print("path");
    for (int j=0; j < this.path.length; j++)     Util.debug_print(this.path[j]);
  }
 else   if (key.equals("filter")) {
    if (value.getClass().getName().startsWith("["))     this.filters=(Filter[])value;
 else {
      this.filters=new Filter[1];
      this.filters[0]=(Filter)value;
    }
    Util.debug_print("filters set: " + filters.length);
  }
 else   if (key.equals("filehandle")) {
    this.filehandle=(Reader)value;
    Util.debug_print("filehandle");
  }
 else {
    throw new IllegalArgumentException((String)key);
  }
}
