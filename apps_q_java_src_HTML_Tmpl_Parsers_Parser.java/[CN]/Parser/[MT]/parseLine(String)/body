{
  int pos=0, endpos;
  Vector parts=new Vector();
  char[] c=line.toCharArray();
  int i=0;
  StringBuffer temp=new StringBuffer();
  for (i=0; i < c.length; i++) {
    if (c[i] != '<') {
      temp.append(c[i]);
    }
 else {
      Util.debug_print("line so far: " + temp);
      StringBuffer tag=new StringBuffer();
      for (; i < c.length && c[i] != '>'; i++) {
        tag.append(c[i]);
      }
      if (i < c.length)       tag.append(c[i]);
      while (tag.toString().substring(1).indexOf("<") > -1) {
        do {
          temp.append(tag.charAt(0));
          tag=new StringBuffer(tag.toString().substring(1));
        }
 while (tag.charAt(0) != '<');
      }
      Util.debug_print("tag: " + tag);
      String test_tag=tag.toString().toLowerCase();
      if (test_tag.indexOf("tmpl_") < 0) {
        temp.append(tag);
        continue;
      }
      test_tag=cleanTag(test_tag);
      Util.debug_print("clean: " + test_tag);
      if (test_tag.startsWith("/"))       test_tag=test_tag.substring(1);
      if (!test_tag.startsWith("tmpl_")) {
        temp.append(tag);
        continue;
      }
      String tag_type=getTagType(test_tag);
      if (tag_type == null) {
        if (strict)         throw new IllegalArgumentException(tag.toString());
 else         temp.append(tag);
      }
      Util.debug_print("type: " + tag_type);
      if (tag_type == null)       continue;
      if (temp.length() > 0) {
        parts.addElement(temp.toString());
        temp=new StringBuffer();
      }
      Util.debug_print("Checking: " + tag);
      Properties tag_props=getTagProps(tag.toString());
      if (tag_props.containsKey("name"))       Util.debug_print("name: " + tag_props.getProperty("name"));
 else       Util.debug_print("no name");
      parts.addElement(tag_props);
    }
  }
  if (temp.length() > 0)   parts.addElement(temp.toString());
  return parts;
}
