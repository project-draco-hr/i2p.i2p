{
  if (argi == argc) {
    System.out.println("I2P QMgr - Brief command summary:\n" + "Synopsis:" + "  java net.i2p.aum.q.QMgr [-dir <path>] [server] [<cmd> [<args>]]\n"+ "Commands:\n"+ "  help             - print this help summary\n"+ "  help verbose     - print detailed verbose usage info\n"+ "  start            - start a node in background\n"+ "  foreground       - run a node in foreground\n"+ "  stop             - terminate node\n"+ "  status           - display node status\n"+ "  getref [<file>]  - output the node's noderef (its base64 dest)\n"+ "  addref [<file>]  - add one or more node refs to node\n"+ "  get key [<file>] - get key to stdout (or to file)\n"+ "  put [<file>] [-m <metadata>] - insert content\n"+ "  search item1=val1 item2=val2...  - search for content\n");
  }
 else   if (args[argi].equals("verbose")) {
    System.out.println("----------------------------\n" + "Welcome to the I2P Q network\n" + "----------------------------\n"+ "\n"+ "This program, QMgr, is a command-line interface to the Q network,\n"+ "(an in-I2P distributed file store)\n"+ "and allows you to perform basic operations, including:\n"+ "\n"+ " - create, startup and shutdown Q server and client nodes\n"+ " - determine status of running Q nodes\n"+ " - import and export noderefs to/from these nodes\n"+ " - search for, insert and retrieve content\n"+ "\n"+ "Command syntax:\n"+ "  java net.i2p.aum.q.QMgr [-dir <path>] [-port <port>] [server] [<cmd> [<args>]]\n"+ "\n"+ "Explanation of commands and arguments:"+ "\n"+ "* 'server'\n"+ "  Specifies that we're operating on a server node (otherwise it's\n"+ "  assumed we're operating on a client node)\n"+ "\n"+ "* '-dir=<path>'\n"+ "  Server nodes by default reside at ~/.quartermaster_server,\n"+ "  and client nodes at ~/.quartermaster_client.\n"+ "  Nodes are uniquely identified by the directory at which they\n"+ "  reside. Specifying this argument allows you to operate on a\n"+ "  server or client node which resides at a different location\n"+ "\n"+ "* '-port=<port>'\n"+ "  Applies to client nodes only. Valid only for startup command.\n"+ "  Permanently changes the port on which a given client listens\n"+ "  for cmmands.\n"+ "\n"+ "* Commands - the basic commands are:\n"+ "\n"+ "  help\n"+ "    - display a help summary\n"+ "\n"+ "  help verbose\n"+ "    - display this long-winded help\n"+ "\n"+ "  start\n"+ "     - start the node. If a nonexistent directory path is given,\n"+ "       a whole new unique server or client node will be created\n"+ "       at that path\n"+ "\n"+ "  foreground\n"+ "     - as for start, but run the server in foreground rather\n"+ "       than as a background daemon\n"+ "\n"+ "  stop\n"+ "     - shutdown the node\n"+ "\n"+ "  status\n"+ "     - print a dump of node status and statistics to stdout\n"+ "\n"+ "  newkeys\n"+ "     - generate and print out a new keypair for signed-space\n"+ "       data item inserts\n"+ "\n"+ "  getref [<file>]\n"+ "     - print the node's noderef (its base64 destination) to\n"+ "       stdout. If <file> arg is given, writes the destination\n"+ "       to this file instead.\n"+ "\n"+ "  addref [<file>]\n"+ "     - add one or more noderefs to the node. If [<file>] argument\n"+ "       is given, the refs are read from this file, which is expected\n"+ "       to contain one base64 destination per line\n"+ "\n"+ "The following commands are only valid for client nodes:\n"+ "\n"+ "  get <key> [<file>]\n"+ "     - Try to retrieve a content item, (identified by <key>), from the\n"+ "       node. If the item is retrieved, its raw data will be printed\n"+ "       to stdout, or to <file> if given. NOTE - REDIRECTING TO STDOUT\n"+ "       IS PRESENTLY UNRELIABLE, SO SPECIFY AN EXPLICIT FILENAME FOR NOW\n"+ "\n"+ "  put [<file>] [-m item=val ...]\n"+ "     - Inserts an item of content to the node, and prints its key to\n"+ "       stdout. Reads content data from <file> if given, or from standard\n"+ "       input if not. Metadata arguments may be given as '-m' followed by\n"+ "       a space-separated sequence of 'item=value' specifiers.\n"+ "       Typical metadata items include:\n"+ "         - type (one of text/html/image/audio/video/archive)\n"+ "         - title - a short (<80 char) descriptive title\n"+ "         - filename - a recommended filename under which to store this\n"+ "           item on retrieve.\n"+ "         - abstract - a longer (<256 char) summary of content\n"+ "         - keywords - a comma-separated list of keywords\n"+ "\n"+ "  search -m item=val [ item=val ...]\n"+ "     - searches node for content matching a set of metadata criteria\n"+ "       each 'item=val' specifies an 'item' of metadata, to be matched\n"+ "       against regular expression 'val'. For example:\n"+ "         java net.i2p.aum.q.QMgr search -m title=\"^Madonna\" type=\"music\"\n");
  }
 else {
    System.out.println("Unrecognised help qualifier '" + args[argi] + "'\n"+ "type 'java net.i2p.aum.q.QMgr help' for more info");
  }
  return 0;
}
