{
  argi=0;
  argc=args.length;
  this.args=args;
  runtime=Runtime.getRuntime();
  if (argc == 0) {
    usage("Missing command");
  }
  if (args[argi].equals("-dir")) {
    argi++;
    if (argi == argc) {
      usage("-dir: missing directory");
    }
    nodeDirStr=args[argi++];
  }
  if (args[argi].equals("-port")) {
    argi++;
    if (argi == argc) {
      usage("-port: missing port num");
    }
    System.setProperty("q.xmlrpc.tcp.port",args[argi++]);
  }
  if (argi < argc && args[argi].equals("server")) {
    isServer=true;
    argi++;
  }
  if (argi == argc) {
    usage("Missing command");
  }
  cmdIdx=argi++;
  cmd=args[cmdIdx];
  if (cmd.equals("help")) {
    return doHelp();
  }
  if (nodeDirStr == null) {
    if (isServer) {
      nodeDirStr=System.getProperties().getProperty("user.home") + QServerNode.sep + QServerNode.defaultStoreDir;
    }
 else {
      nodeDirStr=System.getProperties().getProperty("user.home") + QClientNode.sep + QClientNode.defaultStoreDir;
    }
  }
  nodeDir=new File(nodeDirStr);
  if (cmd.equals("start")) {
    return doStart();
  }
 else   if (cmd.equals("foreground")) {
    return doStartForeground();
  }
  if (!nodeDir.isDirectory()) {
    usage("Nonexistent node directory '" + nodeDirStr + "'\n"+ "The '"+ cmd+ "' command requires that the node already\n"+ "exists. You may use the 'start' command to create a\n"+ "whole new node at that directory if you wish");
  }
  String propPath=nodeDirStr + QNode.sep + "node.conf";
  PropertiesFile pf;
  try {
    pf=new PropertiesFile(propPath);
  }
 catch (  IOException e) {
    e.printStackTrace();
    System.out.println("Failed to load node properties");
    return -1;
  }
  nodePrivKey=pf.getProperty("privKey");
  nodeDest=pf.getProperty("dest");
  if (isServer) {
    try {
      node=new I2PXmlRpcClientFactory().newClient(nodeDest);
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.out.println("Failed to create I2P XML-RPC connection to node");
      return -1;
    }
  }
 else {
    int xmlRpcServerPort=pf.getIntProperty("xmlRpcServerPort",QNode.defaultXmlRpcServerPort);
    try {
      node=new XmlRpcClient("http://localhost:" + xmlRpcServerPort);
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.out.println("Failed to create I2P XML-RPC connection to node");
      return -1;
    }
  }
  if (cmd.equals("stop")) {
    return doStop();
  }
 else   if (cmd.equals("status")) {
    return doStatus();
  }
 else   if (cmd.equals("getref")) {
    return doGetRef();
  }
 else   if (cmd.equals("addref")) {
    return doAddRef();
  }
 else   if (cmd.equals("get")) {
    return doGet();
  }
 else   if (cmd.equals("put")) {
    return doPut();
  }
 else   if (cmd.equals("newkeys")) {
    return doNewKeys();
  }
 else   if (cmd.equals("search")) {
    return doSearch();
  }
 else {
    usage("unrecognised command '" + cmd + "'");
  }
  return 0;
}
