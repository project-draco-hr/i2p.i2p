{
  QDataItem item=(QDataItem)job.get("item");
  String uri=(String)item.get("uri");
  String desc="uploadItem:uri=" + uri;
  byte[] data=item._data;
  Hashtable peersUploaded=(Hashtable)job.get("peersUploaded");
  Hashtable peersPending=(Hashtable)job.get("peersPending");
  Hashtable peersFailed=(Hashtable)job.get("peersFailed");
  Hashtable peersNumTries=(Hashtable)job.get("peersNumTries");
  String itemHash=item.getStoreFilename();
  QPeer peerRec;
  Vector cPeers=node.peersClosestTo(uri,100);
  for (Enumeration en=cPeers.elements(); en.hasMoreElements(); ) {
    QPeer peer=(QPeer)en.nextElement();
    String peerId=peer.getId();
    if (peersFailed.containsKey(peerId) || peersUploaded.containsKey(peerId)) {
      continue;
    }
    if (!peersPending.containsKey(peerId)) {
      if (peersPending.size() < 3) {
        peersPending.put(peerId,"");
      }
 else {
        continue;
      }
    }
    boolean uploadedOk;
    try {
      Hashtable res=node.peerPutItem(peerId,item,item._data);
      if (res.containsKey("status") && ((String)res.get("status")).equals("ok")) {
        uploadedOk=true;
      }
 else {
        uploadedOk=false;
        System.out.println("upload failure:" + res);
      }
    }
 catch (    Exception e) {
      uploadedOk=false;
      e.printStackTrace();
      System.out.println("upload failure");
    }
    if (uploadedOk) {
      peersPending.remove(peerId);
      peersNumTries.remove(peerId);
      peersUploaded.put(peerId,"");
      if (peersUploaded.size() >= 3) {
        return;
      }
 else {
        node.runAfter(5000,job,desc);
        return;
      }
    }
 else {
      int numTries=((Integer)peersNumTries.get(peerId)).intValue() + 1;
      if (numTries > 4) {
        peersPending.remove(peerId);
        peersNumTries.remove(peerId);
        peersFailed.put(peerId,"");
      }
      node.runAfter(30000,job,desc);
      return;
    }
  }
  node.runAfter(3600000,job,desc);
}
