{
  if (type == NEWS || type == NEWS_SU3) {
    notifyInstalled(type,"",newVersion);
    return true;
  }
  UpdateItem ui=new UpdateItem(type,id);
  boolean shouldUpdate=false;
  for (  Map.Entry<UpdateMethod,List<URI>> e : sourceMap.entrySet()) {
    UpdateMethod method=e.getKey();
    List<URI> updateSources=e.getValue();
    VersionAvailable newVA=new VersionAvailable(newVersion,minVersion,method,updateSources);
    Version old=_installed.get(ui);
    if (_log.shouldLog(Log.INFO))     _log.info("notifyVersionAvailable " + ui + ' '+ newVA+ " old: "+ old);
    if (old != null && old.compareTo(newVA) >= 0) {
      if (_log.shouldLog(Log.WARN))       _log.warn(ui.toString() + ' ' + old+ " already installed");
      return false;
    }
    old=_downloaded.get(ui);
    if (old != null && old.compareTo(newVA) >= 0) {
      if (_log.shouldLog(Log.WARN))       _log.warn(ui.toString() + ' ' + old+ " already downloaded");
      return false;
    }
    VersionAvailable oldVA=_available.get(ui);
    if (oldVA != null) {
      int comp=oldVA.compareTo(newVA);
      if (comp > 0) {
        if (_log.shouldLog(Log.WARN))         _log.warn(ui.toString() + ' ' + oldVA+ " already available");
        continue;
      }
 else       if (comp == 0) {
        List<URI> oldSources=oldVA.sourceMap.putIfAbsent(method,updateSources);
        if (oldSources == null) {
          if (_log.shouldLog(Log.WARN))           _log.warn(ui.toString() + ' ' + oldVA+ " updated with new source method");
        }
 else         if (!oldSources.containsAll(updateSources)) {
          for (          URI uri : updateSources) {
            if (!oldSources.contains(uri)) {
              if (_log.shouldLog(Log.WARN))               _log.warn(ui.toString() + ' ' + oldVA+ " adding "+ uri+ " to method "+ method);
              oldSources.add(uri);
            }
          }
        }
 else {
          if (_log.shouldLog(Log.WARN))           _log.warn(ui.toString() + ' ' + oldVA+ " already available");
        }
        continue;
      }
    }
    if (_log.shouldLog(Log.INFO))     _log.info(ui.toString() + ' ' + newVA+ " now available");
    _available.put(ui,newVA);
    shouldUpdate=true;
  }
  if (!shouldUpdate)   return false;
  String msg=null;
switch (type) {
case NEWS:
case NEWS_SU3:
    break;
case ROUTER_UNSIGNED:
  _context.router().saveConfig(PROP_UNSIGNED_AVAILABLE,newVersion);
case ROUTER_SIGNED:
case ROUTER_SIGNED_SU3:
if (shouldInstall() && !(isUpdateInProgress(ROUTER_SIGNED) || isUpdateInProgress(ROUTER_SIGNED_SU3) || isUpdateInProgress(ROUTER_UNSIGNED))) {
  if (_log.shouldLog(Log.INFO))   _log.info("Updating " + ui + " after notify");
  update_fromCheck(type,id,DEFAULT_MAX_TIME);
}
 else {
  if (_log.shouldLog(Log.INFO))   _log.info("Not updating " + ui + ", update disabled or in progress");
}
break;
case PLUGIN:
msg="<b>" + _("New plugin version {0} is available",newVersion) + "</b>";
break;
default :
break;
}
if (msg != null) finishStatus(msg);
return true;
}
