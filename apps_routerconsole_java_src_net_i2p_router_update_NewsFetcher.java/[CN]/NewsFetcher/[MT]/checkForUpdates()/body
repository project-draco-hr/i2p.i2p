{
  if (dontInstall())   return;
  FileInputStream in=null;
  try {
    in=new FileInputStream(_newsFile);
    StringBuilder buf=new StringBuilder(128);
    while (DataHelper.readLine(in,buf)) {
      int index=buf.indexOf(VERSION_PREFIX);
      if (index >= 0) {
        Map<String,String> args=parseArgs(buf.substring(index + VERSION_PREFIX.length()));
        String ver=args.get(VERSION_KEY);
        if (ver != null) {
          if (_log.shouldLog(Log.DEBUG))           _log.debug("Found version: [" + ver + "]");
          if (TrustedUpdate.needsUpdate(RouterVersion.VERSION,ver)) {
            if (_log.shouldLog(Log.DEBUG))             _log.debug("Our version is out of date, update!");
            _mgr.notifyVersionAvailable(this,_currentURI,ROUTER_SIGNED,"",HTTP,_mgr.getUpdateURLs(ROUTER_SIGNED,"",HTTP),ver,"");
            String key=FileUtil.isPack200Supported() ? SU2_KEY : SUD_KEY;
            String murl=args.get(key);
            if (murl != null) {
              List<URI> uris=tokenize(murl);
              if (!uris.isEmpty()) {
                Collections.shuffle(uris,_context.random());
                _mgr.notifyVersionAvailable(this,_currentURI,ROUTER_SIGNED,"",TORRENT,uris,ver,"");
              }
            }
          }
 else {
            if (_log.shouldLog(Log.DEBUG))             _log.debug("Our version is current");
          }
          return;
        }
 else {
          if (_log.shouldLog(Log.WARN))           _log.warn("No version in " + buf.toString());
        }
      }
 else {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("No match in " + buf.toString());
      }
      buf.setLength(0);
    }
  }
 catch (  IOException ioe) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Error checking the news for an update",ioe);
    return;
  }
 finally {
    if (in != null)     try {
      in.close();
    }
 catch (    IOException ioe) {
    }
  }
  if (_log.shouldLog(Log.WARN))   _log.warn("No version found in news.xml file");
}
