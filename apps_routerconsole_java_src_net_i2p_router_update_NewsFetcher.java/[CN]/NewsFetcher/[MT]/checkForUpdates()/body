{
  FileInputStream in=null;
  try {
    in=new FileInputStream(_newsFile);
    StringBuilder buf=new StringBuilder(128);
    while (DataHelper.readLine(in,buf)) {
      int index=buf.indexOf(VERSION_PREFIX);
      if (index >= 0) {
        Map<String,String> args=parseArgs(buf.substring(index + VERSION_PREFIX.length()));
        String ver=args.get(VERSION_KEY);
        if (ver != null) {
          if (_log.shouldLog(Log.DEBUG))           _log.debug("Found version: [" + ver + "]");
          if (TrustedUpdate.needsUpdate(RouterVersion.VERSION,ver)) {
            if (NewsHelper.isUpdateDisabled(_context)) {
              String msg=_mgr._t("In-network updates disabled. Check package manager.");
              _log.logAlways(Log.WARN,"Cannot update to version " + ver + ": "+ msg);
              _mgr.notifyVersionConstraint(this,_currentURI,ROUTER_SIGNED,"",ver,msg);
              return;
            }
            if (NewsHelper.isBaseReadonly(_context)) {
              String msg=_mgr._t("No write permission for I2P install directory.");
              _log.logAlways(Log.WARN,"Cannot update to version " + ver + ": "+ msg);
              _mgr.notifyVersionConstraint(this,_currentURI,ROUTER_SIGNED,"",ver,msg);
              return;
            }
            String minRouter=args.get(MIN_VERSION_KEY);
            if (minRouter != null) {
              if (VersionComparator.comp(RouterVersion.VERSION,minRouter) < 0) {
                String msg=_mgr._t("You must first update to version {0}",minRouter);
                _log.logAlways(Log.WARN,"Cannot update to version " + ver + ": "+ msg);
                _mgr.notifyVersionConstraint(this,_currentURI,ROUTER_SIGNED,"",ver,msg);
                return;
              }
            }
            String minJava=args.get(MIN_JAVA_VERSION_KEY);
            if (minJava != null) {
              String ourJava=System.getProperty("java.version");
              if (VersionComparator.comp(ourJava,minJava) < 0) {
                String msg=_mgr._t("Requires Java version {0} but installed Java version is {1}",minJava,ourJava);
                _log.logAlways(Log.WARN,"Cannot update to version " + ver + ": "+ msg);
                _mgr.notifyVersionConstraint(this,_currentURI,ROUTER_SIGNED,"",ver,msg);
                return;
              }
            }
            if (_log.shouldLog(Log.DEBUG))             _log.debug("Our version is out of date, update!");
            Map<UpdateMethod,List<URI>> sourceMap=new HashMap<UpdateMethod,List<URI>>(4);
            if (ConfigUpdateHandler.USE_SU3_UPDATE) {
              sourceMap.put(HTTP,_mgr.getUpdateURLs(ROUTER_SIGNED_SU3,"",HTTP));
              addMethod(TORRENT,args.get(SU3_KEY),sourceMap);
              addMethod(HTTP_CLEARNET,args.get(CLEARNET_HTTP_SU3_KEY),sourceMap);
              addMethod(HTTPS_CLEARNET,args.get(CLEARNET_HTTPS_SU3_KEY),sourceMap);
              _mgr.notifyVersionAvailable(this,_currentURI,ROUTER_SIGNED_SU3,"",sourceMap,ver,"");
              sourceMap.clear();
            }
            sourceMap.put(HTTP,_mgr.getUpdateURLs(ROUTER_SIGNED,"",HTTP));
            String key=FileUtil.isPack200Supported() ? SU2_KEY : SUD_KEY;
            addMethod(TORRENT,args.get(key),sourceMap);
            _mgr.notifyVersionAvailable(this,_currentURI,ROUTER_SIGNED,"",sourceMap,ver,"");
          }
 else {
            if (_log.shouldLog(Log.DEBUG))             _log.debug("Our version is current");
          }
          return;
        }
 else {
          if (_log.shouldLog(Log.WARN))           _log.warn("No version in " + buf.toString());
        }
      }
 else {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("No match in " + buf.toString());
      }
      buf.setLength(0);
    }
  }
 catch (  IOException ioe) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Error checking the news for an update",ioe);
    return;
  }
 finally {
    if (in != null)     try {
      in.close();
    }
 catch (    IOException ioe) {
    }
  }
  if (_log.shouldLog(Log.WARN))   _log.warn("No version found in news.xml file");
}
