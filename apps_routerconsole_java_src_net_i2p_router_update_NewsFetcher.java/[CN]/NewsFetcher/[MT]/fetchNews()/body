{
  boolean shouldProxy=_context.getProperty(ConfigUpdateHandler.PROP_SHOULD_PROXY_NEWS,ConfigUpdateHandler.DEFAULT_SHOULD_PROXY_NEWS);
  String proxyHost=_context.getProperty(ConfigUpdateHandler.PROP_PROXY_HOST,ConfigUpdateHandler.DEFAULT_PROXY_HOST);
  int proxyPort=ConfigUpdateHandler.proxyPort(_context);
  for (  URI uri : _urls) {
    _currentURI=uri;
    String newsURL=uri.toString();
    if (_tempFile.exists())     _tempFile.delete();
    try {
      EepGet get;
      if (shouldProxy)       get=new EepGet(_context,true,proxyHost,proxyPort,0,_tempFile.getAbsolutePath(),newsURL,true,null,_lastModified);
 else       if ("https".equals(uri.getScheme()))       get=new SSLEepGet(_context,_tempFile.getAbsolutePath(),newsURL);
 else       get=new EepGet(_context,false,null,0,0,_tempFile.getAbsolutePath(),newsURL,true,null,_lastModified);
      get.addStatusListener(this);
      long start=_context.clock().now();
      _newLastModified=start;
      if (get.fetch()) {
        int status=get.getStatusCode();
        if (status == 200 || status == 304) {
          Map<String,String> opts=new HashMap<String,String>(2);
          opts.put(NewsHelper.PROP_LAST_CHECKED,Long.toString(start));
          if (status == 200 && _isNewer)           opts.put(NewsHelper.PROP_LAST_UPDATED,Long.toString(_newLastModified));
          _context.router().saveConfig(opts,null);
          return;
        }
      }
    }
 catch (    Throwable t) {
      _log.error("Error fetching the news",t);
    }
  }
}
