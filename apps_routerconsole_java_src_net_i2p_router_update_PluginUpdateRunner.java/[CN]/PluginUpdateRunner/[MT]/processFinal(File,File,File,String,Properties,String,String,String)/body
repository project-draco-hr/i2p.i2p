{
  boolean update=false;
  String appName=props.getProperty("name");
  String version=props.getProperty("version");
  if (appName == null || version == null || appName.length() <= 0 || version.length() <= 0 || appName.indexOf("<") >= 0 || appName.indexOf(">") >= 0 || version.indexOf("<") >= 0 || version.indexOf(">") >= 0 || appName.startsWith(".") || appName.indexOf("/") >= 0 || appName.indexOf("\\") >= 0) {
    to.delete();
    statusDone("<b>" + _("Plugin from {0} has invalid name or version",url) + "</b>");
    return;
  }
  if (!version.equals(sudVersion)) {
    to.delete();
    statusDone("<b>" + _("Plugin {0} has mismatched versions",appName) + "</b>");
    return;
  }
  _appName=appName;
  _newVersion=version;
  String minVersion=ConfigClientsHelper.stripHTML(props,"min-i2p-version");
  if (minVersion != null && VersionComparator.comp(CoreVersion.VERSION,minVersion) < 0) {
    to.delete();
    statusDone("<b>" + _("This plugin requires I2P version {0} or higher",minVersion) + "</b>");
    return;
  }
  minVersion=ConfigClientsHelper.stripHTML(props,"min-java-version");
  if (minVersion != null && VersionComparator.comp(System.getProperty("java.version"),minVersion) < 0) {
    to.delete();
    statusDone("<b>" + _("This plugin requires Java version {0} or higher",minVersion) + "</b>");
    return;
  }
  boolean wasRunning=false;
  File destDir=new SecureDirectory(appDir,appName);
  if (destDir.exists()) {
    if (Boolean.valueOf(props.getProperty("install-only")).booleanValue()) {
      to.delete();
      statusDone("<b>" + _("Downloaded plugin is for new installs only, but the plugin is already installed",url) + "</b>");
      return;
    }
    File oldPropFile=new File(destDir,"plugin.config");
    Properties oldProps=new OrderedProperties();
    try {
      DataHelper.loadProps(oldProps,oldPropFile);
    }
 catch (    IOException ioe) {
      to.delete();
      FileUtil.rmdir(tempDir,false);
      statusDone("<b>" + _("Installed plugin does not contain the required configuration file",url) + "</b>");
      return;
    }
    String oldPubkey=oldProps.getProperty("key");
    String oldKeyName=oldProps.getProperty("signer");
    String oldAppName=oldProps.getProperty("name");
    if ((!pubkey.equals(oldPubkey)) || (!signer.equals(oldKeyName)) || (!appName.equals(oldAppName))) {
      to.delete();
      statusDone("<b>" + _("Signature of downloaded plugin does not match installed plugin") + "</b>");
      return;
    }
    String oldVersion=oldProps.getProperty("version");
    if (oldVersion == null || VersionComparator.comp(oldVersion,version) >= 0) {
      to.delete();
      statusDone("<b>" + _("Downloaded plugin version {0} is not newer than installed plugin",version) + "</b>");
      return;
    }
    minVersion=ConfigClientsHelper.stripHTML(props,"min-installed-version");
    if (minVersion != null && VersionComparator.comp(minVersion,oldVersion) > 0) {
      to.delete();
      statusDone("<b>" + _("Plugin update requires installed plugin version {0} or higher",minVersion) + "</b>");
      return;
    }
    String maxVersion=ConfigClientsHelper.stripHTML(props,"max-installed-version");
    if (maxVersion != null && VersionComparator.comp(maxVersion,oldVersion) < 0) {
      to.delete();
      statusDone("<b>" + _("Plugin update requires installed plugin version {0} or lower",maxVersion) + "</b>");
      return;
    }
    oldVersion=LogsHelper.jettyVersion();
    minVersion=ConfigClientsHelper.stripHTML(props,"min-jetty-version");
    if (minVersion != null && VersionComparator.comp(minVersion,oldVersion) > 0) {
      to.delete();
      statusDone("<b>" + _("Plugin requires Jetty version {0} or higher",minVersion) + "</b>");
      return;
    }
    maxVersion=ConfigClientsHelper.stripHTML(props,"max-jetty-version");
    if (maxVersion != null && VersionComparator.comp(maxVersion,oldVersion) < 0) {
      to.delete();
      statusDone("<b>" + _("Plugin requires Jetty version {0} or lower",maxVersion) + "</b>");
      return;
    }
    if (Boolean.valueOf(props.getProperty("router-restart-required")).booleanValue()) {
      try {
        if (!FileUtil.copy(to,(new SecureFile(new SecureFile(appDir.getCanonicalPath() + "/" + appName+ "/"+ ZIP).getCanonicalPath())),true,true)) {
          to.delete();
          statusDone("<b>" + _("Cannot copy plugin to directory {0}",destDir.getAbsolutePath()) + "</b>");
          return;
        }
      }
 catch (      Throwable t) {
        to.delete();
        _log.error("Error copying plugin {0}",t);
        return;
      }
      to.delete();
      statusDone("<b>" + _("Plugin will be installed on next restart.") + "</b>");
      return;
    }
    if (PluginStarter.isPluginRunning(appName,_context)) {
      wasRunning=true;
      try {
        if (!PluginStarter.stopPlugin(_context,appName)) {
        }
      }
 catch (      Throwable e) {
        _log.error("Error stopping plugin " + appName,e);
      }
    }
    update=true;
  }
 else {
    if (Boolean.valueOf(props.getProperty("update-only")).booleanValue()) {
      to.delete();
      statusDone("<b>" + _("Plugin is for upgrades only, but the plugin is not installed") + "</b>");
      return;
    }
    if (!destDir.mkdir()) {
      to.delete();
      statusDone("<b>" + _("Cannot create plugin directory {0}",destDir.getAbsolutePath()) + "</b>");
      return;
    }
  }
  if (!FileUtil.extractZip(to,destDir,Log.WARN)) {
    to.delete();
    statusDone("<b>" + _("Failed to install plugin in {0}",destDir.getAbsolutePath()) + "</b>");
    return;
  }
  _updated=true;
  to.delete();
  if (Boolean.valueOf(props.getProperty("dont-start-at-install")).booleanValue()) {
    statusDone("<b>" + _("Plugin {0} installed",appName) + "</b>");
    if (!update) {
      Properties pluginProps=PluginStarter.pluginProperties();
      pluginProps.setProperty(PluginStarter.PREFIX + appName + PluginStarter.ENABLED,"false");
      PluginStarter.storePluginProperties(pluginProps);
    }
  }
 else   if (wasRunning || PluginStarter.isPluginEnabled(appName)) {
    try {
      if (PluginStarter.startPlugin(_context,appName)) {
        String linkName=ConfigClientsHelper.stripHTML(props,"consoleLinkName_" + Messages.getLanguage(_context));
        if (linkName == null)         linkName=ConfigClientsHelper.stripHTML(props,"consoleLinkName");
        String linkURL=ConfigClientsHelper.stripHTML(props,"consoleLinkURL");
        String link;
        if (linkName != null && linkURL != null)         link="<a target=\"_blank\" href=\"" + linkURL + "\"/>"+ linkName+ "</a>";
 else         link=appName;
        statusDone("<b>" + _("Plugin {0} installed and started",link) + "</b>");
      }
 else       statusDone("<b>" + _("Plugin {0} installed but failed to start, check logs",appName) + "</b>");
    }
 catch (    Throwable e) {
      statusDone("<b>" + _("Plugin {0} installed but failed to start",appName) + ": "+ e+ "</b>");
      _log.error("Error starting plugin " + appName,e);
    }
  }
 else {
    statusDone("<b>" + _("Plugin {0} installed",appName) + "</b>");
  }
}
