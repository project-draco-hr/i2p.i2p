{
  StringBuilder buf=new StringBuilder(1024);
  buf.append("<table>\n" + "<tr><th align=\"right\">").append(_("Client")).append("</th><th>").append(_("Run at Startup?")).append("</th><th>").append(_("Control")).append("</th><th align=\"left\">").append(_("Class and arguments")).append("</th></tr>\n");
  boolean allowEdit=isClientChangeEnabled();
  List<ClientAppConfig> clients=ClientAppConfig.getClientApps(_context);
  List<CAC> cacs=new ArrayList<CAC>(clients.size());
  for (int cur=0; cur < clients.size(); cur++) {
    ClientAppConfig ca=clients.get(cur);
    String xname=ca.clientName;
    if (xname.length() > 0)     xname=_(xname);
    cacs.add(new CAC(cur,ca,xname));
  }
  Collections.sort(cacs,new CACComparator());
  for (  CAC cac : cacs) {
    ClientAppConfig ca=cac.config;
    int cur=cac.index;
    boolean isConsole=ca.className.equals("net.i2p.router.web.RouterConsoleRunner");
    boolean showStart;
    boolean showStop;
    if (isConsole) {
      showStart=false;
      showStop=false;
    }
 else {
      ClientApp clientApp=_context.routerAppManager().getClientApp(ca.className,LoadClientAppsJob.parseArgs(ca.args));
      showStart=clientApp == null;
      showStop=clientApp != null && clientApp.getState() == ClientAppState.RUNNING;
    }
    renderForm(buf,"" + cur,ca.clientName,false,!ca.disabled,false,RouterConsoleRunner.class.getName().equals(ca.className),ca.className + ((ca.args != null) ? " " + ca.args : ""),allowEdit && ("" + cur).equals(_edit),allowEdit && !showStop,false,showStop,allowEdit && !isConsole,showStart);
  }
  if (allowEdit && "new".equals(_edit))   renderForm(buf,"" + clients.size(),"",false,false,false,false,"",true,false,false,false,false,false);
  buf.append("</table>\n");
  return buf.toString();
}
