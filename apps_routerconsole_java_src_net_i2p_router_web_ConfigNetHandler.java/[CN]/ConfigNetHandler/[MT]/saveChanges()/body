{
  boolean restartRequired=false;
  if (!_ratesOnly) {
    if ((_hostname != null) && (_hostname.length() > 0)) {
      String oldHost=_context.router().getConfigSetting(ConfigNetHelper.PROP_I2NP_TCP_HOSTNAME);
      if ((oldHost == null) || (!oldHost.equalsIgnoreCase(_hostname))) {
        _context.router().setConfigSetting(ConfigNetHelper.PROP_I2NP_TCP_HOSTNAME,_hostname);
        addFormNotice("Updating hostname from " + oldHost + " to "+ _hostname);
        restartRequired=true;
      }
    }
    if ((_tcpPort != null) && (_tcpPort.length() > 0)) {
      String oldPort=_context.router().getConfigSetting(ConfigNetHelper.PROP_I2NP_TCP_PORT);
      if ((oldPort == null) && (_tcpPort.equals("8887"))) {
      }
 else       if ((oldPort == null) || (!oldPort.equalsIgnoreCase(_tcpPort))) {
        _context.router().setConfigSetting(ConfigNetHelper.PROP_I2NP_TCP_PORT,_tcpPort);
        addFormNotice("Updating TCP port from " + oldPort + " to "+ _tcpPort);
        restartRequired=true;
      }
    }
    if ((_udpPort != null) && (_udpPort.length() > 0)) {
      String oldPort=_context.router().getConfigSetting(ConfigNetHelper.PROP_I2NP_UDP_PORT);
      if ((oldPort == null) && (_udpPort.equals("8887"))) {
      }
 else       if ((oldPort == null) || (!oldPort.equalsIgnoreCase(_udpPort))) {
        _context.router().setConfigSetting(ConfigNetHelper.PROP_I2NP_TCP_PORT,_udpPort);
        addFormNotice("Updating UDP port from " + oldPort + " to "+ _udpPort);
        restartRequired=true;
      }
    }
  }
  updateRates();
  if (!_ratesOnly) {
    if (_sharePct != null) {
      String old=_context.router().getConfigSetting(ConfigNetHelper.PROP_SHARE_PERCENTAGE);
      if ((old == null) || (!old.equalsIgnoreCase(_sharePct))) {
        _context.router().setConfigSetting(ConfigNetHelper.PROP_SHARE_PERCENTAGE,_sharePct);
        addFormNotice("Updating bandwidth share percentage");
      }
    }
    if (_hiddenMode && "false".equalsIgnoreCase(_context.getProperty(Router.PROP_HIDDEN,"false"))) {
      _context.router().setConfigSetting(Router.PROP_HIDDEN,"true");
      _context.router().addCapabilities(_context.router().getRouterInfo());
      addFormNotice("Gracefully restarting into Hidden Router Mode. Make sure you have no 0-1 length " + "<a href=\"configtunnels.jsp\">tunnels!</a>");
      hiddenSwitch();
    }
    if (!_hiddenMode && "true".equalsIgnoreCase(_context.getProperty(Router.PROP_HIDDEN,"false"))) {
      _context.router().removeConfigSetting(Router.PROP_HIDDEN);
      _context.router().getRouterInfo().delCapability(RouterInfo.CAPABILITY_HIDDEN);
      addFormNotice("Gracefully restarting to exit Hidden Router Mode");
      hiddenSwitch();
    }
    if (_dynamicKeys) {
      _context.router().setConfigSetting(Router.PROP_DYNAMIC_KEYS,"true");
    }
 else {
      _context.router().removeConfigSetting(Router.PROP_DYNAMIC_KEYS);
    }
    if (_requireIntroductions) {
      _context.router().setConfigSetting(UDPTransport.PROP_FORCE_INTRODUCERS,"true");
      addFormNotice("Requiring SSU introduers");
    }
 else {
      _context.router().removeConfigSetting(UDPTransport.PROP_FORCE_INTRODUCERS);
    }
    if (true || _timeSyncEnabled) {
      _context.router().setConfigSetting(Timestamper.PROP_DISABLED,"false");
    }
 else {
      _context.router().setConfigSetting(Timestamper.PROP_DISABLED,"true");
    }
    LoadTestManager.setEnableLoadTesting(_context,_enableLoadTesting);
  }
  boolean saved=_context.router().saveConfig();
  if ((_action != null) && ("Save changes".equals(_action))) {
    if (saved)     addFormNotice("Configuration saved successfully");
 else     addFormNotice("Error saving the configuration (applied but not saved) - please see the error logs");
  }
  if (restartRequired) {
    addFormNotice("Performing a soft restart");
    _context.router().restart();
    addFormNotice("Soft restart complete");
  }
}
