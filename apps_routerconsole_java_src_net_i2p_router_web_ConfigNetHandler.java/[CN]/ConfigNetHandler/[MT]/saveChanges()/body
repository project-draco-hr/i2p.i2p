{
  boolean restartRequired=false;
  if (!_ratesOnly) {
    String oldUdp=_context.getProperty(UDPTransport.PROP_SOURCES,UDPTransport.DEFAULT_SOURCES);
    String oldUHost=_context.getProperty(UDPTransport.PROP_EXTERNAL_HOST,"");
    if (_udpAutoIP != null) {
      String uhost="";
      if (_udpAutoIP.equals("fixed")) {
        if (_udpHost1 != null && _udpHost1.length() > 0)         uhost=_udpHost1;
 else         if (_udpHost2 != null && _udpHost2.length() > 0)         uhost=_udpHost2;
 else         _udpAutoIP=UDPTransport.DEFAULT_SOURCES;
      }
      _context.router().setConfigSetting(UDPTransport.PROP_SOURCES,_udpAutoIP);
      if (uhost.length() > 0)       _context.router().setConfigSetting(UDPTransport.PROP_EXTERNAL_HOST,uhost);
 else       _context.router().removeConfigSetting(UDPTransport.PROP_EXTERNAL_HOST);
      if ((!oldUdp.equals(_udpAutoIP)) || (!oldUHost.equals(uhost))) {
        addFormNotice(_("Updating IP address"));
        restartRequired=true;
      }
    }
    String oldNHost=_context.getProperty(ConfigNetHelper.PROP_I2NP_NTCP_HOSTNAME,"");
    String oldNPort=_context.getProperty(ConfigNetHelper.PROP_I2NP_NTCP_PORT,"");
    String oldAutoHost=_context.getProperty(ConfigNetHelper.PROP_I2NP_NTCP_AUTO_IP,"true");
    String sAutoPort=_context.getProperty(ConfigNetHelper.PROP_I2NP_NTCP_AUTO_PORT,"true");
    boolean oldAutoPort="true".equalsIgnoreCase(sAutoPort);
    if (_ntcpHostname == null)     _ntcpHostname="";
    if (_ntcpPort == null)     _ntcpPort="";
    if (_ntcpAutoIP == null)     _ntcpAutoIP="true";
    if ((!oldAutoHost.equals(_ntcpAutoIP)) || !oldNHost.equalsIgnoreCase(_ntcpHostname)) {
      if ("disabled".equals(_ntcpAutoIP)) {
        addFormNotice(_("Disabling TCP completely"));
      }
 else       if ("false".equals(_ntcpAutoIP) && _ntcpHostname.length() > 0) {
        _context.router().setConfigSetting(ConfigNetHelper.PROP_I2NP_NTCP_HOSTNAME,_ntcpHostname);
        addFormNotice(_("Updating inbound TCP address to") + " " + _ntcpHostname);
      }
 else {
        _context.router().removeConfigSetting(ConfigNetHelper.PROP_I2NP_NTCP_HOSTNAME);
        if ("false".equals(_ntcpAutoIP))         addFormNotice(_("Disabling inbound TCP"));
 else         addFormNotice(_("Updating inbound TCP address to auto"));
      }
      _context.router().setConfigSetting(ConfigNetHelper.PROP_I2NP_NTCP_AUTO_IP,_ntcpAutoIP);
      _context.router().setConfigSetting(TransportManager.PROP_ENABLE_NTCP,"" + !"disabled".equals(_ntcpAutoIP));
      restartRequired=true;
    }
    if (oldAutoPort != _ntcpAutoPort || !oldNPort.equals(_ntcpPort)) {
      if (_ntcpPort.length() > 0 && !_ntcpAutoPort) {
        _context.router().setConfigSetting(ConfigNetHelper.PROP_I2NP_NTCP_PORT,_ntcpPort);
        addFormNotice(_("Updating inbound TCP port to") + " " + _ntcpPort);
      }
 else {
        _context.router().removeConfigSetting(ConfigNetHelper.PROP_I2NP_NTCP_PORT);
        addFormNotice(_("Updating inbound TCP port to auto"));
      }
      _context.router().setConfigSetting(ConfigNetHelper.PROP_I2NP_NTCP_AUTO_PORT,"" + _ntcpAutoPort);
      restartRequired=true;
    }
    if ((_udpPort != null) && (_udpPort.length() > 0)) {
      String oldPort="" + _context.getProperty(UDPTransport.PROP_INTERNAL_PORT,UDPTransport.DEFAULT_INTERNAL_PORT);
      if (!oldPort.equals(_udpPort)) {
        _context.router().setConfigSetting(UDPTransport.PROP_INTERNAL_PORT,_udpPort);
        _context.router().setConfigSetting(UDPTransport.PROP_EXTERNAL_PORT,_udpPort);
        addFormNotice(_("Updating UDP port from") + " " + oldPort+ " "+ _("to")+ " "+ _udpPort);
        restartRequired=true;
      }
    }
  }
  updateRates();
  boolean switchRequired=false;
  if (!_ratesOnly) {
    switchRequired=_hiddenMode != _context.router().isHidden();
    if (switchRequired) {
      _context.router().setConfigSetting(PROP_HIDDEN,"" + _hiddenMode);
      if (_hiddenMode)       addFormError(_("Gracefully restarting into Hidden Router Mode"));
 else       addFormError(_("Gracefully restarting to exit Hidden Router Mode"));
    }
    _context.router().setConfigSetting(Router.PROP_DYNAMIC_KEYS,"" + _dynamicKeys);
    if (Boolean.valueOf(_context.getProperty(TransportManager.PROP_ENABLE_UPNP)).booleanValue() != _upnp) {
      if (_upnp)       addFormNotice(_("Enabling UPnP, restart required to take effect"));
 else       addFormNotice(_("Disabling UPnP, restart required to take effect"));
    }
    _context.router().setConfigSetting(TransportManager.PROP_ENABLE_UPNP,"" + _upnp);
    if (Boolean.valueOf(_context.getProperty(UDPTransport.PROP_LAPTOP_MODE)).booleanValue() != _laptop) {
      if (_laptop)       addFormNotice(_("Enabling laptop mode"));
 else       addFormNotice(_("Disabling laptop mode"));
    }
    _context.router().setConfigSetting(UDPTransport.PROP_LAPTOP_MODE,"" + _laptop);
    if (_requireIntroductions) {
      _context.router().setConfigSetting(UDPTransport.PROP_FORCE_INTRODUCERS,"true");
      addFormNotice(_("Requiring SSU introducers"));
    }
 else {
      _context.router().removeConfigSetting(UDPTransport.PROP_FORCE_INTRODUCERS);
    }
  }
  boolean saved=_context.router().saveConfig();
  if ((_action != null) && (_("Save changes").equals(_action))) {
    if (saved)     addFormNotice(_("Configuration saved successfully"));
 else     addFormNotice(_("Error saving the configuration (applied but not saved) - please see the error logs"));
  }
  if (switchRequired) {
    hiddenSwitch();
  }
 else   if (restartRequired) {
    if (_context.hasWrapper()) {
      addFormNotice("Performing a soft restart");
      _context.router().restart();
      addFormNotice("Soft restart complete");
    }
 else {
      addFormError(_("Gracefully restarting I2P to change published router address"));
      if (_context.hasWrapper())       _context.addShutdownTask(new ConfigServiceHandler.UpdateWrapperManagerTask(Router.EXIT_GRACEFUL_RESTART));
      _context.router().shutdownGracefully(Router.EXIT_GRACEFUL_RESTART);
    }
  }
}
