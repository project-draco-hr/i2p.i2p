{
  boolean restartRequired=false;
  boolean error=false;
  List<String> removes=new ArrayList();
  if (!_ratesOnly) {
    String oldUdp=_context.getProperty(UDPTransport.PROP_SOURCES,_context.router().isHidden() ? "hidden" : UDPTransport.DEFAULT_SOURCES);
    String oldUHost=_context.getProperty(UDPTransport.PROP_EXTERNAL_HOST,"");
    if (_udpAutoIP != null) {
      String uhost="";
      if (_udpAutoIP.equals("fixed")) {
        if (_udpHost1 != null && _udpHost1.length() > 0)         uhost=_udpHost1;
 else         if (_udpHost2 != null && _udpHost2.length() > 0)         uhost=_udpHost2;
 else         _udpAutoIP=UDPTransport.DEFAULT_SOURCES;
      }
      changes.put(UDPTransport.PROP_SOURCES,_udpAutoIP);
      boolean valid=true;
      if (uhost.length() > 0) {
        valid=verifyAddress(uhost);
        if (valid) {
          changes.put(UDPTransport.PROP_EXTERNAL_HOST,uhost);
        }
 else {
          error=true;
        }
      }
 else {
        removes.add(UDPTransport.PROP_EXTERNAL_HOST);
      }
      if (valid && ((!oldUdp.equals(_udpAutoIP)) || (!oldUHost.equals(uhost)))) {
        addFormNotice(_("Updating IP address"));
        restartRequired=true;
      }
    }
    String oldNHost=_context.getProperty(ConfigNetHelper.PROP_I2NP_NTCP_HOSTNAME,"");
    String oldNPort=_context.getProperty(ConfigNetHelper.PROP_I2NP_NTCP_PORT,"");
    String oldAutoHost=_context.getProperty(ConfigNetHelper.PROP_I2NP_NTCP_AUTO_IP,"true");
    String sAutoPort=_context.getProperty(ConfigNetHelper.PROP_I2NP_NTCP_AUTO_PORT,"true");
    boolean oldAutoPort=Boolean.valueOf(sAutoPort).booleanValue();
    if (_ntcpHostname == null)     _ntcpHostname="";
    if (_ntcpPort == null)     _ntcpPort="";
    if (_ntcpAutoIP == null)     _ntcpAutoIP="true";
    if ((!oldAutoHost.equals(_ntcpAutoIP)) || !oldNHost.equalsIgnoreCase(_ntcpHostname)) {
      boolean valid=true;
      if ("disabled".equals(_ntcpAutoIP)) {
        addFormNotice(_("Disabling TCP completely"));
      }
 else       if ("false".equals(_ntcpAutoIP) && _ntcpHostname.length() > 0) {
        valid=verifyAddress(_ntcpHostname);
        if (valid) {
          changes.put(ConfigNetHelper.PROP_I2NP_NTCP_HOSTNAME,_ntcpHostname);
          addFormNotice(_("Updating TCP address to {0}",_ntcpHostname));
        }
 else {
          error=true;
        }
      }
 else {
        removes.add(ConfigNetHelper.PROP_I2NP_NTCP_HOSTNAME);
        if ("false".equals(_ntcpAutoIP))         addFormNotice(_("Disabling inbound TCP"));
 else         addFormNotice(_("Updating inbound TCP address to auto"));
      }
      if (valid) {
        changes.put(ConfigNetHelper.PROP_I2NP_NTCP_AUTO_IP,_ntcpAutoIP);
        changes.put(TransportManager.PROP_ENABLE_NTCP,"" + !"disabled".equals(_ntcpAutoIP));
        restartRequired=true;
      }
    }
    if (oldAutoPort != _ntcpAutoPort || !oldNPort.equals(_ntcpPort)) {
      if (_ntcpPort.length() > 0 && !_ntcpAutoPort) {
        if (Addresses.getPort(_ntcpPort) != 0) {
          changes.put(ConfigNetHelper.PROP_I2NP_NTCP_PORT,_ntcpPort);
          addFormNotice(_("Updating TCP port to {0}",_ntcpPort));
        }
 else {
          addFormError(_("Invalid port") + ": " + _ntcpPort);
          error=true;
        }
      }
 else {
        removes.add(ConfigNetHelper.PROP_I2NP_NTCP_PORT);
        addFormNotice(_("Updating inbound TCP port to auto"));
      }
      changes.put(ConfigNetHelper.PROP_I2NP_NTCP_AUTO_PORT,"" + _ntcpAutoPort);
      restartRequired=true;
    }
    if ((_udpPort != null) && (_udpPort.length() > 0)) {
      String oldPort=_context.getProperty(UDPTransport.PROP_INTERNAL_PORT,"unset");
      if (!oldPort.equals(_udpPort)) {
        if (Addresses.getPort(_udpPort) != 0) {
          changes.put(UDPTransport.PROP_INTERNAL_PORT,_udpPort);
          changes.put(UDPTransport.PROP_EXTERNAL_PORT,_udpPort);
          addFormNotice(_("Updating UDP port to {0}",_udpPort));
          restartRequired=true;
        }
 else {
          addFormError(_("Invalid port") + ": " + _udpPort);
          error=true;
        }
      }
    }
  }
  boolean ratesUpdated=updateRates();
  boolean switchRequired=false;
  if (!_ratesOnly) {
    switchRequired=_hiddenMode != _context.router().isHidden();
    if (switchRequired) {
      changes.put(PROP_HIDDEN,"" + _hiddenMode);
      if (_hiddenMode)       addFormError(_("Gracefully restarting into Hidden Router Mode"));
 else       addFormError(_("Gracefully restarting to exit Hidden Router Mode"));
    }
    changes.put(Router.PROP_DYNAMIC_KEYS,"" + _dynamicKeys);
    if (Boolean.valueOf(_context.getProperty(TransportManager.PROP_ENABLE_UPNP)).booleanValue() != _upnp) {
      if (_upnp)       addFormNotice(_("Enabling UPnP, restart required to take effect"));
 else       addFormNotice(_("Disabling UPnP, restart required to take effect"));
    }
    changes.put(TransportManager.PROP_ENABLE_UPNP,"" + _upnp);
    if (Boolean.valueOf(_context.getProperty(UDPTransport.PROP_LAPTOP_MODE)).booleanValue() != _laptop) {
      if (_laptop)       addFormNotice(_("Enabling laptop mode"));
 else       addFormNotice(_("Disabling laptop mode"));
    }
    changes.put(UDPTransport.PROP_LAPTOP_MODE,"" + _laptop);
    if (_context.getBooleanPropertyDefaultTrue(TransportManager.PROP_ENABLE_UDP) != !_udpDisabled) {
      if (_udpDisabled)       addFormNotice(_("Disabling UDP"));
 else       addFormNotice(_("Enabling UDP"));
      restartRequired=true;
    }
    changes.put(TransportManager.PROP_ENABLE_UDP,"" + (!_udpDisabled));
    if (_requireIntroductions) {
      changes.put(UDPTransport.PROP_FORCE_INTRODUCERS,"true");
      addFormNotice(_("Requiring SSU introducers"));
    }
 else {
      removes.add(UDPTransport.PROP_FORCE_INTRODUCERS);
    }
  }
  boolean saved=_context.router().saveConfig(changes,removes);
  if (saved)   addFormNotice(_("Configuration saved successfully"));
 else   addFormError(_("Error saving the configuration (applied but not saved) - please see the error logs"));
  if (ratesUpdated)   _context.bandwidthLimiter().reinitialize();
  if (saved && !error) {
    if (switchRequired) {
      hiddenSwitch();
    }
 else     if (restartRequired) {
      addFormNotice("Performing a soft restart");
      _context.router().restart();
    }
  }
}
