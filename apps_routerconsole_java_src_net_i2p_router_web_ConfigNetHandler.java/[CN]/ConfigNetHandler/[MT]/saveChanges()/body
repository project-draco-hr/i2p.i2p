{
  boolean restartRequired=false;
  if (!_ratesOnly) {
    String oldNHost=_context.router().getConfigSetting(ConfigNetHelper.PROP_I2NP_NTCP_HOSTNAME);
    if (oldNHost == null)     oldNHost="";
    String oldNPort=_context.router().getConfigSetting(ConfigNetHelper.PROP_I2NP_NTCP_PORT);
    if (oldNPort == null)     oldNPort="";
    String oldAutoHost=_context.router().getConfigSetting(ConfigNetHelper.PROP_I2NP_NTCP_AUTO_IP);
    String sAutoPort=_context.router().getConfigSetting(ConfigNetHelper.PROP_I2NP_NTCP_AUTO_PORT);
    boolean oldAutoPort="true".equalsIgnoreCase(sAutoPort);
    if (_ntcpHostname == null)     _ntcpHostname="";
    if (_ntcpPort == null)     _ntcpPort="";
    if (oldAutoHost != _ntcpAutoIP || !oldNHost.equalsIgnoreCase(_ntcpHostname)) {
      if ("false".equals(_ntcpAutoIP) && _ntcpHostname.length() > 0) {
        _context.router().setConfigSetting(ConfigNetHelper.PROP_I2NP_NTCP_HOSTNAME,_ntcpHostname);
        addFormNotice("Updating inbound TCP address to " + _ntcpHostname);
      }
 else {
        _context.router().removeConfigSetting(ConfigNetHelper.PROP_I2NP_NTCP_HOSTNAME);
        if ("false".equals(_ntcpAutoIP))         addFormNotice("Disabling inbound TCP");
 else         addFormNotice("Updating inbound TCP address to auto");
      }
      _context.router().setConfigSetting(ConfigNetHelper.PROP_I2NP_NTCP_AUTO_IP,_ntcpAutoIP);
      restartRequired=true;
    }
    if (oldAutoPort != _ntcpAutoPort || !oldNPort.equals(_ntcpPort)) {
      if (_ntcpPort.length() > 0 && !_ntcpAutoPort) {
        _context.router().setConfigSetting(ConfigNetHelper.PROP_I2NP_NTCP_PORT,_ntcpPort);
        addFormNotice("Updating inbound TCP port to " + _ntcpPort);
      }
 else {
        _context.router().removeConfigSetting(ConfigNetHelper.PROP_I2NP_NTCP_PORT);
        addFormNotice("Updating inbound TCP port to auto");
      }
      _context.router().setConfigSetting(ConfigNetHelper.PROP_I2NP_NTCP_AUTO_PORT,"" + _ntcpAutoPort);
      restartRequired=true;
    }
    if ((_udpPort != null) && (_udpPort.length() > 0)) {
      String oldPort="" + _context.getProperty(UDPTransport.PROP_INTERNAL_PORT,UDPTransport.DEFAULT_INTERNAL_PORT);
      if (!oldPort.equals(_udpPort)) {
        _context.router().setConfigSetting(UDPTransport.PROP_INTERNAL_PORT,_udpPort);
        _context.router().setConfigSetting(UDPTransport.PROP_EXTERNAL_PORT,_udpPort);
        addFormNotice("Updating UDP port from " + oldPort + " to "+ _udpPort);
        restartRequired=true;
      }
    }
  }
  updateRates();
  if (!_ratesOnly) {
    if (_sharePct != null) {
      String old=_context.router().getConfigSetting(Router.PROP_BANDWIDTH_SHARE_PERCENTAGE);
      if ((old == null) || (!old.equalsIgnoreCase(_sharePct))) {
        _context.router().setConfigSetting(Router.PROP_BANDWIDTH_SHARE_PERCENTAGE,_sharePct);
        addFormNotice("Updating bandwidth share percentage");
      }
    }
    if (_hiddenMode && "false".equalsIgnoreCase(_context.getProperty(Router.PROP_HIDDEN,"false"))) {
      _context.router().setConfigSetting(Router.PROP_HIDDEN,"true");
      _context.router().addCapabilities(_context.router().getRouterInfo());
      addFormNotice("Gracefully restarting into Hidden Router Mode. Make sure you have no 0-1 length " + "<a href=\"configtunnels.jsp\">tunnels!</a>");
      hiddenSwitch();
    }
    if (!_hiddenMode && "true".equalsIgnoreCase(_context.getProperty(Router.PROP_HIDDEN,"false"))) {
      _context.router().removeConfigSetting(Router.PROP_HIDDEN);
      _context.router().getRouterInfo().delCapability(RouterInfo.CAPABILITY_HIDDEN);
      addFormNotice("Gracefully restarting to exit Hidden Router Mode");
      hiddenSwitch();
    }
    _context.router().setConfigSetting(Router.PROP_DYNAMIC_KEYS,"" + _dynamicKeys);
    if (Boolean.valueOf(_context.getProperty(TransportManager.PROP_ENABLE_UPNP)).booleanValue() != _upnp) {
      if (_upnp)       addFormNotice("Enabling UPnP, restart required to take effect");
 else       addFormNotice("Disabling UPnP, restart required to take effect");
    }
    _context.router().setConfigSetting(TransportManager.PROP_ENABLE_UPNP,"" + _upnp);
    if (_requireIntroductions) {
      _context.router().setConfigSetting(UDPTransport.PROP_FORCE_INTRODUCERS,"true");
      addFormNotice("Requiring SSU introduers");
    }
 else {
      _context.router().removeConfigSetting(UDPTransport.PROP_FORCE_INTRODUCERS);
    }
    _context.router().setConfigSetting(Timestamper.PROP_DISABLED,"false");
    LoadTestManager.setEnableLoadTesting(_context,_enableLoadTesting);
  }
  boolean saved=_context.router().saveConfig();
  if ((_action != null) && ("Save changes".equals(_action))) {
    if (saved)     addFormNotice("Configuration saved successfully");
 else     addFormNotice("Error saving the configuration (applied but not saved) - please see the error logs");
  }
  if (restartRequired) {
    _context.router().rebuildRouterInfo();
    addFormNotice("Router Info rebuilt");
  }
}
