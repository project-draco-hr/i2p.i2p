{
  boolean restartRequired=false;
  boolean error=false;
  List<String> removes=new ArrayList<String>();
  if (!_ratesOnly) {
    String oldUdp=_context.getProperty(UDPTransport.PROP_SOURCES,_context.router().isHidden() ? "hidden" : UDPTransport.DEFAULT_SOURCES);
    String oldUHost=_context.getProperty(UDPTransport.PROP_EXTERNAL_HOST,"");
    if (_udpHost1 != null && _udpHost1.length() > 0)     _udpAutoIP="fixed";
    if (_udpAutoIP != null) {
      String uhost="";
      if (_udpAutoIP.equals("fixed")) {
        if (_settings == null)         _settings=Collections.EMPTY_MAP;
        Set<String> addrs=new TreeSet<String>();
        for (        Object o : _settings.keySet()) {
          String k=(String)o;
          if (k.startsWith("addr_")) {
            String v=DataHelper.stripHTML(k.substring(5));
            if (v.length() > 0)             addrs.add(v);
          }
        }
        if (_udpHost1 != null && _udpHost1.length() > 0) {
          if (verifyAddress(_udpHost1)) {
            addrs.add(_udpHost1);
          }
 else {
            error=true;
          }
        }
        int tot=addrs.size();
        int i=0;
        if (tot > 0) {
          StringBuilder buf=new StringBuilder(128);
          for (          String addr : addrs) {
            buf.append(addr);
            if (++i < tot)             buf.append(',');
          }
          uhost=buf.toString();
          changes.put(UDPTransport.PROP_EXTERNAL_HOST,uhost);
        }
 else {
          _udpAutoIP=UDPTransport.DEFAULT_SOURCES;
          removes.add(UDPTransport.PROP_EXTERNAL_HOST);
        }
      }
 else {
        if (oldUHost.length() > 0)         removes.add(UDPTransport.PROP_EXTERNAL_HOST);
      }
      changes.put(UDPTransport.PROP_SOURCES,_udpAutoIP);
      if ((!oldUdp.equals(_udpAutoIP)) || (!oldUHost.equals(uhost))) {
        addFormNotice(_t("Updating IP address"));
        restartRequired=true;
      }
    }
    if (_ipv6Mode != null) {
      String tcp6=_context.getProperty(TransportUtil.NTCP_IPV6_CONFIG);
      if (tcp6 == null)       tcp6=TransportUtil.DEFAULT_IPV6_CONFIG.toConfigString();
      String udp6=_context.getProperty(TransportUtil.SSU_IPV6_CONFIG);
      if (udp6 == null)       udp6=TransportUtil.DEFAULT_IPV6_CONFIG.toConfigString();
      boolean ch=false;
      if (!_ipv6Mode.equals(tcp6)) {
        changes.put(TransportUtil.NTCP_IPV6_CONFIG,_ipv6Mode);
        ch=true;
      }
      if (!_ipv6Mode.equals(udp6)) {
        changes.put(TransportUtil.SSU_IPV6_CONFIG,_ipv6Mode);
        ch=true;
      }
      if (ch)       addFormNotice(_t("Updating IPv6 setting"));
    }
    String oldNHost=_context.getProperty(ConfigNetHelper.PROP_I2NP_NTCP_HOSTNAME,"");
    String oldNPort=_context.getProperty(ConfigNetHelper.PROP_I2NP_NTCP_PORT,"");
    String oldAutoHost=_context.getProperty(ConfigNetHelper.PROP_I2NP_NTCP_AUTO_IP,"true");
    String sAutoPort=_context.getProperty(ConfigNetHelper.PROP_I2NP_NTCP_AUTO_PORT,"true");
    boolean oldAutoPort=Boolean.parseBoolean(sAutoPort);
    if (_ntcpHostname == null)     _ntcpHostname="";
    if (_ntcpPort == null)     _ntcpPort="";
    if (_ntcpAutoIP == null)     _ntcpAutoIP="true";
    if ((!oldAutoHost.equals(_ntcpAutoIP)) || !oldNHost.equalsIgnoreCase(_ntcpHostname)) {
      boolean valid=true;
      if ("disabled".equals(_ntcpAutoIP)) {
        addFormNotice(_t("Disabling TCP completely"));
      }
 else       if ("false".equals(_ntcpAutoIP) && _ntcpHostname.length() > 0) {
        valid=verifyAddress(_ntcpHostname);
        if (valid) {
          changes.put(ConfigNetHelper.PROP_I2NP_NTCP_HOSTNAME,_ntcpHostname);
          addFormNotice(_t("Updating TCP address to {0}",_ntcpHostname));
        }
 else {
          error=true;
        }
      }
 else {
        removes.add(ConfigNetHelper.PROP_I2NP_NTCP_HOSTNAME);
        if ("false".equals(_ntcpAutoIP))         addFormNotice(_t("Disabling inbound TCP"));
 else         addFormNotice(_t("Updating inbound TCP address to auto"));
      }
      if (valid) {
        changes.put(ConfigNetHelper.PROP_I2NP_NTCP_AUTO_IP,_ntcpAutoIP);
        changes.put(TransportManager.PROP_ENABLE_NTCP,"" + !"disabled".equals(_ntcpAutoIP));
        restartRequired=true;
      }
    }
    if (oldAutoPort != _ntcpAutoPort || !oldNPort.equals(_ntcpPort)) {
      if (_ntcpPort.length() > 0 && !_ntcpAutoPort) {
        int port=Addresses.getPort(_ntcpPort);
        if (port != 0) {
          changes.put(ConfigNetHelper.PROP_I2NP_NTCP_PORT,_ntcpPort);
          addFormNotice(_t("Updating TCP port to {0}",_ntcpPort));
          if (port < 1024) {
            addFormError(_t("Warning - ports less than 1024 are not recommended"));
            error=true;
          }
        }
 else {
          addFormError(_t("Invalid port") + ": " + _ntcpPort);
          error=true;
        }
      }
 else {
        removes.add(ConfigNetHelper.PROP_I2NP_NTCP_PORT);
        addFormNotice(_t("Updating inbound TCP port to auto"));
      }
      changes.put(ConfigNetHelper.PROP_I2NP_NTCP_AUTO_PORT,"" + _ntcpAutoPort);
      restartRequired=true;
    }
    if ((_udpPort != null) && (_udpPort.length() > 0)) {
      String oldPort=_context.getProperty(UDPTransport.PROP_INTERNAL_PORT,"unset");
      if (!oldPort.equals(_udpPort)) {
        int port=Addresses.getPort(_udpPort);
        if (port != 0) {
          changes.put(UDPTransport.PROP_INTERNAL_PORT,_udpPort);
          changes.put(UDPTransport.PROP_EXTERNAL_PORT,_udpPort);
          addFormNotice(_t("Updating UDP port to {0}",_udpPort));
          if (port < 1024) {
            addFormError(_t("Warning - ports less than 1024 are not recommended"));
            error=true;
          }
 else {
            restartRequired=true;
          }
        }
 else {
          addFormError(_t("Invalid port") + ": " + _udpPort);
          error=true;
        }
      }
    }
  }
  boolean ratesUpdated=updateRates();
  boolean switchRequired=false;
  if (!_ratesOnly) {
    switchRequired=_hiddenMode != _context.router().isHidden();
    if (switchRequired) {
      changes.put(PROP_HIDDEN,"" + _hiddenMode);
      if (_hiddenMode)       addFormError(_t("Gracefully restarting into Hidden Router Mode"));
 else       addFormError(_t("Gracefully restarting to exit Hidden Router Mode"));
    }
    changes.put(Router.PROP_DYNAMIC_KEYS,"" + _dynamicKeys);
    if (Boolean.parseBoolean(_context.getProperty(TransportManager.PROP_ENABLE_UPNP)) != _upnp) {
      if (_upnp)       addFormNotice(_t("Enabling UPnP"));
 else       addFormNotice(_t("Disabling UPnP"));
      addFormNotice(_t("Restart required to take effect"));
    }
    changes.put(TransportManager.PROP_ENABLE_UPNP,"" + _upnp);
    if (Boolean.parseBoolean(_context.getProperty(UDPTransport.PROP_LAPTOP_MODE)) != _laptop) {
      if (_laptop)       addFormNotice(_t("Enabling laptop mode"));
 else       addFormNotice(_t("Disabling laptop mode"));
    }
    changes.put(UDPTransport.PROP_LAPTOP_MODE,"" + _laptop);
    if (Boolean.parseBoolean(_context.getProperty(TransportUtil.PROP_IPV4_FIREWALLED)) != _ipv4Firewalled) {
      if (_ipv4Firewalled)       addFormNotice(_t("Disabling inbound IPv4"));
 else       addFormNotice(_t("Enabling inbound IPv4"));
      restartRequired=true;
    }
    changes.put(TransportUtil.PROP_IPV4_FIREWALLED,"" + _ipv4Firewalled);
    if (_context.getBooleanPropertyDefaultTrue(TransportManager.PROP_ENABLE_UDP) != !_udpDisabled) {
      if (_udpDisabled)       addFormNotice(_t("Disabling UDP"));
 else       addFormNotice(_t("Enabling UDP"));
      restartRequired=true;
    }
    changes.put(TransportManager.PROP_ENABLE_UDP,"" + (!_udpDisabled));
    if (_requireIntroductions) {
      changes.put(UDPTransport.PROP_FORCE_INTRODUCERS,"true");
      addFormNotice(_t("Requiring SSU introducers"));
    }
 else {
      removes.add(UDPTransport.PROP_FORCE_INTRODUCERS);
    }
  }
  boolean saved=_context.router().saveConfig(changes,removes);
  if (saved)   addFormNotice(_t("Configuration saved successfully"));
 else   addFormError(_t("Error saving the configuration (applied but not saved) - please see the error logs"));
  if (ratesUpdated)   _context.bandwidthLimiter().reinitialize();
  if (saved && !error) {
    if (switchRequired) {
      hiddenSwitch();
    }
 else     if (restartRequired) {
      addFormNotice("Performing a soft restart");
      _context.router().restart();
    }
  }
}
