{
  if (_action == null)   return;
  if (_action.equals(_("Check for updates"))) {
    ConsoleUpdateManager mgr=UpdateHandler.updateManager(_context);
    if (mgr == null) {
      addFormError("Update manager not registered, cannot check");
      return;
    }
    if (mgr.isUpdateInProgress() || mgr.isCheckInProgress()) {
      addFormError(_("Update or check already in progress"));
      return;
    }
    boolean shouldProxy=_context.getProperty(PROP_SHOULD_PROXY_NEWS,DEFAULT_SHOULD_PROXY_NEWS);
    String proxyHost=_context.getProperty(PROP_PROXY_HOST,DEFAULT_PROXY_HOST);
    int proxyPort=proxyPort(_context);
    if (shouldProxy && proxyPort == ConfigUpdateHandler.DEFAULT_PROXY_PORT_INT && proxyHost.equals(ConfigUpdateHandler.DEFAULT_PROXY_HOST) && _context.portMapper().getPort(PortMapper.SVC_HTTP_PROXY) < 0) {
      addFormError(_("HTTP client proxy tunnel must be running"));
      return;
    }
    boolean a1=mgr.checkAvailable(NEWS,30 * 1000) != null;
    boolean a2=false;
    if ((!a1) && _updateUnsigned && _zipURL != null && _zipURL.length() > 0)     a2=mgr.checkAvailable(ROUTER_UNSIGNED,30 * 1000) != null;
    if (a1 || a2) {
      if ((_updatePolicy == null) || (!_updatePolicy.equals("notify")))       addFormNotice(_("Update available, attempting to download now"));
 else       addFormNotice(_("Update available, click button on left to download"));
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ie) {
      }
    }
 else     addFormNotice(_("No update available"));
    return;
  }
  if (!_action.equals(_("Save")))   return;
  Map<String,String> changes=new HashMap<String,String>();
  if ((_newsURL != null) && (_newsURL.length() > 0)) {
    if (_newsURL.startsWith("https"))     _newsThroughProxy=false;
    String oldURL=ConfigUpdateHelper.getNewsURL(_context);
    if ((oldURL == null) || (!_newsURL.equals(oldURL))) {
      if (isAdvanced()) {
        changes.put(PROP_NEWS_URL,_newsURL);
        changes.put(NewsHelper.PROP_LAST_CHECKED,"0");
        addFormNotice(_("Updating news URL to {0}",_newsURL));
      }
 else {
        addFormError("Changing news URL disabled");
      }
    }
  }
  if (_proxyHost != null && _proxyHost.length() > 0 && !_proxyHost.equals(_("internal"))) {
    String oldHost=_context.router().getConfigSetting(PROP_PROXY_HOST);
    if ((oldHost == null) || (!_proxyHost.equals(oldHost))) {
      changes.put(PROP_PROXY_HOST,_proxyHost);
      addFormNotice(_("Updating proxy host to {0}",_proxyHost));
    }
  }
  if (_proxyPort != null && _proxyPort.length() > 0 && !_proxyPort.equals(_("internal"))) {
    String oldPort=_context.router().getConfigSetting(PROP_PROXY_PORT);
    if ((oldPort == null) || (!_proxyPort.equals(oldPort))) {
      changes.put(PROP_PROXY_PORT,_proxyPort);
      addFormNotice(_("Updating proxy port to {0}",_proxyPort));
    }
  }
  changes.put(PROP_SHOULD_PROXY,Boolean.toString(_updateThroughProxy));
  changes.put(PROP_SHOULD_PROXY_NEWS,Boolean.toString(_newsThroughProxy));
  if (isAdvanced())   changes.put(PROP_UPDATE_UNSIGNED,Boolean.toString(_updateUnsigned));
  String oldFreqStr=_context.getProperty(PROP_REFRESH_FREQUENCY,DEFAULT_REFRESH_FREQUENCY);
  long oldFreq=DEFAULT_REFRESH_FREQ;
  try {
    oldFreq=Long.parseLong(oldFreqStr);
  }
 catch (  NumberFormatException nfe) {
  }
  if (_refreshFrequency != oldFreq) {
    changes.put(PROP_REFRESH_FREQUENCY,"" + _refreshFrequency);
    addFormNoticeNoEscape(_("Updating refresh frequency to {0}",_refreshFrequency <= 0 ? _("Never") : DataHelper.formatDuration2(_refreshFrequency)));
  }
  if ((_updatePolicy != null) && (_updatePolicy.length() > 0)) {
    String oldPolicy=_context.router().getConfigSetting(PROP_UPDATE_POLICY);
    if ((oldPolicy == null) || (!_updatePolicy.equals(oldPolicy))) {
      changes.put(PROP_UPDATE_POLICY,_updatePolicy);
      addFormNotice(_("Updating update policy to {0}",_updatePolicy));
    }
  }
  if ((_updateURL != null) && (_updateURL.length() > 0)) {
    _updateURL=_updateURL.replace("\r\n",",").replace("\n",",");
    String oldURL=_context.router().getConfigSetting(PROP_UPDATE_URL);
    if ((oldURL == null) || (!_updateURL.equals(oldURL))) {
      changes.put(PROP_UPDATE_URL,_updateURL);
      addFormNotice(_("Updating update URLs."));
    }
  }
  if ((_trustedKeys != null) && (_trustedKeys.length() > 0)) {
    _trustedKeys=_trustedKeys.replace("\r\n",",").replace("\n",",");
    String oldKeys=new TrustedUpdate(_context).getTrustedKeysString();
    oldKeys=oldKeys.replace("\r\n",",");
    if (!_trustedKeys.equals(oldKeys)) {
      if (isAdvanced()) {
        changes.put(PROP_TRUSTED_KEYS,_trustedKeys);
        addFormNotice(_("Updating trusted keys."));
      }
 else {
        addFormError("Changing trusted keys disabled");
      }
    }
  }
  if ((_zipURL != null) && (_zipURL.length() > 0)) {
    String oldURL=_context.router().getConfigSetting(PROP_ZIP_URL);
    if ((oldURL == null) || (!_zipURL.equals(oldURL))) {
      if (isAdvanced()) {
        changes.put(PROP_ZIP_URL,_zipURL);
        addFormNotice(_("Updating unsigned update URL to {0}",_zipURL));
      }
 else {
        addFormError("Changing unsigned update URL disabled");
      }
    }
  }
  _context.router().saveConfig(changes,null);
}
