{
  StringBuilder buf=new StringBuilder(4 * 1024);
  buf.append("<h2>" + _("Network Database Contents") + "</h2>\n");
  buf.append("<a href=\"netdb.jsp\">" + _("View RouterInfo") + "</a>");
  buf.append("<h3>").append(_("LeaseSets")).append("</h3>\n");
  Hash ourRKey;
  Set<LeaseSet> leases;
  DecimalFormat fmt;
  if (debug) {
    ourRKey=_context.routingKeyGenerator().getRoutingKey(_context.routerHash());
    leases=new TreeSet(new LeaseSetRoutingKeyComparator(ourRKey));
    fmt=new DecimalFormat("#0.00");
  }
 else {
    ourRKey=null;
    leases=new TreeSet(new LeaseSetComparator());
    fmt=null;
  }
  leases.addAll(_context.netDb().getLeases());
  int medianCount=leases.size() / 2;
  BigInteger median=null;
  int c=0;
  long now=_context.clock().now();
  for (Iterator iter=leases.iterator(); iter.hasNext(); ) {
    LeaseSet ls=(LeaseSet)iter.next();
    Destination dest=ls.getDestination();
    Hash key=dest.calculateHash();
    buf.append("<b>").append(_("LeaseSet")).append(": ").append(key.toBase64());
    if (_context.clientManager().isLocal(dest)) {
      buf.append(" (<a href=\"tunnels.jsp#" + key.toBase64().substring(0,4) + "\">"+ _("Local")+ "</a> ");
      if (!_context.clientManager().shouldPublishLeaseSet(key))       buf.append(_("Unpublished") + ' ');
      buf.append(_("Destination") + ' ');
      TunnelPoolSettings in=_context.tunnelManager().getInboundSettings(key);
      if (in != null && in.getDestinationNickname() != null)       buf.append(in.getDestinationNickname());
 else       buf.append(dest.toBase64().substring(0,6));
    }
 else {
      buf.append(" (" + _("Destination") + ' ');
      String host=_context.namingService().reverseLookup(dest);
      if (host != null)       buf.append(host);
 else       buf.append(dest.toBase64().substring(0,6));
    }
    buf.append(")</b><br>\n");
    long exp=ls.getEarliestLeaseDate() - now;
    if (exp > 0)     buf.append(_("Expires in {0}",DataHelper.formatDuration(exp))).append("<br>\n");
 else     buf.append(_("Expired {0} ago",DataHelper.formatDuration(0 - exp))).append("<br>\n");
    if (debug) {
      buf.append("RAP? " + ls.getReceivedAsPublished() + ' ');
      buf.append("RAR? " + ls.getReceivedAsReply() + ' ');
      BigInteger dist=HashDistance.getDistance(ourRKey,ls.getRoutingKey());
      if (c++ == medianCount)       median=dist;
      buf.append("Dist: <b>" + fmt.format(biLog2(dist)) + "</b> ");
      buf.append("RKey: " + ls.getRoutingKey().toBase64() + ' ');
      buf.append("<br>");
    }
    for (int i=0; i < ls.getLeaseCount(); i++) {
      buf.append(_("Lease")).append(' ').append(i + 1).append(": " + _("Gateway") + ' ');
      buf.append(_context.commSystem().renderPeerHTML(ls.getLease(i).getGateway()));
      buf.append(' ' + _("Tunnel") + ' ').append(ls.getLease(i).getTunnelId().getTunnelId()).append("<br>\n");
    }
    buf.append("<hr>\n");
    out.write(buf.toString());
    buf.setLength(0);
  }
  if (debug) {
    buf.append("<p><b>Total Leasesets: " + leases.size());
    buf.append("<p>Our RKey: " + ourRKey.toBase64() + "<p>");
    buf.append("<p>Mod Data: " + HexDump.dump(_context.routingKeyGenerator().getModData()) + "<p>");
    if (median != null) {
      double log2=biLog2(median);
      buf.append("<p>Median distance (bits): " + fmt.format(log2));
      buf.append("<p>Estimated total floodfills: " + Math.round(Math.pow(2,1 + 3 + 255 - log2)));
    }
  }
  out.write(buf.toString());
  out.flush();
}
