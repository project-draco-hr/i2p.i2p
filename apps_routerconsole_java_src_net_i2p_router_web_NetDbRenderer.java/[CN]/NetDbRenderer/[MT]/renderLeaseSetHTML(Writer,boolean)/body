{
  StringBuilder buf=new StringBuilder(4 * 1024);
  if (debug)   buf.append("<p>Debug mode - Sorted by hash distance, closest first</p>\n");
  Hash ourRKey;
  Set<LeaseSet> leases;
  DecimalFormat fmt;
  if (debug) {
    ourRKey=_context.routerHash();
    leases=new TreeSet<LeaseSet>(new LeaseSetRoutingKeyComparator(ourRKey));
    fmt=new DecimalFormat("#0.00");
  }
 else {
    ourRKey=null;
    leases=new TreeSet<LeaseSet>(new LeaseSetComparator());
    fmt=null;
  }
  leases.addAll(_context.netDb().getLeases());
  int medianCount=0;
  int rapCount=0;
  BigInteger median=null;
  int c=0;
  if (debug) {
    for (    LeaseSet ls : leases) {
      if (ls.getReceivedAsPublished())       rapCount++;
    }
    medianCount=rapCount / 2;
  }
  long now=_context.clock().now();
  for (  LeaseSet ls : leases) {
    Destination dest=ls.getDestination();
    Hash key=dest.calculateHash();
    buf.append("<b>").append(_("LeaseSet")).append(": ").append(key.toBase64()).append("</b>\n");
    if (_context.clientManager().isLocal(dest)) {
      buf.append(" (<a href=\"tunnels#" + key.toBase64().substring(0,4) + "\">"+ _("Local")+ "</a> ");
      if (!_context.clientManager().shouldPublishLeaseSet(key))       buf.append(_("Unpublished") + ' ');
      buf.append(_("Destination") + ' ');
      TunnelPoolSettings in=_context.tunnelManager().getInboundSettings(key);
      if (in != null && in.getDestinationNickname() != null)       buf.append(in.getDestinationNickname());
 else       buf.append(dest.toBase64().substring(0,6));
      buf.append(")<br>\n");
    }
 else {
      buf.append(" (").append(_("Destination")).append(' ');
      String host=_context.namingService().reverseLookup(dest);
      if (host != null) {
        buf.append("<a href=\"http://").append(host).append("/\">").append(host).append("</a>)<br>\n");
      }
 else {
        String b32=dest.toBase32();
        buf.append(dest.toBase64().substring(0,6)).append(")<br>\n" + "<a href=\"http://").append(b32).append("\">").append(b32).append("</a><br>\n" + "<a href=\"/susidns/addressbook.jsp?book=private&amp;destination=").append(dest.toBase64()).append("#add\">").append(_("Add to local addressbook")).append("</a><br>\n");
      }
    }
    long exp=ls.getLatestLeaseDate() - now;
    if (exp > 0)     buf.append(_("Expires in {0}",DataHelper.formatDuration2(exp)));
 else     buf.append(_("Expired {0} ago",DataHelper.formatDuration2(0 - exp)));
    buf.append("<br>\n");
    if (debug) {
      buf.append("RAP? " + ls.getReceivedAsPublished());
      buf.append(" RAR? " + ls.getReceivedAsReply());
      BigInteger dist=HashDistance.getDistance(ourRKey,ls.getRoutingKey());
      if (ls.getReceivedAsPublished()) {
        if (c++ == medianCount)         median=dist;
      }
      buf.append(" Dist: <b>").append(fmt.format(biLog2(dist))).append("</b><br>");
      buf.append("Sig type: ").append(dest.getSigningPublicKey().getType()).append("<br>");
      buf.append("Routing Key: ").append(ls.getRoutingKey().toBase64());
      buf.append("<br>");
      buf.append("Encryption Key: ").append(ls.getEncryptionKey().toBase64().substring(0,20)).append("...<br>");
    }
    for (int i=0; i < ls.getLeaseCount(); i++) {
      Lease lease=ls.getLease(i);
      buf.append(_("Lease")).append(' ').append(i + 1).append(": ").append(_("Gateway")).append(' ');
      buf.append(_context.commSystem().renderPeerHTML(lease.getGateway()));
      buf.append(' ').append(_("Tunnel")).append(' ').append(lease.getTunnelId().getTunnelId()).append(' ');
      if (debug) {
        long exl=lease.getEndDate().getTime() - now;
        if (exl > 0)         buf.append(_("Expires in {0}",DataHelper.formatDuration2(exl)));
 else         buf.append(_("Expired {0} ago",DataHelper.formatDuration2(0 - exl)));
      }
      buf.append("<br>\n");
    }
    buf.append("<hr>\n");
    out.write(buf.toString());
    buf.setLength(0);
  }
  if (debug) {
    FloodfillNetworkDatabaseFacade netdb=(FloodfillNetworkDatabaseFacade)_context.netDb();
    buf.append("<p><b>Total Leasesets: ").append(leases.size());
    buf.append("</b></p><p><b>Published (RAP) Leasesets: ").append(netdb.getKnownLeaseSets());
    buf.append("</b></p><p><b>Mod Data: \"").append(DataHelper.getUTF8(_context.routerKeyGenerator().getModData())).append("\" Last Changed: ").append(new Date(_context.routerKeyGenerator().getLastChanged()));
    buf.append("</b></p><p><b>Next Mod Data: \"").append(DataHelper.getUTF8(_context.routerKeyGenerator().getNextModData())).append("\" Change in: ").append(DataHelper.formatDuration(_context.routerKeyGenerator().getTimeTillMidnight()));
    int ff=_context.peerManager().getPeersByCapability(FloodfillNetworkDatabaseFacade.CAPABILITY_FLOODFILL).size();
    buf.append("</b></p><p><b>Known Floodfills: ").append(ff);
    buf.append("</b></p><p><b>Currently Floodfill? ");
    buf.append(netdb.floodfillEnabled() ? "yes" : "no");
    buf.append("</b></p><p><b>Network data (only valid if floodfill):");
    if (median != null) {
      double log2=biLog2(median);
      buf.append("</b></p><p><b>Median distance (bits): ").append(fmt.format(log2));
      int total=(int)Math.round(Math.pow(2,2 + 256 - 1 - log2));
      buf.append("</b></p><p><b>Estimated total floodfills: ").append(total);
      buf.append("</b></p><p><b>Estimated total leasesets: ").append(total * rapCount / 8);
    }
 else {
      buf.append("</b></p><p><b>Not floodfill or no data");
    }
    buf.append("</b></p>");
  }
  out.write(buf.toString());
  out.flush();
}
