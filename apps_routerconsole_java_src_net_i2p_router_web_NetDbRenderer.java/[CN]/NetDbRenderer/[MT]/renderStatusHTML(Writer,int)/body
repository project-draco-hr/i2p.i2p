{
  out.write("<h2>" + _("Network Database Contents") + " (<a href=\"netdb.jsp?l=1\">"+ _("View LeaseSets")+ "</a>)</h2>\n");
  if (!_context.netDb().isInitialized()) {
    out.write(_("Not initialized"));
    out.flush();
    return;
  }
  boolean full=mode == 1;
  boolean shortStats=mode == 2;
  boolean showStats=full || shortStats;
  Hash us=_context.routerHash();
  out.write("<a name=\"routers\" ></a><h3>" + _("Routers") + " (<a href=\"netdb.jsp");
  if (full || !showStats)   out.write("?f=2#routers\" >" + _("Show all routers"));
 else   out.write("?f=1#routers\" >" + _("Show all routers with full stats"));
  out.write("</a>)</h3>\n");
  StringBuilder buf=new StringBuilder(8192);
  RouterInfo ourInfo=_context.router().getRouterInfo();
  renderRouterInfo(buf,ourInfo,true,true);
  out.write(buf.toString());
  buf.setLength(0);
  ObjectCounter<String> versions=new ObjectCounter();
  ObjectCounter<String> countries=new ObjectCounter();
  int[] transportCount=new int[8];
  Set routers=new TreeSet(new RouterInfoComparator());
  routers.addAll(_context.netDb().getRouters());
  for (Iterator iter=routers.iterator(); iter.hasNext(); ) {
    RouterInfo ri=(RouterInfo)iter.next();
    Hash key=ri.getIdentity().getHash();
    boolean isUs=key.equals(us);
    if (!isUs) {
      if (showStats) {
        renderRouterInfo(buf,ri,false,full);
        out.write(buf.toString());
        buf.setLength(0);
      }
      String routerVersion=ri.getOption("router.version");
      if (routerVersion != null)       versions.increment(routerVersion);
      String country=_context.commSystem().getCountry(key);
      if (country != null)       countries.increment(country);
      transportCount[classifyTransports(ri)]++;
    }
  }
  buf.append("<table border=\"0\" cellspacing=\"30\"><tr><th colspan=\"3\">").append(_("Network Database Router Statistics")).append("</th><tr><td>");
  List<String> versionList=new ArrayList(versions.objects());
  if (versionList.size() > 0) {
    Collections.sort(versionList,Collections.reverseOrder(new VersionComparator()));
    buf.append("<table>\n");
    buf.append("<tr><th>" + _("Version") + "</th><th>"+ _("Count")+ "</th></tr>\n");
    for (    String routerVersion : versionList) {
      int num=versions.count(routerVersion);
      buf.append("<tr><td align=\"center\">").append(DataHelper.stripHTML(routerVersion));
      buf.append("</td><td align=\"center\">").append(num).append("</td></tr>\n");
    }
    buf.append("</table>\n");
  }
  buf.append("</td><td>");
  out.write(buf.toString());
  buf.setLength(0);
  buf.append("<table>\n");
  buf.append("<tr><th align=\"left\">" + _("Transports") + "</th><th>"+ _("Count")+ "</th></tr>\n");
  for (int i=0; i < 8; i++) {
    int num=transportCount[i];
    if (num > 0) {
      buf.append("<tr><td>").append(_(TNAMES[i]));
      buf.append("</td><td align=\"center\">").append(num).append("</td></tr>\n");
    }
  }
  buf.append("</table>\n");
  buf.append("</td><td>");
  out.write(buf.toString());
  buf.setLength(0);
  List<String> countryList=new ArrayList(countries.objects());
  if (countryList.size() > 0) {
    Collections.sort(countryList,new CountryComparator());
    buf.append("<table>\n");
    buf.append("<tr><th align=\"left\">" + _("Country") + "</th><th>"+ _("Count")+ "</th></tr>\n");
    for (    String country : countryList) {
      int num=countries.count(country);
      buf.append("<tr><td><img height=\"11\" width=\"16\" alt=\"").append(country.toUpperCase()).append("\"");
      buf.append(" src=\"/flags.jsp?c=").append(country).append("\"> ");
      buf.append(_(_context.commSystem().getCountryName(country)));
      buf.append("</td><td align=\"center\">").append(num).append("</td></tr>\n");
    }
    buf.append("</table>\n");
  }
  buf.append("</td></tr></table>");
  out.write(buf.toString());
  out.flush();
}
