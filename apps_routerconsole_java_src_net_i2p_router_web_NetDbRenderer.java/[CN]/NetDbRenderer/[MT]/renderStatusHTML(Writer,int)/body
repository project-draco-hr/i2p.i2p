{
  if (!_context.netDb().isInitialized()) {
    out.write(_("Not initialized"));
    out.flush();
    return;
  }
  boolean full=mode == 1;
  boolean shortStats=mode == 2;
  boolean showStats=full || shortStats;
  Hash us=_context.routerHash();
  StringBuilder buf=new StringBuilder(8192);
  if (showStats) {
    RouterInfo ourInfo=_context.router().getRouterInfo();
    renderRouterInfo(buf,ourInfo,true,true);
    out.write(buf.toString());
    buf.setLength(0);
  }
  ObjectCounter<String> versions=new ObjectCounter<String>();
  ObjectCounter<String> countries=new ObjectCounter<String>();
  int[] transportCount=new int[TNAMES.length];
  Set<RouterInfo> routers=new TreeSet<RouterInfo>(new RouterInfoComparator());
  routers.addAll(_context.netDb().getRouters());
  for (  RouterInfo ri : routers) {
    Hash key=ri.getIdentity().getHash();
    boolean isUs=key.equals(us);
    if (!isUs) {
      if (showStats) {
        renderRouterInfo(buf,ri,false,full);
        out.write(buf.toString());
        buf.setLength(0);
      }
      String routerVersion=ri.getOption("router.version");
      if (routerVersion != null)       versions.increment(routerVersion);
      String country=_context.commSystem().getCountry(key);
      if (country != null)       countries.increment(country);
      transportCount[classifyTransports(ri)]++;
    }
  }
  if (!showStats) {
    buf.append("<table border=\"0\" cellspacing=\"30\"><tr><th colspan=\"3\">").append(_("Network Database Router Statistics")).append("</th></tr><tr><td style=\"vertical-align: top;\">");
    List<String> versionList=new ArrayList<String>(versions.objects());
    if (!versionList.isEmpty()) {
      Collections.sort(versionList,Collections.reverseOrder(new VersionComparator()));
      buf.append("<table>\n");
      buf.append("<tr><th>" + _("Version") + "</th><th>"+ _("Count")+ "</th></tr>\n");
      for (      String routerVersion : versionList) {
        int num=versions.count(routerVersion);
        String ver=DataHelper.stripHTML(routerVersion);
        buf.append("<tr><td align=\"center\"><a href=\"/netdb?v=").append(ver).append("\">").append(ver);
        buf.append("</a></td><td align=\"center\">").append(num).append("</td></tr>\n");
      }
      buf.append("</table>\n");
    }
    buf.append("</td><td style=\"vertical-align: top;\">");
    out.write(buf.toString());
    buf.setLength(0);
    buf.append("<table>\n");
    buf.append("<tr><th align=\"left\">" + _("Transports") + "</th><th>"+ _("Count")+ "</th></tr>\n");
    for (int i=0; i < TNAMES.length; i++) {
      int num=transportCount[i];
      if (num > 0) {
        buf.append("<tr><td>").append(_(TNAMES[i]));
        buf.append("</td><td align=\"center\">").append(num).append("</td></tr>\n");
      }
    }
    buf.append("</table>\n");
    buf.append("</td><td style=\"vertical-align: top;\">");
    out.write(buf.toString());
    buf.setLength(0);
    List<String> countryList=new ArrayList<String>(countries.objects());
    if (!countryList.isEmpty()) {
      Collections.sort(countryList,new CountryComparator());
      buf.append("<table>\n");
      buf.append("<tr><th align=\"left\">" + _("Country") + "</th><th>"+ _("Count")+ "</th></tr>\n");
      for (      String country : countryList) {
        int num=countries.count(country);
        buf.append("<tr><td><img height=\"11\" width=\"16\" alt=\"").append(country.toUpperCase(Locale.US)).append("\"");
        buf.append(" src=\"/flags.jsp?c=").append(country).append("\"> <a href=\"/netdb?c=").append(country).append("\">");
        buf.append(getTranslatedCountry(country));
        buf.append("</a></td><td align=\"center\">").append(num).append("</td></tr>\n");
      }
      buf.append("</table>\n");
    }
    buf.append("</td></tr></table>");
  }
  out.write(buf.toString());
  out.flush();
}
