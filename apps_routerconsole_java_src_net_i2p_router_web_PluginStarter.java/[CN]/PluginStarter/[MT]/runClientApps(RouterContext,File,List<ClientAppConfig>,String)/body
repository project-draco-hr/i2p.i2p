{
  Log log=ctx.logManager().getLog(PluginStarter.class);
  String pluginName=pluginDir.getName();
  if (!pluginThreadGroups.containsKey(pluginName))   pluginThreadGroups.put(pluginName,new ThreadGroup(pluginName));
  ThreadGroup pluginThreadGroup=pluginThreadGroups.get(pluginName);
  if (action.equals("start"))   pluginJobs.put(pluginName,new ConcurrentHashSet<Job>());
  for (  ClientAppConfig app : apps) {
    if (action.equals("start") && app.disabled)     continue;
    String argVal[];
    if (action.equals("start")) {
      argVal=LoadClientAppsJob.parseArgs(app.args);
    }
 else {
      String args;
      if (action.equals("stop"))       args=app.stopargs;
 else       if (action.equals("uninstall"))       args=app.uninstallargs;
 else       throw new IllegalArgumentException("bad action");
      if (args == null || args.length() <= 0)       continue;
      argVal=LoadClientAppsJob.parseArgs(args);
    }
    for (int i=0; i < argVal.length; i++) {
      if (argVal[i].indexOf("$") >= 0) {
        argVal[i]=argVal[i].replace("$I2P",ctx.getBaseDir().getAbsolutePath());
        argVal[i]=argVal[i].replace("$CONFIG",ctx.getConfigDir().getAbsolutePath());
        argVal[i]=argVal[i].replace("$PLUGIN",pluginDir.getAbsolutePath());
      }
    }
    if (app.classpath != null) {
      String cp=new String(app.classpath);
      if (cp.indexOf("$") >= 0) {
        cp=cp.replace("$I2P",ctx.getBaseDir().getAbsolutePath());
        cp=cp.replace("$CONFIG",ctx.getConfigDir().getAbsolutePath());
        cp=cp.replace("$PLUGIN",pluginDir.getAbsolutePath());
      }
      addToClasspath(cp,app.clientName,log);
    }
    if (app.delay < 0 && action.equals("start")) {
      LoadClientAppsJob.runClientInline(app.className,app.clientName,argVal,log);
    }
 else     if (app.delay == 0 || !action.equals("start")) {
      LoadClientAppsJob.testClient(app.className);
      LoadClientAppsJob.runClient(app.className,app.clientName,argVal,log,pluginThreadGroup);
    }
 else {
      LoadClientAppsJob.testClient(app.className);
      Job job=new LoadClientAppsJob.DelayedRunClient(ctx,app.className,app.clientName,argVal,app.delay,pluginThreadGroup);
      ctx.jobQueue().addJob(job);
      pluginJobs.get(pluginName).add(job);
    }
  }
}
