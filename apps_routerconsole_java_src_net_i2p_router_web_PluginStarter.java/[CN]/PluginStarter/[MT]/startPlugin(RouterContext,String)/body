{
  Log log=ctx.logManager().getLog(PluginStarter.class);
  File pluginDir=new File(ctx.getAppDir(),PluginUpdateHandler.PLUGIN_DIR + '/' + appName);
  if ((!pluginDir.exists()) || (!pluginDir.isDirectory())) {
    log.error("Cannot start nonexistent plugin: " + appName);
    return false;
  }
  File clientConfig=new File(pluginDir,"clients.config");
  if (clientConfig.exists()) {
    Properties props=new Properties();
    DataHelper.loadProps(props,clientConfig);
    List<ClientAppConfig> clients=ClientAppConfig.getClientApps(clientConfig);
    runClientApps(ctx,pluginDir,clients);
  }
  Server server=getConsoleServer();
  if (server != null) {
    File consoleDir=new File(pluginDir,"console");
    Properties props=RouterConsoleRunner.webAppProperties(consoleDir.getAbsolutePath());
    File webappDir=new File(pluginDir,"webapps");
    String fileNames[]=webappDir.list(RouterConsoleRunner.WarFilenameFilter.instance());
    if (fileNames != null) {
      for (int i=0; i < fileNames.length; i++) {
        try {
          String warName=fileNames[i].substring(0,fileNames[i].lastIndexOf(".war"));
          String enabled=props.getProperty(PREFIX + warName + ENABLED);
          if (!"false".equals(enabled)) {
            String path=new File(webappDir,fileNames[i]).getCanonicalPath();
            WebAppStarter.startWebApp(ctx,server,warName,path);
          }
        }
 catch (        IOException ioe) {
          log.error("Error resolving '" + fileNames[i] + "' in '"+ webappDir,ioe);
        }
      }
    }
  }
  File localeDir=new File(pluginDir,"console/locale");
  if (localeDir.exists() && localeDir.isDirectory()) {
    File[] files=localeDir.listFiles();
    if (files != null) {
      boolean added=false;
      for (int i=0; i < files.length; i++) {
        File f=files[i];
        if (f.getName().endsWith(".jar")) {
          try {
            addPath(f.toURI().toURL());
            log.error("INFO: Adding translation plugin to classpath: " + f);
            added=true;
          }
 catch (          Exception e) {
            log.error("Plugin " + appName + " bad classpath element: "+ f,e);
          }
        }
      }
      if (added)       Translate.clearCache();
    }
  }
  File pluginConfig=new File(pluginDir,"plugin.config");
  if (pluginConfig.exists()) {
    Properties props=new Properties();
    DataHelper.loadProps(props,pluginConfig);
    String name=props.getProperty("consoleLinkName");
    String url=props.getProperty("consoleLinkURL");
    if (name != null && url != null && name.length() > 0 && url.length() > 0)     NavHelper.registerApp(name,url);
  }
  return true;
}
