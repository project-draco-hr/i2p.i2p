{
  Log log=ctx.logManager().getLog(PluginStarter.class);
  File pluginDir=new File(ctx.getConfigDir(),PLUGIN_DIR + '/' + appName);
  String iconfile=null;
  if ((!pluginDir.exists()) || (!pluginDir.isDirectory())) {
    log.error("Cannot start nonexistent plugin: " + appName);
    disablePlugin(appName);
    return false;
  }
  File pluginUpdate=new File(ctx.getConfigDir(),PLUGIN_DIR + '/' + appName+ "/app.xpi2p.zip");
  if (pluginUpdate.exists()) {
    if (ctx.router().getWhenStarted() > pluginUpdate.lastModified()) {
      if (!FileUtil.extractZip(pluginUpdate,pluginDir)) {
        pluginUpdate.delete();
        String foo="Plugin '" + appName + "' failed to update! File '"+ pluginUpdate+ "' deleted. You may need to remove and install the plugin again.";
        log.error(foo);
        disablePlugin(appName);
        throw new Exception(foo);
      }
 else {
        pluginUpdate.delete();
        System.err.println("INFO: Plugin updated: " + appName);
      }
    }
  }
  Properties props=pluginProperties(ctx,appName);
  String minVersion=ConfigClientsHelper.stripHTML(props,"min-i2p-version");
  if (minVersion != null && VersionComparator.comp(CoreVersion.VERSION,minVersion) < 0) {
    String foo="Plugin " + appName + " requires I2P version "+ minVersion+ " or higher";
    log.error(foo);
    disablePlugin(appName);
    throw new Exception(foo);
  }
  minVersion=ConfigClientsHelper.stripHTML(props,"min-java-version");
  if (minVersion != null && VersionComparator.comp(System.getProperty("java.version"),minVersion) < 0) {
    String foo="Plugin " + appName + " requires Java version "+ minVersion+ " or higher";
    log.error(foo);
    disablePlugin(appName);
    throw new Exception(foo);
  }
  String jVersion=LogsHelper.jettyVersion();
  minVersion=ConfigClientsHelper.stripHTML(props,"min-jetty-version");
  if (minVersion != null && VersionComparator.comp(minVersion,jVersion) > 0) {
    String foo="Plugin " + appName + " requires Jetty version "+ minVersion+ " or higher";
    log.error(foo);
    disablePlugin(appName);
    throw new Exception(foo);
  }
  String maxVersion=ConfigClientsHelper.stripHTML(props,"max-jetty-version");
  if (maxVersion != null && VersionComparator.comp(maxVersion,jVersion) < 0) {
    String foo="Plugin " + appName + " requires Jetty version "+ maxVersion+ " or lower";
    log.error(foo);
    disablePlugin(appName);
    throw new Exception(foo);
  }
  if (log.shouldLog(Log.INFO))   log.info("Starting plugin: " + appName);
  File dir=new File(pluginDir,"console/themes");
  File[] tfiles=dir.listFiles();
  if (tfiles != null) {
    for (int i=0; i < tfiles.length; i++) {
      String name=tfiles[i].getName();
      if (tfiles[i].isDirectory() && (!Arrays.asList(STANDARD_THEMES).contains(tfiles[i]))) {
        ctx.router().setConfigSetting(ConfigUIHelper.PROP_THEME_PFX + name,tfiles[i].getAbsolutePath());
      }
    }
  }
  String fullprop=props.getProperty("icon-code");
  if (fullprop != null && fullprop.length() > 1) {
    byte[] decoded=Base64.decode(fullprop);
    if (decoded != null) {
      NavHelper.setBinary(appName,decoded);
      iconfile="/Plugins/pluginicon?plugin=" + appName;
    }
 else {
      iconfile="/themes/console/images/plugin.png";
    }
  }
  File clientConfig=new File(pluginDir,"clients.config");
  if (clientConfig.exists()) {
    Properties cprops=new Properties();
    DataHelper.loadProps(cprops,clientConfig);
    List<ClientAppConfig> clients=ClientAppConfig.getClientApps(clientConfig);
    runClientApps(ctx,pluginDir,clients,"start");
  }
  ContextHandlerCollection server=WebAppStarter.getConsoleServer();
  if (server != null) {
    File consoleDir=new File(pluginDir,"console");
    Properties wprops=RouterConsoleRunner.webAppProperties(consoleDir.getAbsolutePath());
    File webappDir=new File(consoleDir,"webapps");
    String fileNames[]=webappDir.list(RouterConsoleRunner.WarFilenameFilter.instance());
    if (fileNames != null) {
      if (!pluginWars.containsKey(appName))       pluginWars.put(appName,new ConcurrentHashSet<String>());
      for (int i=0; i < fileNames.length; i++) {
        try {
          String warName=fileNames[i].substring(0,fileNames[i].lastIndexOf(".war"));
          if (Arrays.asList(STANDARD_WEBAPPS).contains(warName)) {
            log.error("Skipping duplicate webapp " + warName + " in plugin "+ appName);
            continue;
          }
          String enabled=wprops.getProperty(RouterConsoleRunner.PREFIX + warName + ENABLED);
          if (!"false".equals(enabled)) {
            if (log.shouldLog(Log.INFO))             log.info("Starting webapp: " + warName);
            String path=new File(webappDir,fileNames[i]).getCanonicalPath();
            WebAppStarter.startWebApp(ctx,server,warName,path);
            pluginWars.get(appName).add(warName);
          }
        }
 catch (        IOException ioe) {
          log.error("Error resolving '" + fileNames[i] + "' in '"+ webappDir,ioe);
        }
      }
      String icfile=ConfigClientsHelper.stripHTML(props,"console-icon");
      if (icfile != null && !icfile.contains("..")) {
        StringBuilder buf=new StringBuilder(32);
        buf.append('/').append(appName);
        if (!icfile.startsWith("/"))         buf.append('/');
        buf.append(icfile);
        iconfile=buf.toString();
      }
    }
  }
 else {
    log.error("No console web server to start plugins?");
  }
  File localeDir=new File(pluginDir,"console/locale");
  if (localeDir.exists() && localeDir.isDirectory()) {
    File[] files=localeDir.listFiles();
    if (files != null) {
      boolean added=false;
      for (int i=0; i < files.length; i++) {
        File f=files[i];
        if (f.getName().endsWith(".jar")) {
          try {
            addPath(f.toURI().toURL());
            log.error("INFO: Adding translation plugin to classpath: " + f);
            added=true;
          }
 catch (          RuntimeException e) {
            log.error("Plugin " + appName + " bad classpath element: "+ f,e);
          }
        }
      }
      if (added)       Translate.clearCache();
    }
  }
  String name=ConfigClientsHelper.stripHTML(props,"consoleLinkName_" + Messages.getLanguage(ctx));
  if (name == null)   name=ConfigClientsHelper.stripHTML(props,"consoleLinkName");
  String url=ConfigClientsHelper.stripHTML(props,"consoleLinkURL");
  if (name != null && url != null && name.length() > 0 && url.length() > 0) {
    String tip=ConfigClientsHelper.stripHTML(props,"consoleLinkTooltip_" + Messages.getLanguage(ctx));
    if (tip == null)     tip=ConfigClientsHelper.stripHTML(props,"consoleLinkTooltip");
    NavHelper.registerApp(name,url,tip,iconfile);
  }
  return true;
}
