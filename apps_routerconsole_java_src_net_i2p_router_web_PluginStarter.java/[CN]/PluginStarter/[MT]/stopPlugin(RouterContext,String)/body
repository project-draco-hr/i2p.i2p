{
  Log log=ctx.logManager().getLog(PluginStarter.class);
  File pluginDir=new File(ctx.getAppDir(),PluginUpdateHandler.PLUGIN_DIR + '/' + appName);
  if ((!pluginDir.exists()) || (!pluginDir.isDirectory())) {
    log.error("Cannot stop nonexistent plugin: " + appName);
    return false;
  }
  File clientConfig=new File(pluginDir,"clients.config");
  if (clientConfig.exists()) {
    Properties props=new Properties();
    DataHelper.loadProps(props,clientConfig);
    List<ClientAppConfig> clients=ClientAppConfig.getClientApps(clientConfig);
    runClientApps(ctx,pluginDir,clients,"stop");
  }
  Server server=WebAppStarter.getConsoleServer();
  if (server != null) {
    File consoleDir=new File(pluginDir,"console");
    Properties props=RouterConsoleRunner.webAppProperties(consoleDir.getAbsolutePath());
    File webappDir=new File(consoleDir,"webapps");
    String fileNames[]=webappDir.list(RouterConsoleRunner.WarFilenameFilter.instance());
    if (fileNames != null) {
      for (int i=0; i < fileNames.length; i++) {
        String warName=fileNames[i].substring(0,fileNames[i].lastIndexOf(".war"));
        if (Arrays.asList(STANDARD_WEBAPPS).contains(warName)) {
          continue;
        }
        WebAppStarter.stopWebApp(server,warName);
      }
    }
  }
  Properties props=pluginProperties(ctx,appName);
  String name=ConfigClientsHelper.stripHTML(props,"consoleLinkName_" + Messages.getLanguage(ctx));
  if (name == null)   name=ConfigClientsHelper.stripHTML(props,"consoleLinkName");
  if (name != null && name.length() > 0)   NavHelper.unregisterApp(name);
  if (log.shouldLog(Log.WARN))   log.warn("Stopping plugin: " + appName);
  return true;
}
