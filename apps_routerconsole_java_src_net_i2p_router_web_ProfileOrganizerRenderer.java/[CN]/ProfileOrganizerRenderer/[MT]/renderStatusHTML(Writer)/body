{
  Set peers=_organizer.selectAllPeers();
  long now=_context.clock().now();
  long hideBefore=now - 90 * 60 * 1000;
  TreeSet order=new TreeSet(_comparator);
  TreeSet integratedPeers=new TreeSet(_comparator);
  for (Iterator iter=peers.iterator(); iter.hasNext(); ) {
    Hash peer=(Hash)iter.next();
    if (_organizer.getUs().equals(peer))     continue;
    PeerProfile prof=_organizer.getProfile(peer);
    if (_organizer.isWellIntegrated(peer)) {
      integratedPeers.add(prof);
    }
 else {
      RouterInfo info=_context.netDb().lookupRouterInfoLocally(peer);
      if (info != null && info.getCapabilities().indexOf("f") >= 0)       integratedPeers.add(prof);
    }
    if (prof.getLastSendSuccessful() <= hideBefore)     continue;
    order.add(prof);
  }
  int fast=0;
  int reliable=0;
  int integrated=0;
  int failing=0;
  StringBuilder buf=new StringBuilder(16 * 1024);
  buf.append("<h2>").append(_("Peer Profiles")).append("</h2>\n<p>");
  buf.append(_("Showing {0} recent profiles.",order.size())).append('\n');
  buf.append(_("Hiding {0} older profiles.",peers.size() - order.size()));
  buf.append("</p>");
  buf.append("<table>");
  buf.append("<tr>");
  buf.append("<th>").append(_("Peer")).append("</th>");
  buf.append("<th>").append(_("Groups (Caps)")).append("</th>");
  buf.append("<th>").append(_("Speed")).append("</th>");
  buf.append("<th>").append(_("Capacity")).append("</th>");
  buf.append("<th>").append(_("Integration")).append("</th>");
  buf.append("<th>").append(_("Status")).append("</th>");
  buf.append("<th>&nbsp;</th>");
  buf.append("</tr>");
  int prevTier=1;
  for (Iterator iter=order.iterator(); iter.hasNext(); ) {
    PeerProfile prof=(PeerProfile)iter.next();
    Hash peer=prof.getPeer();
    int tier=0;
    boolean isIntegrated=false;
    if (_organizer.isFast(peer)) {
      tier=1;
      fast++;
      reliable++;
    }
 else     if (_organizer.isHighCapacity(peer)) {
      tier=2;
      reliable++;
    }
 else     if (_organizer.isFailing(peer)) {
      failing++;
    }
 else {
      tier=3;
    }
    if (_organizer.isWellIntegrated(peer)) {
      isIntegrated=true;
      integrated++;
    }
    if (tier != prevTier)     buf.append("<tr><td colspan=\"7\"><hr></td></tr>\n");
    prevTier=tier;
    buf.append("<tr><td align=\"center\" nowrap>");
    buf.append(_context.commSystem().renderPeerHTML(peer));
    buf.append("</td><td align=\"center\">");
switch (tier) {
case 1:
      buf.append(_("Fast, High Capacity"));
    break;
case 2:
  buf.append(_("High Capacity"));
break;
case 3:
buf.append(_("Standard"));
break;
default :
buf.append(_("Failing"));
break;
}
if (isIntegrated) buf.append(", ").append(_("Integrated"));
RouterInfo info=_context.netDb().lookupRouterInfoLocally(peer);
if (info != null) {
buf.append(" (").append(DataHelper.stripHTML(info.getCapabilities()));
String v=info.getOption("router.version");
if (v != null) buf.append(' ').append(DataHelper.stripHTML(v));
buf.append(')');
}
buf.append("<td align=\"right\">").append(num(prof.getSpeedValue()));
long bonus=prof.getSpeedBonus();
if (bonus != 0) {
if (bonus > 0) buf.append(" (+");
 else buf.append(" (");
buf.append(bonus).append(')');
}
buf.append("</td><td align=\"right\">").append(num(prof.getCapacityValue()));
bonus=prof.getCapacityBonus();
if (bonus != 0) {
if (bonus > 0) buf.append(" (+");
 else buf.append(" (");
buf.append(bonus).append(')');
}
buf.append("</td><td align=\"right\">").append(num(prof.getIntegrationValue()));
buf.append("</td><td align=\"center\">");
if (_context.shitlist().isShitlisted(peer)) buf.append(_("Banned"));
if (prof.getIsFailing()) buf.append(" ").append(_("Failing"));
if (_context.commSystem().wasUnreachable(peer)) buf.append(" ").append(_("Unreachable"));
Rate failed=prof.getTunnelHistory().getFailedRate().getRate(30 * 60 * 1000);
long fails=failed.getCurrentEventCount() + failed.getLastEventCount();
if (fails > 0) {
Rate accepted=prof.getTunnelCreateResponseTime().getRate(30 * 60 * 1000);
long total=fails + accepted.getCurrentEventCount() + accepted.getLastEventCount();
if (total / fails <= 10) buf.append(' ').append(fails).append('/').append(total).append(" ").append(_("Test Fails"));
}
buf.append("&nbsp;</td>");
buf.append("<td nowrap align=\"center\"><a target=\"_blank\" href=\"dumpprofile.jsp?peer=").append(peer.toBase64().substring(0,6)).append("\">profile</a>");
buf.append("&nbsp;<a href=\"configpeer.jsp?peer=").append(peer.toBase64()).append("\">+-</a></td>\n");
buf.append("</tr>");
out.write(buf.toString());
buf.setLength(0);
}
buf.append("</table>");
buf.append("<h2>").append(_("Floodfill and Integrated Peers")).append("</h2>\n");
buf.append("<table>");
buf.append("<tr>");
buf.append("<th class=\"smallhead\">Peer</th>");
buf.append("<th class=\"smallhead\">Caps</th>");
buf.append("<th class=\"smallhead\">Integ. Value</th>");
buf.append("<th class=\"smallhead\">Last Heard About</th>");
buf.append("<th class=\"smallhead\">Last Heard From</th>");
buf.append("<th class=\"smallhead\">Last Good Send</th>");
buf.append("<th class=\"smallhead\">Last Bad Send</th>");
buf.append("<th class=\"smallhead\">10m Resp. Time</th>");
buf.append("<th class=\"smallhead\">1h Resp. Time</th>");
buf.append("<th class=\"smallhead\">1d Resp. Time</th>");
buf.append("<th class=\"smallhead\">Good Lookups</th>");
buf.append("<th class=\"smallhead\">Bad Lookups</th>");
buf.append("<th class=\"smallhead\">New Stores</th>");
buf.append("<th class=\"smallhead\">Old Stores</th>");
buf.append("<th class=\"smallhead\">1h Fail Rate</th>");
buf.append("<th class=\"smallhead\">1d Fail Rate</th>");
buf.append("</tr>");
for (Iterator iter=integratedPeers.iterator(); iter.hasNext(); ) {
PeerProfile prof=(PeerProfile)iter.next();
Hash peer=prof.getPeer();
buf.append("<tr><td align=\"center\" nowrap>");
buf.append(_context.commSystem().renderPeerHTML(peer));
buf.append("</td>");
RouterInfo info=_context.netDb().lookupRouterInfoLocally(peer);
if (info != null) buf.append("<td align=\"center\">").append(DataHelper.stripHTML(info.getCapabilities())).append("</td>");
 else buf.append("<td>&nbsp;</td>");
buf.append("</code></td>");
buf.append("<td align=\"right\">").append(num(prof.getIntegrationValue())).append("</td>");
long time;
time=now - prof.getLastHeardAbout();
buf.append("<td align=\"right\">").append(DataHelper.formatDuration(time)).append("</td>");
time=now - prof.getLastHeardFrom();
buf.append("<td align=\"right\">").append(DataHelper.formatDuration(time)).append("</td>");
time=now - prof.getLastSendSuccessful();
buf.append("<td align=\"right\">").append(DataHelper.formatDuration(time)).append("</td>");
time=now - prof.getLastSendFailed();
buf.append("<td align=\"right\">").append(DataHelper.formatDuration(time)).append("</td>");
buf.append("<td align=\"right\">").append(avg(prof,10 * 60 * 1000l)).append("</td>");
buf.append("<td align=\"right\">").append(avg(prof,60 * 60 * 1000l)).append("</td>");
buf.append("<td align=\"right\">").append(avg(prof,24 * 60 * 60* 1000l)).append("</td>");
DBHistory dbh=prof.getDBHistory();
if (dbh != null) {
buf.append("<td align=\"right\">").append(dbh.getSuccessfulLookups()).append("</td>");
buf.append("<td align=\"right\">").append(dbh.getFailedLookups()).append("</td>");
buf.append("<td align=\"right\">").append(dbh.getUnpromptedDbStoreNew()).append("</td>");
buf.append("<td align=\"right\">").append(dbh.getUnpromptedDbStoreOld()).append("</td>");
buf.append("<td align=\"right\">").append(davg(dbh,60 * 60 * 1000l)).append("</td>");
buf.append("<td align=\"right\">").append(davg(dbh,24 * 60 * 60* 1000l)).append("</td>");
}
}
buf.append("</table>");
buf.append("<h3>").append(_("Thresholds:")).append("</h3>");
buf.append("<p><b>").append(_("Speed")).append(":</b> ").append(num(_organizer.getSpeedThreshold())).append(" (").append(fast).append(" fast peers)<br>");
buf.append("<b>").append(_("Capacity")).append(":</b> ").append(num(_organizer.getCapacityThreshold())).append(" (").append(reliable).append(" high capacity peers)<br>");
buf.append("<b>").append(_("Integration")).append(":</b> ").append(num(_organizer.getIntegrationThreshold())).append(" (").append(integrated).append(" well integrated peers)</p>");
buf.append("<h3>").append(_("Definitions")).append(":</h3><ul>");
buf.append("<li><b>").append(_("groups")).append("</b>: ").append(_("as determined by the profile organizer")).append("</li>");
buf.append("<li><b>").append(_("caps")).append("</b>: ").append(_("capabilities in the netDb, not used to determine profiles")).append("</li>");
buf.append("<li><b>").append(_("speed")).append("</b>: ").append(_("peak throughput (bytes per second) over a 1 minute period that the peer has sustained in a single tunnel")).append("</li>");
buf.append("<li><b>").append(_("capacity")).append("</b>: ").append(_("how many tunnels can we ask them to join in an hour?")).append("</li>");
buf.append("<li><b>").append(_("integration")).append("</b>: ").append(_("how many new peers have they told us about lately?")).append("</li>");
buf.append("<li><b>").append(_("status")).append("</b>: ").append(_("is the peer banned, or unreachable, or failing tunnel tests?")).append("</li>");
buf.append("</ul></i>");
out.write(buf.toString());
out.flush();
}
