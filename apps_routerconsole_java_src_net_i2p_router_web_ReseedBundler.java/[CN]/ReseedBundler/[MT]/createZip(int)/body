{
  Hash me=_context.routerHash();
  int routerCount=0;
  int copied=0;
  long tooOld=System.currentTimeMillis() - 7 * 24 * 60* 60* 1000L;
  List<RouterInfo> infos=new ArrayList<RouterInfo>(_context.netDb().getRouters());
  Map<String,Hash> ipMap=new HashMap<String,Hash>(count);
  List<RouterInfo> toWrite=new ArrayList<RouterInfo>(count);
  Collections.shuffle(infos);
  for (  RouterInfo ri : infos) {
    if (copied >= count)     break;
    Hash key=ri.getIdentity().calculateHash();
    if (key.equals(me)) {
      continue;
    }
    if (ri.getPublished() < tooOld)     continue;
    if (ri.getCapabilities().contains("U"))     continue;
    if (ri.getCapabilities().contains("K"))     continue;
    Collection<RouterAddress> addrs=ri.getAddresses();
    if (addrs.isEmpty())     continue;
    String name=getRouterInfoName(key);
    boolean hasIntro=false;
    boolean hasIPv4=false;
    boolean dupIP=false;
    for (    RouterAddress addr : addrs) {
      if ("SSU".equals(addr.getTransportStyle()) && addr.getOption("ihost0") != null) {
        hasIntro=true;
        break;
      }
      String host=addr.getHost();
      if (host != null && host.contains(".")) {
        hasIPv4=true;
        Hash old=ipMap.put(host,key);
        if (old != null && !old.equals(key)) {
          dupIP=true;
          break;
        }
      }
    }
    if (dupIP)     continue;
    if (hasIntro)     continue;
    if (!hasIPv4)     continue;
    if (_context.commSystem().isInBadCountry(ri))     continue;
    toWrite.add(ri);
    copied++;
  }
  if (toWrite.isEmpty())   throw new IOException("No router infos to include. Reseed yourself first.");
  if (toWrite.size() < Math.min(count,MINIMUM))   throw new IOException("Not enough router infos to include, wanted " + count + " but only found "+ toWrite.size()+ ". Please try again later.");
  File rv=new File(_context.getTempDir(),"genreseed-" + _context.random().nextInt() + ".zip");
  ZipOutputStream zip=null;
  try {
    zip=new ZipOutputStream(new FileOutputStream(rv));
    for (    RouterInfo ri : toWrite) {
      String name=getRouterInfoName(ri.getIdentity().calculateHash());
      ZipEntry entry=new ZipEntry(name);
      entry.setTime(ri.getPublished());
      zip.putNextEntry(entry);
      ri.writeBytes(zip);
      zip.closeEntry();
    }
  }
 catch (  DataFormatException dfe) {
    rv.delete();
    IOException ioe=new IOException(dfe.getMessage());
    ioe.initCause(dfe);
    throw ioe;
  }
catch (  IOException ioe) {
    rv.delete();
    throw ioe;
  }
 finally {
    if (zip != null) {
      try {
        zip.finish();
        zip.close();
      }
 catch (      IOException ioe) {
        rv.delete();
        throw ioe;
      }
    }
  }
  return rv;
}
