{
  File workDir=new File(I2PAppContext.getGlobalContext().getTempDir(),"jetty-work");
  boolean workDirRemoved=FileUtil.rmdir(workDir,false);
  if (!workDirRemoved)   System.err.println("ERROR: Unable to remove Jetty temporary work directory");
  boolean workDirCreated=workDir.mkdirs();
  if (!workDirCreated)   System.err.println("ERROR: Unable to create Jetty temporary work directory");
  _server=new Server();
  boolean rewrite=false;
  Properties props=webAppProperties();
  if (props.size() <= 0) {
    props.setProperty(PREFIX + ROUTERCONSOLE + ENABLED,"true");
    rewrite=true;
  }
  File app=new File(_webAppsDir);
  if (!app.isAbsolute()) {
    app=new File(I2PAppContext.getGlobalContext().getBaseDir(),_webAppsDir);
    try {
      _webAppsDir=app.getCanonicalPath();
    }
 catch (    IOException ioe) {
    }
  }
  if (!_webAppsDir.endsWith("/"))   _webAppsDir+='/';
  try {
    StringTokenizer tok=new StringTokenizer(_listenHost," ,");
    int boundAddresses=0;
    while (tok.hasMoreTokens()) {
      String host=tok.nextToken().trim();
      try {
        if (host.indexOf(":") >= 0)         _server.addListener('[' + host + "]:"+ _listenPort);
 else         _server.addListener(host + ':' + _listenPort);
        boundAddresses++;
      }
 catch (      IOException ioe) {
        System.err.println("Unable to bind routerconsole to " + host + " port "+ _listenPort+ ' '+ ioe);
      }
    }
    if (boundAddresses <= 0) {
      System.err.println("Unable to bind routerconsole to any address on port " + _listenPort);
      return;
    }
    _server.setRootWebApp(ROUTERCONSOLE);
    WebApplicationContext wac=_server.addWebApplication("/",_webAppsDir + ROUTERCONSOLE + ".war");
    File tmpdir=new File(workDir,ROUTERCONSOLE + "-" + _listenPort);
    tmpdir.mkdir();
    wac.setTempDirectory(tmpdir);
    initialize(wac);
    File dir=new File(_webAppsDir);
    String fileNames[]=dir.list(WarFilenameFilter.instance());
    if (fileNames != null) {
      for (int i=0; i < fileNames.length; i++) {
        try {
          String appName=fileNames[i].substring(0,fileNames[i].lastIndexOf(".war"));
          String enabled=props.getProperty(PREFIX + appName + ENABLED);
          if (!"false".equals(enabled)) {
            String path=new File(dir,fileNames[i]).getCanonicalPath();
            wac=_server.addWebApplication("/" + appName,path);
            tmpdir=new File(workDir,appName + "-" + _listenPort);
            tmpdir.mkdir();
            wac.setTempDirectory(tmpdir);
            initialize(wac);
            if (enabled == null) {
              props.setProperty(PREFIX + appName + ENABLED,"true");
              rewrite=true;
            }
          }
        }
 catch (        IOException ioe) {
          System.err.println("Error resolving '" + fileNames[i] + "' in '"+ dir);
        }
      }
    }
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
  if (rewrite)   storeWebAppProperties(props);
  try {
    _server.start();
  }
 catch (  Throwable me) {
    System.err.println("WARNING: Error starting one or more listeners of the Router Console server.\n" + "If your console is still accessible at http://127.0.0.1:7657/,\n" + "this may be a problem only with binding to the IPV6 address ::1.\n"+ "If so, you may ignore this error, or remove the\n"+ "\"::1,\" in the \"clientApp.0.args\" line of the clients.config file.\n"+ "Exception: "+ me);
  }
  try {
    SysTray tray=SysTray.getInstance();
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  NewsFetcher fetcher=NewsFetcher.getInstance(I2PAppContext.getGlobalContext());
  I2PThread t=new I2PThread(fetcher,"NewsFetcher");
  t.setDaemon(true);
  t.start();
  I2PThread st=new I2PThread(new StatSummarizer(),"StatSummarizer");
  st.setDaemon(true);
  st.start();
}
