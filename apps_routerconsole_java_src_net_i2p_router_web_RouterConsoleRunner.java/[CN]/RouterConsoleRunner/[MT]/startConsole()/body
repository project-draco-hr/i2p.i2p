{
  File workDir=new SecureDirectory(I2PAppContext.getGlobalContext().getTempDir(),"jetty-work");
  boolean workDirRemoved=FileUtil.rmdir(workDir,false);
  if (!workDirRemoved)   System.err.println("ERROR: Unable to remove Jetty temporary work directory");
  boolean workDirCreated=workDir.mkdirs();
  if (!workDirCreated)   System.err.println("ERROR: Unable to create Jetty temporary work directory");
  System.setProperty("jetty.class.path",I2PAppContext.getGlobalContext().getBaseDir() + "/lib/routerconsole.jar");
  _server=new Server();
  String log=I2PAppContext.getGlobalContext().getProperty("routerconsole.log");
  if (log != null) {
    File logFile=new File(log);
    if (!logFile.isAbsolute())     logFile=new File(I2PAppContext.getGlobalContext().getLogDir(),"logs/" + log);
    try {
      _server.setRequestLog(new NCSARequestLog(logFile.getAbsolutePath()));
    }
 catch (    IOException ioe) {
      System.err.println("ERROR: Unable to create Jetty log: " + ioe);
    }
  }
  boolean rewrite=false;
  Properties props=webAppProperties();
  if (props.isEmpty()) {
    props.setProperty(PREFIX + ROUTERCONSOLE + ENABLED,"true");
    rewrite=true;
  }
  File app=new File(_webAppsDir);
  if (!app.isAbsolute()) {
    app=new File(I2PAppContext.getGlobalContext().getBaseDir(),_webAppsDir);
    try {
      _webAppsDir=app.getCanonicalPath();
    }
 catch (    IOException ioe) {
    }
  }
  if (!_webAppsDir.endsWith("/"))   _webAppsDir+='/';
  List<String> notStarted=new ArrayList();
  WebApplicationHandler baseHandler=null;
  try {
    int boundAddresses=0;
    if (_listenPort != null) {
      StringTokenizer tok=new StringTokenizer(_listenHost," ,");
      while (tok.hasMoreTokens()) {
        String host=tok.nextToken().trim();
        try {
          Integer lport=Integer.parseInt(_listenPort);
          InetAddrPort iap=new InetAddrPort(host,lport);
          SocketListener lsnr=new SocketListener(iap);
          lsnr.setMinThreads(1);
          lsnr.setMaxThreads(24);
          lsnr.setMaxIdleTimeMs(90 * 1000);
          lsnr.setName("ConsoleSocket");
          _server.addListener(lsnr);
          boundAddresses++;
        }
 catch (        NumberFormatException nfe) {
          System.err.println("Unable to bind routerconsole to " + host + " port "+ _listenPort+ ' '+ nfe);
        }
catch (        IOException ioe) {
          System.err.println("Unable to bind routerconsole to " + host + " port "+ _listenPort+ ' '+ ioe);
        }
      }
    }
    int sslPort=0;
    if (_sslListenPort != null) {
      try {
        sslPort=Integer.parseInt(_sslListenPort);
      }
 catch (      NumberFormatException nfe) {
      }
      if (sslPort <= 0)       System.err.println("Bad routerconsole SSL port " + _sslListenPort);
    }
    if (sslPort > 0) {
      I2PAppContext ctx=I2PAppContext.getGlobalContext();
      File keyStore=new File(ctx.getConfigDir(),"keystore/console.ks");
      if (verifyKeyStore(keyStore)) {
        StringTokenizer tok=new StringTokenizer(_sslListenHost," ,");
        while (tok.hasMoreTokens()) {
          String host=tok.nextToken().trim();
          InetAddrPort iap=new InetAddrPort(host,sslPort);
          try {
            SslListener ssll=new SslListener(iap);
            ssll.setKeystore(keyStore.getAbsolutePath());
            ssll.setPassword(ctx.getProperty(PROP_KEYSTORE_PASSWORD,DEFAULT_KEYSTORE_PASSWORD));
            ssll.setKeyPassword(ctx.getProperty(PROP_KEY_PASSWORD,"thisWontWork"));
            ssll.setMinThreads(1);
            ssll.setMaxThreads(24);
            ssll.setMaxIdleTimeMs(90 * 1000);
            ssll.setName("ConsoleSocket");
            _server.addListener(ssll);
            boundAddresses++;
          }
 catch (          Exception e) {
            System.err.println("Unable to bind routerconsole to " + host + " port "+ sslPort+ " for SSL: "+ e);
          }
        }
      }
 else {
        System.err.println("Unable to create or access keystore for SSL: " + keyStore.getAbsolutePath());
      }
    }
    if (boundAddresses <= 0) {
      System.err.println("Unable to bind routerconsole to any address on port " + _listenPort + (sslPort > 0 ? (" or SSL port " + sslPort) : ""));
      return;
    }
    _server.setRootWebApp(ROUTERCONSOLE);
    WebApplicationContext wac=_server.addWebApplication("/",_webAppsDir + ROUTERCONSOLE + ".war");
    File tmpdir=new SecureDirectory(workDir,ROUTERCONSOLE + "-" + (_listenPort != null ? _listenPort : _sslListenPort));
    tmpdir.mkdir();
    wac.setTempDirectory(tmpdir);
    baseHandler=new LocaleWebAppHandler(I2PAppContext.getGlobalContext());
    wac.addHandler(0,baseHandler);
    initialize(wac);
    File dir=new File(_webAppsDir);
    String fileNames[]=dir.list(WarFilenameFilter.instance());
    if (fileNames != null) {
      for (int i=0; i < fileNames.length; i++) {
        try {
          String appName=fileNames[i].substring(0,fileNames[i].lastIndexOf(".war"));
          String enabled=props.getProperty(PREFIX + appName + ENABLED);
          if (!"false".equals(enabled)) {
            String path=new File(dir,fileNames[i]).getCanonicalPath();
            tmpdir=new SecureDirectory(workDir,appName + "-" + (_listenPort != null ? _listenPort : _sslListenPort));
            WebAppStarter.addWebApp(I2PAppContext.getGlobalContext(),_server,appName,path,tmpdir);
            if (enabled == null) {
              props.setProperty(PREFIX + appName + ENABLED,"true");
              rewrite=true;
            }
          }
 else {
            notStarted.add(appName);
          }
        }
 catch (        IOException ioe) {
          System.err.println("Error resolving '" + fileNames[i] + "' in '"+ dir);
        }
      }
    }
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
  if (rewrite)   storeWebAppProperties(props);
  try {
    _server.start();
  }
 catch (  Throwable me) {
    System.err.println("WARNING: Error starting one or more listeners of the Router Console server.\n" + "If your console is still accessible at http://127.0.0.1:7657/,\n" + "this may be a problem only with binding to the IPV6 address ::1.\n"+ "If so, you may ignore this error, or remove the\n"+ "\"::1,\" in the \"clientApp.0.args\" line of the clients.config file.\n"+ "Exception: "+ me);
    me.printStackTrace();
  }
  if (baseHandler != null) {
    for (int i=0; i < notStarted.size(); i++) {
      try {
        baseHandler.mapPathToServlet('/' + notStarted.get(i) + "/*","net.i2p.router.web.jsp.nowebapp_jsp");
      }
 catch (      Throwable me) {
        System.err.println(me);
      }
    }
  }
  Thread t=new I2PAppThread(new StatSummarizer(),"StatSummarizer",true);
  t.start();
  List<RouterContext> contexts=RouterContext.listContexts();
  if (contexts != null) {
    RouterContext ctx=contexts.get(0);
    NewsFetcher fetcher=NewsFetcher.getInstance(ctx);
    Thread newsThread=new I2PAppThread(fetcher,"NewsFetcher",true);
    newsThread.start();
    if (PluginStarter.pluginsEnabled(ctx)) {
      t=new I2PAppThread(new PluginStarter(ctx),"PluginStarter",true);
      t.start();
      ctx.addShutdownTask(new PluginStopper(ctx));
    }
    ctx.addShutdownTask(new NewsShutdown(fetcher,newsThread));
    ctx.addShutdownTask(new ServerShutdown());
  }
}
