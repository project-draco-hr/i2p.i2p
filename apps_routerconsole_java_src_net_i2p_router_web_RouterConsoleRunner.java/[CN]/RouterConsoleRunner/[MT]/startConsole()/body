{
  File workDir=new SecureDirectory(_context.getTempDir(),"jetty-work");
  boolean workDirRemoved=FileUtil.rmdir(workDir,false);
  if (!workDirRemoved)   System.err.println("ERROR: Unable to remove Jetty temporary work directory");
  boolean workDirCreated=workDir.mkdirs();
  if (!workDirCreated)   System.err.println("ERROR: Unable to create Jetty temporary work directory");
  System.setProperty("jetty.class.path",_context.getBaseDir() + "/lib/routerconsole.jar");
  _server=new Server();
  _server.setGracefulShutdown(1000);
  LinkedBlockingQueue<Runnable> lbq=new LinkedBlockingQueue<Runnable>(4 * MAX_THREADS);
  QueuedThreadPool qtp=new QueuedThreadPool(lbq);
  qtp.setMaxIdleTimeMs(MAX_IDLE_TIME);
  qtp.setName(THREAD_NAME);
  qtp.setDaemon(true);
  _server.setThreadPool(qtp);
  HandlerCollection hColl=new HandlerCollection();
  ContextHandlerCollection chColl=new ContextHandlerCollection();
  _server.setHandler(hColl);
  hColl.addHandler(chColl);
  hColl.addHandler(new DefaultHandler());
  String log=_context.getProperty("routerconsole.log");
  if (log != null) {
    File logFile=new File(log);
    if (!logFile.isAbsolute())     logFile=new File(_context.getLogDir(),"logs/" + log);
    try {
      RequestLogHandler rhl=new RequestLogHandler();
      rhl.setRequestLog(new NCSARequestLog(logFile.getAbsolutePath()));
      hColl.addHandler(rhl);
    }
 catch (    Exception ioe) {
      System.err.println("ERROR: Unable to create Jetty log: " + ioe);
    }
  }
  boolean rewrite=false;
  Properties props=webAppProperties();
  if (props.isEmpty()) {
    props.setProperty(PREFIX + ROUTERCONSOLE + ENABLED,"true");
    rewrite=true;
  }
  File app=new File(_webAppsDir);
  if (!app.isAbsolute()) {
    app=new File(_context.getBaseDir(),_webAppsDir);
    try {
      _webAppsDir=app.getCanonicalPath();
    }
 catch (    IOException ioe) {
    }
  }
  if (!_webAppsDir.endsWith("/"))   _webAppsDir+='/';
  HandlerWrapper rootWebApp=null;
  ServletHandler rootServletHandler=null;
  List<Connector> connectors=new ArrayList<Connector>(4);
  try {
    int boundAddresses=0;
    SortedSet<String> addresses=Addresses.getAllAddresses();
    boolean hasIPV4=addresses.contains("0.0.0.0");
    boolean hasIPV6=addresses.contains("0:0:0:0:0:0:0:0");
    int lport=0;
    if (_listenPort != null) {
      try {
        lport=Integer.parseInt(_listenPort);
      }
 catch (      NumberFormatException nfe) {
      }
      if (lport <= 0)       System.err.println("Bad routerconsole port " + _listenPort);
    }
    if (lport > 0) {
      List<String> hosts=new ArrayList<String>(2);
      StringTokenizer tok=new StringTokenizer(_listenHost," ,");
      while (tok.hasMoreTokens()) {
        String host=tok.nextToken().trim();
        try {
          InetAddress test=InetAddress.getByName(host);
          if ((!hasIPV6) && (!(test instanceof Inet4Address)))           throw new IOException("IPv6 addresses unsupported");
          if ((!hasIPV4) && (test instanceof Inet4Address))           throw new IOException("IPv4 addresses unsupported");
          ServerSocket testSock=null;
          try {
            testSock=new ServerSocket();
            InetSocketAddress isa=new InetSocketAddress(host,0);
            testSock.bind(isa);
          }
  finally {
            if (testSock != null)             try {
              testSock.close();
            }
 catch (            IOException ioe) {
            }
          }
          AbstractConnector lsnr;
          if (SystemVersion.isJava6() && !SystemVersion.isGNU()) {
            SelectChannelConnector slsnr=new SelectChannelConnector();
            slsnr.setUseDirectBuffers(false);
            lsnr=slsnr;
          }
 else {
            lsnr=new SocketConnector();
          }
          lsnr.setHost(host);
          lsnr.setPort(lport);
          lsnr.setMaxIdleTime(90 * 1000);
          lsnr.setName("ConsoleSocket");
          lsnr.setAcceptors(1);
          connectors.add(lsnr);
          boundAddresses++;
          hosts.add(host);
        }
 catch (        Exception ioe) {
          System.err.println("Unable to bind routerconsole to " + host + " port "+ _listenPort+ ": "+ ioe);
          System.err.println("You may ignore this warning if the console is still available at http://localhost:" + _listenPort);
        }
      }
      if (hosts.isEmpty()) {
        _context.portMapper().register(PortMapper.SVC_CONSOLE,lport);
      }
 else {
        Collections.sort(hosts,new HostComparator());
        _context.portMapper().register(PortMapper.SVC_CONSOLE,hosts.get(0),lport);
      }
    }
    int sslPort=0;
    if (_sslListenPort != null) {
      try {
        sslPort=Integer.parseInt(_sslListenPort);
      }
 catch (      NumberFormatException nfe) {
      }
      if (sslPort <= 0)       System.err.println("Bad routerconsole SSL port " + _sslListenPort);
    }
    if (sslPort > 0) {
      File keyStore=new File(_context.getConfigDir(),"keystore/console.ks");
      if (verifyKeyStore(keyStore)) {
        SslContextFactory sslFactory=new SslContextFactory(keyStore.getAbsolutePath());
        sslFactory.setKeyStorePassword(_context.getProperty(PROP_KEYSTORE_PASSWORD,DEFAULT_KEYSTORE_PASSWORD));
        sslFactory.setKeyManagerPassword(_context.getProperty(PROP_KEY_PASSWORD,"thisWontWork"));
        sslFactory.addExcludeProtocols(I2PSSLSocketFactory.EXCLUDE_PROTOCOLS.toArray(new String[I2PSSLSocketFactory.EXCLUDE_PROTOCOLS.size()]));
        sslFactory.addExcludeCipherSuites(I2PSSLSocketFactory.EXCLUDE_CIPHERS.toArray(new String[I2PSSLSocketFactory.EXCLUDE_CIPHERS.size()]));
        List<String> hosts=new ArrayList<String>(2);
        StringTokenizer tok=new StringTokenizer(_sslListenHost," ,");
        while (tok.hasMoreTokens()) {
          String host=tok.nextToken().trim();
          try {
            InetAddress test=InetAddress.getByName(host);
            if ((!hasIPV6) && (!(test instanceof Inet4Address)))             throw new IOException("IPv6 addresses unsupported");
            if ((!hasIPV4) && (test instanceof Inet4Address))             throw new IOException("IPv4 addresses unsupported");
            ServerSocket testSock=null;
            try {
              testSock=new ServerSocket();
              InetSocketAddress isa=new InetSocketAddress(host,0);
              testSock.bind(isa);
            }
  finally {
              if (testSock != null)               try {
                testSock.close();
              }
 catch (              IOException ioe) {
              }
            }
            AbstractConnector ssll;
            if (SystemVersion.isJava6() && !SystemVersion.isGNU()) {
              SslSelectChannelConnector sssll=new SslSelectChannelConnector(sslFactory);
              sssll.setUseDirectBuffers(false);
              ssll=sssll;
            }
 else {
              SslSocketConnector sssll=new SslSocketConnector(sslFactory);
              ssll=sssll;
            }
            ssll.setHost(host);
            ssll.setPort(sslPort);
            ssll.setMaxIdleTime(90 * 1000);
            ssll.setName("ConsoleSocket");
            ssll.setAcceptors(1);
            connectors.add(ssll);
            boundAddresses++;
            hosts.add(host);
          }
 catch (          Exception e) {
            System.err.println("Unable to bind routerconsole to " + host + " port "+ sslPort+ " for SSL: "+ e);
            if (SystemVersion.isGNU())             System.err.println("Probably because GNU classpath does not support Sun keystores");
            System.err.println("You may ignore this warning if the console is still available at https://localhost:" + sslPort);
          }
        }
        if (hosts.isEmpty()) {
          _context.portMapper().register(PortMapper.SVC_HTTPS_CONSOLE,sslPort);
        }
 else {
          Collections.sort(hosts,new HostComparator());
          _context.portMapper().register(PortMapper.SVC_HTTPS_CONSOLE,hosts.get(0),sslPort);
        }
      }
 else {
        System.err.println("Unable to create or access keystore for SSL: " + keyStore.getAbsolutePath());
      }
    }
    if (boundAddresses <= 0) {
      System.err.println("Unable to bind routerconsole to any address on port " + _listenPort + (sslPort > 0 ? (" or SSL port " + sslPort) : ""));
      return;
    }
    qtp.setMinThreads(MIN_THREADS + (2 * boundAddresses));
    qtp.setMaxThreads(MAX_THREADS + (2 * boundAddresses));
    File tmpdir=new SecureDirectory(workDir,ROUTERCONSOLE + "-" + (_listenPort != null ? _listenPort : _sslListenPort));
    tmpdir.mkdir();
    rootServletHandler=new ServletHandler();
    rootWebApp=new LocaleWebAppHandler(_context,"/",_webAppsDir + ROUTERCONSOLE + ".war",tmpdir,rootServletHandler);
    initialize(_context,(WebAppContext)(rootWebApp.getHandler()));
    chColl.addHandler(rootWebApp);
  }
 catch (  Exception ioe) {
    ioe.printStackTrace();
  }
  Resource.setDefaultUseCaches(false);
  try {
    _server.start();
  }
 catch (  Throwable me) {
    System.err.println("Error starting the Router Console server: " + me);
    me.printStackTrace();
  }
  if (_server.isRunning()) {
    boolean error=false;
    for (    Connector conn : connectors) {
      try {
        _server.addConnector(conn);
        conn.start();
      }
 catch (      Throwable me) {
        try {
          _server.removeConnector(conn);
        }
 catch (        Throwable t) {
          t.printStackTrace();
        }
        System.err.println("WARNING: Error starting " + conn + ": "+ me);
        me.printStackTrace();
        error=true;
      }
    }
    if (error) {
      String port=(_listenPort != null) ? _listenPort : ((_sslListenPort != null) ? _sslListenPort : "7657");
      System.err.println("WARNING: Error starting one or more listeners of the Router Console server.\n" + "If your console is still accessible at http://127.0.0.1:" + port + "/,\n"+ "this may be a problem only with binding to the IPV6 address ::1.\n"+ "If so, you may ignore this error, or remove the\n"+ "\"::1,\" in the \"clientApp.0.args\" line of the clients.config file.");
    }
  }
  List<String> notStarted=new ArrayList<String>();
  if (_server.isRunning()) {
    File dir=new File(_webAppsDir);
    String fileNames[]=dir.list(WarFilenameFilter.instance());
    if (fileNames != null) {
      for (int i=0; i < fileNames.length; i++) {
        String appName=fileNames[i].substring(0,fileNames[i].lastIndexOf(".war"));
        String enabled=props.getProperty(PREFIX + appName + ENABLED);
        if (!"false".equals(enabled)) {
          try {
            String path=new File(dir,fileNames[i]).getCanonicalPath();
            WebAppStarter.startWebApp(_context,chColl,appName,path);
            if (enabled == null) {
              props.setProperty(PREFIX + appName + ENABLED,"true");
              rewrite=true;
            }
          }
 catch (          Throwable t) {
            System.err.println("ERROR: Failed to start " + appName + ' '+ t);
            t.printStackTrace();
            notStarted.add(appName);
          }
        }
 else {
          notStarted.add(appName);
        }
      }
      changeState(RUNNING);
      if (_mgr != null)       _mgr.register(this);
    }
  }
 else {
    System.err.println("ERROR: Router console did not start, not starting webapps");
    changeState(START_FAILED);
  }
  if (rewrite)   storeWebAppProperties(_context,props);
  if (rootServletHandler != null && notStarted.size() > 0) {
    ServletHolder noWebApp=rootServletHandler.getServlet("net.i2p.router.web.jsp.nowebapp_jsp");
    for (int i=0; i < notStarted.size(); i++) {
      try {
        if (noWebApp != null) {
          String path='/' + notStarted.get(i);
          rootServletHandler.addServletWithMapping(noWebApp,path + ".jsp");
          rootServletHandler.addServletWithMapping(noWebApp,path + "/*");
        }
 else {
          System.err.println("Can't find nowebapp.jsp?");
        }
      }
 catch (      Throwable me) {
        System.err.println(me);
        me.printStackTrace();
      }
    }
  }
  Thread t=new I2PAppThread(new StatSummarizer(),"StatSummarizer",true);
  t.setPriority(Thread.NORM_PRIORITY - 1);
  t.start();
  ConsoleUpdateManager um=new ConsoleUpdateManager(_context,_mgr,null);
  um.start();
  NewsManager nm=new NewsManager(_context,_mgr,null);
  nm.startup();
  if (PluginStarter.pluginsEnabled(_context)) {
    t=new I2PAppThread(new PluginStarter(_context),"PluginStarter",true);
    t.setPriority(Thread.NORM_PRIORITY - 1);
    t.start();
  }
  if (_mgr == null)   _context.addShutdownTask(new ServerShutdown());
  ConfigServiceHandler.registerSignalHandler(_context);
}
