{
  long end=_context.clock().now();
  if (periodCount <= 0)   periodCount=SummaryListener.PERIODS;
  if (periodCount > SummaryListener.PERIODS)   periodCount=SummaryListener.PERIODS;
  long period=60 * 1000;
  long start=end - period * periodCount;
  long begin=System.currentTimeMillis();
  try {
    RrdGraphDef def=new RrdGraphDef();
    def.setTimePeriod(start / 1000,end / 1000);
    String title="Bandwidth usage";
    if (!hideTitle)     def.setTitle(title);
    String sendName=SummaryListener.createName(_context,"bw.sendRate.60000");
    String recvName=SummaryListener.createName(_context,"bw.recvRate.60000");
    def.datasource(sendName,sendName,sendName,"AVERAGE","MEMORY");
    def.datasource(recvName,recvName,recvName,"AVERAGE","MEMORY");
    def.area(sendName,Color.BLUE,"Outbound bytes/second");
    def.area(recvName,Color.RED,"Inbound bytes/second@r");
    if (!hideLegend) {
      def.gprint(sendName,"AVERAGE","outbound average: @2@sbytes/second");
      def.gprint(sendName,"MAX"," max: @2@sbytes/second@r");
      def.gprint(recvName,"AVERAGE","inbound average: @2bytes/second@s");
      def.gprint(recvName,"MAX"," max: @2@sbytes/second@r");
    }
    if (!showCredit)     def.setShowSignature(false);
    if (hideLegend)     def.setShowLegend(false);
    if (hideGrid) {
      def.setGridX(false);
      def.setGridY(false);
    }
    def.setAntiAliasing(false);
    RrdGraph graph=new RrdGraph(def);
    byte data[]=null;
    if ((width <= 0) || (height <= 0))     data=graph.getPNGBytes();
 else     data=graph.getPNGBytes(width,height);
    long timeToPlot=System.currentTimeMillis() - begin;
    out.write(data);
    return true;
  }
 catch (  RrdException re) {
    _log.error("Error rendering",re);
    throw new IOException("Error plotting: " + re.getMessage());
  }
catch (  IOException ioe) {
    _log.error("Error rendering",ioe);
    throw ioe;
  }
}
