{
  long end=_context.clock().now() - 60 * 1000;
  if (width > GraphHelper.MAX_X)   width=GraphHelper.MAX_X;
  if (height > GraphHelper.MAX_Y)   height=GraphHelper.MAX_Y;
  if (periodCount <= 0)   periodCount=SummaryListener.PERIODS;
  if (periodCount > SummaryListener.PERIODS)   periodCount=SummaryListener.PERIODS;
  long period=60 * 1000;
  long start=end - period * periodCount;
  try {
    RrdGraphDef def=new RrdGraphDef();
    def.setTimePeriod(start / 1000,0);
    def.setLowerLimit(0d);
    def.setBaseValue(1024);
    String title=_("Bandwidth usage");
    if (!hideTitle)     def.setTitle(title);
    String sendName=SummaryListener.createName(_context,"bw.sendRate.60000");
    String recvName=SummaryListener.createName(_context,"bw.recvRate.60000");
    def.datasource(sendName,sendName,sendName,"AVERAGE","MEMORY");
    def.datasource(recvName,recvName,recvName,"AVERAGE","MEMORY");
    def.area(sendName,Color.BLUE,_("Outbound bytes/sec"));
    def.line(recvName,Color.RED,_("Inbound bytes/sec") + "@r",3);
    if (!hideLegend) {
      def.gprint(sendName,"AVERAGE",_("out average") + ": @2@s" + _("bytes/sec"));
      def.gprint(sendName,"MAX",' ' + _("max") + ": @2@s"+ _("bytes/sec")+ "@r");
      def.gprint(recvName,"AVERAGE",_("in average") + ":  @2@s" + _("bytes/sec"));
      def.gprint(recvName,"MAX",' ' + _("max") + ": @2@s"+ _("bytes/sec")+ "@r");
    }
    if (!showCredit)     def.setShowSignature(false);
    if (hideLegend)     def.setShowLegend(false);
    if (hideGrid) {
      def.setGridX(false);
      def.setGridY(false);
    }
    def.setAntiAliasing(false);
    RrdGraph graph=new RrdGraph(def);
    byte data[]=null;
    if ((width <= 0) || (height <= 0))     data=graph.getPNGBytes();
 else     data=graph.getPNGBytes(width,height);
    out.write(data);
    return true;
  }
 catch (  RrdException re) {
    _log.error("Error rendering",re);
    throw new IOException("Error plotting: " + re.getMessage());
  }
catch (  IOException ioe) {
    _log.error("Error rendering",ioe);
    throw ioe;
  }
catch (  OutOfMemoryError oom) {
    _log.error("Error rendering",oom);
    throw new IOException("Error plotting: " + oom.getMessage());
  }
}
