{
  RateStat rate=_context.statManager().getRate(name);
  String d=rate.getDescription();
  if (!"".equals(d)) {
    buf.append("<i>");
    buf.append(d);
    buf.append("</i><br>");
  }
  if (rate.getLifetimeEventCount() <= 0) {
    buf.append("No lifetime events<br>");
    return;
  }
  long now=_context.clock().now();
  long periods[]=rate.getPeriods();
  Arrays.sort(periods);
  buf.append("<ul>");
  for (int i=0; i < periods.length; i++) {
    Rate curRate=rate.getRate(periods[i]);
    if (curRate.getLastCoalesceDate() <= curRate.getCreationDate())     break;
    buf.append("<li>");
    renderPeriod(buf,periods[i],"rate");
    if (curRate.getLastEventCount() > 0) {
      buf.append("<i>avg value:</i> (");
      buf.append(num(curRate.getAverageValue()));
      buf.append(" peak ");
      buf.append(num(curRate.getExtremeAverageValue()));
      buf.append(", [");
      buf.append(pct(curRate.getPercentageOfExtremeValue()));
      buf.append(" of max");
      buf.append(", and ");
      buf.append(pct(curRate.getPercentageOfLifetimeValue()));
      buf.append(" of lifetime average]");
      buf.append(")");
      buf.append(" <i>highest total period value:</i> (");
      buf.append(num(curRate.getExtremeTotalValue()));
      buf.append(")");
      if (curRate.getLifetimeTotalEventTime() > 0) {
        buf.append(" <i>saturation:</i> (");
        buf.append(pct(curRate.getLastEventSaturation()));
        buf.append(")");
        buf.append(" <i>saturated limit:</i> (");
        buf.append(num(curRate.getLastSaturationLimit()));
        buf.append(")");
        buf.append(" <i>peak saturation:</i> (");
        buf.append(pct(curRate.getExtremeEventSaturation()));
        buf.append(")");
        buf.append(" <i>peak saturated limit:</i> (");
        buf.append(num(curRate.getExtremeSaturationLimit()));
        buf.append(")");
      }
      buf.append(" <i>events:</i> ");
      buf.append(curRate.getLastEventCount());
      buf.append(" <i>in this period which ended:</i> ");
      buf.append(DataHelper.formatDuration(now - curRate.getLastCoalesceDate()));
      buf.append(" ago ");
    }
 else {
      buf.append(" <i>No events</i> ");
    }
    long numPeriods=curRate.getLifetimePeriods();
    if (numPeriods > 0) {
      double avgFrequency=curRate.getLifetimeEventCount() / (double)numPeriods;
      double peakFrequency=curRate.getExtremeEventCount();
      buf.append(" (lifetime average: ");
      buf.append(num(avgFrequency));
      buf.append(", peak average: ");
      buf.append(curRate.getExtremeEventCount());
      buf.append(")");
    }
    if (curRate.getSummaryListener() != null) {
      buf.append(" <a href=\"viewstat.jsp?stat=").append(name);
      buf.append("&amp;period=").append(periods[i]);
      buf.append("\" title=\"Render summarized data\">render</a>");
      buf.append(" <a href=\"viewstat.jsp?stat=").append(name);
      buf.append("&amp;period=").append(periods[i]).append("&amp;showEvents=true\" title=\"Render summarized event counts\">events</a>");
      buf.append(" (as <a href=\"viewstat.jsp?stat=").append(name);
      buf.append("&amp;period=").append(periods[i]);
      buf.append("&amp;format=xml\" title=\"Dump stat history as XML\">XML</a>");
      buf.append(" in a format <a href=\"http://people.ee.ethz.ch/~oetiker/webtools/rrdtool\">RRDTool</a> understands)");
    }
    buf.append("</li>");
  }
  buf.append("<li><b>lifetime average value:</b> ");
  buf.append(num(rate.getLifetimeAverageValue()));
  buf.append(" over ");
  buf.append(rate.getLifetimeEventCount());
  buf.append(" events<br></li>");
  buf.append("</ul>");
  buf.append("<br>");
}
