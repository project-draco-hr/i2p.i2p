{
  RateStat rs=_rate.getRateStat();
  long period=_rate.getPeriod();
  String baseName=rs.getName() + "." + period;
  _name=createName(_context,baseName);
  _eventName=createName(_context,baseName + ".events");
  File rrdFile=null;
  try {
    RrdBackendFactory factory=RrdBackendFactory.getFactory(getBackendName());
    String rrdDefName;
    if (_isPersistent) {
      File rrdDir=new SecureFile(_context.getRouterDir(),RRD_DIR);
      rrdFile=new File(rrdDir,RRD_PREFIX + _name + RRD_SUFFIX);
      rrdDefName=rrdFile.getAbsolutePath();
      if (rrdFile.exists()) {
        _db=new RrdDb(rrdDefName,factory);
        Archive arch=_db.getArchive(CF,STEPS);
        if (arch == null)         throw new IOException("No average CF in " + rrdDefName);
        _rows=arch.getRows();
        if (_log.shouldLog(Log.INFO))         _log.info("Existing RRD " + baseName + " ("+ rrdDefName+ ") with "+ _rows+ " rows consuming "+ _db.getRrdBackend().getLength()+ " bytes");
      }
 else {
        rrdDir.mkdir();
      }
    }
 else {
      rrdDefName=_name;
    }
    if (_db == null) {
      RrdDef def=new RrdDef(rrdDefName,now() / 1000,period / 1000);
      long heartbeat=period * 10 / 1000;
      def.addDatasource(_name,"GAUGE",heartbeat,Double.NaN,Double.NaN);
      def.addDatasource(_eventName,"GAUGE",heartbeat,0,Double.NaN);
      if (_isPersistent) {
        _rows=(int)Math.max(MIN_ROWS,Math.min(MAX_ROWS,THREE_MONTHS / period));
      }
 else {
        _rows=MIN_ROWS;
      }
      def.addArchive(CF,XFF,STEPS,_rows);
      _db=new RrdDb(def,factory);
      if (_isPersistent)       SecureFileOutputStream.setPerms(new File(rrdDefName));
      if (_log.shouldLog(Log.INFO))       _log.info("New RRD " + baseName + " ("+ rrdDefName+ ") with "+ _rows+ " rows consuming "+ _db.getRrdBackend().getLength()+ " bytes");
    }
    _sample=_db.createSample();
    _renderer=new SummaryRenderer(_context,this);
    _rate.setSummaryListener(this);
    return true;
  }
 catch (  OutOfMemoryError oom) {
    _log.error("Error starting RRD for stat " + baseName,oom);
  }
catch (  RrdException re) {
    _log.error("Error starting RRD for stat " + baseName,re);
    if (_isPersistent && rrdFile != null)     rrdFile.delete();
  }
catch (  IOException ioe) {
    _log.error("Error starting RRD for stat " + baseName,ioe);
  }
  return false;
}
