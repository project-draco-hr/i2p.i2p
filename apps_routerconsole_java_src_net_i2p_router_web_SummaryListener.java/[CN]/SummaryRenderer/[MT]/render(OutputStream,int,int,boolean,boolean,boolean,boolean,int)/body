{
  long end=_listener.now();
  if (periodCount <= 0)   periodCount=SummaryListener.PERIODS;
  if (periodCount > SummaryListener.PERIODS)   periodCount=SummaryListener.PERIODS;
  long start=end - _listener.getRate().getPeriod() * periodCount;
  long begin=System.currentTimeMillis();
  try {
    RrdGraphDef def=new RrdGraphDef();
    def.setTimePeriod(start / 1000,end / 1000);
    String title=_listener.getRate().getRateStat().getName() + " averaged for " + DataHelper.formatDuration(_listener.getRate().getPeriod());
    if (!hideTitle)     def.setTitle(title);
    String path=_listener.getData().getPath();
    String dsNames[]=_listener.getData().getDsNames();
    String plotName=null;
    String descr=null;
    if (showEvents) {
      plotName=dsNames[1];
      descr="Events per period";
    }
 else {
      plotName=dsNames[0];
      descr=_listener.getRate().getRateStat().getDescription();
    }
    def.datasource(plotName,path,plotName,"AVERAGE","MEMORY");
    def.area(plotName,Color.BLUE,descr + "@r");
    if (!hideLegend) {
      def.gprint(plotName,"AVERAGE","average: @2@s");
      def.gprint(plotName,"MAX"," max: @2@s@r");
    }
    if (hideLegend)     def.setShowLegend(false);
    if (hideGrid) {
      def.setGridX(false);
      def.setGridY(false);
    }
    def.setAntiAliasing(false);
    RrdGraph graph=new RrdGraph(def);
    System.out.println("Graph created");
    byte data[]=null;
    if ((width <= 0) || (height <= 0))     data=graph.getPNGBytes();
 else     data=graph.getPNGBytes(width,height);
    long timeToPlot=System.currentTimeMillis() - begin;
    out.write(data);
  }
 catch (  RrdException re) {
    _log.error("Error rendering",re);
    throw new IOException("Error plotting: " + re.getMessage());
  }
catch (  IOException ioe) {
    _log.error("Error rendering",ioe);
    throw ioe;
  }
}
