{
  long end=_listener.now() - 60 * 1000;
  if (periodCount <= 0)   periodCount=SummaryListener.PERIODS;
  if (periodCount > SummaryListener.PERIODS)   periodCount=SummaryListener.PERIODS;
  long start=end - _listener.getRate().getPeriod() * periodCount;
  try {
    RrdGraphDef def=new RrdGraphDef();
    def.setTimePeriod(start / 1000,0);
    def.setLowerLimit(0d);
    String name=_listener.getRate().getRateStat().getName();
    if ((name.startsWith("bw.") || name.indexOf("Size") >= 0 || name.indexOf("Bps") >= 0 || name.indexOf("memory") >= 0) && !showEvents)     def.setBaseValue(1024);
    String title=name;
    if (showEvents)     title=title + " events in ";
 else     title=title + " averaged for ";
    title=title + DataHelper.formatDuration(_listener.getRate().getPeriod());
    if (!hideTitle)     def.setTitle(title);
    String path=_listener.getData().getPath();
    String dsNames[]=_listener.getData().getDsNames();
    String plotName=null;
    String descr=null;
    if (showEvents) {
      plotName=dsNames[1];
      descr="Events per period";
    }
 else {
      plotName=dsNames[0];
      descr=_listener.getRate().getRateStat().getDescription();
    }
    def.datasource(plotName,path,plotName,"AVERAGE","MEMORY");
    def.area(plotName,Color.BLUE,descr + "@r");
    if (!hideLegend) {
      def.gprint(plotName,"AVERAGE","avg: @2@s");
      def.gprint(plotName,"MAX"," max: @2@s");
      def.gprint(plotName,"LAST"," now: @2@s@r");
    }
    if (!showCredit)     def.setShowSignature(false);
    if (hideLegend)     def.setShowLegend(false);
    if (hideGrid) {
      def.setGridX(false);
      def.setGridY(false);
    }
    def.setAntiAliasing(false);
    RrdGraph graph=new RrdGraph(def);
    byte data[]=null;
    if ((width <= 0) || (height <= 0))     data=graph.getPNGBytes();
 else     data=graph.getPNGBytes(width,height);
    out.write(data);
  }
 catch (  RrdException re) {
    _log.error("Error rendering",re);
    throw new IOException("Error plotting: " + re.getMessage());
  }
catch (  IOException ioe) {
    _log.error("Error rendering",ioe);
    throw ioe;
  }
catch (  OutOfMemoryError oom) {
    _log.error("Error rendering",oom);
    throw new IOException("Error plotting: " + oom.getMessage());
  }
}
