{
  long end=Math.min(_listener.now(),System.currentTimeMillis()) - 75 * 1000;
  long period=_listener.getRate().getPeriod();
  if (endp > 0)   end-=period * endp;
  if (periodCount <= 0 || periodCount > _listener.getRows())   periodCount=_listener.getRows();
  long start=end - (period * periodCount);
  ImageOutputStream ios=null;
  try {
    RrdGraphDef def=new RrdGraphDef();
    String lang=Messages.getLanguage(_context);
    Font small=def.getSmallFont();
    Font large=def.getLargeFont();
    if ("ar".equals(lang) || "jp".equals(lang) || ("zh".equals(lang) && !IS_WIN)) {
      small=small.deriveFont(small.getSize2D() + 2.0f);
      large=large.deriveFont(Font.PLAIN,large.getSize2D() + 3.0f);
    }
 else {
      small=small.deriveFont(small.getSize2D() + 1.0f);
      large=large.deriveFont(large.getSize2D() + 1.0f);
    }
    def.setSmallFont(small);
    def.setLargeFont(large);
    def.setTimeSpan(start / 1000,end / 1000);
    def.setMinValue(0d);
    String name=_listener.getRate().getRateStat().getName();
    if ((name.startsWith("bw.") || name.indexOf("Size") >= 0 || name.indexOf("Bps") >= 0 || name.indexOf("memory") >= 0) && !showEvents)     def.setBase(1024);
    if (titleOverride != null) {
      def.setTitle(titleOverride);
    }
 else     if (!hideTitle) {
      String title;
      String p;
      if (IS_WIN && "zh".equals(Messages.getLanguage(_context)))       p=DataHelper.formatDuration(period);
 else       p=DataHelper.formatDuration2(period).replace("&nbsp;"," ");
      if (showEvents)       title=name + ' ' + _t("events in {0}",p);
 else       title=name + ' ' + _t("averaged for {0}",p);
      def.setTitle(title);
    }
    String path=_listener.getData().getPath();
    String dsNames[]=_listener.getData().getDsNames();
    String plotName=null;
    String descr=null;
    if (showEvents) {
      plotName=dsNames[1];
      descr=_t("Events per period");
    }
 else {
      plotName=dsNames[0];
      descr=_t(_listener.getRate().getRateStat().getDescription());
    }
    def.datasource(plotName,path,plotName,SummaryListener.CF,_listener.getBackendName());
    if (descr.length() > 0) {
      def.area(plotName,Color.BLUE,descr + "\\r");
    }
 else {
      def.area(plotName,Color.BLUE);
    }
    if (!hideLegend) {
      def.gprint(plotName,SummaryListener.CF,_t("avg") + ": %.2f %s");
      def.gprint(plotName,"MAX",' ' + _t("max") + ": %.2f %S");
      def.gprint(plotName,"LAST",' ' + _t("now") + ": %.2f %S\\r");
    }
    String plotName2=null;
    if (lsnr2 != null) {
      String dsNames2[]=lsnr2.getData().getDsNames();
      plotName2=dsNames2[0];
      String path2=lsnr2.getData().getPath();
      String descr2=_t(lsnr2.getRate().getRateStat().getDescription());
      def.datasource(plotName2,path2,plotName2,SummaryListener.CF,lsnr2.getBackendName());
      def.line(plotName2,Color.RED,descr2 + "\\r",3);
      if (!hideLegend) {
        def.gprint(plotName2,SummaryListener.CF,_t("avg") + ": %.2f %s");
        def.gprint(plotName2,"MAX",' ' + _t("max") + ": %.2f %S");
        def.gprint(plotName2,"LAST",' ' + _t("now") + ": %.2f %S\\r");
      }
    }
    if (!hideLegend) {
      SimpleDateFormat sdf=new SimpleDateFormat("dd-MMM HH:mm");
      Map<Long,String> events=((RouterContext)_context).router().eventLog().getEvents(EventLog.STARTED,start);
      for (      Map.Entry<Long,String> event : events.entrySet()) {
        long started=event.getKey().longValue();
        if (started > start && started < end) {
          String legend=_t("Restart") + ' ' + sdf.format(new Date(started))+ " UTC "+ event.getValue()+ "\\r";
          def.vrule(started / 1000,RESTART_BAR_COLOR,legend,4.0f);
        }
      }
      def.comment(sdf.format(new Date(start)) + " -- " + sdf.format(new Date(end))+ " UTC\\r");
    }
    if (!showCredit)     def.setShowSignature(false);
    if (hideLegend)     def.setNoLegend(true);
    if (hideGrid) {
      def.setDrawXGrid(false);
      def.setDrawYGrid(false);
    }
    def.setAntiAliasing(false);
    def.setWidth(width);
    def.setHeight(height);
    def.setImageFormat("PNG");
    def.setLazy(true);
    RrdGraph graph;
    try {
      graph=new RrdGraph(def);
    }
 catch (    NullPointerException npe) {
      _log.error("Error rendering",npe);
      StatSummarizer.setDisabled();
      throw new IOException("Error rendering - disabling graph generation. Missing font? See http://trac.i2p2.i2p/ticket/915");
    }
    int totalWidth=graph.getRrdGraphInfo().getWidth();
    int totalHeight=graph.getRrdGraphInfo().getHeight();
    BufferedImage img=new BufferedImage(totalWidth,totalHeight,BufferedImage.TYPE_USHORT_565_RGB);
    Graphics gfx=img.getGraphics();
    graph.render(gfx);
    ios=new MemoryCacheImageOutputStream(out);
    ImageIO.write(img,"png",ios);
  }
 catch (  RrdException re) {
    _log.error("Error rendering",re);
    throw new IOException("Error plotting: " + re.getMessage());
  }
catch (  IOException ioe) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Error rendering",ioe);
    throw ioe;
  }
catch (  OutOfMemoryError oom) {
    _log.error("Error rendering",oom);
    throw new IOException("Error plotting: " + oom.getMessage());
  }
 finally {
    if (ios != null)     try {
      ios.close();
    }
 catch (    IOException ioe) {
    }
  }
}
