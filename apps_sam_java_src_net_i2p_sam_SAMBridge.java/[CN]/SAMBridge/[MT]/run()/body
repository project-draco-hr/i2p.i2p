{
  if (serverSocket == null)   return;
  changeState(RUNNING);
  if (_mgr != null)   _mgr.register(this);
  I2PAppContext.getGlobalContext().portMapper().register(_useSSL ? PortMapper.SVC_SAM_SSL : PortMapper.SVC_SAM,_listenHost != null ? _listenHost : "127.0.0.1",_listenPort);
  try {
    while (acceptConnections) {
      SocketChannel s=serverSocket.accept();
      if (_log.shouldLog(Log.DEBUG))       _log.debug("New connection from " + s.socket().getInetAddress().toString() + ":"+ s.socket().getPort());
class HelloHandler implements Runnable, Handler {
        private final SocketChannel s;
        private final SAMBridge parent;
        HelloHandler(        SocketChannel s,        SAMBridge parent){
          this.s=s;
          this.parent=parent;
        }
        public void run(){
          parent.register(this);
          try {
            SAMHandler handler=SAMHandlerFactory.createSAMHandler(s,i2cpProps,parent);
            if (handler == null) {
              if (_log.shouldLog(Log.DEBUG))               _log.debug("SAM handler has not been instantiated");
              try {
                s.close();
              }
 catch (              IOException e) {
              }
              return;
            }
            handler.startHandling();
          }
 catch (          SAMException e) {
            if (_log.shouldLog(Log.ERROR))             _log.error("SAM error: " + e.getMessage(),e);
            String reply="HELLO REPLY RESULT=I2P_ERROR MESSAGE=\"" + e.getMessage() + "\"\n";
            SAMHandler.writeString(reply,s);
            try {
              s.close();
            }
 catch (            IOException ioe) {
            }
          }
catch (          Exception ee) {
            try {
              s.close();
            }
 catch (            IOException ioe) {
            }
            _log.log(Log.CRIT,"Unexpected error handling SAM connection",ee);
          }
 finally {
            parent.unregister(this);
          }
        }
        /** 
 * @since 0.9.20 
 */
        public void stopHandling(){
          try {
            s.close();
          }
 catch (          IOException ioe) {
          }
        }
      }
      new I2PAppThread(new HelloHandler(s,this),"SAM HelloHandler").start();
    }
    changeState(STOPPING);
  }
 catch (  Exception e) {
    if (acceptConnections)     _log.error("Unexpected error while listening for connections",e);
 else     e=null;
    changeState(STOPPING,e);
  }
 finally {
    try {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Shutting down, closing server socket");
      if (serverSocket != null)       serverSocket.close();
    }
 catch (    IOException e) {
    }
    I2PAppContext.getGlobalContext().portMapper().unregister(_useSSL ? PortMapper.SVC_SAM_SSL : PortMapper.SVC_SAM);
    stopHandlers();
    changeState(STOPPED);
  }
}
