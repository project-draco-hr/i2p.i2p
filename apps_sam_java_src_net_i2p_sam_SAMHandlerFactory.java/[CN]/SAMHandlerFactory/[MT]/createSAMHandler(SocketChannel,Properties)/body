{
  String line;
  StringTokenizer tok;
  Log log=new Log(SAMHandlerFactory.class);
  try {
    line=DataHelper.readLine(s.socket().getInputStream());
    if (line == null) {
      log.debug("Connection closed by client");
      return null;
    }
    tok=new StringTokenizer(line.trim()," ");
  }
 catch (  IOException e) {
    throw new SAMException("Error reading from socket",e);
  }
catch (  Exception e) {
    throw new SAMException("Unexpected error",e);
  }
  if (tok.countTokens() != 4) {
    throw new SAMException("Bad format in HELLO message");
  }
  if (!tok.nextToken().equals("HELLO")) {
    throw new SAMException("Bad domain in HELLO message");
  }
{
    String opcode;
    if (!(opcode=tok.nextToken()).equals("VERSION")) {
      throw new SAMException("Unrecognized HELLO message opcode: '" + opcode + "'");
    }
  }
  Properties props;
  props=SAMUtils.parseParams(tok);
  if (props == null) {
    throw new SAMException("No parameters in HELLO VERSION message");
  }
  String minVer=props.getProperty("MIN");
  if (minVer == null) {
    throw new SAMException("Missing MIN parameter in HELLO VERSION message");
  }
  String maxVer=props.getProperty("MAX");
  if (maxVer == null) {
    throw new SAMException("Missing MAX parameter in HELLO VERSION message");
  }
  String ver=chooseBestVersion(minVer,maxVer);
  if (ver == null) {
    SAMHandler.writeString("HELLO REPLY RESULT=NOVERSION\n",s);
    return null;
  }
  if (!SAMHandler.writeString("HELLO REPLY RESULT=OK VERSION=" + ver + "\n",s))   throw new SAMException("Error writing to socket");
  int verMajor=getMajor(ver);
  int verMinor=getMinor(ver);
  SAMHandler handler;
  try {
switch (verMajor) {
case 1:
      handler=new SAMv1Handler(s,verMajor,verMinor,i2cpProps);
    break;
case 2:
  handler=new SAMv2Handler(s,verMajor,verMinor,i2cpProps);
break;
case 3:
handler=new SAMv3Handler(s,verMajor,verMinor,i2cpProps);
break;
default :
log.error("BUG! Trying to initialize the wrong SAM version!");
throw new SAMException("BUG! (in handler instantiation)");
}
}
 catch (IOException e) {
log.error("Error creating the handler for version " + verMajor,e);
throw new SAMException("IOException caught during SAM handler instantiation");
}
return handler;
}
