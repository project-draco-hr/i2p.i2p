{
  StringTokenizer tok;
  Log log=I2PAppContext.getGlobalContext().logManager().getLog(SAMHandlerFactory.class);
  try {
    Socket sock=s.socket();
    sock.setSoTimeout(HELLO_TIMEOUT);
    String line=DataHelper.readLine(sock.getInputStream());
    sock.setSoTimeout(0);
    if (line == null) {
      log.debug("Connection closed by client");
      return null;
    }
    tok=new StringTokenizer(line.trim()," ");
  }
 catch (  SocketTimeoutException e) {
    throw new SAMException("Timeout waiting for HELLO VERSION",e);
  }
catch (  IOException e) {
    throw new SAMException("Error reading from socket",e);
  }
catch (  Exception e) {
    throw new SAMException("Unexpected error",e);
  }
  if (tok.countTokens() < 2) {
    throw new SAMException("Must start with HELLO VERSION");
  }
  if (!tok.nextToken().equals("HELLO") || !tok.nextToken().equals("VERSION")) {
    throw new SAMException("Must start with HELLO VERSION");
  }
  Properties props=SAMUtils.parseParams(tok);
  String minVer=props.getProperty("MIN");
  if (minVer == null) {
    minVer="1";
  }
  String maxVer=props.getProperty("MAX");
  if (maxVer == null) {
    maxVer="99.99";
  }
  String ver=chooseBestVersion(minVer,maxVer);
  if (ver == null) {
    SAMHandler.writeString("HELLO REPLY RESULT=NOVERSION\n",s);
    return null;
  }
  if (!SAMHandler.writeString("HELLO REPLY RESULT=OK VERSION=" + ver + "\n",s))   throw new SAMException("Error writing to socket");
  int verMajor=getMajor(ver);
  int verMinor=getMinor(ver);
  SAMHandler handler;
  try {
switch (verMajor) {
case 1:
      handler=new SAMv1Handler(s,verMajor,verMinor,i2cpProps);
    break;
case 2:
  handler=new SAMv2Handler(s,verMajor,verMinor,i2cpProps);
break;
case 3:
handler=new SAMv3Handler(s,verMajor,verMinor,i2cpProps);
break;
default :
log.error("BUG! Trying to initialize the wrong SAM version!");
throw new SAMException("BUG! (in handler instantiation)");
}
}
 catch (IOException e) {
log.error("Error creating the handler for version " + verMajor,e);
throw new SAMException("IOException caught during SAM handler instantiation");
}
return handler;
}
