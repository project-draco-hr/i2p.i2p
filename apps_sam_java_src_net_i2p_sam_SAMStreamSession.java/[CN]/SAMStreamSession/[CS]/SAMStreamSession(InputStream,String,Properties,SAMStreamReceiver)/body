{
  this.recv=recv;
  _log=I2PAppContext.getGlobalContext().logManager().getLog(getClass());
  boolean canReceive;
  boolean startAcceptor;
  if (dir.equals("BOTH")) {
    canCreate=true;
    canReceive=true;
    startAcceptor=true;
  }
 else   if (dir.equals("__v3__")) {
    canCreate=true;
    canReceive=true;
    startAcceptor=false;
  }
 else   if (dir.equals("CREATE")) {
    canCreate=true;
    canReceive=false;
    startAcceptor=false;
  }
 else   if (dir.equals("RECEIVE")) {
    canCreate=false;
    canReceive=true;
    startAcceptor=true;
  }
 else {
    _log.error("BUG! Wrong direction passed to SAMStreamSession: " + dir);
    throw new SAMException("BUG! Wrong direction specified!");
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("SAM STREAM session instantiated");
  Properties allprops=(Properties)System.getProperties().clone();
  allprops.putAll(props);
  String i2cpHost=allprops.getProperty(I2PClient.PROP_TCP_HOST,"127.0.0.1");
  int i2cpPort=7654;
  String port=allprops.getProperty(I2PClient.PROP_TCP_PORT,"7654");
  try {
    i2cpPort=Integer.parseInt(port);
  }
 catch (  NumberFormatException nfe) {
    throw new SAMException("Invalid I2CP port specified [" + port + "]");
  }
  if (!canReceive)   allprops.setProperty("i2cp.dontPublishLeaseSet","true");
  if (!allprops.containsKey("inbound.nickname") && !allprops.containsKey("outbound.nickname")) {
    allprops.setProperty("inbound.nickname","SAM TCP Client");
    allprops.setProperty("outbound.nickname","SAM TCP Client");
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Creating I2PSocketManager...");
  socketMgr=I2PSocketManagerFactory.createManager(destStream,i2cpHost,i2cpPort,allprops);
  if (socketMgr == null) {
    throw new SAMException("Error creating I2PSocketManager");
  }
  socketMgr.addDisconnectListener(new DisconnectListener());
  forceFlush=Boolean.parseBoolean(allprops.getProperty(PROP_FORCE_FLUSH,DEFAULT_FORCE_FLUSH));
  if (Boolean.parseBoolean(props.getProperty("i2p.streaming.enforceProtocol")))   listenProtocol=I2PSession.PROTO_STREAMING;
 else   listenProtocol=I2PSession.PROTO_ANY;
  listenPort=I2PSession.PORT_ANY;
  if (startAcceptor) {
    server=new SAMStreamSessionServer();
    Thread t=new I2PAppThread(server,"SAMStreamSessionServer");
    t.start();
  }
 else {
    server=null;
  }
}
