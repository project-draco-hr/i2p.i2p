{
  if (getDatagramSession() == null) {
    _log.error("DATAGRAM message received, but no DATAGRAM session exists");
    return false;
  }
  if (opcode.equals("SEND")) {
    if (props.isEmpty()) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("No parameters specified in DATAGRAM SEND message");
      return false;
    }
    String dest=props.getProperty("DESTINATION");
    if (dest == null) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Destination not specified in DATAGRAM SEND message");
      return false;
    }
    int size;
{
      String strsize=props.getProperty("SIZE");
      if (strsize == null) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Size not specified in DATAGRAM SEND message");
        return false;
      }
      try {
        size=Integer.parseInt(strsize);
      }
 catch (      NumberFormatException e) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Invalid DATAGRAM SEND size specified: " + strsize);
        return false;
      }
      if (!checkDatagramSize(size)) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Specified size (" + size + ") is out of protocol limits");
        return false;
      }
    }
    try {
      DataInputStream in=new DataInputStream(getClientSocket().socket().getInputStream());
      byte[] data=new byte[size];
      in.readFully(data);
      if (!getDatagramSession().sendBytes(dest,data)) {
        _log.error("DATAGRAM SEND failed");
        return true;
      }
      return true;
    }
 catch (    EOFException e) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Too few bytes with DATAGRAM SEND message (expected: " + size);
      return false;
    }
catch (    IOException e) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Caught IOException while parsing DATAGRAM SEND message",e);
      return false;
    }
catch (    DataFormatException e) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Invalid key specified with DATAGRAM SEND message",e);
      return false;
    }
  }
 else {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Unrecognized DATAGRAM message opcode: \"" + opcode + "\"");
    return false;
  }
}
