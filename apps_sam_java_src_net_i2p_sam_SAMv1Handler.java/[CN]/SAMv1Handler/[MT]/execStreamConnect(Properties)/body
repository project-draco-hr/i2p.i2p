{
  if (props == null) {
    _log.debug("No parameters specified in STREAM CONNECT message");
    return false;
  }
  int id;
{
    String strid=props.getProperty("ID");
    if (strid == null) {
      _log.debug("ID not specified in STREAM SEND message");
      return false;
    }
    try {
      id=Integer.parseInt(strid);
    }
 catch (    NumberFormatException e) {
      _log.debug("Invalid STREAM CONNECT ID specified: " + strid);
      return false;
    }
    if (id < 1) {
      _log.debug("Invalid STREAM CONNECT ID specified: " + strid);
      return false;
    }
    props.remove("ID");
  }
  String dest=props.getProperty("DESTINATION");
  if (dest == null) {
    _log.debug("Destination not specified in RAW SEND message");
    return false;
  }
  props.remove("DESTINATION");
  try {
    if (!streamSession.connect(id,dest,props)) {
      _log.debug("STREAM connection failed");
      return false;
    }
    return writeString("STREAM STATUS RESULT=OK ID=" + id + "\n");
  }
 catch (  DataFormatException e) {
    _log.debug("Invalid destination in STREAM CONNECT message");
    return writeString("STREAM STATUS RESULT=INVALID_KEY ID=" + id + "\n");
  }
catch (  SAMInvalidDirectionException e) {
    _log.debug("STREAM CONNECT failed: " + e.getMessage());
    return writeString("STREAM STATUS RESULT=INVALID_DIRECTION ID=" + id + "\n");
  }
catch (  ConnectException e) {
    _log.debug("STREAM CONNECT failed: " + e.getMessage());
    return writeString("STREAM STATUS RESULT=CONNECTION_REFUSED ID=" + id + "\n");
  }
catch (  NoRouteToHostException e) {
    _log.debug("STREAM CONNECT failed: " + e.getMessage());
    return writeString("STREAM STATUS RESULT=CANT_REACH_PEER ID=" + id + "\n");
  }
catch (  InterruptedIOException e) {
    _log.debug("STREAM CONNECT failed: " + e.getMessage());
    return writeString("STREAM STATUS RESULT=TIMEOUT ID=" + id + "\n");
  }
catch (  I2PException e) {
    _log.debug("STREAM CONNECT failed: " + e.getMessage());
    return writeString("STREAM STATUS RESULT=I2P_ERROR ID=" + id + "\n");
  }
}
