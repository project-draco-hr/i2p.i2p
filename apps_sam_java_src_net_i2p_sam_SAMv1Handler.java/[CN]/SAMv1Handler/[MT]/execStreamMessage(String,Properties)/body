{
  if (streamSession == null) {
    _log.error("STREAM message received, but no STREAM session exists");
    return false;
  }
  if (opcode.equals("SEND")) {
    if (props == null) {
      _log.debug("No parameters specified in STREAM SEND message");
      return false;
    }
    int id;
{
      String strid=props.getProperty("ID");
      if (strid == null) {
        _log.debug("ID not specified in STREAM SEND message");
        return false;
      }
      try {
        id=Integer.parseInt(strid);
      }
 catch (      NumberFormatException e) {
        _log.debug("Invalid STREAM SEND ID specified: " + strid);
        return false;
      }
    }
    int size;
{
      String strsize=props.getProperty("SIZE");
      if (strsize == null) {
        _log.debug("Size not specified in STREAM SEND message");
        return false;
      }
      try {
        size=Integer.parseInt(strsize);
      }
 catch (      NumberFormatException e) {
        _log.debug("Invalid STREAM SEND size specified: " + strsize);
        return false;
      }
      if (!checkSize(size)) {
        _log.debug("Specified size (" + size + ") is out of protocol limits");
        return false;
      }
    }
    try {
      DataInputStream in=new DataInputStream(getClientSocketInputStream());
      byte[] data=new byte[size];
      in.readFully(data);
      if (!streamSession.sendBytes(id,data)) {
        _log.error("STREAM SEND failed");
        return false;
      }
      return true;
    }
 catch (    EOFException e) {
      _log.debug("Too few bytes with RAW SEND message (expected: " + size);
      return false;
    }
catch (    IOException e) {
      _log.debug("Caught IOException while parsing RAW SEND message",e);
      return false;
    }
  }
 else   if (opcode.equals("CONNECT")) {
    if (props == null) {
      _log.debug("No parameters specified in STREAM CONNECT message");
      return false;
    }
    int id;
{
      String strid=props.getProperty("ID");
      if (strid == null) {
        _log.debug("ID not specified in STREAM SEND message");
        return false;
      }
      try {
        id=Integer.parseInt(strid);
      }
 catch (      NumberFormatException e) {
        _log.debug("Invalid STREAM CONNECT ID specified: " + strid);
        return false;
      }
      if (id < 1) {
        _log.debug("Invalid STREAM CONNECT ID specified: " + strid);
        return false;
      }
      props.remove("ID");
    }
    String dest=props.getProperty("DESTINATION");
    if (dest == null) {
      _log.debug("Destination not specified in RAW SEND message");
      return false;
    }
    props.remove("DESTINATION");
    try {
      if (!streamSession.connect(id,dest,props)) {
        _log.debug("STREAM connection failed");
        return false;
      }
      return writeString("STREAM STATUS RESULT=OK ID=" + id + "\n");
    }
 catch (    DataFormatException e) {
      _log.debug("Invalid destination in STREAM CONNECT message");
      return writeString("STREAM STATUS RESULT=INVALID_KEY ID=" + id + "\n");
    }
catch (    SAMInvalidDirectionException e) {
      _log.debug("STREAM CONNECT failed: " + e.getMessage());
      return writeString("STREAM STATUS RESULT=INVALID_DIRECTION ID=" + id + "\n");
    }
catch (    ConnectException e) {
      _log.debug("STREAM CONNECT failed: " + e.getMessage());
      return writeString("STREAM STATUS RESULT=CONNECTION_REFUSED ID=" + id + "\n");
    }
catch (    NoRouteToHostException e) {
      _log.debug("STREAM CONNECT failed: " + e.getMessage());
      return writeString("STREAM STATUS RESULT=CANT_REACH_PEER ID=" + id + "\n");
    }
catch (    InterruptedException e) {
      _log.debug("STREAM CONNECT failed: " + e.getMessage());
      return writeString("STREAM STATUS RESULT=TIMEOUT ID=" + id + "\n");
    }
catch (    I2PException e) {
      _log.debug("STREAM CONNECT failed: " + e.getMessage());
      return writeString("STREAM STATUS RESULT=I2P_ERROR ID=" + id + "\n");
    }
  }
 else   if (opcode.equals("CLOSE")) {
    if (props == null) {
      _log.debug("No parameters specified in STREAM CLOSE message");
      return false;
    }
    int id;
{
      String strid=props.getProperty("ID");
      if (strid == null) {
        _log.debug("ID not specified in STREAM CLOSE message");
        return false;
      }
      try {
        id=Integer.parseInt(strid);
      }
 catch (      NumberFormatException e) {
        _log.debug("Invalid STREAM CLOSE ID specified: " + strid);
        return false;
      }
    }
    return streamSession.closeConnection(id);
  }
 else {
    _log.debug("Unrecognized RAW message opcode: \"" + opcode + "\"");
    return false;
  }
}
