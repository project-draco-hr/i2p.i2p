{
  if (props == null) {
    _log.debug("No parameters specified in STREAM SEND message");
    return false;
  }
  int id;
{
    String strid=props.getProperty("ID");
    if (strid == null) {
      _log.debug("ID not specified in STREAM SEND message");
      return false;
    }
    try {
      id=Integer.parseInt(strid);
    }
 catch (    NumberFormatException e) {
      _log.debug("Invalid STREAM SEND ID specified: " + strid);
      return false;
    }
  }
  int size;
{
    String strsize=props.getProperty("SIZE");
    if (strsize == null) {
      _log.debug("Size not specified in STREAM SEND message");
      return false;
    }
    try {
      size=Integer.parseInt(strsize);
    }
 catch (    NumberFormatException e) {
      _log.debug("Invalid STREAM SEND size specified: " + strsize);
      return false;
    }
    if (!checkSize(size)) {
      _log.debug("Specified size (" + size + ") is out of protocol limits");
      return false;
    }
  }
  try {
    if (!streamSession.sendBytes(id,getClientSocketInputStream(),size)) {
      if (_log.shouldLog(Log.WARN))       _log.warn("STREAM SEND [" + size + "] failed");
      boolean rv=writeString("STREAM CLOSED RESULT=CANT_REACH_PEER ID=" + id + " MESSAGE=\"Send of "+ size+ " bytes failed\"\n");
      streamSession.closeConnection(id);
      return rv;
    }
    return true;
  }
 catch (  EOFException e) {
    _log.debug("Too few bytes with STREAM SEND message (expected: " + size);
    return false;
  }
catch (  IOException e) {
    _log.debug("Caught IOException while parsing STREAM SEND message",e);
    return false;
  }
}
