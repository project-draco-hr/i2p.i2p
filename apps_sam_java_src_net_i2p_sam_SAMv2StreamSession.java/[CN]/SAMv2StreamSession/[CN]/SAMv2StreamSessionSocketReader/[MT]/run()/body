{
  _log.debug("run() called for socket reader " + id);
  int read=-1;
  byte[] data=new byte[SOCKET_HANDLER_BUF_SIZE];
  try {
    InputStream in=i2pSocket.getInputStream();
    while (stillRunning) {
synchronized (runningLock) {
        while (stillRunning && (!nolimit && totalReceived >= limit)) {
          try {
            runningLock.wait();
          }
 catch (          InterruptedException ie) {
          }
        }
        if (!stillRunning)         break;
      }
      read=in.read(data);
      if (read == -1) {
        _log.debug("Handler " + id + ": connection closed");
        break;
      }
      totalReceived+=read;
      recv.receiveStreamBytes(id,data,read);
    }
  }
 catch (  IOException e) {
    _log.debug("Caught IOException",e);
  }
  try {
    i2pSocket.close();
  }
 catch (  IOException e) {
    _log.debug("Caught IOException",e);
  }
  if (stillRunning) {
    removeSocketHandler(id);
    try {
      recv.notifyStreamDisconnection(id,"OK",null);
    }
 catch (    IOException e) {
      _log.debug("Error sending disconnection notice for handler " + id,e);
    }
  }
  _log.debug("Shutting down SAM STREAM session socket handler " + id);
}
