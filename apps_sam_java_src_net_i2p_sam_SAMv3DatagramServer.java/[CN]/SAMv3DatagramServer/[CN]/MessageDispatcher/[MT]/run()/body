{
  try {
    String header=DataHelper.readLine(is).trim();
    StringTokenizer tok=new StringTokenizer(header," ");
    if (tok.countTokens() < 3) {
      warn("Bad datagram header received");
      return;
    }
    String version=tok.nextToken();
    if (!version.startsWith("3.")) {
      warn("Bad datagram header received");
      return;
    }
    String nick=tok.nextToken();
    String dest=tok.nextToken();
    SessionRecord rec=SAMv3Handler.sSessionsHash.get(nick);
    if (rec != null) {
      Properties sprops=rec.getProps();
      String pr=sprops.getProperty("PROTOCOL");
      String fp=sprops.getProperty("FROM_PORT");
      String tp=sprops.getProperty("TO_PORT");
      String st=sprops.getProperty("SEND_TAGS");
      String tt=sprops.getProperty("TAG_THRESHOLD");
      String ex=sprops.getProperty("EXPIRES");
      String sl=sprops.getProperty("SEND_LEASESET");
      while (tok.hasMoreTokens()) {
        String t=tok.nextToken();
        if (t.startsWith("PROTOCOL="))         pr=t.substring("PROTOCOL=".length());
 else         if (t.startsWith("FROM_PORT="))         fp=t.substring("FROM_PORT=".length());
 else         if (t.startsWith("TO_PORT="))         tp=t.substring("TO_PORT=".length());
 else         if (t.startsWith("SEND_TAGS="))         st=t.substring("SEND_TAGS=".length());
 else         if (t.startsWith("TAG_THRESHOLD="))         tt=t.substring("TAG_THRESHOLD=".length());
 else         if (t.startsWith("EXPIRES="))         ex=t.substring("EXPIRES=".length());
 else         if (t.startsWith("SEND_LEASESET="))         sl=t.substring("SEND_LEASESET=".length());
      }
      int proto=I2PSession.PROTO_UNSPECIFIED;
      int fromPort=I2PSession.PORT_UNSPECIFIED;
      int toPort=I2PSession.PORT_UNSPECIFIED;
      int sendTags=0;
      int tagThreshold=0;
      int expires=0;
      boolean sendLeaseSet=true;
      try {
        if (pr != null)         proto=Integer.parseInt(pr);
        if (fp != null)         fromPort=Integer.parseInt(fp);
        if (tp != null)         toPort=Integer.parseInt(tp);
        if (st != null)         sendTags=Integer.parseInt(st);
        if (tt != null)         tagThreshold=Integer.parseInt(tt);
        if (ex != null)         expires=Integer.parseInt(ex);
        if (sl != null)         sendLeaseSet=Boolean.parseBoolean(sl);
      }
 catch (      NumberFormatException nfe) {
        warn("Bad datagram header received");
        return;
      }
      byte[] data=new byte[is.available()];
      is.read(data);
      Session sess=rec.getHandler().getSession();
      if (sess != null) {
        if (sendTags > 0 || tagThreshold > 0 || expires > 0 || !sendLeaseSet) {
          sess.sendBytes(dest,data,proto,fromPort,toPort,sendLeaseSet,sendTags,tagThreshold,expires);
        }
 else {
          sess.sendBytes(dest,data,proto,fromPort,toPort);
        }
      }
 else {
        warn("Dropping datagram, no session for " + nick);
      }
    }
 else {
      warn("Dropping datagram, no session for " + nick);
    }
  }
 catch (  Exception e) {
    warn("Error handling datagram",e);
  }
}
