{
  if (props == null) {
    _log.debug("No parameters specified in STREAM CONNECT message");
    return false;
  }
  boolean verbose=props.getProperty("SILENT","false").equals("false");
  String dest=props.getProperty("DESTINATION");
  if (dest == null) {
    _log.debug("Destination not specified in RAW SEND message");
    return false;
  }
  props.remove("DESTINATION");
  try {
    try {
      streamSession.connect(this,dest,props);
      return true;
    }
 catch (    DataFormatException e) {
      _log.debug("Invalid destination in STREAM CONNECT message");
      if (verbose)       notifyStreamAccept("INVALID_KEY");
    }
catch (    ConnectException e) {
      _log.debug("STREAM CONNECT failed: " + e.getMessage());
      if (verbose)       notifyStreamAccept("CONNECTION_REFUSED");
    }
catch (    NoRouteToHostException e) {
      _log.debug("STREAM CONNECT failed: " + e.getMessage());
      if (verbose)       notifyStreamAccept("CANT_REACH_PEER");
    }
catch (    InterruptedIOException e) {
      _log.debug("STREAM CONNECT failed: " + e.getMessage());
      if (verbose)       notifyStreamAccept("TIMEOUT");
    }
catch (    I2PException e) {
      _log.debug("STREAM CONNECT failed: " + e.getMessage());
      if (verbose)       notifyStreamAccept("I2P_ERROR");
    }
  }
 catch (  IOException e) {
  }
  return false;
}
