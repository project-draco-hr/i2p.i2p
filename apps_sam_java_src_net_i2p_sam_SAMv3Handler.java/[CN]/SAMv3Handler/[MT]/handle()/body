{
  String msg=null;
  String domain=null;
  String opcode=null;
  boolean canContinue=false;
  StringTokenizer tok;
  Properties props;
  this.thread.setName("SAMv3Handler " + _id);
  _log.debug("SAM handling started");
  try {
    InputStream in=getClientSocket().socket().getInputStream();
    while (true) {
      if (shouldStop()) {
        _log.debug("Stop request found");
        break;
      }
      String line=DataHelper.readLine(in);
      if (line == null) {
        _log.debug("Connection closed by client (line read : null)");
        break;
      }
      msg=line.trim();
      if (_log.shouldLog(Log.DEBUG)) {
        _log.debug("New message received: [" + msg + "]");
      }
      if (msg.equals("")) {
        _log.debug("Ignoring newline");
        continue;
      }
      tok=new StringTokenizer(msg," ");
      if (tok.countTokens() < 2) {
        _log.debug("Error in message format");
        break;
      }
      domain=tok.nextToken();
      opcode=tok.nextToken();
      if (_log.shouldLog(Log.DEBUG)) {
        _log.debug("Parsing (domain: \"" + domain + "\"; opcode: \""+ opcode+ "\")");
      }
      props=SAMUtils.parseParams(tok);
      if (domain.equals("STREAM")) {
        canContinue=execStreamMessage(opcode,props);
      }
 else       if (domain.equals("SESSION")) {
        if (i2cpProps != null)         props.putAll(i2cpProps);
        canContinue=execSessionMessage(opcode,props);
      }
 else       if (domain.equals("DEST")) {
        canContinue=execDestMessage(opcode,props);
      }
 else       if (domain.equals("NAMING")) {
        canContinue=execNamingMessage(opcode,props);
      }
 else       if (domain.equals("DATAGRAM")) {
        canContinue=execDatagramMessage(opcode,props);
      }
 else {
        _log.debug("Unrecognized message domain: \"" + domain + "\"");
        break;
      }
      if (!canContinue) {
        break;
      }
    }
  }
 catch (  IOException e) {
    _log.debug("Caught IOException (" + e.getMessage() + ") for message ["+ msg+ "]",e);
  }
catch (  Exception e) {
    _log.error("Unexpected exception for message [" + msg + "]",e);
  }
 finally {
    _log.debug("Stopping handler");
    if (!this.stolenSocket) {
      try {
        closeClientSocket();
      }
 catch (      IOException e) {
        _log.error("Error closing socket: " + e.getMessage());
      }
    }
    if (streamForwardingSocket) {
      if (this.getStreamSession() != null) {
        try {
          ((SAMv3StreamSession)streamSession).stopForwardingIncoming();
        }
 catch (        SAMException e) {
          _log.error("Error while stopping forwarding connections: " + e.getMessage());
        }
catch (        InterruptedIOException e) {
          _log.error("Interrupted while stopping forwarding connections: " + e.getMessage());
        }
      }
    }
    die();
  }
}
