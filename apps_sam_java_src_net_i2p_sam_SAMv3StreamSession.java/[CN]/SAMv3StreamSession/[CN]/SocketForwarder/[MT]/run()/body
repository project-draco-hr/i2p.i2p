{
  while (session.getSocketServer() != null) {
    I2PSocket i2ps=null;
    try {
      i2ps=session.getSocketServer().accept();
    }
 catch (    Exception e) {
    }
    if (i2ps == null) {
      continue;
    }
    java.net.InetSocketAddress addr=new java.net.InetSocketAddress(host,port);
    SocketChannel clientServerSock=null;
    try {
      clientServerSock=SocketChannel.open(addr);
    }
 catch (    IOException e) {
      continue;
    }
    try {
      clientServerSock.socket().setKeepAlive(true);
      if (this.verbose) {
        if (sendPorts) {
          SAMv3Handler.notifyStreamIncomingConnection(clientServerSock,i2ps.getPeerDestination(),i2ps.getPort(),i2ps.getLocalPort());
        }
 else {
          SAMv3Handler.notifyStreamIncomingConnection(clientServerSock,i2ps.getPeerDestination());
        }
      }
      ReadableByteChannel fromClient=clientServerSock;
      ReadableByteChannel fromI2P=Channels.newChannel(i2ps.getInputStream());
      WritableByteChannel toClient=clientServerSock;
      WritableByteChannel toI2P=Channels.newChannel(i2ps.getOutputStream());
      (new I2PAppThread(new Pipe(fromClient,toI2P,null),"ForwardV3 SAMPipeClientToI2P")).start();
      (new I2PAppThread(new Pipe(fromI2P,toClient,null),"ForwardV3 SAMPipeI2PToClient")).start();
    }
 catch (    IOException e) {
      try {
        clientServerSock.close();
      }
 catch (      IOException ee) {
      }
      try {
        i2ps.close();
      }
 catch (      IOException ee) {
      }
      continue;
    }
  }
}
