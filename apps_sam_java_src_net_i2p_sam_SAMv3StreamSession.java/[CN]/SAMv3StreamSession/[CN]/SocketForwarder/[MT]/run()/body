{
  while (session.getSocketServer() != null) {
    I2PSocket i2ps;
    try {
      i2ps=session.getSocketServer().accept();
      if (i2ps == null)       continue;
    }
 catch (    SocketTimeoutException ste) {
      continue;
    }
catch (    ConnectException ce) {
      Log log=I2PAppContext.getGlobalContext().logManager().getLog(SAMv3StreamSession.class);
      if (log.shouldLog(Log.WARN))       log.warn("Error accepting",ce);
      try {
        Thread.sleep(50);
      }
 catch (      InterruptedException ie) {
      }
      continue;
    }
catch (    I2PException ipe) {
      Log log=I2PAppContext.getGlobalContext().logManager().getLog(SAMv3StreamSession.class);
      if (log.shouldLog(Log.WARN))       log.warn("Error accepting",ipe);
      break;
    }
    SocketChannel clientServerSock;
    try {
      if (isSSL) {
        I2PAppContext ctx=I2PAppContext.getGlobalContext();
synchronized (SAMv3StreamSession.class) {
          if (_sslSocketFactory == null) {
            try {
              _sslSocketFactory=new I2PSSLSocketFactory(ctx,true,"certificates/sam");
            }
 catch (            GeneralSecurityException gse) {
              Log log=ctx.logManager().getLog(SAMv3StreamSession.class);
              log.error("SSL error",gse);
              try {
                i2ps.close();
              }
 catch (              IOException ee) {
              }
              throw new RuntimeException("SSL error",gse);
            }
          }
        }
        SSLSocket sock=(SSLSocket)_sslSocketFactory.createSocket(host,port);
        I2PSSLSocketFactory.verifyHostname(ctx,sock,host);
        clientServerSock=new SSLSocketChannel(sock);
      }
 else {
        InetSocketAddress addr=new InetSocketAddress(host,port);
        clientServerSock=SocketChannel.open(addr);
      }
    }
 catch (    IOException ioe) {
      Log log=I2PAppContext.getGlobalContext().logManager().getLog(SAMv3StreamSession.class);
      if (log.shouldLog(Log.WARN))       log.warn("Error forwarding",ioe);
      try {
        i2ps.close();
      }
 catch (      IOException ee) {
      }
      continue;
    }
    try {
      clientServerSock.socket().setKeepAlive(true);
      if (this.verbose) {
        if (sendPorts) {
          SAMv3Handler.notifyStreamIncomingConnection(clientServerSock,i2ps.getPeerDestination(),i2ps.getPort(),i2ps.getLocalPort());
        }
 else {
          SAMv3Handler.notifyStreamIncomingConnection(clientServerSock,i2ps.getPeerDestination());
        }
      }
      ReadableByteChannel fromClient=clientServerSock;
      ReadableByteChannel fromI2P=Channels.newChannel(i2ps.getInputStream());
      WritableByteChannel toClient=clientServerSock;
      WritableByteChannel toI2P=Channels.newChannel(i2ps.getOutputStream());
      (new I2PAppThread(new Pipe(fromClient,toI2P,null),"ForwardV3 SAMPipeClientToI2P")).start();
      (new I2PAppThread(new Pipe(fromI2P,toClient,null),"ForwardV3 SAMPipeI2PToClient")).start();
    }
 catch (    IOException e) {
      try {
        clientServerSock.close();
      }
 catch (      IOException ee) {
      }
      try {
        i2ps.close();
      }
 catch (      IOException ee) {
      }
      continue;
    }
  }
}
