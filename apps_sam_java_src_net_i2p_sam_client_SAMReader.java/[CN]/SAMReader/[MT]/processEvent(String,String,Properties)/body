{
  if ("HELLO".equals(major)) {
    if ("REPLY".equals(minor)) {
      String result=params.getProperty("RESULT");
      String version=params.getProperty("VERSION");
      if ("OK".equals(result) && version != null)       _listener.helloReplyReceived(true,version);
 else       _listener.helloReplyReceived(false,version);
    }
 else {
      _listener.unknownMessageReceived(major,minor,params);
    }
  }
 else   if ("SESSION".equals(major)) {
    if ("STATUS".equals(minor)) {
      String result=params.getProperty("RESULT");
      String dest=params.getProperty("DESTINATION");
      String msg=params.getProperty("MESSAGE");
      _listener.sessionStatusReceived(result,dest,msg);
    }
 else {
      _listener.unknownMessageReceived(major,minor,params);
    }
  }
 else   if ("STREAM".equals(major)) {
    if ("STATUS".equals(minor)) {
      String result=params.getProperty("RESULT");
      String id=params.getProperty("ID");
      String msg=params.getProperty("MESSAGE");
      if (id != null) {
        try {
          _listener.streamStatusReceived(result,Integer.parseInt(id),msg);
        }
 catch (        NumberFormatException nfe) {
          _listener.unknownMessageReceived(major,minor,params);
        }
      }
 else {
        _listener.unknownMessageReceived(major,minor,params);
      }
    }
 else     if ("CONNECTED".equals(minor)) {
      String dest=params.getProperty("DESTINATION");
      String id=params.getProperty("ID");
      if (id != null) {
        try {
          _listener.streamConnectedReceived(dest,Integer.parseInt(id));
        }
 catch (        NumberFormatException nfe) {
          _listener.unknownMessageReceived(major,minor,params);
        }
      }
 else {
        _listener.unknownMessageReceived(major,minor,params);
      }
    }
 else     if ("CLOSED".equals(minor)) {
      String result=params.getProperty("RESULT");
      String id=params.getProperty("ID");
      String msg=params.getProperty("MESSAGE");
      if (id != null) {
        try {
          _listener.streamClosedReceived(result,Integer.parseInt(id),msg);
        }
 catch (        NumberFormatException nfe) {
          _listener.unknownMessageReceived(major,minor,params);
        }
      }
 else {
        _listener.unknownMessageReceived(major,minor,params);
      }
    }
 else     if ("RECEIVED".equals(minor)) {
      String id=params.getProperty("ID");
      String size=params.getProperty("SIZE");
      if (id != null) {
        try {
          int idVal=Integer.parseInt(id);
          int sizeVal=Integer.parseInt(size);
          byte data[]=new byte[sizeVal];
          int read=DataHelper.read(_inRaw,data);
          if (read != sizeVal) {
            _listener.unknownMessageReceived(major,minor,params);
          }
 else {
            _listener.streamDataReceived(idVal,data,0,sizeVal);
          }
        }
 catch (        NumberFormatException nfe) {
          _listener.unknownMessageReceived(major,minor,params);
        }
catch (        IOException ioe) {
          _live=false;
          _listener.unknownMessageReceived(major,minor,params);
        }
      }
 else {
        _listener.unknownMessageReceived(major,minor,params);
      }
    }
 else {
      _listener.unknownMessageReceived(major,minor,params);
    }
  }
 else   if ("NAMING".equals(major)) {
    if ("REPLY".equals(minor)) {
      String name=params.getProperty("NAME");
      String result=params.getProperty("RESULT");
      String value=params.getProperty("VALUE");
      String msg=params.getProperty("MESSAGE");
      _listener.namingReplyReceived(name,result,value,msg);
    }
 else {
      _listener.unknownMessageReceived(major,minor,params);
    }
  }
 else   if ("DEST".equals(major)) {
    if ("REPLY".equals(minor)) {
      String pub=params.getProperty("PUB");
      String priv=params.getProperty("PRIV");
      _listener.destReplyReceived(pub,priv);
    }
 else {
      _listener.unknownMessageReceived(major,minor,params);
    }
  }
 else {
    _listener.unknownMessageReceived(major,minor,params);
  }
}
