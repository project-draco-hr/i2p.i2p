{
  _started=_context.clock().now();
  _context.statManager().addRateData("send." + _connectionId + ".started",1,0);
  final long toSend=(new File(_dataFile)).length();
  byte data[]=new byte[8192];
  long lastSend=_context.clock().now();
  while (!_closed) {
    try {
      int read=_in.read(data);
      long now=_context.clock().now();
      if (read == -1) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("EOF from the data for " + _connectionId + " after "+ (now - lastSend));
        break;
      }
 else       if (read > 0) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Sending " + read + " on "+ _connectionId+ " after "+ (now - lastSend));
        lastSend=now;
        if (_samOut != null) {
synchronized (_samOut) {
            if (!_isV3 || _mode == V1DG || _mode == V1RAW) {
              String m;
              if (_mode == STREAM) {
                m="STREAM SEND ID=" + _connectionId + " SIZE="+ read+ "\n";
              }
 else               if (_mode == V1DG) {
                m="DATAGRAM SEND DESTINATION=" + _remoteDestination + " SIZE="+ read+ "\n";
              }
 else               if (_mode == V1RAW) {
                m="RAW SEND DESTINATION=" + _remoteDestination + " SIZE="+ read+ "\n";
              }
 else {
                throw new IOException("unsupported mode " + _mode);
              }
              byte msg[]=DataHelper.getUTF8(m);
              _samOut.write(msg);
            }
            _samOut.write(data,0,read);
            _samOut.flush();
          }
        }
 else {
          ByteArrayOutputStream baos=new ByteArrayOutputStream(read + 1024);
          baos.write(DataHelper.getUTF8("3.0 "));
          baos.write(DataHelper.getUTF8(_v3ID));
          baos.write((byte)' ');
          baos.write(DataHelper.getUTF8(_remoteDestination));
          if (_isV32) {
            if (_mode == RAW)             baos.write(DataHelper.getUTF8(" PROTOCOL=123 TO_PORT=5678"));
 else             baos.write(DataHelper.getUTF8(" TO_PORT=5678"));
            baos.write(DataHelper.getUTF8(" SEND_TAGS=19 TAG_THRESHOLD=13 EXPIRES=33 SEND_LEASESET=true"));
          }
          baos.write((byte)'\n');
          baos.write(data,0,read);
          byte[] pkt=baos.toByteArray();
          DatagramPacket p=new DatagramPacket(pkt,pkt.length,_dgSAM);
          _dgSock.send(p);
          try {
            Thread.sleep(25);
          }
 catch (          InterruptedException ie) {
          }
        }
        _totalSent+=read;
        _context.statManager().addRateData("send." + _connectionId + ".totalSent",_totalSent,0);
      }
    }
 catch (    IOException ioe) {
      _log.error("Error sending",ioe);
      break;
    }
  }
  if (_samOut != null) {
    if (_isV3) {
      try {
        _samOut.close();
      }
 catch (      IOException ioe) {
        _log.info("Error closing",ioe);
      }
    }
 else {
      try {
        byte msg[]=("STREAM CLOSE ID=" + _connectionId + "\n").getBytes("UTF-8");
synchronized (_samOut) {
          _samOut.write(msg);
          _samOut.flush();
        }
      }
 catch (      IOException ioe) {
        _log.info("Error closing",ioe);
      }
    }
  }
 else   if (_dgSock != null) {
    _dgSock.close();
  }
  closed();
  try {
    Thread.sleep(10000);
  }
 catch (  InterruptedException ie) {
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Runner exiting");
  if (toSend != _totalSent)   _log.error("Only sent " + _totalSent + " of "+ toSend+ " bytes");
  if (_reader2 != null)   _reader2.stopReading();
  _reader.stopReading();
}
