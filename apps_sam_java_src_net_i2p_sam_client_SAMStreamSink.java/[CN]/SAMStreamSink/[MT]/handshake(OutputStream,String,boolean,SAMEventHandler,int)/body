{
synchronized (samOut) {
    try {
      samOut.write(("HELLO VERSION MIN=1.0 MAX=" + version + '\n').getBytes());
      samOut.flush();
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Hello sent");
      String hisVersion=eventHandler.waitForHelloReply();
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Hello reply found: " + hisVersion);
      if (hisVersion == null)       throw new IOException("Hello failed");
      if (!isMaster) {
        String req="STREAM ACCEPT SILENT=false TO_PORT=5678 ID=" + _v3ID + "\n";
        samOut.write(req.getBytes());
        samOut.flush();
        if (_log.shouldLog(Log.DEBUG))         _log.debug("STREAM ACCEPT sent");
        if (_log.shouldLog(Log.DEBUG))         _log.debug("got STREAM STATUS, awaiting connection");
        return "OK";
      }
      _isV3=VersionComparator.comp(hisVersion,"3") >= 0;
      String dest;
      if (_isV3) {
        File keys=new File("sam.keys");
        if (keys.exists()) {
          Properties opts=new Properties();
          DataHelper.loadProps(opts,keys);
          String s=opts.getProperty(_destFile);
          if (s != null) {
            dest=s;
          }
 else {
            dest="TRANSIENT";
            (new File(_destFile)).delete();
            if (_log.shouldLog(Log.DEBUG))             _log.debug("Requesting new transient destination");
          }
        }
 else {
          dest="TRANSIENT";
          (new File(_destFile)).delete();
          if (_log.shouldLog(Log.DEBUG))           _log.debug("Requesting new transient destination");
        }
        if (isMaster) {
          byte[] id=new byte[5];
          _context.random().nextBytes(id);
          _v3ID=Base32.encode(id);
          _conOptions="ID=" + _v3ID;
        }
      }
 else {
        dest=_destFile;
      }
      String style;
      if (mode == STREAM)       style="STREAM";
 else       if (mode == DG || mode == V1DG)       style="DATAGRAM";
 else       style="RAW";
      String req="SESSION CREATE STYLE=" + style + " DESTINATION="+ dest+ " "+ _conOptions+ "\n";
      samOut.write(req.getBytes());
      samOut.flush();
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Session create sent");
      boolean ok=eventHandler.waitForSessionCreateReply();
      if (!ok)       throw new IOException("Session create failed");
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Session create reply found: " + ok);
      req="NAMING LOOKUP NAME=ME\n";
      samOut.write(req.getBytes());
      samOut.flush();
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Naming lookup sent");
      String destination=eventHandler.waitForNamingReply("ME");
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Naming lookup reply found: " + destination);
      if (destination == null) {
        _log.error("No naming lookup reply found!");
        return null;
      }
 else {
        if (_log.shouldInfo())         _log.info(_destFile + " is located at " + destination);
      }
      return destination;
    }
 catch (    IOException e) {
      _log.error("Error handshaking",e);
      return null;
    }
  }
}
