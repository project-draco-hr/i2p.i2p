{
synchronized (samOut) {
    try {
      if (user != null && password != null)       samOut.write(("HELLO VERSION MIN=1.0 MAX=" + version + " USER="+ user+ " PASSWORD="+ password+ '\n').getBytes("UTF-8"));
 else       samOut.write(("HELLO VERSION MIN=1.0 MAX=" + version + '\n').getBytes("UTF-8"));
      samOut.flush();
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Hello sent");
      String hisVersion=eventHandler.waitForHelloReply();
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Hello reply found: " + hisVersion);
      if (hisVersion == null)       throw new IOException("Hello failed");
      if (!isMaster) {
        String req;
        if (mode == STREAM)         req="STREAM ACCEPT SILENT=false TO_PORT=5678 ID=" + _v3ID + "\n";
 else         if (mode == FORWARD)         req="STREAM FORWARD ID=" + _v3ID + " PORT="+ V3FORWARDPORT+ '\n';
 else         if (mode == FORWARDSSL)         req="STREAM FORWARD ID=" + _v3ID + " PORT="+ V3FORWARDPORT+ " SSL=true\n";
 else         throw new IllegalStateException("mode " + mode);
        samOut.write(req.getBytes("UTF-8"));
        samOut.flush();
        if (_log.shouldLog(Log.DEBUG))         _log.debug("STREAM ACCEPT/FORWARD sent");
        if (mode == FORWARD || mode == FORWARDSSL) {
          boolean ok=eventHandler.waitForStreamStatusReply();
          if (!ok)           throw new IOException("Stream status failed");
          if (_log.shouldLog(Log.DEBUG))           _log.debug("got STREAM STATUS, awaiting connection");
        }
        return "OK";
      }
      _isV3=VersionComparator.comp(hisVersion,"3") >= 0;
      String dest;
      if (_isV3) {
        _isV32=VersionComparator.comp(hisVersion,"3.2") >= 0;
        File keys=new File("sam.keys");
        if (keys.exists()) {
          Properties opts=new Properties();
          DataHelper.loadProps(opts,keys);
          String s=opts.getProperty(_destFile);
          if (s != null) {
            dest=s;
          }
 else {
            dest="TRANSIENT";
            (new File(_destFile)).delete();
            if (_log.shouldLog(Log.DEBUG))             _log.debug("Requesting new transient destination");
          }
        }
 else {
          dest="TRANSIENT";
          (new File(_destFile)).delete();
          if (_log.shouldLog(Log.DEBUG))           _log.debug("Requesting new transient destination");
        }
        if (isMaster) {
          byte[] id=new byte[5];
          _context.random().nextBytes(id);
          _v3ID=Base32.encode(id);
          _conOptions="ID=" + _v3ID;
        }
      }
 else {
        dest=_destFile;
      }
      boolean masterMode;
      String command;
      if (mode >= MASTER) {
        masterMode=true;
        command="ADD";
        mode-=MASTER;
      }
 else {
        masterMode=false;
        command="CREATE DESTINATION=" + dest;
      }
      String style;
      if (mode == STREAM || mode == FORWARD || mode == FORWARDSSL)       style="STREAM";
 else       if (mode == V1DG)       style="DATAGRAM";
 else       if (mode == DG)       style="DATAGRAM PORT=" + V3DGPORT;
 else       if (mode == V1RAW)       style="RAW";
 else       if (mode == RAW)       style="RAW PORT=" + V3DGPORT;
 else       style="RAW HEADER=true PORT=" + V3DGPORT;
      if (masterMode) {
        String req="SESSION CREATE DESTINATION=" + dest + " STYLE=MASTER ID=masterSink "+ sopts+ '\n';
        samOut.write(req.getBytes("UTF-8"));
        samOut.flush();
        if (_log.shouldLog(Log.DEBUG))         _log.debug("SESSION CREATE STYLE=MASTER sent");
        boolean ok=eventHandler.waitForSessionCreateReply();
        if (!ok)         throw new IOException("SESSION CREATE STYLE=MASTER failed");
        if (_log.shouldLog(Log.DEBUG))         _log.debug("SESSION CREATE STYLE=MASTER reply found: " + ok);
      }
      String req="SESSION " + command + " STYLE="+ style+ ' '+ _conOptions+ ' '+ sopts+ '\n';
      samOut.write(req.getBytes("UTF-8"));
      samOut.flush();
      if (_log.shouldLog(Log.DEBUG))       _log.debug("SESSION " + command + " sent");
      if (mode == STREAM) {
        boolean ok;
        if (masterMode)         ok=eventHandler.waitForSessionAddReply();
 else         ok=eventHandler.waitForSessionCreateReply();
        if (!ok)         throw new IOException("SESSION " + command + " failed");
        if (_log.shouldLog(Log.DEBUG))         _log.debug("SESSION " + command + " reply found: "+ ok);
      }
      req="NAMING LOOKUP NAME=ME\n";
      samOut.write(req.getBytes("UTF-8"));
      samOut.flush();
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Naming lookup sent");
      String destination=eventHandler.waitForNamingReply("ME");
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Naming lookup reply found: " + destination);
      if (destination == null) {
        _log.error("No naming lookup reply found!");
        return null;
      }
      if (_log.shouldInfo())       _log.info(_destFile + " is located at " + destination);
      if (mode == V1DG || mode == V1RAW) {
        eventHandler.streamConnectedReceived(destination,"FAKE");
      }
      return destination;
    }
 catch (    IOException e) {
      _log.error("Error handshaking",e);
      return null;
    }
  }
}
