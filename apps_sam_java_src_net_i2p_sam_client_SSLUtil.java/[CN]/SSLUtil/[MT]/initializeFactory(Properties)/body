{
  String ksPass=opts.getProperty(PROP_KEYSTORE_PASSWORD,DEFAULT_KEYSTORE_PASSWORD);
  String keyPass=opts.getProperty(PROP_KEY_PASSWORD);
  if (keyPass == null) {
    throw new IOException("No key password, set " + PROP_KEY_PASSWORD + " in "+ (new File(I2PAppContext.getGlobalContext().getConfigDir(),DEFAULT_SAMCLIENT_CONFIGFILE)).getAbsolutePath());
  }
  String ksname=opts.getProperty(PROP_KS_NAME);
  if (ksname == null) {
    throw new IOException("No keystore, set " + PROP_KS_NAME + " in "+ (new File(I2PAppContext.getGlobalContext().getConfigDir(),DEFAULT_SAMCLIENT_CONFIGFILE)).getAbsolutePath());
  }
  File ks=new File(ksname);
  if (!ks.isAbsolute()) {
    ks=new File(I2PAppContext.getGlobalContext().getConfigDir(),KS_DIR);
    ks=new File(ks,ksname);
  }
  InputStream fis=null;
  try {
    SSLContext sslc=SSLContext.getInstance("TLS");
    KeyStore keyStore=KeyStore.getInstance(KeyStore.getDefaultType());
    fis=new FileInputStream(ks);
    keyStore.load(fis,ksPass.toCharArray());
    KeyManagerFactory kmf=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
    kmf.init(keyStore,keyPass.toCharArray());
    sslc.init(kmf.getKeyManagers(),null,I2PAppContext.getGlobalContext().random());
    return sslc.getServerSocketFactory();
  }
 catch (  GeneralSecurityException gse) {
    IOException ioe=new IOException("keystore error");
    ioe.initCause(gse);
    throw ioe;
  }
 finally {
    if (fis != null)     try {
      fis.close();
    }
 catch (    IOException ioe) {
    }
  }
}
