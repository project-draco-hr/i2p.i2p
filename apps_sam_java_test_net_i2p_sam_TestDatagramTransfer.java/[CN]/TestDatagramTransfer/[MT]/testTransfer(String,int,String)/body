{
  String destName="TRANSIENT";
  _log.info("\n\nTesting creating a new destination (should come back with 'SESSION STATUS RESULT=OK DESTINATION=someName)\n\n\n");
  try {
    Socket s=new Socket(host,port);
    OutputStream out=s.getOutputStream();
    out.write(DataHelper.getASCII("HELLO VERSION MIN=1.0 MAX=1.0\n"));
    BufferedReader reader=new BufferedReader(new InputStreamReader(s.getInputStream()));
    String line=reader.readLine();
    _log.debug("line read for valid version: " + line);
    String req="SESSION CREATE STYLE=DATAGRAM DESTINATION=" + destName + " "+ conOptions+ "\n";
    out.write(DataHelper.getASCII(req));
    line=reader.readLine();
    _log.info("Response to creating the session with destination " + destName + ": "+ line);
    _log.debug("The above should contain SESSION STATUS RESULT=OK\n\n\n");
    String lookup="NAMING LOOKUP NAME=ME\n";
    out.write(DataHelper.getASCII(lookup));
    line=reader.readLine();
    _log.info("Response from the lookup for ME: " + line);
    _log.debug("The above should be a NAMING REPLY");
    Properties props=SAMUtils.parseParams(line);
    String value=props.getProperty("VALUE");
    if (value == null) {
      _log.error("No value for ME found!  [" + line + "]");
      return;
    }
 else {
      _log.info("Alice is located at " + value);
    }
    String send="DATAGRAM SEND DESTINATION=" + value + " SIZE=3\nYo!";
    out.write(DataHelper.getASCII(send));
    line=reader.readLine();
    props=SAMUtils.parseParams(line);
    String size=props.getProperty("SIZE");
    String from=props.getProperty("DESTINATION");
    if ((value == null) || (size == null) || (!from.equals(value))|| (!size.equals("3"))) {
      _log.error("Reply of the datagram is incorrect: [" + line + "]");
      return;
    }
    char buf[]=new char[3];
    int read=reader.read(buf);
    if (read != 3) {
      _log.error("Unable to read the full datagram");
      return;
    }
    if (new String(buf).equals("Yo!")) {
      _log.info("Received payload successfully");
    }
 else {
      _log.error("Payload is incorrect!  [" + new String(buf) + "]");
    }
    try {
      Thread.sleep(5 * 1000);
    }
 catch (    InterruptedException ie) {
    }
    s.close();
  }
 catch (  Exception e) {
    _log.error("Error testing for valid version",e);
  }
}
