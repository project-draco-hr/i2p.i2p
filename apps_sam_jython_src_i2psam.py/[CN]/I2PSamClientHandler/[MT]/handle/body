def handle(self):
    '\n        Reads command/data messages from SAM Client, executes these,\n        and sends back responses.\n        \n        Plants callback hooks into I2PSession objects, so that when\n        data arrives via I2P, it can be immediately sent to the client.\n        '
    self.localsessions = {}
    self.globalsessions = self.server.sessions
    self.localstreams = {}
    self.globalstreams = self.server.streams
    self.samSessionIsOpen = 0
    self.samSessionStyle = ''
    self.sendLock = threading.Lock()
    log(5, ('Got req from %s' % repr(self.client_address)))
    try:
        self.namingService = i2p.client.naming.HostsTxtNamingService()
    except:
        logException(2, 'Failed to create naming service object')
    try:
        while 1:
            req = self.rfile.readline().strip()
            flds = [s.strip() for s in req.split(' ')]
            cmd = flds[0]
            if (cmd in ['HELLO', 'SESSION', 'STREAM', 'DATAGRAM', 'RAW', 'NAMING', 'DEST']):
                (topic, subtopic, args) = self.samParse(flds)
                method = getattr(self, ('on_' + cmd), None)
                method(topic, subtopic, args)
            else:
                method = getattr(self, ('on_' + cmd), None)
                if method:
                    method(flds)
                else:
                    self.wfile.write(("error unknown command '%s'\n" % cmd))
    except IOError:
        log(3, 'Client connection terminated')
    except ValueError:
        pass
    except:
        logException(4, 'Client req handler crashed')
        self.wfile.write('error\n')
    for dest in self.localsessions.keys():
        if (dest in self.globalsessions.keys()):
            log(4, ('forgetting global dest %s' % dest[:30]))
            del self.globalsessions[dest]
    self.finish()
