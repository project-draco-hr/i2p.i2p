def on_send(self, flds):
    log(4, 'entered')
    server = self.server
    client = server.i2pclient
    globalsessions = server.sessions
    sessionsLock = server.sessionsLock
    read = self.rfile.read
    readline = self.rfile.readline
    write = self.wfile.write
    flush = self.wfile.flush
    sessionsLock.acquire()
    session = None
    try:
        size = int(flds[1])
        b64priv = flds[2]
        b64peer = flds[3]
        msg = self._recvbytes(size)
        if (not globalsessions.has_key(b64priv)):
            log(4, 'no such session')
            write('error nosuchsession\n')
        elif (not self.localsessions.has_key(b64priv)):
            write('error notyoursession\n')
        else:
            session = self.localsessions[b64priv]
    except:
        logException(2, 'Send exception')
        write('error exception on send command\n')
    sessionsLock.release()
    if (not session):
        return
    try:
        peerDest = I2PDestination(base64=b64peer)
    except:
        peerDest = None
        logException(2, 'Send: bad remote dest')
        write('error bad remote dest\n')
    if (not peerDest):
        return
    try:
        res = session.sendMessage(peerDest, msg)
    except:
        logException(2, 'Send: failed')
        write('error exception on send\n')
        res = None
    if (res is None):
        return
    if res:
        write('ok\n')
    else:
        write('error send failed\n')
    log(4, 'done')
