def __init__(self, **kw):
    "\n        I2PSession constructor\n    \n        Keywords:\n            - either:\n                - session - a java i2p session object\n            - or:\n                - client - an L{I2PClient} object\n                - dest - an L{I2PDestination} object\n        Also:\n            - listener - an L{I2PSessionListener} object.\n    \n        Router-level options:\n            - reliability - one of 'guaranteed' and 'besteffort' (default 'besteffort')\n            - host - host on which router is running\n            - port - port on which router is listening\n        "
    options = {}
    reliability = takeKey(kw, 'reliability', 'besteffort')
    if (reliability == 'guaranteed'):
        reliability = jI2PClient.PROP_RELIABILITY_GUARANTEED
    else:
        reliability = jI2PClient.PROP_RELIABILITY_BEST_EFFORT
    options[jI2PClient.PROP_RELIABILITY] = reliability
    host = takeKey(kw, 'host', self.host)
    options[jI2PClient.PROP_TCP_HOST] = host
    port = takeKey(kw, 'port', self.port)
    options[jI2PClient.PROP_TCP_PORT] = str(port)
    if kw.has_key('reliability'):
        reliability = kw['reliability']
    if kw.has_key('listener'):
        listener = kw['listener']
        del kw['listener']
    else:
        listener = I2PSessionListener()
    if kw.has_key('session'):
        session = kw['session']
        del kw['session']
        JavaWrapper.__init__(self, session)
    elif (kw.has_key('client') and kw.has_key('dest')):
        client = kw['client']
        dest = kw['dest']
        del kw['client']
        del kw['dest']
        destStream = java.io.ByteArrayInputStream(dest._private)
        session = self._item = client._item.createSession(destStream, dict2props(options))
    else:
        raise Exception('implementation incomplete')
    self.setSessionListener(listener)
    self.qInbound = Queue.Queue()
    self.lockInbound = threading.Lock()
    self.nInboundMessages = 0
    self.lockOutbound = threading.Lock()
