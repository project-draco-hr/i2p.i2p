def __init__(self, dest=None, **kw):
    '\n        Create an I2P streaming socket\n    \n        Arguments:\n            - dest - a private destination to associate with this socket\n    \n        Keywords:\n            - host - hostname on which i2cp is listening (default self.host)\n            - port - port on which i2cp listens (default self.port)\n    \n        Internally used keywords (used for wrapping an accept()ed connection):\n            - dest\n            - remdest\n            - sock\n            - instream\n            - outstream\n        '
    self.sockmgr = None
    self.instream = None
    self.outstream = None
    self.sock = None
    self._connected = 0
    self._blocking = 1
    self.dest = dest
    if (kw.has_key('sock') and kw.has_key('remdest') and kw.has_key('instream') and kw.has_key('outstream')):
        log(4, "accept()'ed a connection, wrapping...")
        self.sock = kw['sock']
        self.dest = dest
        self.remdest = kw['remdest']
        self.instream = kw['instream']
        self.outstream = kw['outstream']
    else:
        log(4, ('creating new I2PSocket %s' % dest))
        self.host = kw.get('host', self.host)
        self.port = int(kw.get('port', self.port))
        self.sockmgrFact = i2p.client.streaming.I2PSocketManagerFactory()
