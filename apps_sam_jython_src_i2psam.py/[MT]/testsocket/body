def testsocket():
    global d1, d2, s1, s2
    print 
    print '********************************************'
    print 'Testing I2P streaming interface'
    print '********************************************'
    print 
    print 'Creating destinations...'
    dServer = I2PDestination()
    dClient = I2PDestination()
    print 'Creating sockets...'
    sServer = I2PSocket(dServer)
    sClient = I2PSocket(dClient)

    def servThread(s):
        print 'server: binding socket'
        s.bind()
        print 'server: setting socket to listen'
        s.listen()
        print 'server: awaiting connection'
        sock = s.accept()
        print 'server: got connection'
        sock.send('Hello, echoing...\n')
        buf = ''
        while 1:
            c = sock.recv(1)
            if (c == ''):
                sock.close()
                print 'server: socket closed'
                break
            buf += c
            if (c == '\n'):
                sock.send(('SERVER: ' + buf))
                buf = ''

    def clientThread(s):
        buf = ''
        while 1:
            c = s.recv(1)
            if (c == ''):
                s.close()
                print 'client: socket closed'
                break
            buf += c
            if (c == '\n'):
                print ('client: got %s' % repr(buf))
                buf = ''
    print 'launching server thread...'
    thread.start_new_thread(servThread, (sServer,))
    print 'client: trying to connect'
    sClient.connect(dServer)
    print 'client: connected, launching rx thread'
    thread.start_new_thread(clientThread, (sClient,))
    while 1:
        line = raw_input('Enter something (q to quit)> ')
        if (line == 'q'):
            print 'closing client socket'
            sClient.close()
            break
        sClient.send((line + '\n'))
    print 'I2PSocket test apparently succeeded'
