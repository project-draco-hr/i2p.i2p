def __init__(self, receive, make_send, nconnect=(-1), timeout=60.0):
    "A Tunnel relays connections from a 'receive' socket to one\n       or more 'send' sockets.  The receive socket must be bound\n       and listening.  For each incoming connection, a new send\n       socket is created by calling make_send().  Data is then\n       exchanged between the created streams until one socket is\n       closed.  nconnect is the maximum number of simultaneous\n       connections (-1 for infinite), and timeout is the time that\n       a single connection can last for (None allows a connection\n       to last forever).\n\n       Sockets must accept stream traffic and support the Python\n       socket interface.  A separate daemonic thread is created to\n       manage the tunnel.  For high performance, make_send() should\n       make a socket and connect in non-blocking mode (you should\n       catch and discard the sam.BlockError or socket.error due to\n       executing connect on a non-blocking socket).\n\n       Security Note:\n       A firewall is needed to maintain the end user's anonymity.\n       An attacker could keep a tunnel socket open by pinging it\n       regularly.  The accepted sockets from 'receive' must prevent\n       this by closing down eventually.\n\n       Socket errors do not cause the Tunnel to shut down.\n    "
    self.receive = receive
    self.make_send = make_send
    self.receive.setblocking(False)
    self.alive = True
    self.nconnect = nconnect
    self.timeout = timeout
    T = threading.Thread(target=self._run, args=())
    T.setDaemon(True)
    T.start()
