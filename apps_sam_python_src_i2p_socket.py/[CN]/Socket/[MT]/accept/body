def accept(self):
    "Accept an incoming connection.  The socket must be type\n       SOCK_STREAM, and listen() must be called prior to this\n       command.  The return value is (conn, remotedest), where\n       conn is a new socket object made for the connection, and\n       remotedest is the remote Destination from which the\n       connection was made.\n\n       Example:\n\n         >>> from i2p import socket\n         >>> s = socket.socket('Alice', socket.SOCK_STREAM)\n         >>> s.listen(10)\n\n       This prepares the server.  Now accept an incoming connection:\n\n         >>> c, remotedest = s.accept()\n         >>> c.send('hello world!')\n\n       If accept() is called on a socket that is in non-blocking\n       mode or has a timeout, i2p.socket.BlockError or\n       i2p.socket.Timeout may be raised.  This indicates that no\n       incoming connection is currently available."
    self._verify_open()
    self._verify_not_connected()
    C = _wrap_stream(self.sessobj.accept(self.timeout), self)
    return (C, C.remotedest)
