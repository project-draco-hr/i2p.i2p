def connect(self, address):
    "\n    Connect to a remote dest, identified in local SAM bridge's hosts\n    file as host 'address'.\n\n    For example:\n      >>> s.connect('duck.i2p')\n\n    Alternatively, you can use a full base64 Destination:\n\n    Example:\n      >>> s.connect('238797sdfh2k34kjh....AAAA')\n\n    If connect() is called on a socket that is in non-blocking\n    mode or has a timeout, i2p.socket.BlockError or\n    i2p.socket.Timeout may be raised.  This indicates that the\n    connection is still being initiated.  Use i2p.select.select()\n    to determine when the connection is ready.\n    "
    self.lock.acquire()
    try:
        self._verify_open()
        if ((self.type == SOCK_DGRAM) or (self.type == SOCK_RAW)):
            self.packet_dest = address
            return
        self._verify_not_connected()
        address = resolve(address, self.samaddr)
        timeout = self.timeout
        unwrap = self.sessobj.connect(address, timeout=timeout)
        w = _wrap_stream(unwrap, self)
        self.sessobj = w.sessobj
        self.remotedest = w.remotedest
        if (self.sessobj.err != None):
            raise self.sessobj.err
        if (not self.sessobj.didconnect):
            if (timeout == 0.0):
                raise BlockError(('command would have blocked.  use ' + 'i2p.select.select() to find when socket is connected'))
            else:
                raise Timeout(('timed out.  use i2p.select.select()' + ' to find when socket is connected'))
    finally:
        self.lock.release()
