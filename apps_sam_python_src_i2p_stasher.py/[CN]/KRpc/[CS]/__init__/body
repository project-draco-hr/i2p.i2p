def __init__(self, localNode, client=None, **kw):
    '\n        Holds all the information for an RPC\n    \n        Arguments:\n            - localNode - the node from which this RPC is being driven\n            - client - a representation of who is initiating this rpc, one of:\n                - None - an API caller, which is to be blocked until the RPC completes\n                  or times out\n                - (upstreamPeer, upstreamMsgId) - an upstream peer\n                - callable object - something which requires a callback upon completion\n                  in which case the callable will be invoked with the RPC results as the\n                  first argument\n    \n        Keywords:\n            - cbArgs - optional - if given, and if client is a callback, the callback\n              will be invoked with the results as first argument, and this object as\n              second argument\n        '
    self.localNode = localNode
    if (client == None):
        self.isLocal = True
        self.queue = Queue.Queue()
        self.callback = None
    elif callable(client):
        self.isLocal = False
        self.callback = client
    elif isinstance(client, tuple):
        (upstreamPeer, upstreamMsgId) = client
        upstreamPeer = localNode._normalisePeer(upstreamPeer)
        self.isLocal = False
        self.upstreamPeer = upstreamPeer
        self.upstreamMsgId = upstreamMsgId
        self.callback = None
    self.__dict__.update(kw)
    self.nextTickTime = None
    self.localNode.rpcPending.append(self)
    self.start()
