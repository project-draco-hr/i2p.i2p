def stream_test():
    'Multithreaded unit test for sam.socket (SOCK_STREAM).'
    try:
        multithread_wait_time = 200.0
        may_need_increase = False
        kwargs = {'in_depth': 0, 'out_depth': 0, }
        C = sam.socket('Carolic', sam.SOCK_STREAM, **kwargs)
        D = sam.socket('David', sam.SOCK_STREAM, **kwargs)
        Cout = sam.socket('Carolic', sam.SOCK_STREAM, **kwargs)
        Dout = sam.socket('David', sam.SOCK_STREAM, **kwargs)
        assert (C.dest == Cout.dest)
        assert (D.dest == Dout.dest)
        C.listen(5)
        D.listen(5)
        Cout.connect(D.dest)
        Dout.connect(C.dest)
        (Cin, ignoredest) = C.accept()
        (Din, ignoredest) = D.accept()
        global C_recv, D_recv, C_got, D_got, __lock
        C_recv = []
        D_recv = []
        C_got = []
        D_got = []
        n = 50
        m = 40
        global __done_count
        __done_count = 0
        __lock = threading.Lock()

        def f():
            global C_recv, D_recv, C_got, D_got, __lock, __done_count
            for i in range(m):
                index_list = range(random.randrange(2, 80))
                s = ''.join([chr(random.randrange(256)) for j in index_list])
                if (random.randrange(2) == 0):
                    __lock.acquire()
                    Cout.send(s)
                    D_recv += [s]
                    __lock.release()
                else:
                    __lock.acquire()
                    Dout.send(s)
                    C_recv += [s]
                    __lock.release()
                time.sleep((0.01 * random.uniform(0.0, 1.0)))
                __lock.acquire()
                try:
                    p = Cin.recv(100000, sam.MSG_DONTWAIT)
                except sam.BlockError:
                    p = None
                if (p != None):
                    C_got += [p]
                __lock.release()
                __lock.acquire()
                try:
                    p = Din.recv(100000, sam.MSG_DONTWAIT)
                except sam.BlockError:
                    p = None
                if (p != None):
                    D_got += [p]
                __lock.release()
            __lock.acquire()
            __done_count += 1
            __lock.release()
        for i in range(n):
            threading.Thread(target=f).start()
        while (__done_count < n):
            time.sleep(0.01)
        end_time = (time.clock() + multithread_wait_time)
        while (time.clock() < end_time):
            try:
                p = Cin.recv(100000, sam.MSG_DONTWAIT)
            except sam.BlockError:
                p = None
            if (p != None):
                C_got += [p]
            try:
                p = Din.recv(100000, sam.MSG_DONTWAIT)
            except sam.BlockError:
                p = None
            if (p != None):
                D_got += [p]
            if ((len(''.join(C_got)) == len(''.join(C_recv))) and (len(''.join(D_got)) == len(''.join(D_recv)))):
                break
        if (time.clock() >= end_time):
            may_need_increase = True
        C_got = ''.join(C_got)
        D_got = ''.join(D_got)
        C_recv = ''.join(C_recv)
        D_recv = ''.join(D_recv)
        assert (C_got == C_recv)
        assert (D_got == D_recv)
        Cin.close()
        Din.close()
        Cout.close()
        Dout.close()
        C.close()
        D.close()
    except:
        print ('Unit test failed for sam.socket ' + '(SOCK_STREAM, multithreaded).')
        if may_need_increase:
            print 'Try increasing multithread_wait_time.'
        traceback.print_exc()
        sys.exit()
    test_passed('sam.socket (SOCK_STREAM, multithreaded)')
