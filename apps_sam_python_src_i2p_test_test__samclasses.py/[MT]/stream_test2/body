def stream_test2():
    'Unit test for samclasses.StreamSession.accept.'
    global __server_done, __client_done, __err
    __server_done = False
    __client_done = False
    __err = None
    S = samclasses.StreamSession('Bob')
    S.listen(10)
    msg = '<h1>Hello!</h1>'

    def serve():
        try:
            for i in range(3):
                C = S.accept()
                req = stream_readline(C)
                s = msg
                C.send((((('HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n' + 'Content-Length: ') + str(int(len(s)))) + '\r\n\r\n') + s))
                if ((i % 2) == 0):
                    C.close()
            S.close()
        except Exception as e:
            global __err
            __err = e
        global __server_done
        __server_done = True
    thread.start_new_thread(serve, ())
    time.sleep(2.0)

    def client():
        try:
            S2 = samclasses.StreamSession('Carol')
            assert (stream_http_get(S2, S.dest) == msg)
            assert (stream_http_get(S2, S.dest) == msg)
            assert (stream_http_get(S2, S.dest) == msg)
            S2.close()
        except Exception as e:
            global __err
            __err = e
        global __client_done
        __client_done = True
    thread.start_new_thread(client, ())
    while (not (__client_done and __server_done)):
        time.sleep(0.01)
    if (__err != None):
        print 'Unit test failed for samclasses.StreamSession.accept'
        raise __err
    test_passed('samclasses.StreamSession.accept')
