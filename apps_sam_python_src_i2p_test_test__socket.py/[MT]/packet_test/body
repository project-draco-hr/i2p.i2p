def packet_test(raw=True):
    'Unit test for socket.socket in SOCK_DGRAM or SOCK_RAW modes.'
    try:
        multithread_wait_time = 500.0
        may_need_increase = False
        kwargs = {'in_depth': 0, 'out_depth': 0, }
        if raw:
            C = socket.socket('Carola', socket.SOCK_RAW, **kwargs)
            D = socket.socket('Davey', socket.SOCK_RAW, **kwargs)
        else:
            C = socket.socket('Carol', socket.SOCK_DGRAM, **kwargs)
            D = socket.socket('Dave', socket.SOCK_DGRAM, **kwargs)
        global C_recv, D_recv, C_got, D_got, __lock
        C_recv = []
        D_recv = []
        C_got = []
        D_got = []
        n = 50
        m = 40
        global __done_count
        __done_count = 0
        __lock = threading.Lock()

        def f():
            global C_recv, D_recv, C_got, D_got, __lock, __done_count
            for i in range(m):
                index_list = range(random.randrange(2, 80))
                s = ''.join([chr(random.randrange(256)) for j in index_list])
                if (random.randrange(2) == 0):
                    C.sendto(s, 0, D.dest)
                    __lock.acquire()
                    D_recv += [s]
                    __lock.release()
                else:
                    D.sendto(s, 0, C.dest)
                    __lock.acquire()
                    C_recv += [s]
                    __lock.release()
                time.sleep((0.01 * random.uniform(0.0, 1.0)))
                try:
                    (p, fromaddr) = C.recvfrom(1000, socket.MSG_DONTWAIT)
                except socket.BlockError:
                    p = None
                if ((p != None) and (not raw)):
                    assert (fromaddr == D.dest)
                __lock.acquire()
                if (p != None):
                    C_got += [p]
                __lock.release()
                try:
                    (p, fromaddr) = D.recvfrom(1000, socket.MSG_DONTWAIT)
                except socket.BlockError:
                    p = None
                if ((p != None) and (not raw)):
                    assert (fromaddr == C.dest)
                __lock.acquire()
                if (p != None):
                    D_got += [p]
                __lock.release()
            __lock.acquire()
            __done_count += 1
            __lock.release()
        for i in range(n):
            threading.Thread(target=f).start()
        while (__done_count < n):
            time.sleep(0.01)
        end_time = (time.time() + multithread_wait_time)
        while (time.time() < end_time):
            try:
                (p, fromaddr) = C.recvfrom(1000, socket.MSG_DONTWAIT)
            except socket.BlockError:
                p = None
            if ((p != None) and (not raw)):
                assert (fromaddr == D.dest)
            if (p != None):
                C_got += [p]
            try:
                (p, fromaddr) = D.recvfrom(1000, socket.MSG_DONTWAIT)
            except socket.BlockError:
                p = None
            if ((p != None) and (not raw)):
                assert (fromaddr == C.dest)
            if (p != None):
                D_got += [p]
            if ((len(C_got) == len(C_recv)) and (len(D_got) == len(D_recv))):
                break
        if (time.time() >= end_time):
            may_need_increase = True
        C_got.sort()
        D_got.sort()
        C_recv.sort()
        D_recv.sort()
        assert (C_got == C_recv)
        assert (D_got == D_recv)
        C.close()
        D.close()
    except:
        if raw:
            print 'Unit test failed for socket.socket (SOCK_RAW).'
            print 'Raw packets are not reliable.'
        else:
            print 'Unit test failed for socket.socket (SOCK_DGRAM).'
            print 'Datagram packets are not reliable.'
        if may_need_increase:
            print 'Try increasing multithread_wait_time.'
        traceback.print_exc()
        sys.exit()
    if raw:
        test_passed('socket.socket (SOCK_RAW)')
    else:
        test_passed('socket.socket (SOCK_DGRAM)')
