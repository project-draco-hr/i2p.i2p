def samSessionCreate(self, style, dest, **kw):
    "\n        Creates a SAM session\n        \n        Arguments:\n            - style - one of 'STREAM', 'DATAGRAM' or 'RAW'\n            - dest - base64 private destination\n        \n        Keywords:\n            - direction - only used for STREAM sessions, can be RECEIVE,\n              CREATE or BOTH (default BOTH)\n            - i2cphost - hostname for the SAM bridge to contact i2p router on\n            - i2cpport - port for the SAM bridge to contact i2p router on\n        \n        Returns:\n            - 'OK' if session was created successfully, or a tuple\n              (keyword, message) if not\n        "
    kw1 = dict(kw)
    kw1['STYLE'] = self.samStyle = style
    kw1['DESTINATION'] = dest
    if (style == 'STREAM'):
        direction = kw.get('direction', 'BOTH')
        kw1['DIRECTION'] = direction
        if (direction == 'BOTH'):
            self.canAccept = 1
            self.canConnect = 1
        elif (direction == 'RECEIVE'):
            self.canAccept = 1
            self.canConnect = 0
        elif (direction == 'CREATE'):
            self.canAccept = 0
            self.canConnect = 1
        else:
            raise I2PCommandFail('direction keyword must be one of RECEIVE, CREATE or BOTH')
    if kw.has_key('i2cphost'):
        kw1['I2CP.HOST'] = kw['i2cphost']
    if kw.has_key('i2cpport'):
        kw1['I2CP.PORT'] = kw['i2cpport']
    self.samSend('SESSION', 'CREATE', **kw1)
    (subtopic, args) = self.qSession.get()
    if (args['RESULT'] == 'OK'):
        return 'OK'
    else:
        return (args['RESULT'], args['MESSAGE'])
