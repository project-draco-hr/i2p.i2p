def __init__(self, val=None, **kw):
    "\n        Create a new hash object.\n        \n        val can be one of the following:\n            - None (default) - a random value will be created\n            - long int - this will be used as the raw hash\n            - string - the string will be hashed and stored\n            - another KHash object - its value will be taken\n            - a KNode or KPeer object - its hash will be taken\n    \n        If val is not given, a raw hash value can be passed in\n        with the keyword 'raw'. Such value must be a python long int\n        or a 20-char string\n        "
    self.value = 0L
    if val:
        if isinstance(val, KHash):
            self.value = val.value
        elif (type(val) in [type(0), type(0L)]):
            self.value = long(val)
        elif (isinstance(val, KNode) or isinstance(val, KPeer)):
            self.value = val.id.value
        else:
            raw = self.raw = shahash(val, bin=1)
            for c in raw:
                self.value = ((self.value * 256) + ord(c))
    else:
        rawval = kw.get('raw', None)
        if (rawval == None):
            random.seed()
            for i in range(20):
                self.value = ((self.value * 256) + random.randint(0, 256))
        elif (type(rawval) in [type(0), type(0L)]):
            self.value = long(rawval)
        elif (type(rawval) == type('')):
            if (len(rawval) == 20):
                for i in rawval:
                    self.value = ((self.value * 256) + ord(i))
            elif (len(rawval) == 40):
                try:
                    self.value = long(rawval, 16)
                except:
                    raise KBadHash(rawval)
            else:
                raise KBadHash(rawval)
        else:
            print ('rawval=%s %s %s' % (type(rawval), rawval.__class__, repr(rawval)))
            raise KBadHash(rawval)
