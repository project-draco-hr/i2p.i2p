def _doRx(self):
    '\n        Receives and handles one incoming packet\n        \n        Returns True if a packet got handled, or False if timeout\n        '
    self.log(5, ('%s seeking socket lock' % self.name))
    self.log(5, ('%s got socket lock' % self.name))
    try:
        item = self.sock.recvfrom((-1))
    except i2p.socket.BlockError:
        self.log(5, ('%s released socket lock after timeout' % self.name))
        if (not runCore):
            time.sleep(0.1)
        return False
    except:
        traceback.print_exc()
        self.log(5, ('%s released socket lock after exception' % self.name))
        return True
    self.log(5, ('%s released socket lock normally' % self.name))
    try:
        (data, dest) = item
    except ValueError:
        self.log(3, ('node %s: recvfrom returned no dest, possible spoof' % self.name))
        data = item[0]
        dest = None
    try:
        d = messageDecode(data)
    except:
        traceback.print_exc()
        self.log(3, ('failed to unpickle incoming data for node %s' % self.name))
        return True
    if (type(d) != type({})):
        self.log(3, ('node %s: decoded packet is not a dict' % self.name))
        return True
    if (dest == None):
        if (hasattr(d, 'has_key') and d.has_key('dest')):
            dest = d['dest']
    peerObj = self._findPeer(dest)
    if (peerObj == None):
        peerObj = self.addref(dest)
    else:
        peerObj.justSeen()
        self.addref(peerObj.dest)
    msgId = d.get('msgId', None)
    if (msgId == None):
        self.log(3, 'no msgId, dropping')
        return True
    del d['msgId']
    msgType = d.get('type', 'unknown')
    if desperatelyDebugging:
        pass
    item = self.rpcBindings.get((peerObj.dest, msgId), None)
    if item:
        (rpc, peer) = item
        try:
            rpc.unbindPeerReply(peerObj, msgId)
            if desperatelyDebugging:
                set_trace()
            rpc.on_reply(peerObj, msgId, **d)
        except:
            traceback.print_exc()
            self.log(2, 'unhandled exception in RPC on_reply')
    else:
        self.log(5, ('\nnode %s\ngot msg id %s type %s:\n%s' % (self.name, msgId, msgType, d)))
        hdlrName = d.get('type', 'unknown')
        hdlr = getattr(self, ('_on_' + hdlrName))
        try:
            if desperatelyDebugging:
                set_trace()
            hdlr(peerObj, msgId, **d)
        except:
            traceback.print_exc()
            self.log(2, ('unhandled exception in unbound packet handler %s' % hdlrName))
    return True
