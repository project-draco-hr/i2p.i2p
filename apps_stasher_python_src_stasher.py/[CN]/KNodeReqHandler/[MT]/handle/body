def handle(self):
    '\n        Conducts all conversation for a single req\n        '
    req = self.request
    client = self.client_address
    server = self.server
    node = self.server.node
    read = self.rfile.read
    readline = self.rfile.readline
    write = self.wfile.write
    flush = self.wfile.flush
    finish = self.finish
    write(('Stasher version %s ready\n' % version))
    line = readline().strip()
    try:
        (cmd, args) = re.split('\\s+', line, 1)
    except:
        cmd = line
        args = ''
    self.log(3, ('cmd=%s args=%s' % (repr(cmd), repr(args))))
    if (cmd == 'get'):
        value = node.get(args)
        if (value == None):
            write('notfound\n')
        else:
            write(('ok\n%s\n%s' % (len(value), value)))
        flush()
        finish()
        return
    elif (cmd == 'put'):
        try:
            size = int(readline())
            value = read(size)
            res = node.put(args, value)
            if res:
                write('ok\n')
            else:
                write('failed\n')
            flush()
        except:
            traceback.print_exc()
            write('exception\n')
        finish()
        return
    elif (cmd == 'addref'):
        try:
            res = node.addref(args, True)
            if res:
                write('ok\n')
            else:
                write('failed\n')
            flush()
        except:
            traceback.print_exc()
            write('exception\n')
        finish()
        return
    elif (cmd == 'getref'):
        res = node.dest
        write('ok\n')
        write(('%s\n' % res))
        finish()
        return
    elif (cmd == 'pingall'):
        res = node._pingall()
        write((res + '\n'))
        finish()
        return
    elif (cmd == 'die'):
        server.isRunning = False
        write('server terminated\n')
        finish()
    else:
        write('unrecognisedcommand\n')
        finish()
        return
