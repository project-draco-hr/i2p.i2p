def main():
    '\n    Command line interface\n    '
    global samAddr, clientAddr, logVerbosity, dataDir
    argv = sys.argv
    argc = len(argv)
    try:
        (opts, args) = getopt.getopt(sys.argv[1:], 'h?vV:S:C:sd:f', ['help', 'version', 'samaddr=', 'clientaddr=', 'verbosity=', 'status', 'datadir=', 'foreground'])
    except:
        traceback.print_exc(file=sys.stdout)
        usage('You entered an invalid option')
    daemonise = True
    verbosity = 2
    debug = False
    foreground = False
    for (opt, val) in opts:
        if (opt in ['-h', '-?', '--help']):
            usage(True)
        elif (opt in ['-v', '--version']):
            print ('Stasher version %s' % version)
            sys.exit(0)
        elif (opt in ['-V', '--verbosity']):
            logVerbosity = int(val)
        elif (opt in ['-f', '--foreground']):
            foreground = True
        elif (opt in ['-S', '--samaddr']):
            samAddr = val
        elif (opt in ['-C', '--clientaddr']):
            clientAddr = val
        elif (opt in ['-s', '--status']):
            dumpStatus()
        elif (opt in ['-d', '--datadir']):
            dataDir = val
    if (len(args) == 0):
        err('No command given')
        usage(0, 1)
    cmd = args.pop(0)
    argc = len(args)
    if (cmd not in ['help', '_start', 'start', 'stop', 'hello', 'get', 'put', 'addref', 'getref']):
        err(("Illegal command '%s'" % cmd))
        usage(0, 1)
    if (cmd == 'help'):
        usage()
    if (foreground and (cmd == 'start')):
        cmd = '_start'
    if (cmd == '_start'):
        if (argc not in [0, 1]):
            err('start: bad argument count')
            usage()
        if (argc == 0):
            nodeName = defaultNodename
        else:
            nodeName = args[0]
        node = KNode(nodeName)
        node.start()
        log(3, ('Node %s launched, dest = %s' % (node.name, node.dest)))
        node.serve()
        sys.exit(0)
    if (cmd == 'start'):
        if (argc not in [0, 1]):
            err('start: bad argument count')
            usage()
        if (argc == 0):
            nodeName = defaultNodename
        else:
            nodeName = args[0]
        pidFile = nodePidfile(nodeName)
        if os.path.exists(pidFile):
            err((((("Stasher node '%s' seems to be already running. If you are\n" % nodeName) + "absolutely sure it's not running, please remove its pidfile:\n") + pidFile) + '\n'))
            sys.exit(1)
        import stasher
        pid = spawnproc(sys.argv[0], '-S', samAddr, '-C', clientAddr, '_start', nodeName)
        file(pidFile, 'wb').write(('%s' % pid))
        print ('Launched stasher node as pid %s' % pid)
        print ('Pidfile is %s' % pidFile)
        sys.exit(0)
    if (cmd == 'stop'):
        if (argc not in [0, 1]):
            err('stop: bad argument count')
            usage()
        if (argc == 0):
            nodeName = defaultNodename
        else:
            nodename = args[0]
        pidFile = nodePidfile(nodeName)
        if (not os.path.isfile(pidFile)):
            err(("Stasher node '%s' is not running - cannot kill\n" % nodeName))
            sys.exit(1)
        pid = int(file(pidFile, 'rb').read())
        try:
            killproc(pid)
            print ('Killed stasher node (pid %s)' % pid)
        except:
            print ('Failed to kill node (pid %s)' % pid)
        os.unlink(pidFile)
        sys.exit(0)
    try:
        client = KNodeClient()
    except:
        traceback.print_exc()
        err(("Node doesn't seem to be up, or reachable on %s" % clientAddr))
        return
    if (cmd == 'hello'):
        err('Node seems fine')
        sys.exit(0)
    elif (cmd == 'get'):
        if (argc not in [1, 2]):
            err('get: bad argument count')
            usage()
        key = args[0]
        if (argc == 2):
            path = args[1]
            try:
                outfile = file(path, 'wb')
            except:
                err(('Cannot open output file %s' % repr(path)))
                usage(0, 1)
        else:
            outfile = sys.stdout
        res = client.get(key)
        if (res == None):
            err(("Failed to retrieve '%s'" % key))
            sys.exit(1)
        else:
            outfile.write(res)
            outfile.flush()
            outfile.close()
            sys.exit(0)
    elif (cmd == 'put'):
        if (argc not in [1, 2]):
            err('put: bad argument count')
            usage()
        key = args[0]
        if (argc == 2):
            path = args[1]
            try:
                infile = file(path, 'rb')
            except:
                err(('Cannot open input file %s' % repr(path)))
                usage(0, 1)
        else:
            infile = sys.stdin
        val = infile.read()
        if (len(val) > maxValueSize):
            err(('File is too big - please trim to %s' % maxValueSize))
        res = client.put(key, val)
        if (res == None):
            err(("Failed to insert '%s'" % key))
            sys.exit(1)
        else:
            sys.exit(0)
    elif (cmd == 'addref'):
        if (argc not in [0, 1]):
            err('addref: bad argument count')
            usage()
        if (argc == 1):
            path = args[0]
            try:
                infile = file(path, 'rb')
            except:
                err(('Cannot open input file %s' % repr(path)))
                usage(0, 1)
        else:
            infile = sys.stdin
        ref = infile.read()
        res = client.addref(ref)
        if (res == None):
            err('Failed to add ref')
            sys.exit(1)
        else:
            sys.exit(0)
    elif (cmd == 'getref'):
        if (argc not in [0, 1]):
            err('getref: bad argument count')
            usage()
        if (argc == 1):
            path = args[0]
            try:
                outfile = file(path, 'wb')
            except:
                err(('Cannot open output file %s' % repr(path)))
                usage(0, 1)
        else:
            outfile = sys.stdout
        res = client.getref()
        if (res == None):
            err('Failed to retrieve node ref')
            sys.exit(1)
        else:
            outfile.write(res)
            outfile.flush()
            outfile.close()
            sys.exit(0)
