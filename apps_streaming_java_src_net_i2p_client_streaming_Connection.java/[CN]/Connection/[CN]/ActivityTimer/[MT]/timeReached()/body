{
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Fire inactivity timer on " + Connection.this.toString());
  if (!_connected) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Inactivity timeout reached, but we are already closed");
    return;
  }
  long left=getTimeLeft();
  if (left > 0) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Inactivity timeout reached, but there is time left (" + left + ")");
    schedule(left);
    return;
  }
  if (getUnackedPacketsSent() > 0) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Inactivity timeout reached, but there are unacked packets");
    return;
  }
  if (_options.getInactivityTimeout() <= 0) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Inactivity timeout reached, but there is no timer...");
    return;
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Inactivity timeout reached, with action=" + _options.getInactivityAction());
switch (_options.getInactivityAction()) {
case ConnectionOptions.INACTIVITY_ACTION_NOOP:
    if (_log.shouldLog(Log.WARN))     _log.warn("Inactivity timer expired, not doing anything");
  break;
case ConnectionOptions.INACTIVITY_ACTION_SEND:
if (_closeSentOn <= 0 && _closeReceivedOn <= 0) {
  if (_log.shouldLog(Log.WARN))   _log.warn("Sending some data due to inactivity");
  _receiver.send(null,0,0,true);
  break;
}
case ConnectionOptions.INACTIVITY_ACTION_DISCONNECT:
default :
if (_log.shouldLog(Log.WARN)) _log.warn("Closing connection due to inactivity");
if (_log.shouldLog(Log.DEBUG)) {
StringBuilder buf=new StringBuilder(128);
buf.append("last sent was: ").append(_context.clock().now() - _lastSendTime);
buf.append("ms ago, last received was: ").append(_context.clock().now() - _lastReceivedOn);
buf.append("ms ago, inactivity timeout is: ").append(_options.getInactivityTimeout());
_log.debug(buf.toString());
}
IOException ioe=new IOException("Inactivity timeout");
_inputStream.streamErrorOccurred(ioe);
_outputStream.streamErrorOccurred(ioe);
disconnect(_disconnectScheduledOn >= 0);
break;
}
}
