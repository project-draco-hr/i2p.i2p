{
  if (ackThrough < _highestAckedThrough) {
  }
 else {
    if (nacks == null) {
      _highestAckedThrough=ackThrough;
    }
 else {
      long lowest=-1;
      for (int i=0; i < nacks.length; i++) {
        if ((lowest < 0) || (nacks[i] < lowest))         lowest=nacks[i];
      }
      if (lowest - 1 > _highestAckedThrough)       _highestAckedThrough=lowest - 1;
    }
  }
  List<PacketLocal> acked=null;
synchronized (_outboundPackets) {
    if (!_outboundPackets.isEmpty()) {
      for (Iterator<Map.Entry<Long,PacketLocal>> iter=_outboundPackets.entrySet().iterator(); iter.hasNext(); ) {
        Map.Entry<Long,PacketLocal> e=iter.next();
        long id=e.getKey().longValue();
        if (id <= ackThrough) {
          boolean nacked=false;
          if (nacks != null) {
            for (int i=0; i < nacks.length; i++) {
              if (nacks[i] == id) {
                nacked=true;
                PacketLocal nackedPacket=e.getValue();
                nackedPacket.incrementNACKs();
                break;
              }
            }
          }
          if (!nacked) {
            if (acked == null)             acked=new ArrayList(8);
            PacketLocal ackedPacket=e.getValue();
            ackedPacket.ackReceived();
            acked.add(ackedPacket);
            iter.remove();
          }
        }
 else {
          break;
        }
      }
    }
    if (acked != null) {
      for (int i=0; i < acked.size(); i++) {
        PacketLocal p=acked.get(i);
        _ackedPackets++;
        if (p.getNumSends() > 1) {
          _activeResends.decrementAndGet();
          if (_log.shouldLog(Log.DEBUG))           _log.debug("Active resend of " + p + " successful, # active left: "+ _activeResends);
        }
      }
    }
    if ((_outboundPackets.isEmpty()) && (_activeResends.get() != 0)) {
      if (_log.shouldLog(Log.INFO))       _log.info("All outbound packets acked, clearing " + _activeResends);
      _activeResends.set(0);
    }
    _outboundPackets.notifyAll();
  }
  if ((acked != null) && (!acked.isEmpty()))   _ackSinceCongestion=true;
  return acked;
}
