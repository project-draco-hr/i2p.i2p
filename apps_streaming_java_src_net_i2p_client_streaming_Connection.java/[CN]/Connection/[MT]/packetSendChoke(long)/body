{
  long start=_context.clock().now();
  long writeExpire=start + timeoutMs;
  boolean started=false;
  while (true) {
    long timeLeft=writeExpire - _context.clock().now();
synchronized (_outboundPackets) {
      if (!started)       _context.statManager().addRateData("stream.chokeSizeBegin",_outboundPackets.size(),timeoutMs);
      if (start + 5 * 60 * 1000 < _context.clock().now())       return false;
      if (!_connected)       return false;
      started=true;
      int unacked=_outboundPackets.size();
      int wsz=_options.getWindowSize();
      if (unacked >= wsz || _activeResends.get() >= (wsz + 1) / 2 || _lastSendId.get() - _highestAckedThrough >= Math.max(MAX_WINDOW_SIZE,2 * wsz)) {
        if (timeoutMs > 0) {
          if (timeLeft <= 0) {
            if (_log.shouldLog(Log.INFO))             _log.info("Outbound window is full " + unacked + " unacked with "+ _activeResends+ " active resends"+ " and we've waited too long ("+ (0 - (timeLeft - timeoutMs))+ "ms): "+ toString());
            return false;
          }
          if (_log.shouldLog(Log.DEBUG))           _log.debug("Outbound window is full (" + unacked + "/"+ wsz+ "/"+ _activeResends+ "), waiting "+ timeLeft);
          try {
            _outboundPackets.wait(Math.min(timeLeft,250l));
          }
 catch (          InterruptedException ie) {
            if (_log.shouldLog(Log.DEBUG))             _log.debug("InterruptedException while Outbound window is full (" + _outboundPackets.size() + "/"+ _activeResends+ ")");
            return false;
          }
        }
 else {
          try {
            _outboundPackets.wait(250);
          }
 catch (          InterruptedException ie) {
            if (_log.shouldLog(Log.DEBUG))             _log.debug("InterruptedException while Outbound window is full (" + _outboundPackets.size() + "/"+ _activeResends+ ")");
            return false;
          }
        }
      }
 else {
        _context.statManager().addRateData("stream.chokeSizeEnd",_outboundPackets.size(),_context.clock().now() - start);
        return true;
      }
    }
  }
}
