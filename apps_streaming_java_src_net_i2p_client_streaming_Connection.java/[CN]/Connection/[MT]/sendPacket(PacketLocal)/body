{
  if (packet == null)   return;
  setNextSendTime(-1);
  if (_options.getRequireFullySigned()) {
    packet.setFlag(Packet.FLAG_SIGNATURE_INCLUDED);
    packet.setFlag(Packet.FLAG_SIGNATURE_REQUESTED);
  }
  if ((packet.getSequenceNum() == 0) && (!packet.isFlagSet(Packet.FLAG_SYNCHRONIZE))) {
  }
 else {
    int windowSize;
    int remaining;
synchronized (_outboundPackets) {
      _outboundPackets.put(Long.valueOf(packet.getSequenceNum()),packet);
      windowSize=_options.getWindowSize();
      remaining=windowSize - _outboundPackets.size();
      _outboundPackets.notifyAll();
    }
    if (packet.isFlagSet(Packet.FLAG_CLOSE) || (remaining < (windowSize + 2) / 3) || (remaining < 3)|| (packet.getSequenceNum() % 8 == 0)) {
      packet.setOptionalDelay(0);
      packet.setFlag(Packet.FLAG_DELAY_REQUESTED);
    }
 else {
      int delay=_options.getRTT() / 2;
      packet.setOptionalDelay(delay);
      if (delay > 0)       packet.setFlag(Packet.FLAG_DELAY_REQUESTED);
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Requesting ack delay of " + delay + "ms for packet "+ packet);
    }
    packet.setFlag(Packet.FLAG_DELAY_REQUESTED);
    long timeout=_options.getRTO();
    if (timeout > MAX_RESEND_DELAY)     timeout=MAX_RESEND_DELAY;
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Resend in " + timeout + " for "+ packet);
    new ResendPacketEvent(packet,timeout);
  }
  if (_outboundQueue.enqueue(packet)) {
    _unackedPacketsReceived=0;
    _lastSendTime=_context.clock().now();
    resetActivityTimer();
  }
}
