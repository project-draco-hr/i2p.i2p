{
  StringBuffer buf=new StringBuffer(128);
  buf.append("[Connection ");
  if (_receiveStreamId > 0)   buf.append(Packet.toId(_receiveStreamId));
 else   buf.append("unknown");
  buf.append('/');
  if (_sendStreamId > 0)   buf.append(Packet.toId(_sendStreamId));
 else   buf.append("unknown");
  buf.append(" wsize: ").append(_options.getWindowSize());
  buf.append(" cwin: ").append(_congestionWindowEnd - _highestAckedThrough);
  buf.append(" rtt: ").append(_options.getRTT());
  buf.append(" rto: ").append(_options.getRTO());
  buf.append(" unacked out: ").append(_outboundPackets.size()).append(" ");
  buf.append("unacked in: ").append(getUnackedPacketsReceived());
  if (_inputStream != null) {
    buf.append(" [high ");
    buf.append(_inputStream.getHighestBlockId());
    long nacks[]=_inputStream.getNacks();
    if (nacks != null)     for (int i=0; i < nacks.length; i++)     buf.append(" ").append(nacks[i]);
    buf.append("]");
  }
  if (getResetSent())   buf.append(" reset sent");
  if (getResetReceived())   buf.append(" reset received");
  if (getCloseSentOn() > 0) {
    buf.append(" close sent ");
    long timeSinceClose=_context.clock().now() - getCloseSentOn();
    buf.append(DataHelper.formatDuration(timeSinceClose));
    buf.append(" ago");
  }
  if (getCloseReceivedOn() > 0)   buf.append(" close received");
  buf.append(" acked: ").append(getAckedPackets());
  buf.append(" maxWin ").append(getOptions().getMaxWindowSize());
  buf.append("]");
  return buf.toString();
}
