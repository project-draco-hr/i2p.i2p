{
  long expiration=_context.clock().now() + _options.getConnectTimeout();
  while (true) {
    if (_connected && (_receiveStreamId > 0) && (_sendStreamId > 0)) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("waitForConnect(): Connected and we have stream IDs");
      return;
    }
    if (_connectionError != null) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("waitForConnect(): connection error found: " + _connectionError);
      return;
    }
    if (!_connected) {
      _connectionError="Connection failed";
      if (_log.shouldLog(Log.DEBUG))       _log.debug("waitForConnect(): not connected");
      return;
    }
    long timeLeft=expiration - _context.clock().now();
    if ((timeLeft <= 0) && (_options.getConnectTimeout() > 0)) {
      if (_connectionError == null) {
        _connectionError="Connection timed out";
        disconnect(false);
      }
      if (_log.shouldLog(Log.DEBUG))       _log.debug("waitForConnect(): timed out: " + _connectionError);
      return;
    }
    if (timeLeft > MAX_CONNECT_TIMEOUT)     timeLeft=MAX_CONNECT_TIMEOUT;
 else     if (_options.getConnectTimeout() <= 0)     timeLeft=DEFAULT_CONNECT_TIMEOUT;
    if (_log.shouldLog(Log.DEBUG))     _log.debug("waitForConnect(): wait " + timeLeft);
    try {
synchronized (_connectLock) {
        _connectLock.wait(timeLeft);
      }
    }
 catch (    InterruptedException ie) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("waitForConnect(): InterruptedException");
      _connectionError="InterruptedException";
      return;
    }
  }
}
