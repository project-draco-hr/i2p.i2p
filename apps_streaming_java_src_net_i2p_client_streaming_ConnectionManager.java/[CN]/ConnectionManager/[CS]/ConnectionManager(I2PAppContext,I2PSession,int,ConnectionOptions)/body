{
  _context=context;
  _session=session;
  _maxConcurrentStreams=maxConcurrent;
  _defaultOptions=defaultOptions;
  _log=_context.logManager().getLog(ConnectionManager.class);
  _connectionByInboundId=new ConcurrentHashMap(32);
  _pendingPings=new ConcurrentHashMap(4);
  _messageHandler=new MessageHandler(_context,this);
  _packetHandler=new PacketHandler(_context,this);
  _connectionHandler=new ConnectionHandler(_context,this);
  _schedulerChooser=new SchedulerChooser(_context);
  _conPacketHandler=new ConnectionPacketHandler(_context);
  _tcbShare=new TCBShare(_context);
  _session.setSessionListener(_messageHandler);
  _outboundQueue=new PacketQueue(_context,_session,this);
  _allowIncoming=false;
  _numWaiting=0;
  _soTimeout=-1;
  _context.statManager().createRateStat("stream.con.lifetimeMessagesSent","How many messages do we send on a stream?","Stream",new long[]{60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("stream.con.lifetimeMessagesReceived","How many messages do we receive on a stream?","Stream",new long[]{60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("stream.con.lifetimeBytesSent","How many bytes do we send on a stream?","Stream",new long[]{60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("stream.con.lifetimeBytesReceived","How many bytes do we receive on a stream?","Stream",new long[]{60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("stream.con.lifetimeDupMessagesSent","How many duplicate messages do we send on a stream?","Stream",new long[]{60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("stream.con.lifetimeDupMessagesReceived","How many duplicate messages do we receive on a stream?","Stream",new long[]{60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("stream.con.lifetimeRTT","What is the final RTT when a stream closes?","Stream",new long[]{60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("stream.con.lifetimeCongestionSeenAt","When was the last congestion seen at when a stream closes?","Stream",new long[]{60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("stream.con.lifetimeSendWindowSize","What is the final send window size when a stream closes?","Stream",new long[]{60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("stream.receiveActive","How many streams are active when a new one is received (period being not yet dropped)","Stream",new long[]{60 * 60 * 1000,24 * 60 * 60* 1000});
}
