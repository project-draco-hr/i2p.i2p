{
  boolean congested=false;
  if ((!isNew) && (sequenceNum > 0)) {
    int oldSize=con.getOptions().getWindowSize();
    con.congestionOccurred();
    oldSize>>>=1;
    if (oldSize <= 0)     oldSize=1;
    con.getOptions().setWindowSize(oldSize);
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Congestion occurred - new windowSize " + oldSize + " / "+ con.getOptions().getWindowSize()+ " congestionSeenAt: "+ con.getLastCongestionSeenAt()+ " (#resends: "+ numResends+ ") for "+ con);
    congested=true;
  }
  long lowest=con.getHighestAckedThrough();
  if (lowest >= con.getCongestionWindowEnd()) {
    int oldWindow=con.getOptions().getWindowSize();
    int newWindowSize=oldWindow;
    int trend=con.getOptions().getRTTTrend();
    _context.statManager().addRateData("stream.trend",trend,newWindowSize);
    if ((!congested) && (acked > 0) && (numResends <= 0)) {
      if (trend < 0) {
        newWindowSize++;
      }
 else       if (newWindowSize > con.getLastCongestionSeenAt() / 2) {
        int shouldIncrement=_context.random().nextInt(con.getOptions().getCongestionAvoidanceGrowthRateFactor() * newWindowSize);
        if (shouldIncrement <= 0)         newWindowSize+=1;
      }
 else {
        int shouldIncrement=_context.random().nextInt(con.getOptions().getSlowStartGrowthRateFactor());
        if (shouldIncrement <= 0)         newWindowSize+=1;
      }
    }
    if (newWindowSize <= 0)     newWindowSize=1;
    con.getOptions().setWindowSize(newWindowSize);
    con.setCongestionWindowEnd(newWindowSize + lowest);
    if (_log.shouldLog(Log.DEBUG))     _log.debug("New window size " + newWindowSize + "/"+ oldWindow+ "/"+ con.getOptions().getWindowSize()+ " congestionSeenAt: "+ con.getLastCongestionSeenAt()+ " (#resends: "+ numResends+ ") for "+ con);
  }
  con.windowAdjusted();
  return congested;
}
