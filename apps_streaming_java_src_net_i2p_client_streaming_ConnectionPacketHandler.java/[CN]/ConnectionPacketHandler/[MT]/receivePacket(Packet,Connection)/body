{
  boolean ok=verifyPacket(packet,con);
  if (!ok) {
    if ((!packet.isFlagSet(Packet.FLAG_RESET)) && (_log.shouldLog(Log.ERROR)))     _log.error("Packet does NOT verify: " + packet);
    return;
  }
  if (con.getHardDisconnected()) {
    if ((packet.getSequenceNum() > 0) || (packet.getPayloadSize() > 0) || (packet.isFlagSet(Packet.FLAG_SYNCHRONIZE))|| (packet.isFlagSet(Packet.FLAG_CLOSE))) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Received a data packet after hard disconnect: " + packet + " on "+ con);
      con.sendReset();
    }
 else {
      if (_log.shouldLog(Log.WARN))       _log.warn("Received a packet after hard disconnect, ignoring: " + packet + " on "+ con);
    }
    return;
  }
  con.packetReceived();
  long ready=con.getInputStream().getHighestReadyBockId();
  int available=con.getOptions().getInboundBufferSize() - con.getInputStream().getTotalReadySize();
  int allowedBlocks=available / con.getOptions().getMaxMessageSize();
  if ((packet.getPayloadSize() > 0) && (packet.getSequenceNum() > ready + allowedBlocks)) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Inbound buffer exceeded on connection " + con + " ("+ ready+ "/"+ (ready + allowedBlocks)+ "/"+ available+ ": dropping "+ packet);
    ack(con,packet.getAckThrough(),packet.getNacks(),null,false);
    con.getOptions().setChoke(5 * 1000);
    return;
  }
  con.getOptions().setChoke(0);
  _context.statManager().addRateData("stream.con.receiveMessageSize",packet.getPayloadSize(),0);
  boolean isNew=con.getInputStream().messageReceived(packet.getSequenceNum(),packet.getPayload());
  if ((packet.getSequenceNum() == 0) && (packet.getPayloadSize() > 0)) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("seq=0 && size=" + packet.getPayloadSize() + ": isNew? "+ isNew+ " packet: "+ packet+ " con: "+ con);
  }
  if (packet.isFlagSet(Packet.FLAG_CLOSE) && packet.isFlagSet(Packet.FLAG_SIGNATURE_INCLUDED))   con.closeReceived();
  boolean fastAck=false;
  if (isNew) {
    con.incrementUnackedPacketsReceived();
    con.incrementBytesReceived(packet.getPayloadSize());
    if (packet.isFlagSet(Packet.FLAG_DELAY_REQUESTED) && (packet.getOptionalDelay() <= 0)) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Scheduling immediate ack for " + packet);
      con.setNextSendTime(_context.clock().now() + con.getOptions().getSendAckDelay());
    }
 else {
      int delay=con.getOptions().getSendAckDelay();
      if (packet.isFlagSet(Packet.FLAG_DELAY_REQUESTED))       delay+=packet.getOptionalDelay();
      con.setNextSendTime(delay + _context.clock().now());
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Scheduling ack in " + delay + "ms for received packet "+ packet);
    }
  }
 else {
    if ((packet.getSequenceNum() > 0) || (packet.getPayloadSize() > 0) || (packet.isFlagSet(Packet.FLAG_SYNCHRONIZE))) {
      _context.statManager().addRateData("stream.con.receiveDuplicateSize",packet.getPayloadSize(),0);
      con.incrementDupMessagesReceived(1);
      if (_log.shouldLog(Log.WARN))       _log.warn("congestion.. dup " + packet);
      SimpleTimer.getInstance().addEvent(new AckDup(con),con.getOptions().getSendAckDelay());
    }
 else {
      if (packet.isFlagSet(Packet.FLAG_SYNCHRONIZE)) {
        con.setNextSendTime(_context.clock().now() + con.getOptions().getSendAckDelay());
      }
 else {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("ACK only packet received: " + packet);
      }
    }
  }
  fastAck=fastAck || ack(con,packet.getAckThrough(),packet.getNacks(),packet,isNew);
  con.eventOccurred();
  if (fastAck) {
    if (con.getLastSendTime() + 2000 < _context.clock().now()) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Fast ack for dup " + packet);
      con.ackImmediately();
    }
  }
}
