{
  boolean ok=verifyPacket(packet,con);
  if (!ok) {
    boolean isTooFast=con.getSendStreamId() <= 0;
    if ((!packet.isFlagSet(Packet.FLAG_RESET)) && (!isTooFast) && (_log.shouldLog(Log.WARN)))     _log.warn("Packet does NOT verify: " + packet + " on "+ con);
    packet.releasePayload();
    return;
  }
  if (con.getHardDisconnected()) {
    if ((packet.getSequenceNum() > 0) || (packet.getPayloadSize() > 0) || (packet.isFlagSet(Packet.FLAG_SYNCHRONIZE))|| (packet.isFlagSet(Packet.FLAG_CLOSE))) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Received a data packet after hard disconnect: " + packet + " on "+ con);
      con.sendReset();
      con.disconnect(false);
    }
 else {
      if (_log.shouldLog(Log.WARN))       _log.warn("Received a packet after hard disconnect, ignoring: " + packet + " on "+ con);
    }
    packet.releasePayload();
    return;
  }
  if ((con.getCloseSentOn() > 0) && (con.getUnackedPacketsSent() <= 0) && (packet.getSequenceNum() > 0)&& (packet.getPayloadSize() > 0)) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Received new data when we've sent them data and all of our data is acked: " + packet + " on "+ con+ "");
    con.sendReset();
    con.disconnect(false);
    packet.releasePayload();
    return;
  }
  if (packet.isFlagSet(Packet.FLAG_MAX_PACKET_SIZE_INCLUDED)) {
    int size=packet.getOptionalMaxSize();
    if (size < ConnectionOptions.MIN_MESSAGE_SIZE) {
      size=ConnectionOptions.MIN_MESSAGE_SIZE;
    }
    if (size < con.getOptions().getMaxMessageSize()) {
      if (_log.shouldLog(Log.INFO))       _log.info("Reducing our max message size to " + size + " from "+ con.getOptions().getMaxMessageSize());
      con.getOptions().setMaxMessageSize(size);
      con.getOutputStream().setBufferSize(size);
    }
  }
  con.packetReceived();
  boolean choke=false;
  if (packet.isFlagSet(Packet.FLAG_DELAY_REQUESTED)) {
    if (packet.getOptionalDelay() > 60000) {
      choke=true;
    }
  }
  if (packet.getPayloadSize() > 0) {
    long ready=con.getInputStream().getHighestReadyBockId();
    int available=con.getOptions().getInboundBufferSize() - con.getInputStream().getTotalReadySize();
    int allowedBlocks=available / con.getOptions().getMaxMessageSize();
    if (packet.getSequenceNum() > ready + allowedBlocks) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Inbound buffer exceeded on connection " + con + " ("+ ready+ "/"+ (ready + allowedBlocks)+ "/"+ available+ ": dropping "+ packet);
      ack(con,packet.getAckThrough(),packet.getNacks(),null,false,choke);
      con.getOptions().setChoke(61 * 1000);
      packet.releasePayload();
      con.ackImmediately();
      return;
    }
  }
  con.getOptions().setChoke(0);
  _context.statManager().addRateData("stream.con.receiveMessageSize",packet.getPayloadSize(),0);
  boolean isNew=false;
  boolean allowAck=true;
  if ((!packet.isFlagSet(Packet.FLAG_SYNCHRONIZE)) && (packet.getReceiveStreamId() <= 0))   allowAck=false;
  if (allowAck) {
    isNew=con.getInputStream().messageReceived(packet.getSequenceNum(),packet.getPayload());
  }
 else {
    con.getInputStream().notifyActivity();
    isNew=false;
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug((isNew ? "New" : "Dup or ack-only") + " inbound packet on " + con+ ": "+ packet);
  if (packet.isFlagSet(Packet.FLAG_CLOSE) && packet.isFlagSet(Packet.FLAG_SIGNATURE_INCLUDED))   con.closeReceived();
  boolean fastAck=false;
  boolean ackOnly=false;
  if (isNew) {
    con.incrementUnackedPacketsReceived();
    con.incrementBytesReceived(packet.getPayloadSize());
    if (packet.isFlagSet(Packet.FLAG_DELAY_REQUESTED) && (packet.getOptionalDelay() <= 0)) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Scheduling immediate ack for " + packet);
      con.setNextSendTime(_context.clock().now() + 250);
    }
 else {
      int delay=con.getOptions().getSendAckDelay();
      if (packet.isFlagSet(Packet.FLAG_DELAY_REQUESTED))       delay=packet.getOptionalDelay();
      con.setNextSendTime(delay + _context.clock().now());
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Scheduling ack in " + delay + "ms for received packet "+ packet);
    }
  }
 else {
    if ((packet.getSequenceNum() > 0) || (packet.getPayloadSize() > 0) || (packet.isFlagSet(Packet.FLAG_SYNCHRONIZE))) {
      _context.statManager().addRateData("stream.con.receiveDuplicateSize",packet.getPayloadSize(),0);
      con.incrementDupMessagesReceived(1);
      final long now=_context.clock().now();
      final int ackDelay=con.getOptions().getSendAckDelay();
      final long lastSendTime=con.getLastSendTime();
      if (_log.shouldLog(Log.WARN))       _log.warn(String.format("%s congestion.. dup packet %s now %d ackDelay %d lastSend %d",con,packet,now,ackDelay,lastSendTime));
      final long nextSendTime=lastSendTime + ackDelay;
      if (nextSendTime <= now) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("immediate ack");
        con.ackImmediately();
        _context.statManager().getFrequency("stream.ack.dup.immediate").eventOccurred();
      }
 else {
        final long delay=nextSendTime - now;
        if (_log.shouldLog(Log.DEBUG))         _log.debug("scheduling ack in " + delay);
        _context.simpleScheduler().addEvent(new AckDup(con),delay);
      }
    }
 else {
      if (packet.isFlagSet(Packet.FLAG_SYNCHRONIZE)) {
        con.setNextSendTime(_context.clock().now() + con.getOptions().getSendAckDelay());
      }
 else {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("ACK only packet received: " + packet);
        ackOnly=true;
      }
    }
  }
  if (packet.isFlagSet(Packet.FLAG_SYNCHRONIZE) && (packet.getSendStreamId() <= 0)) {
  }
 else {
    fastAck=ack(con,packet.getAckThrough(),packet.getNacks(),packet,isNew,choke);
  }
  con.eventOccurred();
  if (fastAck) {
    if (!isNew) {
    }
 else {
      long timeSinceSend=_context.clock().now() - con.getLastSendTime();
      if (timeSinceSend >= 2000) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Fast ack for dup " + packet);
        con.ackImmediately();
      }
 else {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Not fast acking dup " + packet + " since we last sent "+ timeSinceSend+ "ms ago");
      }
    }
  }
  if (ackOnly || !isNew) {
    packet.releasePayload();
  }
  if (isNew && packet.isFlagSet(Packet.FLAG_CLOSE) && packet.isFlagSet(Packet.FLAG_SIGNATURE_INCLUDED))   con.updateShareOpts();
}
