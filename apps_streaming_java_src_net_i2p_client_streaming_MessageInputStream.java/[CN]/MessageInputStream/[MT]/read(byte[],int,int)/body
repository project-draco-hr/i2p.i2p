{
  if (_locallyClosed)   throw new IOException("Already locally closed");
  throwAnyError();
  long expiration=-1;
  if (_readTimeout > 0)   expiration=_readTimeout + System.currentTimeMillis();
synchronized (_dataLock) {
    for (int i=0; i < length; i++) {
      if ((_readyDataBlocks.size() <= 0) && (i == 0)) {
        while (_readyDataBlocks.size() <= 0) {
          if (_locallyClosed)           throw new IOException("Already closed, you wanker");
          if ((_notYetReadyBlocks.size() <= 0) && (_closeReceived)) {
            if (_log.shouldLog(Log.INFO))             _log.info("read(...," + offset + ", "+ length+ ")["+ i+ "] got EOF after "+ _readTotal+ " "+ toString());
            return -1;
          }
 else {
            if (_readTimeout < 0) {
              if (_log.shouldLog(Log.DEBUG))               _log.debug("read(...," + offset + ", "+ length+ ")["+ i+ ") with no timeout: "+ toString());
              try {
                _dataLock.wait();
              }
 catch (              InterruptedException ie) {
              }
              if (_log.shouldLog(Log.DEBUG))               _log.debug("read(...," + offset + ", "+ length+ ")["+ i+ ") with no timeout complete: "+ toString());
              throwAnyError();
            }
 else             if (_readTimeout > 0) {
              if (_log.shouldLog(Log.DEBUG))               _log.debug("read(...," + offset + ", "+ length+ ")["+ i+ ") with timeout: "+ _readTimeout+ ": "+ toString());
              try {
                _dataLock.wait(_readTimeout);
              }
 catch (              InterruptedException ie) {
              }
              if (_log.shouldLog(Log.DEBUG))               _log.debug("read(...," + offset + ", "+ length+ ")["+ i+ ") with timeout complete: "+ _readTimeout+ ": "+ toString());
              throwAnyError();
            }
 else {
              if (_log.shouldLog(Log.INFO))               _log.info("read(...," + offset + ", "+ length+ ")["+ i+ ") with nonblocking setup: "+ toString());
              return i;
            }
            if (_readyDataBlocks.size() <= 0) {
              if ((_readTimeout > 0) && (expiration < System.currentTimeMillis())) {
                if (_log.shouldLog(Log.INFO))                 _log.info("read(...," + offset + ", "+ length+ ")["+ i+ ") expired: "+ toString());
                return i;
              }
            }
          }
        }
        i--;
      }
 else       if (_readyDataBlocks.size() <= 0) {
        if (_log.shouldLog(Log.INFO))         _log.info("read(...," + offset + ", "+ length+ ")["+ i+ "] no more ready blocks, returning");
        return i;
      }
 else {
        ByteArray cur=(ByteArray)_readyDataBlocks.get(0);
        byte rv=cur.getData()[cur.getOffset() + _readyDataBlockIndex];
        _readyDataBlockIndex++;
        boolean removed=false;
        if (cur.getValid() <= _readyDataBlockIndex) {
          _readyDataBlockIndex=0;
          _readyDataBlocks.remove(0);
          removed=true;
        }
        _readTotal++;
        target[offset + i]=rv;
        if ((_readyDataBlockIndex <= 3) || (_readyDataBlockIndex >= cur.getValid() - 5)) {
          if (_log.shouldLog(Log.DEBUG))           _log.debug("read(...," + offset + ", "+ length+ ")["+ i+ "] after ready data: readyDataBlockIndex="+ _readyDataBlockIndex+ " readyBlocks="+ _readyDataBlocks.size()+ " readTotal="+ _readTotal);
        }
      }
    }
  }
  if (_log.shouldLog(Log.DEBUG))   _log.info("read(...," + offset + ", "+ length+ ") read fully total read: "+ _readTotal);
  return length;
}
