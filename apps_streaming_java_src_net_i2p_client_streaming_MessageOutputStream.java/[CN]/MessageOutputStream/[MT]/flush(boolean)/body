{
  long begin=_context.clock().now();
  WriteStatus ws=null;
  if (_log.shouldLog(Log.INFO) && _valid > 0)   _log.info("flush() valid = " + _valid);
synchronized (_dataLock) {
    if (_buf == null) {
      _dataLock.notifyAll();
      throw new IOException("closed (buffer went away)");
    }
    if (!wait_for_accept_only) {
      ws=_dataReceiver.writeData(_buf,0,_valid);
      _written+=_valid;
      _valid=0;
      locked_updateBufferSize();
      _lastFlushed=_context.clock().now();
      _dataLock.notifyAll();
    }
  }
  if (wait_for_accept_only) {
    flushAvailable(_dataReceiver,true);
    return;
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("before waiting " + _writeTimeout + "ms for completion of "+ ws);
  if (_closed && ((_writeTimeout > Connection.DISCONNECT_TIMEOUT) || (_writeTimeout <= 0)))   ws.waitForCompletion(Connection.DISCONNECT_TIMEOUT);
 else   if ((_writeTimeout <= 0) || (_writeTimeout > Connection.DISCONNECT_TIMEOUT))   ws.waitForCompletion(Connection.DISCONNECT_TIMEOUT);
 else   ws.waitForCompletion(_writeTimeout);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("after waiting " + _writeTimeout + "ms for completion of "+ ws);
  if (ws.writeFailed() && (_writeTimeout > 0))   throw new InterruptedIOException("Timed out during write");
 else   if (ws.writeFailed())   throw new IOException("Write failed");
  long elapsed=_context.clock().now() - begin;
  if ((elapsed > 10 * 1000) && (_log.shouldLog(Log.DEBUG)))   _log.debug("wtf, took " + elapsed + "ms to flush the stream?\n"+ ws,new Exception("bar"));
  throwAnyError();
}
