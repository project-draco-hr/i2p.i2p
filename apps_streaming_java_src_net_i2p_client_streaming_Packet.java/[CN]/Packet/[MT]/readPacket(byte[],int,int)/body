{
  int cur=offset;
  _sendStreamId=new byte[4];
  System.arraycopy(buffer,cur,_sendStreamId,0,4);
  cur+=4;
  _receiveStreamId=new byte[4];
  System.arraycopy(buffer,cur,_receiveStreamId,0,4);
  cur+=4;
  _sequenceNum=DataHelper.fromLong(buffer,cur,4);
  cur+=4;
  _ackThrough=DataHelper.fromLong(buffer,cur,4);
  cur+=4;
  int numNacks=(int)DataHelper.fromLong(buffer,cur,1);
  cur++;
  if (numNacks > 0) {
    _nacks=new long[numNacks];
    for (int i=0; i < numNacks; i++) {
      _nacks[i]=DataHelper.fromLong(buffer,cur,4);
      cur+=4;
    }
  }
 else {
    _nacks=null;
  }
  _resendDelay=(int)DataHelper.fromLong(buffer,cur,1);
  cur++;
  _flags=(int)DataHelper.fromLong(buffer,cur,2);
  cur+=2;
  int optionSize=(int)DataHelper.fromLong(buffer,cur,2);
  cur+=2;
  int payloadBegin=cur + optionSize;
  int payloadSize=length - payloadBegin;
  if ((payloadSize < 0) || (payloadSize > MAX_PAYLOAD_SIZE))   throw new IllegalArgumentException("length: " + length + " offset: "+ offset+ " begin: "+ payloadBegin);
  _payload=new byte[payloadSize];
  System.arraycopy(buffer,payloadBegin,_payload,0,payloadSize);
  if (isFlagSet(FLAG_DELAY_REQUESTED)) {
    _optionDelay=(int)DataHelper.fromLong(buffer,cur,2);
    cur+=2;
  }
  if (isFlagSet(FLAG_FROM_INCLUDED)) {
    _optionFrom=new Destination();
    try {
      cur+=_optionFrom.readBytes(buffer,cur);
    }
 catch (    DataFormatException dfe) {
      throw new IllegalArgumentException("Bad from field: " + dfe.getMessage());
    }
  }
  if (isFlagSet(FLAG_MAX_PACKET_SIZE_INCLUDED)) {
    _optionMaxSize=(int)DataHelper.fromLong(buffer,cur,2);
    cur+=2;
  }
  if (isFlagSet(FLAG_SIGNATURE_INCLUDED)) {
    _optionSignature=new Signature();
    byte buf[]=new byte[Signature.SIGNATURE_BYTES];
    System.arraycopy(buffer,cur,buf,0,Signature.SIGNATURE_BYTES);
    _optionSignature.setData(buf);
    cur+=Signature.SIGNATURE_BYTES;
  }
}
