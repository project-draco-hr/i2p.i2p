{
  if (isFlagSet(FLAG_NO_ACK))   buf.append(" NO_ACK");
 else   buf.append(" ACK ").append(getAckThrough());
  if (_nacks != null) {
    buf.append(" NACK");
    for (int i=0; i < _nacks.length; i++) {
      buf.append(' ').append(_nacks[i]);
    }
  }
  if (isFlagSet(FLAG_CLOSE))   buf.append(" CLOSE");
  if (isFlagSet(FLAG_DELAY_REQUESTED))   buf.append(" DELAY ").append(_optionDelay);
  if (isFlagSet(FLAG_ECHO))   buf.append(" ECHO");
  if (isFlagSet(FLAG_FROM_INCLUDED))   buf.append(" FROM");
  if (isFlagSet(FLAG_MAX_PACKET_SIZE_INCLUDED))   buf.append(" MS ").append(_optionMaxSize);
  if (isFlagSet(FLAG_PROFILE_INTERACTIVE))   buf.append(" INTERACTIVE");
  if (isFlagSet(FLAG_RESET))   buf.append(" RESET");
  if (isFlagSet(FLAG_SIGNATURE_INCLUDED))   buf.append(" SIG");
  if (isFlagSet(FLAG_SIGNATURE_REQUESTED))   buf.append(" SIGREQ");
  if (isFlagSet(FLAG_SYNCHRONIZE))   buf.append(" SYN");
}
