{
  packet.prepare();
  SessionKey keyUsed=packet.getKeyUsed();
  if (keyUsed == null)   keyUsed=new SessionKey();
  Set tagsSent=packet.getTagsSent();
  if (tagsSent == null)   tagsSent=new HashSet();
  String conStr=(packet.getConnection() != null ? packet.getConnection().toString() : "");
  if (packet.getAckTime() > 0) {
    _log.debug("Not resending " + packet);
    return;
  }
 else {
    _log.debug("Sending... " + packet);
  }
  long begin=0;
  long end=0;
  boolean sent=false;
  try {
synchronized (this) {
      Arrays.fill(_buf,(byte)0x0);
      int size=0;
      if (packet.shouldSign())       size=packet.writeSignedPacket(_buf,0,_context,_session.getPrivateKey());
 else       size=packet.writePacket(_buf,0);
      begin=_context.clock().now();
      sent=_session.sendMessage(packet.getTo(),_buf,0,size,keyUsed,tagsSent);
      end=_context.clock().now();
    }
  }
 catch (  I2PSessionException ise) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Unable to send the packet " + packet,ise);
  }
  if (!sent) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Send failed for " + packet);
    packet.getConnection().disconnect(false);
  }
 else {
    packet.setKeyUsed(keyUsed);
    packet.setTagsSent(tagsSent);
    packet.incrementSends();
    if (_log.shouldLog(Log.DEBUG)) {
      String msg="SEND " + packet + (tagsSent.size() > 0 ? " with " + tagsSent.size() + " tags" : "")+ " send # "+ packet.getNumSends()+ " sendTime: "+ (end - begin)+ " con: "+ conStr;
      _log.debug(msg);
    }
    _connectionManager.getPacketHandler().displayPacket(packet,"SEND");
  }
}
