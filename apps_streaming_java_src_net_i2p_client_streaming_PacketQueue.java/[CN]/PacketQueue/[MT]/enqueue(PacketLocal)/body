{
  packet.prepare();
  String conStr=null;
  if (_log.shouldLog(Log.DEBUG))   conStr=(packet.getConnection() != null ? packet.getConnection().toString() : "");
  if (packet.getAckTime() > 0) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Not resending " + packet);
    return false;
  }
 else {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Sending... " + packet);
  }
  ByteArray ba=_cache.acquire();
  byte buf[]=ba.getData();
  long begin=0;
  long end=0;
  boolean sent=false;
  try {
    int size=0;
    long beforeWrite=System.currentTimeMillis();
    if (packet.shouldSign())     size=packet.writeSignedPacket(buf,0,_context,_session.getPrivateKey());
 else     size=packet.writePacket(buf,0);
    long writeTime=System.currentTimeMillis() - beforeWrite;
    if ((writeTime > 1000) && (_log.shouldLog(Log.WARN)))     _log.warn("took " + writeTime + "ms to write the packet: "+ packet);
    if (packet.getAckTime() > 0)     return false;
    begin=_context.clock().now();
    long expires=0;
    Connection.ResendPacketEvent rpe=(Connection.ResendPacketEvent)packet.getResendEvent();
    if (rpe != null)     expires=rpe.getNextSendTime() - 500;
    SendMessageOptions options=new SendMessageOptions();
    if (expires > 0)     options.setDate(expires);
    if (packet.isFlagSet(FLAGS_INITIAL_TAGS)) {
      Connection con=packet.getConnection();
      if (con != null && con.isInbound())       options.setSendLeaseSet(false);
      options.setTagsToSend(INITIAL_TAGS_TO_SEND);
      options.setTagThreshold(MIN_TAG_THRESHOLD);
    }
 else     if (packet.isFlagSet(FLAGS_FINAL_TAGS)) {
      options.setSendLeaseSet(false);
      options.setTagsToSend(FINAL_TAGS_TO_SEND);
      options.setTagThreshold(FINAL_TAG_THRESHOLD);
    }
 else {
      Connection con=packet.getConnection();
      if (con != null) {
        if (con.isInbound() && con.getLifetime() < 2 * 60 * 1000)         options.setSendLeaseSet(false);
        int wdw=con.getOptions().getWindowSize();
        int thresh=Math.max(MIN_TAG_THRESHOLD,wdw * TAG_WINDOW_FACTOR);
        options.setTagThreshold(thresh);
      }
    }
    sent=_session.sendMessage(packet.getTo(),buf,0,size,I2PSession.PROTO_STREAMING,packet.getLocalPort(),packet.getRemotePort(),options);
    end=_context.clock().now();
    if ((end - begin > 1000) && (_log.shouldLog(Log.WARN)))     _log.warn("Took " + (end - begin) + "ms to sendMessage(...) "+ packet);
    _context.statManager().addRateData("stream.con.sendMessageSize",size,packet.getLifetime());
    if (packet.getNumSends() > 1)     _context.statManager().addRateData("stream.con.sendDuplicateSize",size,packet.getLifetime());
    Connection con=packet.getConnection();
    if (con != null) {
      con.incrementBytesSent(size);
      if (packet.getNumSends() > 1)       con.incrementDupMessagesSent(1);
    }
  }
 catch (  I2PSessionException ise) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Unable to send the packet " + packet,ise);
  }
  _cache.release(ba);
  if (!sent) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Send failed for " + packet);
    Connection c=packet.getConnection();
    if (c != null)     c.disconnect(false);
  }
 else {
    packet.incrementSends();
    if (_log.shouldLog(Log.DEBUG)) {
      String msg="SEND " + packet + " send # "+ packet.getNumSends()+ " sendTime: "+ (end - begin)+ " con: "+ conStr;
      _log.debug(msg);
    }
    Connection c=packet.getConnection();
    String suffix=(c != null ? "wsize " + c.getOptions().getWindowSize() + " rto "+ c.getOptions().getRTO() : null);
    _connectionManager.getPacketHandler().displayPacket(packet,"SEND",suffix);
    if (I2PSocketManagerFull.pcapWriter != null && _context.getBooleanProperty(I2PSocketManagerFull.PROP_PCAP))     ((PacketLocal)packet).logTCPDump();
  }
  if ((packet.getSequenceNum() == 0) && (!packet.isFlagSet(Packet.FLAG_SYNCHRONIZE))) {
    packet.releasePayload();
  }
 else   if (packet.isFlagSet(Packet.FLAG_ECHO) && !packet.isFlagSet(Packet.FLAG_SIGNATURE_INCLUDED)) {
    packet.releasePayload();
  }
 else   if (packet.isFlagSet(Packet.FLAG_RESET)) {
    packet.releasePayload();
  }
  return sent;
}
