{
  if (_packet.getAckTime() > 0)   return false;
  if (_resetSentOn.get() > 0 || _resetReceived.get() || _finalDisconnect.get()) {
    _packet.cancelled();
    return false;
  }
  boolean resend=false;
  boolean isLowest=false;
synchronized (_outboundPackets) {
    if (_packet.getSequenceNum() == _highestAckedThrough + 1 || _packet.getNumSends() > 1 || _activeResends.get() < Math.max(3,(_options.getWindowSize() + 1) / 2))     isLowest=true;
    if (_outboundPackets.containsKey(Long.valueOf(_packet.getSequenceNum())))     resend=true;
  }
  if ((resend) && (_packet.getAckTime() <= 0)) {
    boolean fastRetransmit=((_packet.getNACKs() >= FAST_RETRANSMIT_THRESHOLD) && (_packet.getNumSends() == 1));
    if ((!isLowest) && (!fastRetransmit)) {
      if (_log.shouldLog(Log.INFO))       _log.info("Delaying resend of " + _packet + " with "+ _activeResends+ " active resend, "+ _outboundPackets.size()+ " unacked, window size = "+ _options.getWindowSize());
      forceReschedule(1333);
      _nextSend=1333 + _context.clock().now();
      return false;
    }
    if (fastRetransmit)     _context.statManager().addRateData("stream.fastRetransmit",_packet.getLifetime(),_packet.getLifetime());
    int choke=getOptions().getChoke();
    _packet.setOptionalDelay(choke);
    if (choke > 0)     _packet.setFlag(Packet.FLAG_DELAY_REQUESTED);
    _packet.setResendDelay(getOptions().getResendDelay() / 1000);
    if (_packet.getReceiveStreamId() <= 0)     _packet.setReceiveStreamId(_receiveStreamId);
    if (_packet.getSendStreamId() <= 0)     _packet.setSendStreamId(_sendStreamId);
    int newWindowSize=getOptions().getWindowSize();
    if (_ackSinceCongestion.get()) {
      if (_packet.getSequenceNum() > _lastCongestionHighestUnacked) {
        congestionOccurred();
        _context.statManager().addRateData("stream.con.windowSizeAtCongestion",newWindowSize,_packet.getLifetime());
        newWindowSize/=2;
        if (newWindowSize <= 0)         newWindowSize=1;
        getOptions().setWindowSize(newWindowSize);
        if (_log.shouldLog(Log.WARN))         _log.warn("Congestion, resending packet " + _packet.getSequenceNum() + " (new windowSize "+ newWindowSize+ "/"+ getOptions().getWindowSize()+ ") for "+ Connection.this.toString());
        windowAdjusted();
      }
    }
    int numSends=_packet.getNumSends() + 1;
    if (numSends - 1 > _options.getMaxResends()) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Disconnecting, too many resends of " + _packet);
      _packet.cancelled();
      disconnect(false);
    }
 else     if (numSends >= 3 && _packet.isFlagSet(Packet.FLAG_CLOSE) && _packet.getPayloadSize() <= 0 && _outboundPackets.size() <= 1 && getCloseReceivedOn() > 0) {
      if (_log.shouldLog(Log.INFO))       _log.info("Too many CLOSE resends, disconnecting: " + Connection.this.toString());
      _packet.cancelled();
      disconnect(true);
    }
 else {
      long rto=_options.getRTO();
      if (rto < MIN_RESEND_DELAY)       rto=MIN_RESEND_DELAY;
      long timeout=rto << (numSends - 1);
      if ((timeout > MAX_RESEND_DELAY) || (timeout <= 0))       timeout=MAX_RESEND_DELAY;
      _nextSend=timeout + _context.clock().now();
      if (_outboundQueue.enqueue(_packet)) {
        if (numSends == 2)         _activeResends.incrementAndGet();
        if (_log.shouldLog(Log.INFO))         _log.info("Resent packet " + (fastRetransmit ? "(fast) " : "(timeout) ") + _packet+ " next resend in "+ timeout+ "ms"+ " activeResends: "+ _activeResends+ " (wsize "+ newWindowSize+ " lifetime "+ (_context.clock().now() - _packet.getCreatedOn())+ "ms)");
        _unackedPacketsReceived=0;
        _lastSendTime=_context.clock().now();
        resetActivityTimer();
      }
      forceReschedule(timeout);
    }
    if ((_packet.getAckTime() > 0) && (_packet.getNumSends() > 1)) {
      _activeResends.decrementAndGet();
synchronized (_outboundPackets) {
        _outboundPackets.notifyAll();
      }
    }
    return true;
  }
 else {
    return false;
  }
}
