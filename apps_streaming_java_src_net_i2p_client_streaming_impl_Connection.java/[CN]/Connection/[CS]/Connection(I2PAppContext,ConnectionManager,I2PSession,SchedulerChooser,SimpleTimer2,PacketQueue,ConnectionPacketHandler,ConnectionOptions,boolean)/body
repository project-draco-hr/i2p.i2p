{
  _context=ctx;
  _connectionManager=manager;
  _session=session;
  _chooser=chooser;
  _outboundQueue=queue;
  _handler=handler;
  _isInbound=isInbound;
  _log=_context.logManager().getLog(Connection.class);
  _receiver=new ConnectionDataReceiver(_context,this);
  _options=(opts != null ? opts : new ConnectionOptions());
  _inputStream=new MessageInputStream(_context,_options.getMaxMessageSize(),_options.getMaxWindowSize(),_options.getInboundBufferSize());
  _outputStream=new MessageOutputStream(_context,timer,_receiver,_options.getMaxMessageSize());
  _timer=timer;
  _outboundPackets=new TreeMap<Long,PacketLocal>();
  if (opts != null) {
    _localPort=opts.getLocalPort();
    _remotePort=opts.getPort();
  }
 else {
    _localPort=0;
    _remotePort=0;
  }
  _outputStream.setWriteTimeout((int)_options.getWriteTimeout());
  _inputStream.setReadTimeout((int)_options.getReadTimeout());
  _lastSendId=new AtomicLong(-1);
  _nextSendTime=-1;
  _createdOn=_context.clock().now();
  _congestionWindowEnd=_options.getWindowSize() - 1;
  _highestAckedThrough=-1;
  _lastCongestionSeenAt=MAX_WINDOW_SIZE * 2;
  _lastCongestionTime=-1;
  _lastCongestionHighestUnacked=-1;
  _lastReceivedOn=-1;
  _activityTimer=new ActivityTimer();
  _ackSinceCongestion=new AtomicBoolean(true);
  _connectLock=new Object();
  _nextSendLock=new Object();
  _connectionEvent=new ConEvent();
  _randomWait=_context.random().nextInt(10 * 1000);
  if (_log.shouldLog(Log.INFO))   _log.info("New connection created with options: " + _options);
}
