{
  ConnectionOptions opts=new ConnectionOptions(_defaultOptions);
  opts.setPort(synPacket.getRemotePort());
  opts.setLocalPort(synPacket.getLocalPort());
  Connection con=new Connection(_context,this,_schedulerChooser,_timer,_outboundQueue,_conPacketHandler,opts,true);
  _tcbShare.updateOptsFromShare(con);
  boolean reject=false;
  int active=0;
  int total=0;
  if (locked_tooManyStreams()) {
    if ((!_defaultOptions.getDisableRejectLogging()) || _log.shouldLog(Log.WARN))     _log.logAlways(Log.WARN,"Refusing connection since we have exceeded our max of " + _defaultOptions.getMaxConns() + " connections");
    reject=true;
  }
 else {
    String why=shouldRejectConnection(synPacket);
    if (why != null) {
      if ((!_defaultOptions.getDisableRejectLogging()) || _log.shouldLog(Log.WARN))       _log.logAlways(Log.WARN,"Refusing connection since peer is " + why + (synPacket.getOptionalFrom() == null ? "" : ": " + synPacket.getOptionalFrom().calculateHash().toBase64()));
      reject=true;
    }
 else {
      assignReceiveStreamId(con);
    }
  }
  _context.statManager().addRateData("stream.receiveActive",active,total);
  if (reject) {
    Destination from=synPacket.getOptionalFrom();
    if (from == null)     return null;
    if (_dayThrottler != null || _hourThrottler != null) {
      Hash h=from.calculateHash();
      if ((_hourThrottler != null && _hourThrottler.isThrottled(h)) || (_dayThrottler != null && _dayThrottler.isThrottled(h)) || _globalBlacklist.contains(h)|| (_defaultOptions.isAccessListEnabled() && !_defaultOptions.getAccessList().contains(h))|| (_defaultOptions.isBlacklistEnabled() && _defaultOptions.getBlacklist().contains(h))) {
        if (!Boolean.valueOf(_context.getProperty("i2p.streaming.sendResetOnBlock"))) {
          if (_log.shouldLog(Log.INFO))           _log.info("Dropping RST to " + h);
          return null;
        }
      }
    }
    PacketLocal reply=new PacketLocal(_context,from);
    reply.setFlag(Packet.FLAG_RESET);
    reply.setFlag(Packet.FLAG_SIGNATURE_INCLUDED);
    reply.setAckThrough(synPacket.getSequenceNum());
    reply.setSendStreamId(synPacket.getReceiveStreamId());
    reply.setReceiveStreamId(0);
    reply.setOptionalFrom(_session.getMyDestination());
    reply.setLocalPort(synPacket.getLocalPort());
    reply.setRemotePort(synPacket.getRemotePort());
    _outboundQueue.enqueue(reply);
    return null;
  }
  if (I2PSocketManagerFull.pcapWriter != null && _context.getBooleanProperty(I2PSocketManagerFull.PROP_PCAP))   synPacket.logTCPDump(con);
  try {
    con.getPacketHandler().receivePacket(synPacket,con);
  }
 catch (  I2PException ie) {
    _connectionByInboundId.remove(Long.valueOf(con.getReceiveStreamId()));
    return null;
  }
  _context.statManager().addRateData("stream.connectionReceived",1,0);
  return con;
}
