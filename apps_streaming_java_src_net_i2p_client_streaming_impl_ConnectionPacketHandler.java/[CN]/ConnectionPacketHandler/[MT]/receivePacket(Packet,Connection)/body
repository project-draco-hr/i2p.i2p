{
  boolean ok=verifyPacket(packet,con);
  if (!ok) {
    boolean isTooFast=con.getSendStreamId() <= 0;
    if ((!packet.isFlagSet(Packet.FLAG_RESET)) && (!isTooFast) && (_log.shouldLog(Log.WARN)))     _log.warn("Packet does NOT verify: " + packet + " on "+ con);
    packet.releasePayload();
    return;
  }
  final long seqNum=packet.getSequenceNum();
  if (con.getHardDisconnected()) {
    if ((seqNum > 0) || (packet.getPayloadSize() > 0) || (packet.isFlagSet(Packet.FLAG_SYNCHRONIZE | Packet.FLAG_CLOSE))) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Received a data packet after hard disconnect: " + packet + " on "+ con);
      con.disconnect(false);
    }
 else {
      if (_log.shouldLog(Log.WARN))       _log.warn("Received a packet after hard disconnect, ignoring: " + packet + " on "+ con);
    }
    packet.releasePayload();
    return;
  }
  if ((con.getCloseSentOn() > 0) && (con.getUnackedPacketsSent() <= 0) && (seqNum > 0)&& (packet.getPayloadSize() > 0)) {
    if (_log.shouldLog(Log.INFO))     _log.info("Received new data when we've sent them data and all of our data is acked: " + packet + " on "+ con+ "");
  }
  if (packet.isFlagSet(Packet.FLAG_MAX_PACKET_SIZE_INCLUDED)) {
    int size=packet.getOptionalMaxSize();
    if (size < ConnectionOptions.MIN_MESSAGE_SIZE) {
      size=ConnectionOptions.MIN_MESSAGE_SIZE;
    }
    if (size < con.getOptions().getMaxMessageSize()) {
      if (_log.shouldLog(Log.INFO))       _log.info("Reducing our max message size to " + size + " from "+ con.getOptions().getMaxMessageSize());
      con.getOptions().setMaxMessageSize(size);
      con.getOutputStream().setBufferSize(size);
    }
  }
  con.packetReceived();
  boolean choke=false;
  if (packet.isFlagSet(Packet.FLAG_DELAY_REQUESTED)) {
    if (packet.getOptionalDelay() > 60000) {
      choke=true;
    }
  }
  if (!con.getInputStream().canAccept(seqNum,packet.getPayloadSize())) {
    if (_log.shouldWarn())     _log.warn("Inbound buffer exceeded on connection " + con + ", dropping "+ packet);
    con.getOptions().setChoke(61 * 1000);
    packet.releasePayload();
    con.ackImmediately();
    return;
  }
  con.getOptions().setChoke(0);
  _context.statManager().addRateData("stream.con.receiveMessageSize",packet.getPayloadSize());
  boolean allowAck=true;
  final boolean isSYN=packet.isFlagSet(Packet.FLAG_SYNCHRONIZE);
  if ((!isSYN) && (packet.getReceiveStreamId() <= 0))   allowAck=false;
  boolean isNew;
  if (seqNum > 0 || isSYN)   isNew=con.getInputStream().messageReceived(seqNum,packet.getPayload());
 else   isNew=false;
  if (!allowAck)   isNew=false;
  if (_log.shouldLog(Log.DEBUG)) {
    String type;
    if (!allowAck)     type="Non-SYN before SYN";
 else     if (isNew)     type="New";
 else     if (packet.getPayloadSize() <= 0)     type="Ack-only";
 else     type="Dup";
    _log.debug(type + " IB pkt: " + packet+ " on "+ con);
  }
  boolean fastAck=false;
  boolean ackOnly=false;
  if (isNew) {
    con.incrementUnackedPacketsReceived();
    con.incrementBytesReceived(packet.getPayloadSize());
    if (packet.isFlagSet(Packet.FLAG_DELAY_REQUESTED) && (packet.getOptionalDelay() <= 0)) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Scheduling immediate ack for " + packet);
      con.setNextSendTime(_context.clock().now() + 250);
    }
 else {
      int delay=con.getOptions().getSendAckDelay();
      if (packet.isFlagSet(Packet.FLAG_DELAY_REQUESTED))       delay=packet.getOptionalDelay();
      con.setNextSendTime(delay + _context.clock().now());
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Scheduling ack in " + delay + "ms for received packet "+ packet);
    }
  }
 else {
    if ((seqNum > 0) || (packet.getPayloadSize() > 0) || isSYN) {
      _context.statManager().addRateData("stream.con.receiveDuplicateSize",packet.getPayloadSize());
      con.incrementDupMessagesReceived(1);
      final long now=_context.clock().now();
      final int ackDelay=con.getOptions().getSendAckDelay();
      final long lastSendTime=con.getLastSendTime();
      if (_log.shouldLog(Log.INFO))       _log.info(String.format("%s congestion.. dup packet %s ackDelay %d lastSend %s ago",con,packet,ackDelay,DataHelper.formatDuration(now - lastSendTime)));
      final long nextSendTime=lastSendTime + Math.min(ackDelay,con.getOptions().getRTT() / 2);
      if (nextSendTime <= now) {
        if (_log.shouldLog(Log.INFO))         _log.info("immediate ack");
        con.ackImmediately();
        _context.statManager().updateFrequency("stream.ack.dup.immediate");
      }
 else {
        final long delay=nextSendTime - now;
        if (_log.shouldLog(Log.INFO))         _log.info("scheduling ack in " + delay);
        _context.simpleTimer2().addEvent(new AckDup(con),delay);
      }
    }
 else {
      if (isSYN) {
        con.setNextSendTime(_context.clock().now() + con.getOptions().getSendAckDelay());
      }
 else {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("ACK only packet received: " + packet);
        ackOnly=true;
      }
    }
  }
  if (isSYN && (packet.getSendStreamId() <= 0)) {
  }
 else {
    fastAck=ack(con,packet.getAckThrough(),packet.getNacks(),packet,isNew,choke);
  }
  con.eventOccurred();
  if (fastAck) {
    if (!isNew) {
    }
 else {
      long timeSinceSend=_context.clock().now() - con.getLastSendTime();
      if (timeSinceSend >= 2000) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Fast ack for dup " + packet);
        con.ackImmediately();
      }
 else {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Not fast acking dup " + packet + " since we last sent "+ timeSinceSend+ "ms ago");
      }
    }
  }
  if (ackOnly || !isNew) {
    packet.releasePayload();
  }
  if (packet.isFlagSet(Packet.FLAG_CLOSE) && packet.isFlagSet(Packet.FLAG_SIGNATURE_INCLUDED)) {
    con.closeReceived();
    if (isNew)     con.updateShareOpts();
  }
}
