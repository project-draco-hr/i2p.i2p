{
  if (_log.shouldLog(Log.DEBUG))   _log.debug("received msg ID " + messageId + " with "+ (payload != null ? payload.getValid() + " bytes" : "no payload"));
synchronized (_dataLock) {
    if (messageId <= _highestReadyBlockId) {
      if (_log.shouldLog(Log.INFO))       _log.info("ignoring dup message " + messageId);
      _dataLock.notifyAll();
      return false;
    }
    if (messageId > _highestBlockId)     _highestBlockId=messageId;
    if (_highestReadyBlockId + 1 == messageId) {
      if (!_locallyClosed && payload.getValid() > 0) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("accepting bytes as ready: " + payload.getValid());
        _readyDataBlocks.add(payload);
      }
      _highestReadyBlockId=messageId;
      long cur=_highestReadyBlockId + 1;
      ByteArray ba;
      while ((ba=_notYetReadyBlocks.remove(Long.valueOf(cur))) != null) {
        if (ba.getData() != null && ba.getValid() > 0) {
          _readyDataBlocks.add(ba);
        }
        if (_log.shouldLog(Log.DEBUG))         _log.debug("making ready the block " + cur);
        cur++;
        _highestReadyBlockId++;
      }
    }
 else {
      if (_locallyClosed) {
        if (_log.shouldInfo())         _log.info("Message received on closed stream: " + messageId);
        _notYetReadyBlocks.put(Long.valueOf(messageId),DUMMY_BA);
      }
 else {
        if (_log.shouldInfo())         _log.info("Message is out of order: " + messageId);
        _notYetReadyBlocks.put(Long.valueOf(messageId),payload);
      }
    }
    _dataLock.notifyAll();
  }
  return true;
}
