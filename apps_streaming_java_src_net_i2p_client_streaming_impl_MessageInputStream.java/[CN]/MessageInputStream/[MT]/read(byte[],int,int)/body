{
  int readTimeout=_readTimeout;
  long expiration;
  if (readTimeout > 0)   expiration=readTimeout + System.currentTimeMillis();
 else   expiration=-1;
synchronized (_dataLock) {
    if (_locallyClosed)     throw new IOException("Already locally closed");
    throwAnyError();
    for (int i=0; i < length; i++) {
      if ((_readyDataBlocks.isEmpty()) && (i == 0)) {
        while (_readyDataBlocks.isEmpty()) {
          if (_locallyClosed)           throw new IOException("Already closed");
          if ((_notYetReadyBlocks.isEmpty()) && (_closeReceived)) {
            if (_log.shouldLog(Log.INFO))             _log.info("read(...," + offset + ", "+ length+ ")["+ i+ "] got EOF after "+ _readTotal+ " "+ toString());
            return -1;
          }
 else {
            if (readTimeout < 0) {
              if (_log.shouldLog(Log.DEBUG))               _log.debug("read(...," + offset + ", "+ length+ ")["+ i+ "] with no timeout: "+ toString());
              try {
                _dataLock.wait();
              }
 catch (              InterruptedException ie) {
                IOException ioe2=new InterruptedIOException("Interrupted read");
                ioe2.initCause(ie);
                throw ioe2;
              }
              if (_log.shouldLog(Log.DEBUG))               _log.debug("read(...," + offset + ", "+ length+ ")["+ i+ "] with no timeout complete: "+ toString());
              throwAnyError();
            }
 else             if (readTimeout > 0) {
              if (_log.shouldLog(Log.DEBUG))               _log.debug("read(...," + offset + ", "+ length+ ")["+ i+ "] with timeout: "+ readTimeout+ ": "+ toString());
              try {
                _dataLock.wait(readTimeout);
              }
 catch (              InterruptedException ie) {
                IOException ioe2=new InterruptedIOException("Interrupted read");
                ioe2.initCause(ie);
                throw ioe2;
              }
              if (_log.shouldLog(Log.DEBUG))               _log.debug("read(...," + offset + ", "+ length+ ")["+ i+ "] with timeout complete: "+ readTimeout+ ": "+ toString());
              throwAnyError();
            }
 else {
              if (_log.shouldLog(Log.DEBUG))               _log.debug("read(...," + offset + ", "+ length+ ")["+ i+ "] with nonblocking setup: "+ toString());
              return i;
            }
            if (_readyDataBlocks.isEmpty()) {
              if (readTimeout > 0) {
                long remaining=expiration - System.currentTimeMillis();
                if (remaining <= 0) {
                  if (_log.shouldLog(Log.INFO))                   _log.info("read(...," + offset + ", "+ length+ ")["+ i+ "] expired: "+ toString());
                  return i;
                }
 else {
                  readTimeout=(int)remaining;
                }
              }
            }
          }
        }
        i--;
      }
 else       if (_readyDataBlocks.isEmpty()) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("read(...," + offset + ", "+ length+ ")["+ i+ "] no more ready blocks, returning");
        return i;
      }
 else {
        ByteArray cur=_readyDataBlocks.get(0);
        byte rv=cur.getData()[cur.getOffset() + _readyDataBlockIndex];
        _readyDataBlockIndex++;
        if (cur.getValid() <= _readyDataBlockIndex) {
          _readyDataBlockIndex=0;
          _readyDataBlocks.remove(0);
        }
        _readTotal++;
        target[offset + i]=rv;
        if ((_readyDataBlockIndex <= 3) || (_readyDataBlockIndex >= cur.getValid() - 5)) {
          if (_log.shouldLog(Log.DEBUG))           _log.debug("read(...," + offset + ", "+ length+ ")["+ i+ "] after ready data: readyDataBlockIndex="+ _readyDataBlockIndex+ " readyBlocks="+ _readyDataBlocks.size()+ " readTotal="+ _readTotal);
        }
      }
    }
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("read(byte[]," + offset + ','+ length+ ") read fully; total read: "+ _readTotal);
  return length;
}
