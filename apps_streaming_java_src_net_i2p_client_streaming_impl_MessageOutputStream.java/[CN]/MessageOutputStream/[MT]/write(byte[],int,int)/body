{
  if (_closed.get())   throw new IOException("Already closed");
  if (_log.shouldLog(Log.DEBUG))   _log.debug("write(b[], " + off + ", "+ len+ ") ");
  int cur=off;
  int remaining=len;
  long begin=_context.clock().now();
  while (remaining > 0) {
    WriteStatus ws=null;
    if (_closed.get())     throw new IOException("closed underneath us");
synchronized (_dataLock) {
      if (_buf == null)       throw new IOException("closed (buffer went away)");
      if (_valid + remaining < _buf.length) {
        System.arraycopy(b,cur,_buf,_valid,remaining);
        _valid+=remaining;
        cur+=remaining;
        _written+=remaining;
        remaining=0;
        _lastBuffered=_context.clock().now();
        if (_passiveFlushDelay > 0) {
          _flusher.enqueue();
        }
      }
 else {
        int toWrite=_buf.length - _valid;
        System.arraycopy(b,cur,_buf,_valid,toWrite);
        remaining-=toWrite;
        cur+=toWrite;
        _valid=_buf.length;
        if (_log.shouldLog(Log.INFO))         _log.info("write() direct valid = " + _valid);
        ws=_dataReceiver.writeData(_buf,0,_valid);
        _written+=_valid;
        _valid=0;
        throwAnyError();
        locked_updateBufferSize();
      }
    }
    if (ws != null) {
      if (_log.shouldLog(Log.INFO))       _log.info("Waiting " + _writeTimeout + "ms for accept of "+ ws);
      try {
        ws.waitForAccept(_writeTimeout);
      }
 catch (      InterruptedException ie) {
        IOException ioe2=new InterruptedIOException("Interrupted write");
        ioe2.initCause(ie);
        throw ioe2;
      }
      if (!ws.writeAccepted()) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Write not accepted of " + ws);
        if (_writeTimeout > 0)         throw new InterruptedIOException("Write not accepted within timeout: " + ws);
 else         throw new IOException("Write not accepted into the queue: " + ws);
      }
 else {
        if (_log.shouldLog(Log.INFO))         _log.info("After waitForAccept of " + ws);
      }
    }
 else {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Queued " + len + " without sending to the receiver");
    }
  }
  long elapsed=_context.clock().now() - begin;
  if ((elapsed > 10 * 1000) && (_log.shouldLog(Log.INFO)))   _log.info("took " + elapsed + "ms to write to the stream?",new Exception("foo"));
  throwAnyError();
}
