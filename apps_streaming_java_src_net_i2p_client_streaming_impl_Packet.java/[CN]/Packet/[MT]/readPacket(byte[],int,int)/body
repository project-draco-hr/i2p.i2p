{
  if (buffer.length - offset < length)   throw new IllegalArgumentException("len=" + buffer.length + " off="+ offset+ " length="+ length);
  if (length < 22)   throw new IllegalArgumentException("Too small: len=" + buffer.length);
  int cur=offset;
  setSendStreamId(DataHelper.fromLong(buffer,cur,4));
  cur+=4;
  setReceiveStreamId(DataHelper.fromLong(buffer,cur,4));
  cur+=4;
  setSequenceNum(DataHelper.fromLong(buffer,cur,4));
  cur+=4;
  setAckThrough(DataHelper.fromLong(buffer,cur,4));
  cur+=4;
  int numNacks=(int)DataHelper.fromLong(buffer,cur,1);
  cur++;
  if (length < 22 + numNacks * 4)   throw new IllegalArgumentException("Too small with " + numNacks + " nacks: "+ length);
  if (numNacks > 0) {
    long nacks[]=new long[numNacks];
    for (int i=0; i < numNacks; i++) {
      nacks[i]=DataHelper.fromLong(buffer,cur,4);
      cur+=4;
    }
    setNacks(nacks);
  }
 else {
    setNacks(null);
  }
  setResendDelay((int)DataHelper.fromLong(buffer,cur,1));
  cur++;
  setFlags((int)DataHelper.fromLong(buffer,cur,2));
  cur+=2;
  int optionSize=(int)DataHelper.fromLong(buffer,cur,2);
  cur+=2;
  if (length < 22 + numNacks * 4 + optionSize)   throw new IllegalArgumentException("Too small with " + numNacks + " nacks and "+ optionSize+ " options: "+ length);
  int payloadBegin=cur + optionSize;
  int payloadSize=length - payloadBegin;
  if ((payloadSize < 0) || (payloadSize > MAX_PAYLOAD_SIZE))   throw new IllegalArgumentException("length: " + length + " offset: "+ offset+ " begin: "+ payloadBegin);
  _payload=new ByteArray(buffer,payloadBegin,payloadSize);
  if (isFlagSet(FLAG_DELAY_REQUESTED)) {
    setOptionalDelay((int)DataHelper.fromLong(buffer,cur,2));
    cur+=2;
  }
  if (isFlagSet(FLAG_FROM_INCLUDED)) {
    ByteArrayInputStream bais=new ByteArrayInputStream(buffer,cur,length - cur);
    try {
      Destination optionFrom=Destination.create(bais);
      cur+=optionFrom.size();
      setOptionalFrom(optionFrom);
    }
 catch (    IOException ioe) {
      throw new IllegalArgumentException("Bad from field",ioe);
    }
catch (    DataFormatException dfe) {
      throw new IllegalArgumentException("Bad from field",dfe);
    }
  }
  if (isFlagSet(FLAG_MAX_PACKET_SIZE_INCLUDED)) {
    setOptionalMaxSize((int)DataHelper.fromLong(buffer,cur,2));
    cur+=2;
  }
  if (isFlagSet(FLAG_SIGNATURE_INCLUDED)) {
    Signature optionSignature=new Signature();
    byte buf[]=new byte[Signature.SIGNATURE_BYTES];
    System.arraycopy(buffer,cur,buf,0,Signature.SIGNATURE_BYTES);
    optionSignature.setData(buf);
    setOptionalSignature(optionSignature);
    cur+=Signature.SIGNATURE_BYTES;
  }
}
