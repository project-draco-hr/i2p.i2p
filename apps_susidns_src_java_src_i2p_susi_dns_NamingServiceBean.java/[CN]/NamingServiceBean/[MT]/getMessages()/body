{
  if (isDirect())   return super.getMessages();
  String message="";
  if (action != null) {
    Properties nsOptions=new Properties();
    nsOptions.setProperty("list",getFileName());
    if (lastSerial != null && serial != null && serial.compareTo(lastSerial) == 0) {
      boolean changed=false;
      if (action.equals(_("Add")) || action.equals(_("Replace"))) {
        if (hostname != null && destination != null) {
          try {
            String host=AddressBean.toASCII(hostname);
            String displayHost=host.equals(hostname) ? hostname : hostname + " (" + host+ ')';
            Properties outProperties=new Properties();
            Destination oldDest=getNamingService().lookup(host,nsOptions,outProperties);
            if (oldDest != null && destination.equals(oldDest.toBase64())) {
              message=_("Host name {0} is already in addressbook, unchanged.",displayHost);
            }
 else             if (oldDest != null && !action.equals(_("Replace"))) {
              message=_("Host name {0} is already in addressbook with a different destination. Click \"Replace\" to overwrite.",displayHost);
            }
 else {
              try {
                Destination dest=new Destination(destination);
                if (oldDest != null) {
                  nsOptions.putAll(outProperties);
                  nsOptions.setProperty("m",Long.toString(I2PAppContext.getGlobalContext().clock().now()));
                }
                nsOptions.setProperty("s",_("Manually added via SusiDNS"));
                boolean success=getNamingService().put(host,dest,nsOptions);
                if (success) {
                  changed=true;
                  if (oldDest == null)                   message=_("Destination added for {0}.",displayHost);
 else                   message=_("Destination changed for {0}.",displayHost);
                  hostname=null;
                  destination=null;
                }
 else {
                  message=_("Failed to add Destination for {0} to naming service {1}",displayHost,getNamingService()) + "<br>";
                }
              }
 catch (              DataFormatException dfe) {
                message=_("Invalid Base 64 destination.");
              }
            }
          }
 catch (          IllegalArgumentException iae) {
            message=iae.getMessage();
            if (message == null)             message=_("Invalid host name \"{0}\".",hostname);
          }
        }
 else {
          message=_("Please enter a host name and destination");
        }
        search=null;
      }
 else       if (action.equals(_("Delete Selected")) || action.equals(_("Delete Entry"))) {
        String name=null;
        int deleted=0;
        for (        String n : deletionMarks) {
          boolean success=getNamingService().remove(n,nsOptions);
          String uni=AddressBean.toUnicode(n);
          String displayHost=uni.equals(n) ? n : uni + " (" + n+ ')';
          if (!success) {
            message+=_("Failed to delete Destination for {0} from naming service {1}",displayHost,getNamingService()) + "<br>";
          }
 else           if (deleted++ == 0) {
            changed=true;
            name=displayHost;
          }
        }
        if (changed) {
          if (deleted == 1)           message+=_("Destination {0} deleted.",name);
 else           message=ngettext("1 destination deleted.","{0} destinations deleted.",deleted);
        }
 else {
          message=_("No entries selected to delete.");
        }
        if (action.equals(_("Delete Entry")))         search=null;
      }
      if (changed) {
        message+="<br>" + _("Addressbook saved.");
      }
    }
 else {
      message=_("Invalid form submission, probably because you used the \"back\" or \"reload\" button on your browser. Please resubmit.");
    }
  }
  action=null;
  if (message.length() > 0)   message="<p class=\"messages\">" + message + "</p>";
  return message;
}
