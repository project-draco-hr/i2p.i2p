{
  begin=offset;
  end=offset + length;
  buffer=readBuffer;
  parts=new ArrayList<MailPart>();
  int bb=end;
  for (int i=begin; i < end - 4; i++) {
    if (buffer.content[i] == '\r' && buffer.content[i + 1] == '\n' && buffer.content[i + 2] == '\r' && buffer.content[i + 3] == '\n') {
      bb=i + 2;
      break;
    }
  }
  beginBody=bb;
  ReadBuffer decodedHeaders=EncodingFactory.getEncoding("HEADERLINE").decode(buffer.content,begin,beginBody - begin);
  headerLines=new String(decodedHeaders.content,decodedHeaders.offset,decodedHeaders.length).split("\r\n");
  String boundary=null;
  String x_encoding=null;
  String x_disposition=null;
  String x_type=null;
  boolean x_multipart=false;
  boolean x_message=false;
  String x_name=null;
  String x_charset=null;
  String x_description=null;
  String x_version=null;
  for (int i=0; i < headerLines.length; i++) {
    if (headerLines[i].toLowerCase(Locale.US).startsWith("content-transfer-encoding: ")) {
      x_encoding=getFirstAttribute(headerLines[i]).toLowerCase(Locale.US);
    }
 else     if (headerLines[i].toLowerCase(Locale.US).startsWith("content-disposition: ")) {
      x_disposition=getFirstAttribute(headerLines[i]).toLowerCase(Locale.US);
      String str;
      str=getHeaderLineAttribute(headerLines[i],"filename");
      if (str != null)       x_name=str;
    }
 else     if (headerLines[i].toLowerCase(Locale.US).startsWith("content-type: ")) {
      x_type=getFirstAttribute(headerLines[i]).toLowerCase(Locale.US);
      String str;
      str=getHeaderLineAttribute(headerLines[i],"boundary");
      if (str != null)       boundary=str;
      if (x_type != null && x_type.startsWith("multipart") && boundary != null)       x_multipart=true;
      if (x_type != null && x_type.startsWith("message"))       x_message=true;
      str=getHeaderLineAttribute(headerLines[i],"name");
      if (str != null)       x_name=str;
      str=getHeaderLineAttribute(headerLines[i],"charset");
      if (str != null)       x_charset=str.toUpperCase(Locale.US);
    }
 else     if (headerLines[i].toLowerCase(Locale.US).startsWith("content-description: ")) {
      x_description=getFirstAttribute(headerLines[i]);
    }
 else     if (headerLines[i].toLowerCase(Locale.US).startsWith("mime-version: ")) {
      x_version=getFirstAttribute(headerLines[i]);
    }
  }
  encoding=x_encoding;
  disposition=x_disposition;
  type=x_type;
  multipart=x_multipart;
  message=x_message;
  name=x_name;
  charset=x_charset;
  description=x_description;
  version=x_version;
  int beginLastPart=-1;
  if (multipart) {
    byte boundaryArray[]=DataHelper.getUTF8(boundary);
    for (int i=beginBody; i < end - 4; i++) {
      if (buffer.content[i] == '\r' && buffer.content[i + 1] == '\n' && buffer.content[i + 2] == '-' && buffer.content[i + 3] == '-') {
        int j=0;
        for (; j < boundaryArray.length && i + 4 + j < end; j++)         if (buffer.content[i + 4 + j] != boundaryArray[j])         break;
        if (j == boundaryArray.length) {
          int k=i + 4 + j;
          if (k < end - 2 && buffer.content[k] == '-' && buffer.content[k + 1] == '-')           k+=2;
          if (k < end - 2 && buffer.content[k] == '\r' && buffer.content[k + 1] == '\n') {
            k+=2;
            int endLastPart=i + 2;
            if (beginLastPart != -1) {
              MailPart newPart=new MailPart(buffer,beginLastPart,endLastPart - beginLastPart);
              parts.add(newPart);
            }
            beginLastPart=k;
          }
          i=k;
        }
      }
    }
  }
 else   if (message) {
    MailPart newPart=new MailPart(buffer,beginBody,end);
    parts.add(newPart);
  }
}
