{
  begin=offset;
  end=offset + length;
  buffer=readBuffer;
  if (parts == null)   parts=new ArrayList();
 else   parts.clear();
  beginBody=end;
  for (int i=begin; i < end - 4; i++)   if (buffer.content[i] == '\r' && buffer.content[i + 1] == '\n' && buffer.content[i + 2] == '\r' && buffer.content[i + 3] == '\n') {
    beginBody=i + 2;
    break;
  }
  ReadBuffer decodedHeaders=null;
  try {
    decodedHeaders=EncodingFactory.getEncoding("HEADERLINE").decode(buffer.content,begin,beginBody - begin);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (decodedHeaders == null)   return;
  headerLines=new String(decodedHeaders.content,decodedHeaders.offset,decodedHeaders.length).split("\r\n");
  for (int i=0; i < headerLines.length; i++) {
    if (headerLines[i].toLowerCase(Locale.US).startsWith("content-transfer-encoding: ")) {
      encoding=getFirstAttribute(headerLines[i]).toLowerCase(Locale.US);
    }
 else     if (headerLines[i].toLowerCase(Locale.US).startsWith("content-disposition: ")) {
      disposition=getFirstAttribute(headerLines[i]).toLowerCase(Locale.US);
      String str;
      str=getHeaderLineAttribute(headerLines[i],"filename");
      if (str != null)       name=str;
    }
 else     if (headerLines[i].toLowerCase(Locale.US).startsWith("content-type: ")) {
      type=getFirstAttribute(headerLines[i]).toLowerCase(Locale.US);
      String str;
      str=getHeaderLineAttribute(headerLines[i],"boundary");
      if (str != null)       boundary=str;
      if (type != null && type.startsWith("multipart") && boundary != null)       multipart=true;
      if (type != null && type.startsWith("message"))       message=true;
      str=getHeaderLineAttribute(headerLines[i],"name");
      if (str != null)       name=str;
      str=getHeaderLineAttribute(headerLines[i],"charset");
      if (str != null)       charset=str.toUpperCase(Locale.US);
    }
 else     if (headerLines[i].toLowerCase(Locale.US).startsWith("content-description: ")) {
      description=getFirstAttribute(headerLines[i]);
    }
 else     if (headerLines[i].toLowerCase(Locale.US).startsWith("mime-version: ")) {
      version=getFirstAttribute(headerLines[i]);
    }
  }
  int beginLastPart=-1;
  if (multipart) {
    byte boundaryArray[]=boundary.getBytes();
    for (int i=beginBody; i < end - 4; i++) {
      if (buffer.content[i] == '\r' && buffer.content[i + 1] == '\n' && buffer.content[i + 2] == '-' && buffer.content[i + 3] == '-') {
        int j=0;
        for (; j < boundaryArray.length && i + 4 + j < end; j++)         if (buffer.content[i + 4 + j] != boundaryArray[j])         break;
        if (j == boundaryArray.length) {
          int k=i + 4 + j;
          if (k < end - 2 && buffer.content[k] == '-' && buffer.content[k + 1] == '-')           k+=2;
          if (k < end - 2 && buffer.content[k] == '\r' && buffer.content[k + 1] == '\n') {
            k+=2;
            int endLastPart=i + 2;
            if (beginLastPart != -1) {
              MailPart newPart=new MailPart();
              newPart.parse(buffer,beginLastPart,endLastPart - beginLastPart);
              parts.add(newPart);
            }
            beginLastPart=k;
          }
          i=k;
        }
      }
    }
  }
 else   if (message) {
    MailPart newPart=new MailPart();
    newPart.parse(buffer,beginBody,end);
    parts.add(newPart);
  }
}
