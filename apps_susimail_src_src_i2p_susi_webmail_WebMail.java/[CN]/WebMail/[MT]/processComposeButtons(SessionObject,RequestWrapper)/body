{
  String filename=request.getFilename(NEW_FILENAME);
  if (filename != null && (buttonPressed(request,NEW_UPLOAD) || buttonPressed(request,SEND))) {
    Debug.debug(Debug.DEBUG,"Got filename in compose form: " + filename);
    int i=filename.lastIndexOf("/");
    if (i != -1)     filename=filename.substring(i + 1);
    i=filename.lastIndexOf("\\");
    if (i != -1)     filename=filename.substring(i + 1);
    if (filename != null && filename.length() > 0) {
      InputStream in=request.getInputStream(NEW_FILENAME);
      int l;
      try {
        l=in.available();
        if (l > 0) {
          byte buf[]=new byte[l];
          in.read(buf);
          String contentType=request.getContentType(NEW_FILENAME);
          Encoding encoding;
          String encodeTo;
          if (contentType.toLowerCase(Locale.US).startsWith("text/"))           encodeTo="quoted-printable";
 else           encodeTo="base64";
          encoding=EncodingFactory.getEncoding(encodeTo);
          try {
            if (encoding != null) {
              String data=encoding.encode(buf);
              if (sessionObject.attachments == null)               sessionObject.attachments=new ArrayList<Attachment>();
              sessionObject.attachments.add(new Attachment(filename,contentType,encodeTo,data));
            }
 else {
              sessionObject.error+=_t("No Encoding found for {0}",encodeTo) + '\n';
            }
          }
 catch (          EncodingException e1) {
            sessionObject.error+=_t("Could not encode data: {0}",e1.getMessage());
          }
        }
      }
 catch (      IOException e) {
        sessionObject.error+=_t("Error reading uploaded file: {0}",e.getMessage()) + '\n';
      }
    }
  }
 else   if (sessionObject.attachments != null && buttonPressed(request,DELETE_ATTACHMENT)) {
    for (    Integer item : getCheckedItems(request)) {
      int n=item.intValue();
      for (int i=0; i < sessionObject.attachments.size(); i++) {
        Attachment attachment=sessionObject.attachments.get(i);
        if (attachment.hashCode() == n) {
          sessionObject.attachments.remove(i);
          break;
        }
      }
    }
  }
}
