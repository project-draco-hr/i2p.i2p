{
  if (sessionObject.state == STATE_AUTH) {
    String user=request.getParameter(USER);
    String pass=request.getParameter(PASS);
    String host=request.getParameter(HOST);
    String pop3Port=request.getParameter(POP3);
    String smtpPort=request.getParameter(SMTP);
    String fixedPorts=Config.getProperty(CONFIG_PORTS_FIXED,"true");
    if (!fixedPorts.equalsIgnoreCase("false")) {
      host=Config.getProperty(CONFIG_HOST,DEFAULT_HOST);
      pop3Port=Config.getProperty(CONFIG_PORTS_POP3,"" + DEFAULT_POP3PORT);
      smtpPort=Config.getProperty(CONFIG_PORTS_SMTP,"" + DEFAULT_SMTPPORT);
    }
    boolean doContinue=true;
    if (buttonPressed(request,LOGIN)) {
      if (user == null || user.length() == 0) {
        sessionObject.error+=_("Need username for authentication.") + "<br>";
        doContinue=false;
      }
      if (pass == null || pass.length() == 0) {
        sessionObject.error+=_("Need password for authentication.") + "<br>";
        doContinue=false;
      }
      if (host == null || host.length() == 0) {
        sessionObject.error+=_("Need hostname for connect.") + "<br>";
        doContinue=false;
      }
      int pop3PortNo=0;
      if (pop3Port == null || pop3Port.length() == 0) {
        sessionObject.error+=_("Need port number for pop3 connect.") + "<br>";
        doContinue=false;
      }
 else {
        try {
          pop3PortNo=Integer.parseInt(pop3Port);
          if (pop3PortNo < 0 || pop3PortNo > 65535) {
            sessionObject.error+=_("POP3 port number is not in range 0..65535.") + "<br>";
            doContinue=false;
          }
        }
 catch (        NumberFormatException nfe) {
          sessionObject.error+=_("POP3 port number is invalid.") + "<br>";
          doContinue=false;
        }
      }
      int smtpPortNo=0;
      if (smtpPort == null || smtpPort.length() == 0) {
        sessionObject.error+=_("Need port number for smtp connect.") + "<br>";
        doContinue=false;
      }
 else {
        try {
          smtpPortNo=Integer.parseInt(smtpPort);
          if (smtpPortNo < 0 || smtpPortNo > 65535) {
            sessionObject.error+=_("SMTP port number is not in range 0..65535.") + "<br>";
            doContinue=false;
          }
        }
 catch (        NumberFormatException nfe) {
          sessionObject.error+=_("SMTP port number is invalid.") + "<br>";
          doContinue=false;
        }
      }
      if (doContinue) {
        POP3MailBox mailbox=new POP3MailBox(host,pop3PortNo,user,pass);
        if (mailbox.isConnected()) {
          sessionObject.mailbox=mailbox;
          sessionObject.user=user;
          sessionObject.pass=pass;
          sessionObject.host=host;
          sessionObject.smtpPort=smtpPortNo;
          sessionObject.state=STATE_LIST;
          MailCache mc=new MailCache(mailbox,host,pop3PortNo,user,pass);
          sessionObject.mailCache=mc;
          sessionObject.folder=new Folder<String>();
          String[] uidls=mailbox.getUIDLs();
          sessionObject.folder.setElements(uidls);
          if (uidls.length > 0) {
            List<MailCache.MailRequest> reqs=new ArrayList<MailCache.MailRequest>(uidls.length);
            for (int i=0; i < uidls.length; i++) {
              reqs.add(new CacheRequest(uidls[i]));
            }
            mc.getMail(reqs);
          }
          sessionObject.folder.addSorter(SORT_SENDER,new SenderSorter(sessionObject.mailCache));
          sessionObject.folder.addSorter(SORT_SUBJECT,new SubjectSorter(sessionObject.mailCache));
          sessionObject.folder.addSorter(SORT_DATE,new DateSorter(sessionObject.mailCache));
          sessionObject.folder.addSorter(SORT_SIZE,new SizeSorter(sessionObject.mailCache));
          sessionObject.folder.setSortingDirection(Folder.SortOrder.UP);
          sessionObject.folder.sortBy(SORT_DATE);
          sessionObject.reallyDelete=false;
          Debug.debug(Debug.DEBUG,"CONNECTED, YAY");
        }
 else {
          sessionObject.error+=mailbox.lastError();
          mailbox.close();
          sessionObject.mailbox=null;
          Debug.debug(Debug.DEBUG,"NOT CONNECTED, BOO");
        }
      }
    }
  }
}
