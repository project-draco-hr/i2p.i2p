{
  if (sessionObject.state == STATE_AUTH && isPOST)   processLogin(sessionObject,request);
  if (sessionObject.state != STATE_AUTH && sessionObject.state != STATE_CONFIG)   processLogout(sessionObject,request,isPOST);
  if (sessionObject.state == STATE_NEW && isPOST) {
    if (buttonPressed(request,SEND)) {
      if (sendMail(sessionObject,request))       sessionObject.state=STATE_LIST;
    }
 else     if (buttonPressed(request,CANCEL) || buttonPressed(request,SHOW) || buttonPressed(request,PREVPAGE)|| buttonPressed(request,NEXTPAGE)|| buttonPressed(request,FIRSTPAGE)|| buttonPressed(request,LASTPAGE)|| buttonPressed(request,SETPAGESIZE)|| buttonPressed(request,MARKALL)|| buttonPressed(request,CLEAR)|| buttonPressed(request,INVERT)|| buttonPressed(request,SORT_ID)|| buttonPressed(request,SORT_SENDER)|| buttonPressed(request,SORT_SUBJECT)|| buttonPressed(request,SORT_DATE)|| buttonPressed(request,SORT_SIZE)|| buttonPressed(request,REFRESH)|| buttonPressed(request,LIST)) {
      sessionObject.state=STATE_LIST;
      sessionObject.sentMail=null;
      if (sessionObject.attachments != null)       sessionObject.attachments.clear();
    }
 else     if (buttonPressed(request,PREV) || buttonPressed(request,NEXT) || buttonPressed(request,DELETE)) {
      sessionObject.state=STATE_SHOW;
      sessionObject.sentMail=null;
      if (sessionObject.attachments != null)       sessionObject.attachments.clear();
    }
  }
  if ((sessionObject.state == STATE_SHOW || sessionObject.state == STATE_CONFIG) && isPOST) {
    if (buttonPressed(request,LIST)) {
      sessionObject.state=STATE_LIST;
    }
 else     if (buttonPressed(request,CANCEL) || buttonPressed(request,PREVPAGE) || buttonPressed(request,NEXTPAGE)|| buttonPressed(request,FIRSTPAGE)|| buttonPressed(request,LASTPAGE)|| buttonPressed(request,SETPAGESIZE)|| buttonPressed(request,MARKALL)|| buttonPressed(request,CLEAR)|| buttonPressed(request,INVERT)|| buttonPressed(request,SORT_ID)|| buttonPressed(request,SORT_SENDER)|| buttonPressed(request,SORT_SUBJECT)|| buttonPressed(request,SORT_DATE)|| buttonPressed(request,SORT_SIZE)|| buttonPressed(request,REFRESH)) {
      sessionObject.state=STATE_LIST;
    }
  }
  if (sessionObject.state == STATE_CONFIG && isPOST) {
    if (buttonPressed(request,OFFLINE)) {
      sessionObject.state=STATE_AUTH;
    }
 else     if (buttonPressed(request,LOGIN)) {
      sessionObject.state=STATE_AUTH;
    }
  }
  if (sessionObject.state == STATE_SHOW || sessionObject.state == STATE_LIST) {
    if (isPOST && buttonPressed(request,NEW)) {
      sessionObject.state=STATE_NEW;
    }
    boolean reply=false;
    boolean replyAll=false;
    boolean forward=false;
    sessionObject.replyTo=null;
    sessionObject.replyCC=null;
    sessionObject.body=null;
    sessionObject.subject=null;
    if (buttonPressed(request,REPLY))     reply=true;
    if (buttonPressed(request,REPLYALL)) {
      replyAll=true;
    }
    if (buttonPressed(request,FORWARD)) {
      forward=true;
    }
    if (reply || replyAll || forward) {
      String uidl=null;
      if (sessionObject.state == STATE_LIST) {
        List<Integer> items=getCheckedItems(request);
        if (!items.isEmpty()) {
          int pos=items.get(0).intValue();
          uidl=sessionObject.folder.getElementAtPosXonCurrentPage(pos);
        }
      }
 else {
        uidl=sessionObject.showUIDL;
      }
      if (uidl != null) {
        Mail mail=sessionObject.mailCache.getMail(uidl,MailCache.FetchMode.ALL);
        MailPart part=mail != null ? mail.getPart() : null;
        if (part != null) {
          if (reply || replyAll) {
            if (mail.reply != null && Mail.validateAddress(mail.reply))             sessionObject.replyTo=mail.reply;
 else             if (mail.sender != null && Mail.validateAddress(mail.sender))             sessionObject.replyTo=mail.sender;
            sessionObject.subject=_t("Re:") + ' ' + mail.formattedSubject;
            StringWriter text=new StringWriter();
            PrintWriter pw=new PrintWriter(text);
            pw.println(_t("On {0} {1} wrote:",mail.formattedDate + " UTC",sessionObject.replyTo));
            StringWriter text2=new StringWriter();
            PrintWriter pw2=new PrintWriter(text2);
            showPart(pw2,part,0,TEXT_ONLY);
            pw2.flush();
            String[] lines=DataHelper.split(text2.toString(),"\r\n");
            for (int i=0; i < lines.length; i++)             pw.println("> " + lines[i]);
            pw.flush();
            sessionObject.body=text.toString();
          }
          if (replyAll) {
            StringBuilder buf=new StringBuilder();
            String pad="";
            if (mail.to != null) {
              for (int i=0; i < mail.to.length; i++) {
                buf.append(pad);
                buf.append(mail.to[i]);
                pad=", ";
              }
            }
            if (mail.cc != null) {
              for (int i=0; i < mail.cc.length; i++) {
                buf.append(pad);
                buf.append(mail.cc[i]);
                pad=", ";
              }
            }
            if (buf.length() > 0)             sessionObject.replyCC=buf.toString();
          }
          if (forward) {
            sessionObject.subject=_t("Fwd:") + ' ' + mail.formattedSubject;
            String sender=null;
            if (mail.reply != null && Mail.validateAddress(mail.reply))             sender=Mail.getAddress(mail.reply);
 else             if (mail.sender != null && Mail.validateAddress(mail.sender))             sender=Mail.getAddress(mail.sender);
            StringWriter text=new StringWriter();
            PrintWriter pw=new PrintWriter(text);
            pw.println();
            pw.println();
            pw.println();
            pw.println("---- " + _t("begin forwarded mail") + " ----");
            pw.println("From: " + sender);
            if (mail.to != null) {
              String pad="To: ";
              for (int i=0; i < mail.to.length; i++) {
                pw.println(pad);
                pw.println(mail.to[i]);
                pad="    ";
              }
            }
            if (mail.cc != null) {
              String pad="Cc: ";
              for (int i=0; i < mail.cc.length; i++) {
                pw.println(pad);
                pw.println(mail.cc[i]);
                pad="    ";
              }
            }
            if (mail.dateString != null)             pw.print("Date: " + mail.dateString);
            pw.println();
            showPart(pw,part,0,TEXT_ONLY);
            pw.println("----  " + _t("end forwarded mail") + "  ----");
            pw.flush();
            sessionObject.body=text.toString();
          }
          sessionObject.state=STATE_NEW;
        }
 else {
          sessionObject.error+=_t("Could not fetch mail body.") + '\n';
        }
      }
    }
  }
  if (sessionObject.state == STATE_LIST || sessionObject.state == STATE_SHOW) {
    String show=request.getParameter(SHOW);
    if (show != null && show.length() > 0) {
      try {
        int id=Integer.parseInt(show);
        if (id >= 0 && id < sessionObject.folder.getPageSize()) {
          String uidl=sessionObject.folder.getElementAtPosXonCurrentPage(id);
          if (uidl != null) {
            sessionObject.state=STATE_SHOW;
            sessionObject.showUIDL=uidl;
          }
        }
      }
 catch (      NumberFormatException nfe) {
        sessionObject.error+=_t("Message id not valid.") + '\n';
      }
    }
  }
}
