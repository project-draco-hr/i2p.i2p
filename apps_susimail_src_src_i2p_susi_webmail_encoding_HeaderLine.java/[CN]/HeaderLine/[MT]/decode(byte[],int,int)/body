{
  ByteArrayOutputStream out=new ByteArrayOutputStream(4096);
  int written=0;
  int end=offset + length;
  if (end > in.length)   throw new DecodingException("Index out of bound.");
  boolean linebreak=false;
  boolean lastCharWasQuoted=false;
  int lastSkip=0;
  while (length-- > 0) {
    byte c=in[offset++];
    if (c == '=') {
      if (length > 0) {
        if (in[offset] == '?') {
          int f1=offset;
          int f2=f1 + 1;
          for (; f2 < end && in[f2] != '?'; f2++)           ;
          if (f2 < end) {
            int f3=f2 + 1;
            for (; f3 < end && in[f3] != '?'; f3++)             ;
            if (f3 < end) {
              int f4=f3 + 1;
              for (; f4 < end && in[f4] != '?'; f4++)               ;
              if (f4 < end - 1 && in[f4 + 1] == '=') {
                String enc=(in[f2 + 1] == 'Q' || in[f2 + 1] == 'q') ? "quoted-printable" : ((in[f2 + 1] == 'B' || in[f2 + 1] == 'b') ? "base64" : null);
                if (enc != null) {
                  Encoding e=EncodingFactory.getEncoding(enc);
                  if (e != null) {
                    ReadBuffer tmp=null;
                    try {
                      tmp=e.decode(in,f3 + 1,f4 - f3 - 1);
                      String charset=new String(in,f1 + 1,f2 - f1 - 1,"ISO-8859-1");
                      String clc=charset.toLowerCase(Locale.US);
                      if (clc.equals("utf-8") || clc.equals("utf8")) {
                        for (int j=0; j < tmp.length; j++) {
                          byte d=tmp.content[tmp.offset + j];
                          out.write(d == '_' ? 32 : d);
                        }
                      }
 else {
                        String decoded=new String(tmp.content,tmp.offset,tmp.length,charset);
                        byte[] utf8=DataHelper.getUTF8(decoded);
                        for (int j=0; j < utf8.length; j++) {
                          byte d=utf8[j];
                          out.write(d == '_' ? 32 : d);
                        }
                      }
                      int distance=f4 + 2 - offset;
                      offset+=distance;
                      length-=distance;
                      lastCharWasQuoted=true;
                      continue;
                    }
 catch (                    Exception e1) {
                      Debug.debug(Debug.ERROR,e1.toString());
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (c == '\r') {
      if (length > 0 && in[offset] == '\n') {
        linebreak=true;
        if (length > 2 && in[offset + 1] == '\r' && in[offset + 2] == '\n')         break;
        length--;
        offset++;
        continue;
      }
    }
    if (linebreak) {
      linebreak=false;
      if (c != ' ' && c != '\t') {
        out.write('\r');
        out.write('\n');
        lastSkip=0;
      }
 else {
        if (!lastCharWasQuoted)         out.write(' ');
        int skipped=1;
        while (length > 0 && (in[offset] == ' ' || in[offset] == '\t')) {
          if (lastSkip > 0 && skipped >= lastSkip) {
            break;
          }
          offset++;
          length--;
          skipped++;
        }
        if (lastSkip == 0 && skipped > 0) {
          lastSkip=skipped;
        }
        continue;
      }
    }
    out.write(c);
    lastCharWasQuoted=false;
  }
  if (linebreak) {
    out.write('\r');
    out.write('\n');
  }
  return new ReadBuffer(out.toByteArray(),0,out.size());
}
