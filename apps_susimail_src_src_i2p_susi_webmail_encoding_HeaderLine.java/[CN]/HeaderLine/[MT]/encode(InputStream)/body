{
  StringBuffer out=new StringBuffer();
  int l=0, buffered=0, tmp[]=new int[BUFSIZE];
  boolean quoting=false;
  boolean quote=false;
  boolean linebreak=false;
  String quotedSequence=null;
  int rest=0;
  while (true) {
    rest=in.available();
    while (rest > 0 && buffered < BUFSIZE) {
      tmp[buffered++]=in.read();
      rest--;
    }
    if (rest == 0 && buffered == 0)     break;
    int c=tmp[0];
    buffered--;
    for (int j=1; j < BUFSIZE; j++)     tmp[j - 1]=tmp[j];
    quote=true;
    if (c > 32 && c < 127 && c != 61) {
      quote=false;
    }
 else     if ((c == 32 || c == 9)) {
      quote=false;
      if (rest == 0 && buffered == 1)       quote=true;
      if (buffered > 0 && (tmp[0] == '\r' || tmp[0] == '\n'))       quote=true;
    }
 else     if (c == 13 && buffered > 0 && tmp[0] == 10) {
      quote=false;
      linebreak=true;
      buffered--;
      for (int j=1; j < BUFSIZE; j++)       tmp[j - 1]=tmp[j];
    }
    if (quote) {
      if (!quoting) {
        quotedSequence="=?iso-8859-1?Q?";
        quoting=true;
      }
      quotedSequence+=HexTable.table[c];
    }
 else {
      if (quoting) {
        quotedSequence+="?=";
        int sl=quotedSequence.length();
        if (l + sl > 76) {
          out.append("\r\n\t");
          l=0;
        }
        out.append(quotedSequence);
        l+=sl;
        quoting=false;
      }
      if (linebreak) {
        out.append("\r\n");
        linebreak=false;
        l=0;
      }
 else {
        if (l > 76) {
          out.append("\r\n\t");
          l=0;
        }
        out.append((char)c);
        l++;
      }
    }
  }
  if (quoting) {
    quotedSequence+="?=";
    int sl=quotedSequence.length();
    if (l + sl > 76) {
      out.append("\r\n\t");
      l=0;
    }
    out.append(quotedSequence);
  }
  return out.toString();
}
