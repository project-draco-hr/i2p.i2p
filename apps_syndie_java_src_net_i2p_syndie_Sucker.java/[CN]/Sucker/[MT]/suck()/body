{
  _state.entriesPosted=new ArrayList();
  SyndFeed feed;
  File fetched=null;
  _state.tempFiles=new ArrayList();
  int idx=_state.urlToLoad.lastIndexOf('/');
  if (idx > 0)   _state.baseUrl=_state.urlToLoad.substring(0,idx);
 else   _state.baseUrl=_state.urlToLoad;
  infoLog("Processing: " + _state.urlToLoad);
  debugLog("Base url: " + _state.baseUrl);
  try {
    File lastIdFile=null;
    if (!_state.pushToSyndie) {
      lastIdFile=new File(_state.historyPath + ".lastId");
      if (!lastIdFile.exists())       lastIdFile.createNewFile();
      FileInputStream fis=null;
      try {
        fis=new FileInputStream(lastIdFile);
        String number=readLine(fis);
        _state.messageNumber=Integer.parseInt(number);
      }
 catch (      NumberFormatException e) {
        _state.messageNumber=0;
      }
 finally {
        if (fis != null)         try {
          fis.close();
        }
 catch (        IOException ioe) {
        }
      }
      File f=new File(_state.outputDir);
      f.mkdirs();
    }
 else {
      _state.messageNumber=_state.bm.getNextBlogEntry(_state.user);
    }
    _log.debug("message number: " + _state.messageNumber);
    _state.historyFile=new File(_state.historyPath);
    if (!_state.historyFile.exists())     _state.historyFile.createNewFile();
    _state.shouldProxy=false;
    _state.proxyPortNum=-1;
    if ((_state.proxyHost != null) && (_state.proxyPort != null)) {
      try {
        _state.proxyPortNum=Integer.parseInt(_state.proxyPort);
        if (_state.proxyPortNum > 0)         _state.shouldProxy=true;
      }
 catch (      NumberFormatException nfe) {
        nfe.printStackTrace();
      }
    }
    int numRetries=2;
    fetched=File.createTempFile("sucker",".fetch");
    EepGet get=new EepGet(I2PAppContext.getGlobalContext(),_state.shouldProxy,_state.proxyHost,_state.proxyPortNum,numRetries,fetched.getAbsolutePath(),_state.urlToLoad);
    SuckerFetchListener lsnr=new SuckerFetchListener();
    get.addStatusListener(lsnr);
    _log.debug("fetching [" + _state.urlToLoad + "] / "+ _state.shouldProxy+ "/"+ _state.proxyHost+ "/"+ _state.proxyHost);
    get.fetch();
    _log.debug("fetched: " + get.getNotModified() + "/"+ get.getETag());
    boolean ok=lsnr.waitForSuccess();
    if (!ok) {
      _log.debug("success? " + ok);
      System.err.println("Unable to retrieve the url after " + numRetries + " tries.");
      fetched.delete();
      return _state.entriesPosted;
    }
    _log.debug("fetched successfully? " + ok);
    if (get.getNotModified()) {
      debugLog("not modified, saving network bytes from useless fetch");
      fetched.delete();
      return _state.entriesPosted;
    }
    SyndFeedInput input=new SyndFeedInput();
    feed=input.build(new XmlReader(fetched));
    List entries=feed.getEntries();
    _log.debug("entries: " + entries.size());
    FileOutputStream hos=null;
    try {
      hos=new FileOutputStream(_state.historyFile,true);
      for (int i=entries.size() - 1; i >= 0; i--) {
        SyndEntry e=(SyndEntry)entries.get(i);
        _state.attachmentCounter=0;
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Syndicate entry: " + e.getLink());
        String messageId=convertToSml(_state,e);
        if (messageId != null) {
          hos.write(messageId.getBytes());
          hos.write("\n".getBytes());
        }
      }
    }
  finally {
      if (hos != null)       try {
        hos.close();
      }
 catch (      IOException ioe) {
      }
    }
    if (!_state.pushToSyndie) {
      FileOutputStream fos=null;
      try {
        fos=new FileOutputStream(lastIdFile);
        fos.write(("" + _state.messageNumber).getBytes());
      }
  finally {
        if (fos != null)         try {
          fos.close();
        }
 catch (        IOException ioe) {
        }
      }
    }
    _log.debug("done fetching");
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  FeedException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  if (fetched != null)   fetched.delete();
  debugLog("Done.");
  return _state.entriesPosted;
}
