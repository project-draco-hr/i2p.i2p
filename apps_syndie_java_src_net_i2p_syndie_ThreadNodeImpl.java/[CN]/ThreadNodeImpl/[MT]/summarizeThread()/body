{
  _recursiveAuthors.add(_entry.getKeyHash());
  _recursiveEntries.add(_entry);
  _mostRecentPostDate=-1;
  _mostRecentPostAuthor=null;
  for (int i=0; i < _children.size(); i++) {
    ThreadNodeImpl node=(ThreadNodeImpl)_children.get(i);
    node.summarizeThread();
    if (node.getMostRecentPostDate() >= _mostRecentPostDate) {
      _mostRecentPostDate=node.getMostRecentPostDate();
      _mostRecentPostAuthor=node.getMostRecentPostAuthor();
    }
    _recursiveTags.addAll(node.getRecursiveTags());
    _recursiveAuthors.addAll(node.getRecursiveAuthors());
    _recursiveEntries.addAll(node.getRecursiveEntries());
  }
  if (_mostRecentPostDate < 0) {
    _mostRecentPostDate=_entry.getEntryId();
    _mostRecentPostAuthor=_entry.getKeyHash();
  }
  TreeSet ordered=new TreeSet(new WritableThreadIndex.NewestNodeFirstComparator());
  for (int i=0; i < _children.size(); i++) {
    ThreadNodeImpl kid=(ThreadNodeImpl)_children.get(i);
    ordered.add(kid);
  }
  List kids=new ArrayList(ordered.size());
  for (Iterator iter=ordered.iterator(); iter.hasNext(); )   kids.add(iter.next());
  _children=kids;
}
