{
  Map nodes=new HashMap(_tags.size());
  for (Iterator iter=_tags.keySet().iterator(); iter.hasNext(); ) {
    BlogURI entry=(BlogURI)iter.next();
    String tags[]=(String[])_tags.get(entry);
    BlogURI parent=(BlogURI)_parents.get(entry);
    ThreadNodeImpl node=new ThreadNodeImpl();
    node.setEntry(entry);
    if (tags != null)     for (int i=0; i < tags.length; i++)     node.addTag(tags[i]);
    if (parent != null)     node.setParentEntry(parent);
    addEntry(entry,node);
    nodes.put(entry,node);
  }
  SMLParser parser=new SMLParser(I2PAppContext.getGlobalContext());
  HeaderReceiver rec=new HeaderReceiver();
  Archive archive=BlogManager.instance().getArchive();
  for (Iterator iter=nodes.keySet().iterator(); iter.hasNext(); ) {
    BlogURI entry=(BlogURI)iter.next();
    ThreadNodeImpl node=(ThreadNodeImpl)nodes.get(entry);
    int depth=0;
    while (node.getParentEntry() != null) {
      ThreadNodeImpl parent=(ThreadNodeImpl)nodes.get(node.getParentEntry());
      if (parent == null)       break;
      BlogURI parentURI=parent.getEntry();
      EntryContainer parentEntry=archive.getEntry(parentURI);
      if (parentEntry != null) {
        parser.parse(parentEntry.getEntry().getText(),rec);
        String refuse=rec.getHeader(HTMLRenderer.HEADER_REFUSE_REPLIES);
        if ((refuse != null) && (Boolean.valueOf(refuse).booleanValue())) {
          if (parent.getEntry().getKeyHash().equals(entry.getKeyHash())) {
          }
 else {
            parent=null;
            break;
          }
        }
      }
      node.setParent(parent);
      parent.addChild(node);
      node=parent;
      depth++;
      if (depth > MAX_THREAD_DEPTH)       break;
    }
    node.summarizeThread();
  }
  TreeSet roots=new TreeSet(new NewestNodeFirstComparator());
  for (Iterator iter=nodes.keySet().iterator(); iter.hasNext(); ) {
    BlogURI entry=(BlogURI)iter.next();
    ThreadNode node=(ThreadNode)nodes.get(entry);
    int depth=0;
    while (node.getParent() != null)     node=node.getParent();
    roots.add(node);
  }
  for (Iterator iter=roots.iterator(); iter.hasNext(); )   addRoot((ThreadNode)iter.next());
  _parents.clear();
  _tags.clear();
}
