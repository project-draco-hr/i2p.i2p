{
  TreeMap ordered=new TreeMap();
  for (int i=0; i < _blogs.size(); i++) {
    BlogSummary summary=(BlogSummary)_blogs.get(i);
    if (blog != null) {
      if (!blog.equals(summary.blog))       continue;
    }
    if ((tag != null) && (tag.trim().length() > 0)) {
      if (!tag.equals(summary.tag)) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Tag [" + summary.tag + "] does not match the requested ["+ tag+ "] in "+ summary.blog.toBase64());
        if (false) {
          StringBuffer b=new StringBuffer(tag.length() * 2);
          for (int j=0; j < tag.length(); j++) {
            b.append((int)tag.charAt(j));
            b.append('.');
            if (summary.tag.length() > j + 1)             b.append((int)summary.tag.charAt(j));
 else             b.append('_');
            b.append(' ');
          }
          if (_log.shouldLog(Log.DEBUG))           _log.debug("tag.summary: " + b.toString());
        }
        continue;
      }
    }
    for (int j=0; j < summary.entries.size(); j++) {
      EntrySummary entry=(EntrySummary)summary.entries.get(j);
      if (entry.entry.getEntryId() < lowestEntryId) {
        long daysAgo1=entry.entry.getEntryId() / (24 * 60 * 60* 1000l);
        long daysAgo2=lowestEntryId / (24 * 60 * 60* 1000l);
        continue;
      }
 else {
        String k=(Long.MAX_VALUE - entry.entry.getEntryId()) + "-" + entry.entry.getKeyHash().toBase64();
        ordered.put(k,entry.entry);
      }
    }
  }
  for (Iterator iter=ordered.values().iterator(); iter.hasNext(); ) {
    BlogURI entry=(BlogURI)iter.next();
    if (entry.getEntryId() < lowestEntryId) {
      continue;
    }
    if (!out.contains(entry))     out.add(entry);
  }
}
