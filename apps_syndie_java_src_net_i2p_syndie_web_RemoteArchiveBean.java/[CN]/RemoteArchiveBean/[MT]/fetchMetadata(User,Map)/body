{
  String meta=ArchiveViewerBean.getString(parameters,"blog");
  if (meta == null)   return;
  Set blogs=new HashSet();
  if ("ALL".equals(meta)) {
    Set localBlogs=BlogManager.instance().getArchive().getIndex().getUniqueBlogs();
    Set remoteBlogs=_remoteIndex.getUniqueBlogs();
    for (Iterator iter=remoteBlogs.iterator(); iter.hasNext(); ) {
      Hash blog=(Hash)iter.next();
      if (!localBlogs.contains(blog)) {
        blogs.add(blog);
      }
    }
  }
 else {
    blogs.add(new Hash(Base64.decode(meta.trim())));
  }
  List urls=new ArrayList(blogs.size());
  List tmpFiles=new ArrayList(blogs.size());
  for (Iterator iter=blogs.iterator(); iter.hasNext(); ) {
    Hash blog=(Hash)iter.next();
    urls.add(buildMetaURL(blog));
    try {
      tmpFiles.add(File.createTempFile("fetchMeta",".txt",BlogManager.instance().getTempDir()));
    }
 catch (    IOException ioe) {
      _statusMessages.add("Internal error creating temporary file to fetch " + blog.toBase64() + ": "+ ioe.getMessage());
    }
  }
  for (int i=0; i < urls.size(); i++)   _statusMessages.add("Scheduling up metadata fetches for " + HTMLRenderer.sanitizeString((String)urls.get(i)));
  fetch(urls,tmpFiles,user,new MetadataStatusListener());
}
