{
  String entries[]=ArchiveViewerBean.getStrings(parameters,"entry");
  String action=ArchiveViewerBean.getString(parameters,"action");
  if ("Fetch all new entries".equals(action)) {
    ArchiveIndex localIndex=BlogManager.instance().getArchive().getIndex();
    List uris=new ArrayList();
    List matches=new ArrayList();
    for (Iterator iter=_remoteIndex.getUniqueBlogs().iterator(); iter.hasNext(); ) {
      Hash blog=(Hash)iter.next();
      if (ignoreBlog(user,blog))       continue;
      _remoteIndex.selectMatchesOrderByEntryId(matches,blog,null);
      for (int i=0; i < matches.size(); i++) {
        BlogURI uri=(BlogURI)matches.get(i);
        if (!localIndex.getEntryIsKnown(uri))         uris.add(uri);
      }
      matches.clear();
    }
    entries=new String[uris.size()];
    for (int i=0; i < uris.size(); i++)     entries[i]=((BlogURI)uris.get(i)).toString();
  }
  if ((entries == null) || (entries.length <= 0))   return;
  StringBuffer url=new StringBuffer(512);
  url.append(buildExportURL());
  Set meta=new HashSet();
  for (int i=0; i < entries.length; i++) {
    BlogURI uri=new BlogURI(entries[i]);
    if (uri.getEntryId() >= 0) {
      url.append("entry=").append(uri.toString()).append('&');
      meta.add(uri.getKeyHash());
      _statusMessages.add("Scheduling blog post fetching for " + HTMLRenderer.sanitizeString(entries[i]));
    }
  }
  for (Iterator iter=meta.iterator(); iter.hasNext(); ) {
    Hash blog=(Hash)iter.next();
    url.append("meta=").append(blog.toBase64()).append('&');
    _statusMessages.add("Scheduling blog metadata fetching for " + blog.toBase64());
  }
  List urls=new ArrayList(1);
  urls.add(url.toString());
  List tmpFiles=new ArrayList(1);
  try {
    File tmp=File.createTempFile("fetchBulk",".zip",BlogManager.instance().getTempDir());
    tmpFiles.add(tmp);
    fetch(urls,tmpFiles,user,new BulkFetchListener(tmp));
  }
 catch (  IOException ioe) {
    _statusMessages.add("Internal error creating temporary file to fetch " + HTMLRenderer.sanitizeString(url.toString()) + ": "+ ioe.getMessage());
  }
}
