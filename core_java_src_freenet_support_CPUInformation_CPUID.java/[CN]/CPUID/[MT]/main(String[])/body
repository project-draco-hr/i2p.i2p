{
  _doLog=true;
  if (!_nativeOk) {
    System.out.println("**Failed to retrieve CPUInfo. Please verify the existence of jcpuid dll/so**");
  }
  System.out.println("JCPUID Version: " + _jcpuidVersion);
  System.out.println(" **CPUInfo**");
  String mname=getCPUModelName();
  if (mname != null)   System.out.println("CPU Model Name: " + mname);
  String vendor=getCPUVendorID();
  System.out.println("CPU Vendor: " + vendor);
  int family=getCPUFamily();
  int model=getCPUModel();
  if (family == 15 || (family == 6 && "GenuineIntel".equals(vendor))) {
    model+=getCPUExtendedModel() << 4;
  }
  if (family == 15) {
    family+=getCPUExtendedFamily();
  }
  System.out.println("CPU Family: " + family);
  System.out.println("CPU Model: " + model);
  System.out.println("CPU Stepping: " + getCPUStepping());
  System.out.println("CPU Flags (EDX):      0x" + Integer.toHexString(getEDXCPUFlags()));
  System.out.println("CPU Flags (ECX):      0x" + Integer.toHexString(getECXCPUFlags()));
  System.out.println("CPU Ext. Info. (EDX): 0x" + Integer.toHexString(getExtendedEDXCPUFlags()));
  System.out.println("CPU Ext. Info. (ECX): 0x" + Integer.toHexString(getExtendedECXCPUFlags()));
  System.out.println("CPU Ext. Feat. (EBX): 0x" + Integer.toHexString(getExtendedEBXFeatureFlags()));
  System.out.println("CPU Ext. Feat. (ECX): 0x" + Integer.toHexString(getExtendedECXFeatureFlags()));
  CPUInfo c=getInfo();
  System.out.println("\n **More CPUInfo**");
  System.out.println("CPU model string: " + c.getCPUModelString());
  System.out.println("CPU has MMX:    " + c.hasMMX());
  System.out.println("CPU has SSE:    " + c.hasSSE());
  System.out.println("CPU has SSE2:   " + c.hasSSE2());
  System.out.println("CPU has SSE3:   " + c.hasSSE3());
  System.out.println("CPU has SSE4.1: " + c.hasSSE41());
  System.out.println("CPU has SSE4.2: " + c.hasSSE42());
  System.out.println("CPU has SSE4A:  " + c.hasSSE4A());
  System.out.println("CPU has AES-NI: " + c.hasAES());
  System.out.println("CPU has AVX:    " + c.hasAVX());
  System.out.println("CPU has AVX2:   " + c.hasAVX2());
  System.out.println("CPU has AVX512: " + c.hasAVX512());
  System.out.println("CPU has ADX:    " + c.hasADX());
  System.out.println("CPU has TBM:    " + c.hasTBM());
  System.out.println("CPU has BMI1:   " + c.hasBMI1());
  System.out.println("CPU has BMI2:   " + c.hasBMI2());
  System.out.println("CPU has FMA3:   " + c.hasFMA3());
  System.out.println("CPU has MOVBE:  " + c.hasMOVBE());
  System.out.println("CPU has ABM:    " + c.hasABM());
  if (c instanceof IntelCPUInfo) {
    System.out.println("\n **Intel-info**");
    System.out.println("Is PII-compatible: " + ((IntelCPUInfo)c).IsPentium2Compatible());
    System.out.println("Is PIII-compatible: " + ((IntelCPUInfo)c).IsPentium3Compatible());
    System.out.println("Is PIV-compatible: " + ((IntelCPUInfo)c).IsPentium4Compatible());
    System.out.println("Is Atom-compatible: " + ((IntelCPUInfo)c).IsAtomCompatible());
    System.out.println("Is Pentium M compatible: " + ((IntelCPUInfo)c).IsPentiumMCompatible());
    System.out.println("Is Core2-compatible: " + ((IntelCPUInfo)c).IsCore2Compatible());
    System.out.println("Is Corei-compatible: " + ((IntelCPUInfo)c).IsCoreiCompatible());
    System.out.println("Is Sandy-compatible: " + ((IntelCPUInfo)c).IsSandyCompatible());
    System.out.println("Is Ivy-compatible: " + ((IntelCPUInfo)c).IsIvyCompatible());
    System.out.println("Is Haswell-compatible: " + ((IntelCPUInfo)c).IsHaswellCompatible());
    System.out.println("Is Broadwell-compatible: " + ((IntelCPUInfo)c).IsBroadwellCompatible());
  }
  if (c instanceof AMDCPUInfo) {
    System.out.println("\n **AMD-info**");
    System.out.println("Is K6-compatible: " + ((AMDCPUInfo)c).IsK6Compatible());
    System.out.println("Is K6_2-compatible: " + ((AMDCPUInfo)c).IsK6_2_Compatible());
    System.out.println("Is K6_3-compatible: " + ((AMDCPUInfo)c).IsK6_3_Compatible());
    System.out.println("Is Geode-compatible: " + ((AMDCPUInfo)c).IsGeodeCompatible());
    System.out.println("Is Athlon-compatible: " + ((AMDCPUInfo)c).IsAthlonCompatible());
    System.out.println("Is Athlon64-compatible: " + ((AMDCPUInfo)c).IsAthlon64Compatible());
    System.out.println("Is Bobcat-compatible: " + ((AMDCPUInfo)c).IsBobcatCompatible());
  }
}
