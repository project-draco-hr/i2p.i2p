{
  try {
    AsyncFortunaStandalone rand=new AsyncFortunaStandalone(null);
    byte seed[]=new byte[1024];
    rand.seed(seed);
    System.out.println("Before starting prng");
    rand.startup();
    System.out.println("Starting prng, waiting 1 minute");
    try {
      Thread.sleep(60 * 1000);
    }
 catch (    InterruptedException ie) {
    }
    System.out.println("PRNG started, beginning test");
    long before=System.currentTimeMillis();
    byte buf[]=new byte[1024];
    java.io.ByteArrayOutputStream baos=new java.io.ByteArrayOutputStream();
    java.util.zip.GZIPOutputStream gos=new java.util.zip.GZIPOutputStream(baos);
    for (int i=0; i < 1024; i++) {
      rand.nextBytes(buf);
      gos.write(buf);
    }
    long after=System.currentTimeMillis();
    gos.finish();
    byte compressed[]=baos.toByteArray();
    System.out.println("Compressed size of 1MB: " + compressed.length + " took "+ (after - before));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    Thread.sleep(5 * 60 * 1000);
  }
 catch (  InterruptedException ie) {
  }
}
