{
  byte in[]=new byte[16];
  byte out[]=new byte[16];
  byte key[]=new byte[32];
  try {
    CryptixAESKeyCache.KeyCacheEntry buf=CryptixAESKeyCache.createNew();
    Object cryptixKey=CryptixRijndael_Algorithm.makeKey(key,16,buf);
    long beforeAll=System.currentTimeMillis();
    for (int i=0; i < 256; i++) {
      for (int j=0; j < 1024; j++)       CryptixRijndael_Algorithm.blockEncrypt(in,out,0,0,cryptixKey);
    }
    long after=System.currentTimeMillis();
    System.out.println("encrypting 4MB took " + (after - beforeAll));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    CryptixAESKeyCache.KeyCacheEntry buf=CryptixAESKeyCache.createNew();
    Object cryptixKey=CryptixRijndael_Algorithm.makeKey(key,16,buf);
    byte data[]=new byte[4 * 1024 * 1024];
    long beforeAll=System.currentTimeMillis();
    CryptixRijndael_Algorithm.ecbBulkEncrypt(data,data,cryptixKey);
    long after=System.currentTimeMillis();
    System.out.println("encrypting 4MB took " + (after - beforeAll));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
