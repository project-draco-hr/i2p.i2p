{
  if (message.getSessionConfig().verifySignature()) {
    _log.debug("Signature verified correctly on create session message");
  }
 else {
    _log.error("Signature verification *FAILED* on a create session message.  Hijack attempt?");
    DisconnectMessage msg=new DisconnectMessage();
    msg.setReason("Invalid signature on CreateSessionMessage");
    try {
      doSend(msg);
    }
 catch (    I2CPMessageException ime) {
      _log.error("Error writing out the disconnect message",ime);
    }
catch (    IOException ioe) {
      _log.error("Error writing out the disconnect message",ioe);
    }
    return;
  }
  SessionStatusMessage msg=new SessionStatusMessage();
  SessionId id=new SessionId();
  id.setSessionId(getNextSessionId());
  _sessionId=id;
  msg.setSessionId(id);
  msg.setStatus(SessionStatusMessage.STATUS_CREATED);
  try {
    doSend(msg);
    _connections.put(message.getSessionConfig().getDestination(),this);
    _config=message.getSessionConfig();
    sessionCreated();
  }
 catch (  I2CPMessageException ime) {
    _log.error("Error writing out the session status message",ime);
  }
catch (  IOException ioe) {
    _log.error("Error writing out the session status message",ioe);
  }
  RequestLeaseSetMessage rlsm=new RequestLeaseSetMessage();
  rlsm.setEndDate(new Date(Clock.getInstance().now() + 60 * 60 * 1000));
  rlsm.setSessionId(id);
  RouterIdentity ri=new RouterIdentity();
  Object rikeys[]=KeyGenerator.getInstance().generatePKIKeypair();
  Object riSigningkeys[]=KeyGenerator.getInstance().generateSigningKeypair();
  ri.setCertificate(new Certificate(Certificate.CERTIFICATE_TYPE_NULL,null));
  ri.setPublicKey((PublicKey)rikeys[0]);
  ri.setSigningPublicKey((SigningPublicKey)riSigningkeys[0]);
  TunnelId tunnel=new TunnelId();
  tunnel.setTunnelId(42);
  rlsm.addEndpoint(ri,tunnel);
  try {
    doSend(rlsm);
  }
 catch (  I2CPMessageException ime) {
    _log.error("Error writing out the request for a lease set",ime);
  }
catch (  IOException ioe) {
    _log.error("Error writing out the request for a lease set",ioe);
  }
}
