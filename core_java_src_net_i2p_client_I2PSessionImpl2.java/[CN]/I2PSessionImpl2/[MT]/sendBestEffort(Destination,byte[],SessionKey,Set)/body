{
  SessionKey key=_context.sessionKeyManager().getCurrentKey(dest.getPublicKey());
  if (key == null)   key=_context.sessionKeyManager().createSession(dest.getPublicKey());
  SessionTag tag=_context.sessionKeyManager().consumeNextAvailableTag(dest.getPublicKey(),key);
  Set sentTags=null;
  if (_context.sessionKeyManager().getAvailableTags(dest.getPublicKey(),key) < 10) {
    sentTags=createNewTags(50);
  }
 else   if (_context.sessionKeyManager().getAvailableTimeLeft(dest.getPublicKey(),key) < 30 * 1000) {
    sentTags=createNewTags(50);
    if (_log.shouldLog(Log.DEBUG))     _log.debug(getPrefix() + "Tags are almost expired, adding 50 new ones");
  }
  SessionKey newKey=null;
  if (false)   newKey=_context.keyGenerator().generateSessionKey();
  long nonce=(long)_context.random().nextInt(Integer.MAX_VALUE);
  MessageState state=new MessageState(nonce,getPrefix());
  state.setKey(key);
  state.setTags(sentTags);
  state.setNewKey(newKey);
  state.setTo(dest);
  if (_log.shouldLog(Log.DEBUG))   _log.debug(getPrefix() + "Setting key = " + key);
  if (keyUsed != null) {
    if (newKey != null)     keyUsed.setData(newKey.getData());
 else     keyUsed.setData(key.getData());
  }
  if (tagsSent != null) {
    if (sentTags != null) {
      tagsSent.addAll(sentTags);
    }
  }
  long beforeSendingSync=_context.clock().now();
  long inSendingSync=0;
synchronized (_sendingStates) {
    inSendingSync=_context.clock().now();
    _sendingStates.add(state);
  }
  long afterSendingSync=_context.clock().now();
  if (_log.shouldLog(Log.DEBUG))   _log.debug(getPrefix() + "Adding sending state " + state.getMessageId()+ " / "+ state.getNonce()+ " sync took "+ (inSendingSync - beforeSendingSync)+ " add took "+ (afterSendingSync - inSendingSync));
  _producer.sendMessage(this,dest,nonce,payload,tag,key,sentTags,newKey);
  long beforeWaitFor=_context.clock().now();
  state.waitFor(MessageStatusMessage.STATUS_SEND_ACCEPTED,_context.clock().now() + getTimeout());
  long afterWaitFor=_context.clock().now();
  long inRemovingSync=0;
synchronized (_sendingStates) {
    inRemovingSync=_context.clock().now();
    _sendingStates.remove(state);
  }
  long afterRemovingSync=_context.clock().now();
  boolean found=state.received(MessageStatusMessage.STATUS_SEND_ACCEPTED);
  if (_log.shouldLog(Log.DEBUG))   _log.debug(getPrefix() + "After waitFor sending state " + state.getMessageId().getMessageId()+ " / "+ state.getNonce()+ " found = "+ found);
  if (found) {
    if (_log.shouldLog(Log.INFO))     _log.info(getPrefix() + "Message sent after " + state.getElapsed()+ "ms with "+ payload.length+ " bytes");
  }
 else {
    if (_log.shouldLog(Log.INFO))     _log.info(getPrefix() + "Message send failed after " + state.getElapsed()+ "ms with "+ payload.length+ " bytes");
    if (_log.shouldLog(Log.ERROR))     _log.error(getPrefix() + "Never received *accepted* from the router!  dropping and reconnecting");
    disconnect();
    return false;
  }
  return found;
}
