{
  changeState(State.OPENING);
  boolean success=false;
  try {
synchronized (_stateLock) {
      if (_context.isRouterContext()) {
        InternalClientManager mgr=_context.internalClientManager();
        if (mgr == null)         throw new I2PSessionException("Router is not ready for connections");
        _queue=mgr.connect();
        _reader=new QueuedI2CPMessageReader(_queue,this);
      }
 else {
        if (Boolean.parseBoolean(getOptions().getProperty(PROP_ENABLE_SSL)))         _socket=I2CPSSLSocketFactory.createSocket(_context,_hostname,_portNum);
 else         _socket=new Socket(_hostname,_portNum);
        OutputStream out=_socket.getOutputStream();
        out.write(I2PClient.PROTOCOL_BYTE);
        out.flush();
        _writer=new ClientWriterRunner(out,this);
        InputStream in=new BufferedInputStream(_socket.getInputStream(),BUF_SIZE);
        _reader=new I2CPMessageReader(in,this);
      }
    }
    _reader.startReading();
    success=true;
  }
 catch (  UnknownHostException uhe) {
    throw new I2PSessionException(getPrefix() + "Cannot connect to the router on " + _hostname+ ':'+ _portNum,uhe);
  }
catch (  IOException ioe) {
    throw new I2PSessionException(getPrefix() + "Cannot connect to the router on " + _hostname+ ':'+ _portNum,ioe);
  }
 finally {
    changeState(success ? State.OPEN : State.CLOSED);
  }
}
