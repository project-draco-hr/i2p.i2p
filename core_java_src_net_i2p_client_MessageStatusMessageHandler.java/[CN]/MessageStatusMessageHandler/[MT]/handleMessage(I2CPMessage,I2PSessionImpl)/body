{
  boolean skipStatus=true;
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Handle message " + message);
  MessageStatusMessage msg=(MessageStatusMessage)message;
switch (msg.getStatus()) {
case MessageStatusMessage.STATUS_AVAILABLE:
    ReceiveMessageBeginMessage m=new ReceiveMessageBeginMessage();
  m.setMessageId(msg.getMessageId());
m.setSessionId(msg.getSessionId());
try {
session.sendMessage(m);
}
 catch (I2PSessionException ise) {
_log.error("Error asking for the message",ise);
}
return;
case MessageStatusMessage.STATUS_SEND_ACCEPTED:
session.receiveStatus((int)msg.getMessageId(),msg.getNonce(),msg.getStatus());
return;
case MessageStatusMessage.STATUS_SEND_BEST_EFFORT_SUCCESS:
case MessageStatusMessage.STATUS_SEND_GUARANTEED_SUCCESS:
if (_log.shouldLog(Log.INFO)) _log.info("Message delivery succeeded for message " + msg.getMessageId());
session.receiveStatus((int)msg.getMessageId(),msg.getNonce(),msg.getStatus());
return;
case MessageStatusMessage.STATUS_SEND_BEST_EFFORT_FAILURE:
case MessageStatusMessage.STATUS_SEND_GUARANTEED_FAILURE:
if (_log.shouldLog(Log.INFO)) _log.info("Message delivery FAILED for message " + msg.getMessageId());
session.receiveStatus((int)msg.getMessageId(),msg.getNonce(),msg.getStatus());
return;
default :
if (_log.shouldLog(Log.ERROR)) _log.error("Invalid message delivery status received: " + msg.getStatus());
}
}
