{
  leaseSet.setDestination(session.getMyDestination());
  LeaseInfo li=_existingLeaseSets.get(session.getMyDestination());
  if (li == null) {
    li=new LeaseInfo(session.getMyDestination());
    _existingLeaseSets.put(session.getMyDestination(),li);
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Creating new leaseInfo keys for " + session.getMyDestination().calculateHash().toBase64());
  }
 else {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Caching the old leaseInfo keys for " + session.getMyDestination().calculateHash().toBase64());
  }
  leaseSet.setEncryptionKey(li.getPublicKey());
  leaseSet.setSigningKey(li.getSigningPublicKey());
  boolean encrypt=Boolean.parseBoolean(session.getOptions().getProperty("i2cp.encryptLeaseSet"));
  String sk=session.getOptions().getProperty("i2cp.leaseSetKey");
  if (encrypt && sk != null) {
    SessionKey key=new SessionKey();
    try {
      key.fromBase64(sk);
      leaseSet.encrypt(key);
      _context.keyRing().put(session.getMyDestination().calculateHash(),key);
    }
 catch (    DataFormatException dfe) {
      _log.error("Bad leaseset key: " + sk);
    }
  }
  try {
    leaseSet.sign(session.getPrivateKey());
    SigningPrivateKey spk=li.getSigningPrivateKey();
    if (!_context.isRouterContext() && spk.getType() != SigType.DSA_SHA1) {
      byte[] dummy=new byte[SigningPrivateKey.KEYSIZE_BYTES];
      _context.random().nextBytes(dummy);
      spk=new SigningPrivateKey(dummy);
    }
    session.getProducer().createLeaseSet(session,leaseSet,li.getSigningPrivateKey(),li.getPrivateKey());
    session.setLeaseSet(leaseSet);
  }
 catch (  DataFormatException dfe) {
    session.propogateError("Error signing the leaseSet",dfe);
  }
catch (  I2PSessionException ise) {
    session.propogateError("Error sending the signed leaseSet",ise);
  }
}
