{
  if (_session.isClosed())   return;
  long now=_context.clock().now();
  long lastActivity=_session.lastActivity();
  if (_log.shouldLog(Log.INFO))   _log.info("Fire idle timer, last activity: " + DataHelper.formatDuration(now - lastActivity) + " ago ");
  long nextDelay=0;
  if (_shutdownEnabled && now - lastActivity >= _shutdownTime) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Closing on idle " + _session);
    _session.destroySession();
    return;
  }
 else   if (lastActivity <= _lastActive && !_shutdownEnabled) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Still idle, sleeping again " + _session);
    nextDelay=_reduceTime;
  }
 else   if (_reduceEnabled && now - lastActivity >= _reduceTime) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Reducing quantity on idle " + _session);
    try {
      _session.getProducer().updateTunnels(_session,_reduceQuantity);
    }
 catch (    I2PSessionException ise) {
      _log.error("bork idle reduction " + ise);
    }
    _session.setReduced();
    _lastActive=lastActivity;
    if (_shutdownEnabled)     nextDelay=_shutdownTime - (now - lastActivity);
 else     nextDelay=_reduceTime;
  }
 else {
    nextDelay=_minimumTime - (now - lastActivity);
  }
  SimpleScheduler.getInstance().addEvent(this,nextDelay);
}
