{
synchronized (_stateLock) {
    boolean wasOpening=false;
    boolean loop=true;
    while (loop) {
switch (_state) {
case INIT:
        loop=false;
      break;
case CLOSED:
    if (wasOpening)     throw new I2PSessionException("connect by other thread failed");
  loop=false;
break;
case OPENING:
case GOTDATE:
wasOpening=true;
try {
_stateLock.wait(10 * 1000);
}
 catch (InterruptedException ie) {
throw new I2PSessionException("Interrupted",ie);
}
break;
case CLOSING:
throw new I2PSessionException("close in progress");
case OPEN:
return;
}
}
changeState(State.OPENING);
}
_availabilityNotifier.stopNotifying();
if ((_options != null) && (I2PClient.PROP_RELIABILITY_GUARANTEED.equals(_options.getProperty(I2PClient.PROP_RELIABILITY,I2PClient.PROP_RELIABILITY_BEST_EFFORT)))) {
if (_log.shouldLog(Log.ERROR)) _log.error("I2CP guaranteed delivery mode has been removed, using best effort.");
}
boolean success=false;
long startConnect=_context.clock().now();
try {
synchronized (_stateLock) {
if (_context.isRouterContext()) {
InternalClientManager mgr=_context.internalClientManager();
if (mgr == null) throw new I2PSessionException("Router is not ready for connections");
_queue=mgr.connect();
_reader=new QueuedI2CPMessageReader(_queue,this);
}
 else {
if (SystemVersion.isAndroid() && _options.getProperty(PROP_DOMAIN_SOCKET) != null) {
try {
Class<?> clazz=Class.forName("net.i2p.client.DomainSocketFactory");
Constructor<?> ctor=clazz.getDeclaredConstructor(I2PAppContext.class);
Object fact=ctor.newInstance(_context);
Method createSocket=clazz.getDeclaredMethod("createSocket",String.class);
_socket=(Socket)createSocket.invoke(fact,_options.getProperty(PROP_DOMAIN_SOCKET));
}
 catch (ClassNotFoundException e) {
throw new I2PSessionException("Cannot load DomainSocketFactory",e);
}
catch (NoSuchMethodException e) {
throw new I2PSessionException("Cannot load DomainSocketFactory",e);
}
catch (InstantiationException e) {
throw new I2PSessionException("Cannot load DomainSocketFactory",e);
}
catch (IllegalAccessException e) {
throw new I2PSessionException("Cannot load DomainSocketFactory",e);
}
catch (InvocationTargetException e) {
throw new I2PSessionException("Cannot load DomainSocketFactory",e);
}
}
 else if (Boolean.parseBoolean(_options.getProperty(PROP_ENABLE_SSL))) {
try {
I2PSSLSocketFactory fact=new I2PSSLSocketFactory(_context,false,"certificates/i2cp");
_socket=fact.createSocket(_hostname,_portNum);
_socket.setKeepAlive(true);
}
 catch (GeneralSecurityException gse) {
IOException ioe=new IOException("SSL Fail");
ioe.initCause(gse);
throw ioe;
}
}
 else {
_socket=new Socket(_hostname,_portNum);
_socket.setKeepAlive(true);
}
OutputStream out=_socket.getOutputStream();
out.write(I2PClient.PROTOCOL_BYTE);
out.flush();
_writer=new ClientWriterRunner(out,this);
_writer.startWriting();
InputStream in=new BufferedInputStream(_socket.getInputStream(),BUF_SIZE);
_reader=new I2CPMessageReader(in,this);
}
}
if (_log.shouldLog(Log.DEBUG)) _log.debug(getPrefix() + "before startReading");
_reader.startReading();
if (_log.shouldLog(Log.DEBUG)) _log.debug(getPrefix() + "Before getDate");
Properties auth=null;
if ((!_context.isRouterContext()) && _options.containsKey(PROP_USER) && _options.containsKey(PROP_PW)) {
auth=new OrderedProperties();
auth.setProperty(PROP_USER,_options.getProperty(PROP_USER));
auth.setProperty(PROP_PW,_options.getProperty(PROP_PW));
}
sendMessage_unchecked(new GetDateMessage(CoreVersion.VERSION,auth));
waitForDate();
if (_log.shouldLog(Log.DEBUG)) _log.debug(getPrefix() + "Before producer.connect()");
_producer.connect(this);
if (_log.shouldLog(Log.DEBUG)) _log.debug(getPrefix() + "After producer.connect()");
int waitcount=0;
while (_leaseSet == null) {
if (waitcount++ > 5 * 60) {
throw new IOException("No tunnels built after waiting 5 minutes. Your network connection may be down, or there is severe network congestion.");
}
synchronized (_leaseSetWait) {
_leaseSetWait.wait(1000);
}
}
if (_log.shouldLog(Log.INFO)) {
long connected=_context.clock().now();
_log.info(getPrefix() + "Lease set created with inbound tunnels after " + (connected - startConnect)+ "ms - ready to participate in the network!");
}
Thread notifier=new I2PAppThread(_availabilityNotifier,"ClientNotifier " + getPrefix(),true);
notifier.start();
startIdleMonitor();
startVerifyUsage();
success=true;
synchronized (_subsessionLock) {
for (SubSession ss : _subsessions) {
if (_log.shouldLog(Log.INFO)) _log.info(getPrefix() + "Connecting subsession " + ss);
_producer.connect(ss);
}
}
}
 catch (InterruptedException ie) {
throw new I2PSessionException("Interrupted",ie);
}
catch (UnknownHostException uhe) {
throw new I2PSessionException(getPrefix() + "Cannot connect to the router on " + _hostname+ ':'+ _portNum,uhe);
}
catch (IOException ioe) {
String msg;
if (_context.isRouterContext()) msg="Failed to build tunnels";
 else if (SystemVersion.isAndroid() && _options.getProperty(PROP_DOMAIN_SOCKET) != null) msg="Failed to bind to the router on " + _options.getProperty(PROP_DOMAIN_SOCKET) + " and build tunnels";
 else msg="Cannot connect to the router on " + _hostname + ':'+ _portNum+ " and build tunnels";
throw new I2PSessionException(getPrefix() + msg,ioe);
}
 finally {
if (success) {
changeState(State.OPEN);
}
 else {
_availabilityNotifier.stopNotifying();
synchronized (_stateLock) {
changeState(State.CLOSING);
try {
_producer.disconnect(this);
}
 catch (I2PSessionException ipe) {
}
closeSocket();
}
}
}
}
