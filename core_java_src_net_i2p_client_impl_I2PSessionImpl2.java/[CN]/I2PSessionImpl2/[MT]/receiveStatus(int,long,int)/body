{
  if (_log.shouldLog(Log.DEBUG))   _log.debug(getPrefix() + "Received status " + status+ " for msgId "+ msgId+ " / "+ nonce);
  MessageState state=null;
  if ((state=_sendingStates.get(Long.valueOf(nonce))) != null) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug(getPrefix() + "Found a matching state");
  }
 else   if (!_sendingStates.isEmpty()) {
    for (    MessageState s : _sendingStates.values()) {
      if (s.getMessageId() != null && s.getMessageId().getMessageId() == msgId) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug(getPrefix() + "Found a matching state by msgId");
        state=s;
        break;
      }
    }
  }
  if (state != null) {
    if (state.getMessageId() == null) {
      MessageId id=new MessageId();
      id.setMessageId(msgId);
      state.setMessageId(id);
    }
    state.receive(status);
    if (state.wasSuccessful())     _sendingStates.remove(Long.valueOf(nonce));
    long lifetime=state.getElapsed();
switch (status) {
case 1:
      _context.statManager().addRateData("i2cp.receiveStatusTime.1",lifetime);
    break;
case 4:
  _context.statManager().addRateData("i2cp.receiveStatusTime.4",lifetime);
break;
case 5:
_context.statManager().addRateData("i2cp.receiveStatusTime.5",lifetime);
break;
}
}
 else {
if (_log.shouldLog(Log.INFO)) _log.info(getPrefix() + "No matching state for messageId " + msgId+ " / "+ nonce+ " w/ status = "+ status);
}
}
