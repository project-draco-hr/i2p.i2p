{
  super(context);
  _lists=new ArrayList();
  _invalid=new ArrayList();
  BlockFile bf=null;
  RAIFile raf=null;
  boolean readOnly=false;
  File f=new File(_context.getRouterDir(),HOSTS_DB);
  if (f.exists()) {
    try {
      readOnly=(!f.canWrite()) || ((!context.isRouterContext()) && (!context.getBooleanProperty(PROP_FORCE)));
      raf=new RAIFile(f,true,!readOnly);
      bf=initExisting(raf);
      if (readOnly && context.isRouterContext())       _log.logAlways(Log.WARN,"Read-only hosts database in router context");
      if (bf.wasMounted()) {
        if (context.isRouterContext())         _log.logAlways(Log.WARN,"The hosts database was not closed cleanly or is still open by another process");
 else         _log.logAlways(Log.WARN,"The hosts database is possibly in use by another process, perhaps the router? " + "The database is not designed for simultaneous access by multiple processes.\n" + "If you are using clients outside the router JVM, consider using the hosts.txt "+ "naming service with "+ "i2p.naming.impl=net.i2p.client.naming.HostsTxtNamingService");
      }
    }
 catch (    IOException ioe) {
      if (raf != null) {
        try {
          raf.close();
        }
 catch (        IOException e) {
        }
      }
      File corrupt=new File(_context.getRouterDir(),HOSTS_DB + ".corrupt");
      _log.log(Log.CRIT,"Corrupt or unreadable database " + f + ", moving to "+ corrupt+ " and creating new database",ioe);
      boolean success=f.renameTo(corrupt);
      if (!success)       _log.log(Log.CRIT,"Failed to move corrupt database " + f + " to "+ corrupt);
    }
  }
  if (bf == null) {
    try {
      raf=new RAIFile(f,true,true);
      SecureFileOutputStream.setPerms(f);
      bf=init(raf);
    }
 catch (    IOException ioe) {
      if (raf != null) {
        try {
          raf.close();
        }
 catch (        IOException e) {
        }
      }
      _log.log(Log.CRIT,"Failed to initialize database",ioe);
      throw new RuntimeException(ioe);
    }
    readOnly=false;
  }
  _bf=bf;
  _raf=raf;
  _readOnly=readOnly;
  _context.addShutdownTask(new Shutdown());
}
