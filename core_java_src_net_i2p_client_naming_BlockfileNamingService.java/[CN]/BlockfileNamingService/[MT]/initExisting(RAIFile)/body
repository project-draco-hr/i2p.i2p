{
  long start=_context.clock().now();
  try {
    BlockFile bf=new BlockFile(raf,false);
    SkipList hdr=bf.getIndex(INFO_SKIPLIST,_stringSerializer,_infoSerializer);
    if (hdr == null)     throw new IOException("No db header");
    Properties info=(Properties)hdr.get(PROP_INFO);
    if (info == null)     throw new IOException("No header info");
    String list=info.getProperty(PROP_LISTS);
    if (list == null)     throw new IOException("No lists");
    long createdOn=0;
    String created=info.getProperty(PROP_CREATED);
    if (created != null) {
      try {
        createdOn=Long.parseLong(created);
      }
 catch (      NumberFormatException nfe) {
      }
    }
    String version=info.getProperty(PROP_VERSION);
    if (version == null)     throw new IOException("No version");
    if (VersionComparator.comp(version,VERSION) > 0)     throw new IOException("Database version is " + version + " but this implementation only supports versions 1-"+ VERSION+ " Did you downgrade I2P??");
    _version=version;
    if (VersionComparator.comp(version,"4") >= 0)     _destSerializer=_destSerializerV4;
    _needsUpgrade=needsUpgrade(bf);
    if (_needsUpgrade) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Upgrading database from version " + _version + " to "+ VERSION+ ", created "+ (new Date(createdOn)).toString()+ " containing lists: "+ list);
    }
 else {
      if (_log.shouldLog(Log.INFO))       _log.info("Found database version " + _version + " created "+ (new Date(createdOn)).toString()+ " containing lists: "+ list);
    }
    List<String> skiplists=getFilenames(list);
    if (skiplists.isEmpty())     skiplists.add(FALLBACK_LIST);
    _lists.addAll(skiplists);
    if (_log.shouldLog(Log.INFO))     _log.info("DB init took " + DataHelper.formatDuration(_context.clock().now() - start));
    return bf;
  }
 catch (  RuntimeException e) {
    _log.error("Failed to initialize database",e);
    throw new IOException(e.toString());
  }
}
