{
  int sz=dests.size();
  if (sz <= 0)   throw new IllegalArgumentException();
  if (sz == 1)   return put(hostname,dests.get(0),propsList != null ? propsList.get(0) : null,checkExisting);
  if (_readOnly) {
    _log.error("Add entry failed, read-only hosts database");
    return false;
  }
  String key=hostname.toLowerCase(Locale.US);
synchronized (_negativeCache) {
    _negativeCache.remove(key);
  }
  String listname=FALLBACK_LIST;
  String date=Long.toString(_context.clock().now());
  List<Properties> outProps=new ArrayList<Properties>(propsList.size());
  for (  Properties options : propsList) {
    Properties props=new Properties();
    props.setProperty(PROP_ADDED,date);
    if (options != null) {
      props.putAll(options);
      String list=options.getProperty("list");
      if (list != null) {
        listname=list;
        props.remove("list");
      }
    }
    outProps.add(props);
  }
synchronized (_bf) {
    if (_isClosed)     return false;
    try {
      SkipList<String,DestEntry> sl=_bf.getIndex(listname,_stringSerializer,_destSerializer);
      if (sl == null)       sl=_bf.makeIndex(listname,_stringSerializer,_destSerializer);
      boolean changed=(checkExisting || !_listeners.isEmpty()) && sl.get(key) != null;
      if (changed && checkExisting)       return false;
      addEntry(sl,key,dests,outProps);
      if (changed) {
        removeCache(hostname);
      }
      for (int i=0; i < dests.size(); i++) {
        Destination d=dests.get(i);
        Properties options=propsList.get(i);
        addReverseEntry(key,d);
        for (        NamingServiceListener nsl : _listeners) {
          if (changed)           nsl.entryChanged(this,hostname,d,options);
 else           nsl.entryAdded(this,hostname,d,options);
        }
      }
      return true;
    }
 catch (    IOException ioe) {
      _log.error("DB add error",ioe);
      return false;
    }
catch (    RuntimeException re) {
      _log.error("DB add error",re);
      return false;
    }
  }
}
