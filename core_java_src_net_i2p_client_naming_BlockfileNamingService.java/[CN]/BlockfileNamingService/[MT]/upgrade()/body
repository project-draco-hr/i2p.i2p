{
  try {
    if (VersionComparator.comp(_version,"2") < 0) {
      SkipList<Integer,Properties> rev=_bf.getIndex(REVERSE_SKIPLIST,_hashIndexSerializer,_infoSerializer);
      if (rev == null) {
        rev=_bf.makeIndex(REVERSE_SKIPLIST,_hashIndexSerializer,_infoSerializer);
        if (_log.shouldLog(Log.WARN))         _log.warn("Created reverse index");
      }
      setVersion("2");
    }
    if (VersionComparator.comp(_version,"3") < 0) {
      Map<String,Destination> entries=getEntries();
      int i=0;
      for (      Map.Entry<String,Destination> entry : entries.entrySet()) {
        addReverseEntry(entry.getKey(),entry.getValue());
        i++;
      }
      if (_log.shouldLog(Log.WARN))       _log.warn("Updated reverse index with " + i + " entries");
      setVersion("3");
    }
    if (VersionComparator.comp(_version,"4") < 0) {
      if (SystemVersion.isAndroid() || SystemVersion.isARM()) {
        if (_log.shouldWarn())         _log.warn("Deferring upgrade to version 4 on Android/ARM");
        return true;
      }
      SkipList<String,Properties> hdr=_bf.getIndex(INFO_SKIPLIST,_stringSerializer,_infoSerializer);
      if (hdr == null)       throw new IOException("No db header");
      Properties info=hdr.get(PROP_INFO);
      if (info == null)       throw new IOException("No header info");
      for (      String list : _lists) {
        try {
          String vprop=PROP_LISTVERSION + '_' + list;
          String listVersion=info.getProperty(vprop);
          if (listVersion == null || VersionComparator.comp(listVersion,"4") < 0) {
            if (_log.shouldWarn())             _log.warn("Upgrading " + list + " from database version 3 to 4");
            _bf.reformatIndex(list,_stringSerializer,_destSerializerV1,_stringSerializer,_destSerializerV4);
            info.setProperty(vprop,"4");
            hdr.put(PROP_INFO,info);
          }
 else {
            if (_log.shouldWarn())             _log.warn("Partial upgrade, " + list + " already at version "+ listVersion);
          }
        }
 catch (        IOException ioe) {
          _log.error("Failed upgrade of list " + list + " to version 4",ioe);
        }
      }
      _destSerializer=_destSerializerV4;
      _isVersion4=true;
      setVersion("4");
    }
    return true;
  }
 catch (  IOException ioe) {
    _log.error("Error upgrading DB",ioe);
  }
catch (  RuntimeException e) {
    _log.error("Error upgrading DB",e);
  }
  return false;
}
