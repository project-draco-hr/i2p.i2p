{
  if (!_file.exists())   return Collections.emptyMap();
  String searchOpt=null;
  String startsWith=null;
  if (options != null) {
    searchOpt=options.getProperty("search");
    startsWith=options.getProperty("startsWith");
  }
  BufferedReader in=null;
  getReadLock();
  try {
    in=new BufferedReader(new InputStreamReader(new FileInputStream(_file),"UTF-8"),16 * 1024);
    String line=null;
    Map<String,String> rv=new HashMap<String,String>();
    while ((line=in.readLine()) != null) {
      if (line.length() <= 0)       continue;
      if (startsWith != null) {
        if (startsWith.equals("[0-9]")) {
          if (line.charAt(0) < '0' || line.charAt(0) > '9')           continue;
        }
 else         if (!line.startsWith(startsWith)) {
          continue;
        }
      }
      if (line.startsWith("#"))       continue;
      if (line.indexOf('#') > 0)       line=line.substring(0,line.indexOf('#')).trim();
      int split=line.indexOf('=');
      if (split <= 0)       continue;
      String key=line.substring(0,split);
      if (searchOpt != null && key.indexOf(searchOpt) < 0)       continue;
      String b64=line.substring(split + 1);
      if (b64.length() < 387)       continue;
      rv.put(key,b64);
    }
    if (searchOpt == null && startsWith == null) {
      _lastWrite=_file.lastModified();
      _size=rv.size();
    }
    return rv;
  }
 catch (  IOException ioe) {
    _log.error("getEntries error",ioe);
    return Collections.emptyMap();
  }
 finally {
    if (in != null)     try {
      in.close();
    }
 catch (    IOException ioe) {
    }
    releaseReadLock();
  }
}
