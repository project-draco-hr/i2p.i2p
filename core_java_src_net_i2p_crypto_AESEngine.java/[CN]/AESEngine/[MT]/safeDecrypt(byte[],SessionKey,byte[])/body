{
  if ((iv == null) || (payload == null) || (sessionKey == null)|| (iv.length != 16))   return null;
  byte decr[]=decrypt(payload,sessionKey,iv);
  if (decr == null) {
    _log.error("Error decrypting the data - payload " + payload.length + " decrypted to null");
    return null;
  }
  ByteArrayInputStream bais=new ByteArrayInputStream(decr);
  Hash h=_context.sha().calculateHash(sessionKey.getData());
  try {
    Hash rh=new Hash();
    rh.readBytes(bais);
    if (!h.equals(rh)) {
      _log.error("Hash does not match [key=" + sessionKey + " / iv ="+ DataHelper.toString(iv,iv.length)+ "]",new Exception("Hash error"));
      return null;
    }
    long len=DataHelper.readLong(bais,4);
    byte data[]=new byte[(int)len];
    int read=bais.read(data);
    if (read != len) {
      _log.error("Not enough to read");
      return null;
    }
    return data;
  }
 catch (  IOException ioe) {
    _log.error("Error writing data",ioe);
    return null;
  }
catch (  DataFormatException dfe) {
    _log.error("Error writing data",dfe);
    return null;
  }
}
