{
  try {
    long start=Clock.getInstance().now();
    ByteArrayOutputStream origStream=new ByteArrayOutputStream(512);
    AESOutputStream out=new AESOutputStream(origStream,key,iv);
    out.write(orig);
    out.close();
    byte encrypted[]=origStream.toByteArray();
    long endE=Clock.getInstance().now();
    ByteArrayInputStream encryptedStream=new ByteArrayInputStream(encrypted);
    AESInputStream in=new AESInputStream(encryptedStream,key,iv);
    ByteArrayOutputStream baos=new ByteArrayOutputStream(512);
    byte buf[]=new byte[1024 * 32];
    int read=DataHelper.read(in,buf);
    if (read > 0)     baos.write(buf,0,read);
    in.close();
    byte fin[]=baos.toByteArray();
    long end=Clock.getInstance().now();
    Hash origHash=SHA256Generator.getInstance().calculateHash(orig);
    Hash newHash=SHA256Generator.getInstance().calculateHash(fin);
    boolean eq=origHash.equals(newHash);
    if (eq)     _log.info("Equal hashes.  hash: " + origHash);
 else     _log.error("NOT EQUAL!  \norig: \t" + Base64.encode(orig) + "\nnew : \t"+ Base64.encode(fin));
    boolean ok=DataHelper.eq(orig,fin);
    _log.debug("EQ data? " + ok + " origLen: "+ orig.length+ " fin.length: "+ fin.length);
    _log.debug("Time to D(E(" + orig.length + ")): "+ (end - start)+ "ms");
    _log.debug("Time to E(" + orig.length + "): "+ (endE - start)+ "ms");
    _log.debug("Time to D(" + orig.length + "): "+ (end - endE)+ "ms");
  }
 catch (  Throwable t) {
    _log.error("ERROR transferring",t);
  }
}
