{
  if ((src == null) || (src.length == 0))   return;
  int numBlocks=src.length / (BLOCK_SIZE - 1);
  byte block[]=new byte[BLOCK_SIZE];
  block[BLOCK_SIZE - 1]=0x01;
  for (int i=0; i < numBlocks; i++) {
    System.arraycopy(src,i * 15,block,0,15);
    byte data[]=DataHelper.xor(block,_lastBlock);
    byte encrypted[]=_context.AESEngine().encrypt(data,_key,_lastBlock);
    _cumulativeWritten+=encrypted.length;
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Padding block " + i + " of "+ numBlocks+ " with 1 byte.  orig= "+ DataHelper.toHexString(data)+ " (size="+ data.length+ ") encrypted= "+ DataHelper.toHexString(encrypted)+ " (size="+ encrypted.length+ ")");
    out.write(encrypted);
    System.arraycopy(encrypted,encrypted.length - BLOCK_SIZE,_lastBlock,0,BLOCK_SIZE);
    _cumulativePadding++;
  }
  if (src.length % 15 != 0) {
    int remainingBytes=src.length - numBlocks * 15;
    int paddingBytes=BLOCK_SIZE - remainingBytes;
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Padding " + src.length + " with "+ paddingBytes+ " bytes in "+ numBlocks+ " blocks");
    System.arraycopy(src,numBlocks * 15,block,0,remainingBytes);
    Arrays.fill(block,remainingBytes,BLOCK_SIZE,(byte)paddingBytes);
    byte data[]=DataHelper.xor(block,_lastBlock);
    byte encrypted[]=_context.AESEngine().encrypt(data,_key,_lastBlock);
    out.write(encrypted);
    System.arraycopy(encrypted,encrypted.length - BLOCK_SIZE,_lastBlock,0,BLOCK_SIZE);
    _cumulativePadding+=paddingBytes;
    _cumulativeWritten+=encrypted.length;
  }
}
