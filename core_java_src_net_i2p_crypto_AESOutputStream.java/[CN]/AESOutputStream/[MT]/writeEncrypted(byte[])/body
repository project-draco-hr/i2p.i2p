{
  if ((src == null) || (src.length == 0))   return;
  int numBlocks=src.length / (BLOCK_SIZE - 1);
  byte block[]=new byte[BLOCK_SIZE];
  for (int i=0; i < numBlocks; i++) {
    DataHelper.xor(src,i * 15,_lastBlock,0,block,0,15);
    block[BLOCK_SIZE - 1]=(byte)(_lastBlock[BLOCK_SIZE - 1] ^ 0x01);
    _context.aes().encrypt(block,0,block,0,_key,_lastBlock,BLOCK_SIZE);
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Padding block " + i + " of "+ numBlocks+ " with 1 byte");
    out.write(block);
    System.arraycopy(block,0,_lastBlock,0,BLOCK_SIZE);
    _cumulativeWritten+=BLOCK_SIZE;
    _cumulativePadding++;
  }
  if (src.length % 15 != 0) {
    int remainingBytes=src.length - numBlocks * 15;
    int paddingBytes=BLOCK_SIZE - remainingBytes;
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Padding " + src.length + " with "+ paddingBytes+ " bytes in "+ numBlocks+ " blocks");
    System.arraycopy(src,numBlocks * 15,block,0,remainingBytes);
    Arrays.fill(block,remainingBytes,BLOCK_SIZE,(byte)paddingBytes);
    DataHelper.xor(block,0,_lastBlock,0,block,0,BLOCK_SIZE);
    _context.aes().encrypt(block,0,block,0,_key,_lastBlock,BLOCK_SIZE);
    out.write(block);
    System.arraycopy(block,0,_lastBlock,0,BLOCK_SIZE);
    _cumulativePadding+=paddingBytes;
    _cumulativeWritten+=BLOCK_SIZE;
  }
}
