{
  if ((iv == null) || (payload == null) || (payload.length <= 0)|| (sessionKey == null))   throw new IllegalArgumentException("bad setup");
 else   if (out == null)   throw new IllegalArgumentException("out is null");
 else   if (out.length - outIndex < length)   throw new IllegalArgumentException("out is too small (out.length=" + out.length + " outIndex="+ outIndex+ " length="+ length);
  if (USE_FAKE_CRYPTO) {
    _log.warn("AES Crypto disabled!  Using trivial XOR");
    System.arraycopy(payload,payloadIndex,out,outIndex,length);
    return;
  }
  if (USE_SYSTEM_AES && length >= MIN_SYSTEM_AES_LENGTH) {
    try {
      SecretKeySpec key=new SecretKeySpec(sessionKey.getData(),"AES");
      IvParameterSpec ivps=new IvParameterSpec(iv,ivOffset,16);
      Cipher cipher=Cipher.getInstance("AES/CBC/NoPadding");
      cipher.init(Cipher.DECRYPT_MODE,key,ivps,_context.random());
      cipher.doFinal(payload,payloadIndex,length,out,outIndex);
      return;
    }
 catch (    GeneralSecurityException gse) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Java decrypt fail",gse);
    }
  }
  int numblock=length / 16;
  if (length % 16 != 0) {
    numblock++;
    if (_log.shouldLog(Log.WARN))     _log.warn("not %16 " + length,new Exception());
  }
  byte prev[]=SimpleByteCache.acquire(16);
  byte cur[]=SimpleByteCache.acquire(16);
  System.arraycopy(iv,ivOffset,prev,0,16);
  for (int x=0; x < numblock; x++) {
    System.arraycopy(payload,payloadIndex,cur,0,16);
    decryptBlock(payload,payloadIndex,sessionKey,out,outIndex);
    payloadIndex+=16;
    for (int i=0; i < 16; i++) {
      out[outIndex++]^=prev[i];
    }
    iv=prev;
    prev=cur;
    cur=iv;
  }
  SimpleByteCache.release(prev);
  SimpleByteCache.release(cur);
}
