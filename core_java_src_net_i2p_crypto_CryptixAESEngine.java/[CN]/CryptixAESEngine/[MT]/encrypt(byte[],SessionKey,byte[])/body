{
  if ((initializationVector == null) || (payload == null) || (payload.length <= 0)|| (sessionKey == null)|| (initializationVector.length != 16))   return null;
  if (USE_FAKE_CRYPTO) {
    _log.warn("AES Crypto disabled!  Using trivial XOR");
    byte rv[]=new byte[payload.length];
    for (int i=0; i < rv.length; i++)     rv[i]=(byte)(payload[i] ^ FAKE_KEY);
    return rv;
  }
  int numblock=payload.length / 16;
  if (payload.length % 16 != 0)   numblock++;
  byte[][] plain=new byte[numblock][16];
  for (int x=0; x < numblock; x++) {
    for (int y=0; y < 16; y++) {
      plain[x][y]=payload[x * 16 + y];
    }
  }
  byte[][] cipher=new byte[numblock][16];
  cipher[0]=encrypt(xor(initializationVector,plain[0]),sessionKey);
  for (int x=1; x < numblock; x++) {
    cipher[x]=encrypt(xor(cipher[x - 1],plain[x]),sessionKey);
  }
  byte[] ret=new byte[numblock * 16];
  for (int x=0; x < numblock; x++) {
    for (int y=0; y < 16; y++) {
      ret[x * 16 + y]=cipher[x][y];
    }
  }
  return ret;
}
