{
  if (payload == null)   throw new NullPointerException("invalid args to aes - payload");
  if (out == null)   throw new NullPointerException("invalid args to aes - out");
  if (sessionKey == null)   throw new NullPointerException("invalid args to aes - sessionKey");
  if (iv == null)   throw new NullPointerException("invalid args to aes - iv");
  if (payload.length < payloadIndex + length)   throw new IllegalArgumentException("Payload is too short");
  if (out.length < outIndex + length)   throw new IllegalArgumentException("Output is too short");
  if (length <= 0)   throw new IllegalArgumentException("Length is too small");
  if (length % 16 != 0)   throw new IllegalArgumentException("Only lengths mod 16 are supported here");
  if (USE_FAKE_CRYPTO) {
    _log.warn("AES Crypto disabled!  Using trivial XOR");
    System.arraycopy(payload,payloadIndex,out,outIndex,length);
    return;
  }
  if (USE_SYSTEM_AES && length >= MIN_SYSTEM_AES_LENGTH) {
    try {
      SecretKeySpec key=new SecretKeySpec(sessionKey.getData(),"AES");
      IvParameterSpec ivps=new IvParameterSpec(iv,ivOffset,16);
      Cipher cipher=Cipher.getInstance("AES/CBC/NoPadding");
      cipher.init(Cipher.ENCRYPT_MODE,key,ivps,_context.random());
      cipher.doFinal(payload,payloadIndex,length,out,outIndex);
      return;
    }
 catch (    GeneralSecurityException gse) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Java encrypt fail",gse);
    }
  }
  int numblock=length / 16;
  DataHelper.xor(iv,ivOffset,payload,payloadIndex,out,outIndex,16);
  encryptBlock(out,outIndex,sessionKey,out,outIndex);
  for (int x=1; x < numblock; x++) {
    DataHelper.xor(out,outIndex + (x - 1) * 16,payload,payloadIndex + x * 16,out,outIndex + x * 16,16);
    encryptBlock(out,outIndex + x * 16,sessionKey,out,outIndex + x * 16);
  }
}
