{
  if (k == null)   throw new InvalidKeyException("Empty key");
  if (!(k.length == 16 || k.length == 24 || k.length == 32))   throw new InvalidKeyException("Incorrect key length");
  int ROUNDS=getRounds(k.length,blockSize);
  int BC=blockSize / 4;
  int[][] Ke=null;
  int[][] Kd=null;
  int ROUND_KEY_COUNT=(ROUNDS + 1) * BC;
  int KC=k.length / 4;
  int[] tk=null;
  int i, j;
  if (keyData == null) {
    Ke=new int[ROUNDS + 1][BC];
    Kd=new int[ROUNDS + 1][BC];
    tk=new int[KC];
  }
 else {
    Ke=keyData.Ke;
    Kd=keyData.Kd;
    tk=keyData.tk;
  }
  for (i=0, j=0; i < KC; )   tk[i++]=(k[j++] & 0xFF) << 24 | (k[j++] & 0xFF) << 16 | (k[j++] & 0xFF) << 8 | (k[j++] & 0xFF);
  int t=0;
  for (j=0; (j < KC) && (t < ROUND_KEY_COUNT); j++, t++) {
    Ke[t / BC][t % BC]=tk[j];
    Kd[ROUNDS - (t / BC)][t % BC]=tk[j];
  }
  int tt, rconpointer=0;
  while (t < ROUND_KEY_COUNT) {
    tt=tk[KC - 1];
    tk[0]^=(_S[(tt >>> 16) & 0xFF] & 0xFF) << 24 ^ (_S[(tt >>> 8) & 0xFF] & 0xFF) << 16 ^ (_S[tt & 0xFF] & 0xFF) << 8 ^ (_S[(tt >>> 24) & 0xFF] & 0xFF) ^ (_rcon[rconpointer++] & 0xFF) << 24;
    if (KC != 8)     for (i=1, j=0; i < KC; ) {
      tk[i]^=tk[j++];
      i++;
    }
 else {
      for (i=1, j=0; i < KC / 2; ) {
        tk[i]^=tk[j++];
        i++;
      }
      tt=tk[KC / 2 - 1];
      tk[KC / 2]^=(_S[tt & 0xFF] & 0xFF) ^ (_S[(tt >>> 8) & 0xFF] & 0xFF) << 8 ^ (_S[(tt >>> 16) & 0xFF] & 0xFF) << 16 ^ (_S[(tt >>> 24) & 0xFF] & 0xFF) << 24;
      for (j=KC / 2, i=j + 1; i < KC; ) {
        tk[i]^=tk[j++];
        i++;
      }
    }
    for (j=0; (j < KC) && (t < ROUND_KEY_COUNT); j++, t++) {
      Ke[t / BC][t % BC]=tk[j];
      Kd[ROUNDS - (t / BC)][t % BC]=tk[j];
    }
  }
  for (int r=1; r < ROUNDS; r++)   for (j=0; j < BC; j++) {
    tt=Kd[r][j];
    Kd[r][j]=_U1[(tt >>> 24) & 0xFF] ^ _U2[(tt >>> 16) & 0xFF] ^ _U3[(tt >>> 8) & 0xFF]^ _U4[tt & 0xFF];
  }
  Object[] sessionKey=null;
  if (keyData == null)   sessionKey=new Object[]{Ke,Kd};
 else   sessionKey=keyData.key;
  return sessionKey;
}
