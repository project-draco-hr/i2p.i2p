{
  if (_RDEBUG)   trace(_IN,"self_test(" + keysize + ")");
  boolean ok=false;
  try {
    byte[] kb=new byte[keysize];
    byte[] pt=new byte[_BLOCK_SIZE];
    int i;
    for (i=0; i < keysize; i++)     kb[i]=(byte)i;
    for (i=0; i < _BLOCK_SIZE; i++)     pt[i]=(byte)i;
    if (_RDEBUG && _debuglevel > 6) {
      System.out.println("==========");
      System.out.println();
      System.out.println("KEYSIZE=" + (8 * keysize));
      System.out.println("KEY=" + toString(kb));
      System.out.println();
    }
    Object key=makeKey(kb,_BLOCK_SIZE);
    if (_RDEBUG && _debuglevel > 6) {
      System.out.println("Intermediate Ciphertext Values (Encryption)");
      System.out.println();
      System.out.println("PT=" + toString(pt));
    }
    byte[] ct=new byte[_BLOCK_SIZE];
    blockEncrypt(pt,ct,0,key,_BLOCK_SIZE);
    if (_RDEBUG && _debuglevel > 6) {
      System.out.println("Intermediate Plaintext Values (Decryption)");
      System.out.println();
      System.out.println("CT=" + toString(ct));
    }
    byte[] cpt=new byte[_BLOCK_SIZE];
    blockDecrypt(ct,cpt,0,key,_BLOCK_SIZE);
    ok=areEqual(pt,cpt);
    if (!ok)     throw new RuntimeException("Symmetric operation failed");
  }
 catch (  Exception x) {
    if (_RDEBUG && _debuglevel > 0) {
      debug("Exception encountered during self-test: " + x.getMessage());
      x.printStackTrace();
    }
  }
  if (_RDEBUG && _debuglevel > 0)   debug("Self-test OK? " + ok);
  if (_RDEBUG)   trace(_OUT,"self_test()");
  return ok;
}
