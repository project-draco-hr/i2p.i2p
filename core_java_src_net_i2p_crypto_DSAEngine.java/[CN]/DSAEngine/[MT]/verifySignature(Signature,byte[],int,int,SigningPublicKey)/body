{
  boolean rv;
  SigType type=signature.getType();
  if (type != verifyingKey.getType())   throw new IllegalArgumentException("type mismatch sig=" + signature.getType() + " key="+ verifyingKey.getType());
  if (type != SigType.DSA_SHA1) {
    try {
      rv=altVerifySig(signature,signedData,offset,size,verifyingKey);
      if ((!rv) && _log.shouldLog(Log.WARN))       _log.warn(type + " Sig Verify Fail");
      return rv;
    }
 catch (    GeneralSecurityException gse) {
      if (_log.shouldLog(Log.WARN))       _log.warn(type + " Sig Verify Fail",gse);
      return false;
    }
  }
  if (_useJavaLibs) {
    try {
      rv=altVerifySigSHA1(signature,signedData,offset,size,verifyingKey);
      if ((!rv) && _log.shouldLog(Log.WARN))       _log.warn("Lib DSA Sig Verify Fail");
      return rv;
    }
 catch (    GeneralSecurityException gse) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Lib DSA Sig Verify Fail");
    }
  }
  rv=verifySignature(signature,calculateHash(signedData,offset,size),verifyingKey);
  if ((!rv) && _log.shouldLog(Log.WARN))   _log.warn("TheCrypto DSA Sig Verify Fail");
  return rv;
}
