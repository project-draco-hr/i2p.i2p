{
  byte decrypted[]=new byte[encryptedLen];
  _context.aes().decrypt(encrypted,offset,decrypted,0,key,iv,encryptedLen);
  try {
    SessionKey newKey=null;
    Hash readHash=null;
    List tags=null;
    int cur=0;
    long numTags=DataHelper.fromLong(decrypted,cur,2);
    if (numTags > 0)     tags=new ArrayList((int)numTags);
    cur+=2;
    if ((numTags < 0) || (numTags > 200))     throw new Exception("Invalid number of session tags");
    if (numTags * SessionTag.BYTE_LENGTH > decrypted.length - 2) {
      throw new Exception("# tags: " + numTags + " is too many for "+ (decrypted.length - 2));
    }
    for (int i=0; i < numTags; i++) {
      byte tag[]=new byte[SessionTag.BYTE_LENGTH];
      System.arraycopy(decrypted,cur,tag,0,SessionTag.BYTE_LENGTH);
      cur+=SessionTag.BYTE_LENGTH;
      tags.add(new SessionTag(tag));
    }
    long len=DataHelper.fromLong(decrypted,cur,4);
    cur+=4;
    if ((len < 0) || (len > decrypted.length - cur - Hash.HASH_LENGTH- 1))     throw new Exception("Invalid size of payload (" + len + ", remaining "+ (decrypted.length - cur)+ ")");
    byte hashval[]=new byte[Hash.HASH_LENGTH];
    System.arraycopy(decrypted,cur,hashval,0,Hash.HASH_LENGTH);
    cur+=Hash.HASH_LENGTH;
    readHash=new Hash();
    readHash.setData(hashval);
    byte flag=decrypted[cur++];
    if (flag == 0x01) {
      byte rekeyVal[]=new byte[SessionKey.KEYSIZE_BYTES];
      System.arraycopy(decrypted,cur,rekeyVal,0,SessionKey.KEYSIZE_BYTES);
      cur+=SessionKey.KEYSIZE_BYTES;
      newKey=new SessionKey();
      newKey.setData(rekeyVal);
    }
    byte unencrData[]=new byte[(int)len];
    System.arraycopy(decrypted,cur,unencrData,0,(int)len);
    cur+=len;
    Hash calcHash=_context.sha().calculateHash(unencrData);
    boolean eq=calcHash.equals(readHash);
    if (eq) {
      if (tags != null)       foundTags.addAll(tags);
      if (newKey != null)       foundKey.setData(newKey.getData());
      return unencrData;
    }
    throw new Exception("Hash does not match");
  }
 catch (  Exception e) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Unable to decrypt AES block",e);
    return null;
  }
}
