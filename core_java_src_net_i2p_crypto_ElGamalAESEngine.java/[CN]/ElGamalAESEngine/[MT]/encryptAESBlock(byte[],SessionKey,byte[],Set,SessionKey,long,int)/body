{
  if (tagsForDelivery == null)   tagsForDelivery=Collections.EMPTY_SET;
  int size=2 + SessionTag.BYTE_LENGTH * tagsForDelivery.size() + 4 + Hash.HASH_LENGTH + (newKey == null ? 1 : 1 + SessionKey.KEYSIZE_BYTES) + data.length;
  int totalSize=size + getPaddingSize(size,paddedSize);
  byte aesData[]=new byte[totalSize + prefixBytes];
  int cur=prefixBytes;
  DataHelper.toLong(aesData,cur,2,tagsForDelivery.size());
  cur+=2;
  for (Iterator iter=tagsForDelivery.iterator(); iter.hasNext(); ) {
    SessionTag tag=(SessionTag)iter.next();
    System.arraycopy(tag.getData(),0,aesData,cur,SessionTag.BYTE_LENGTH);
    cur+=SessionTag.BYTE_LENGTH;
  }
  DataHelper.toLong(aesData,cur,4,data.length);
  cur+=4;
  _context.sha().calculateHash(data,0,data.length,aesData,cur);
  cur+=Hash.HASH_LENGTH;
  if (newKey == null) {
    aesData[cur++]=0x00;
  }
 else {
    aesData[cur++]=0x01;
    System.arraycopy(newKey.getData(),0,aesData,cur,SessionKey.KEYSIZE_BYTES);
    cur+=SessionKey.KEYSIZE_BYTES;
  }
  System.arraycopy(data,0,aesData,cur,data.length);
  cur+=data.length;
  byte padding[]=getPadding(_context,size,paddedSize);
  System.arraycopy(padding,0,aesData,cur,padding.length);
  cur+=padding.length;
  _context.aes().encrypt(aesData,prefixBytes,aesData,prefixBytes,key,iv,aesData.length - prefixBytes);
  return aesData;
}
