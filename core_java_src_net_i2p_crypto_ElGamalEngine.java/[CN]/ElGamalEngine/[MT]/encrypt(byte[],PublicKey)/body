{
  if ((data == null) || (data.length >= 223))   throw new IllegalArgumentException("Data to encrypt must be < 223 bytes at the moment");
  if (publicKey == null)   throw new IllegalArgumentException("Null public key specified");
  long start=_context.clock().now();
  byte d2[]=new byte[1 + Hash.HASH_LENGTH + data.length];
  d2[0]=(byte)0xFF;
  Hash hash=_context.sha().calculateHash(data);
  System.arraycopy(hash.getData(),0,d2,1,Hash.HASH_LENGTH);
  System.arraycopy(data,0,d2,1 + Hash.HASH_LENGTH,data.length);
  long t0=_context.clock().now();
  BigInteger m=new NativeBigInteger(1,d2);
  long t1=_context.clock().now();
  if (m.compareTo(CryptoConstants.elgp) >= 0)   throw new IllegalArgumentException("ARGH.  Data cannot be larger than the ElGamal prime.  FIXME");
  long t2=_context.clock().now();
  BigInteger aalpha=new NativeBigInteger(1,publicKey.getData());
  long t3=_context.clock().now();
  BigInteger yk[]=getNextYK();
  BigInteger k=yk[1];
  BigInteger y=yk[0];
  long t7=_context.clock().now();
  BigInteger d=aalpha.modPow(k,CryptoConstants.elgp);
  long t8=_context.clock().now();
  d=d.multiply(m);
  long t9=_context.clock().now();
  d=d.mod(CryptoConstants.elgp);
  long t10=_context.clock().now();
  byte[] ybytes=y.toByteArray();
  byte[] dbytes=d.toByteArray();
  byte[] out=new byte[514];
  System.arraycopy(ybytes,0,out,(ybytes.length < 257 ? 257 - ybytes.length : 0),(ybytes.length > 257 ? 257 : ybytes.length));
  System.arraycopy(dbytes,0,out,(dbytes.length < 257 ? 514 - dbytes.length : 257),(dbytes.length > 257 ? 257 : dbytes.length));
  long end=_context.clock().now();
  long diff=end - start;
  if (diff > 1000) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Took too long to encrypt ElGamal block (" + diff + "ms)");
  }
  _context.statManager().addRateData("crypto.elGamal.encrypt",diff,diff);
  return out;
}
