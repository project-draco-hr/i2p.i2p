{
  SimpleDataStructure[] keys=new SimpleDataStructure[2];
  BigInteger x=null;
  do {
    x=new NativeBigInteger(160,_context.random());
  }
 while (x.compareTo(CryptoConstants.dsaq) >= 0);
  BigInteger y=CryptoConstants.dsag.modPow(x,CryptoConstants.dsap);
  keys[0]=new SigningPublicKey();
  keys[1]=new SigningPrivateKey();
  try {
    keys[0].setData(SigUtil.rectify(y,SigningPublicKey.KEYSIZE_BYTES));
    keys[1].setData(SigUtil.rectify(x,SigningPrivateKey.KEYSIZE_BYTES));
  }
 catch (  InvalidKeyException ike) {
    throw new IllegalStateException(ike);
  }
  return keys;
}
