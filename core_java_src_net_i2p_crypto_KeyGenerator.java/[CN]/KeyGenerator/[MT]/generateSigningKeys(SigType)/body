{
  if (type == SigType.DSA_SHA1)   return generateSigningKeys();
  KeyPair kp;
  if (type.getBaseAlgorithm() == SigAlgo.EdDSA) {
    net.i2p.crypto.eddsa.KeyPairGenerator kpg=new net.i2p.crypto.eddsa.KeyPairGenerator();
    kpg.initialize(type.getParams(),_context.random());
    kp=kpg.generateKeyPair();
  }
 else {
    KeyPairGenerator kpg=KeyPairGenerator.getInstance(type.getBaseAlgorithm().getName());
    try {
      kpg.initialize(type.getParams(),_context.random());
      kp=kpg.generateKeyPair();
    }
 catch (    ProviderException pe) {
      Log log=_context.logManager().getLog(KeyGenerator.class);
      String pname=kpg.getProvider().getName();
      if ("BC".equals(pname)) {
        if (log.shouldLog(Log.WARN))         log.warn("BC KPG failed for " + type,pe);
        throw new GeneralSecurityException("BC KPG for " + type,pe);
      }
      if (!ECConstants.isBCAvailable())       throw new GeneralSecurityException(pname + " KPG failed for " + type,pe);
      if (log.shouldLog(Log.WARN))       log.warn(pname + " KPG failed for " + type+ ", trying BC");
      try {
        kpg=KeyPairGenerator.getInstance(type.getBaseAlgorithm().getName(),"BC");
        kpg.initialize(type.getParams(),_context.random());
        kp=kpg.generateKeyPair();
      }
 catch (      ProviderException pe2) {
        if (log.shouldLog(Log.WARN))         log.warn("BC KPG failed for " + type + " also",pe2);
        throw new GeneralSecurityException(pname + " KPG for " + type,pe);
      }
catch (      GeneralSecurityException gse) {
        if (log.shouldLog(Log.WARN))         log.warn("BC KPG failed for " + type + " also",gse);
        throw new GeneralSecurityException(pname + " KPG for " + type,pe);
      }
    }
  }
  java.security.PublicKey pubkey=kp.getPublic();
  java.security.PrivateKey privkey=kp.getPrivate();
  SimpleDataStructure[] keys=new SimpleDataStructure[2];
  keys[0]=SigUtil.fromJavaKey(pubkey,type);
  keys[1]=SigUtil.fromJavaKey(privkey,type);
  return keys;
}
