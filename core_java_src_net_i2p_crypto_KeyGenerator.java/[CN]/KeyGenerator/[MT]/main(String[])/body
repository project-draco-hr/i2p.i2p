{
  Log log=new Log("keygenTest");
  RandomSource.getInstance().nextBoolean();
  byte src[]=new byte[200];
  RandomSource.getInstance().nextBytes(src);
  I2PAppContext ctx=new I2PAppContext();
  long time=0;
  for (int i=0; i < 10; i++) {
    long start=Clock.getInstance().now();
    Object keys[]=KeyGenerator.getInstance().generatePKIKeypair();
    long end=Clock.getInstance().now();
    byte ctext[]=ctx.elGamalEngine().encrypt(src,(PublicKey)keys[0]);
    byte ptext[]=ctx.elGamalEngine().decrypt(ctext,(PrivateKey)keys[1]);
    time+=end - start;
    if (DataHelper.eq(ptext,src))     log.debug("D(E(data)) == data");
 else     log.error("D(E(data)) != data!!!!!!");
  }
  log.info("Keygen 10 times: " + time + "ms");
  Object obj[]=KeyGenerator.getInstance().generateSigningKeypair();
  SigningPublicKey fake=(SigningPublicKey)obj[0];
  time=0;
  for (int i=0; i < 10; i++) {
    long start=Clock.getInstance().now();
    Object keys[]=KeyGenerator.getInstance().generateSigningKeypair();
    long end=Clock.getInstance().now();
    Signature sig=DSAEngine.getInstance().sign(src,(SigningPrivateKey)keys[1]);
    boolean ok=DSAEngine.getInstance().verifySignature(sig,src,(SigningPublicKey)keys[0]);
    boolean fakeOk=DSAEngine.getInstance().verifySignature(sig,src,fake);
    time+=end - start;
    log.debug("V(S(data)) == " + ok + " fake verify correctly failed? "+ (fakeOk == false));
  }
  log.info("Signing Keygen 10 times: " + time + "ms");
  time=0;
  for (int i=0; i < 1000; i++) {
    long start=Clock.getInstance().now();
    KeyGenerator.getInstance().generateSessionKey();
    long end=Clock.getInstance().now();
    time+=end - start;
  }
  log.info("Session keygen 1000 times: " + time + "ms");
  try {
    Thread.sleep(5000);
  }
 catch (  InterruptedException ie) {
  }
}
