{
  byte src[]=new byte[512];
  double gtime=0;
  long stime=0;
  long vtime=0;
  SimpleDataStructure keys[]=null;
  long st=System.nanoTime();
  int genruns=(type.getBaseAlgorithm() == SigAlgo.RSA) ? Math.min(runs,5) : runs;
  for (int i=0; i < genruns; i++) {
    keys=KeyGenerator.getInstance().generateSigningKeys(type);
  }
  long en=System.nanoTime();
  gtime=((en - st) / (1000 * 1000d)) / genruns;
  System.out.println(type + " key gen " + genruns+ " times: "+ gtime+ " ms each");
  SigningPublicKey pubkey=(SigningPublicKey)keys[0];
  SigningPrivateKey privkey=(SigningPrivateKey)keys[1];
  SigningPublicKey pubkey2=getSigningPublicKey(privkey);
  if (pubkey.equals(pubkey2))   System.out.println(type + " private-to-public test PASSED");
 else   System.out.println(type + " private-to-public test FAILED");
  for (int i=0; i < runs; i++) {
    RandomSource.getInstance().nextBytes(src);
    long start=System.nanoTime();
    Signature sig=DSAEngine.getInstance().sign(src,privkey);
    if (sig == null)     throw new GeneralSecurityException("signature generation failed");
    long mid=System.nanoTime();
    boolean ok=DSAEngine.getInstance().verifySignature(sig,src,pubkey);
    long end=System.nanoTime();
    stime+=mid - start;
    vtime+=end - mid;
    if (!ok)     throw new GeneralSecurityException(type + " V(S(data)) fail");
  }
  stime/=1000 * 1000;
  vtime/=1000 * 1000;
  System.out.println(type + " sign/verify " + runs+ " times: "+ (vtime + stime)+ " ms = "+ (((double)stime) / runs)+ " each sign, "+ (((double)vtime) / runs)+ " each verify, "+ (((double)(stime + vtime)) / runs)+ " s+v");
}
