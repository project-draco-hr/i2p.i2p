{
  if (ks.exists()) {
    try {
      if (getCert(ks,ksPW,alias) != null) {
        error("Not overwriting key " + alias + ", already exists in "+ ks,null);
        return false;
      }
    }
 catch (    Exception e) {
      error("Not overwriting key \"" + alias + "\", already exists in "+ ks,e);
      return false;
    }
  }
 else {
    File dir=ks.getParentFile();
    if (dir != null && !dir.exists()) {
      File sdir=new SecureDirectory(dir.getAbsolutePath());
      if (!sdir.mkdir()) {
        error("Can't create directory " + dir,null);
        return false;
      }
    }
  }
  String keytool=(new File(System.getProperty("java.home"),"bin/keytool")).getAbsolutePath();
  String[] args=new String[]{keytool,"-genkey","-storetype",KeyStore.getDefaultType(),"-keystore",ks.getAbsolutePath(),"-storepass",ksPW,"-alias",alias,"-dname","CN=" + cname + ",OU="+ ou+ ",O=I2P Anonymous Network,L=XX,ST=XX,C=XX","-validity",Integer.toString(validDays),"-keyalg",keyAlg,"-sigalg",getSigAlg(keySize,keyAlg),"-keysize",Integer.toString(keySize),"-keypass",keyPW};
  boolean success=(new ShellCommand()).executeSilentAndWaitTimed(args,240);
  if (success) {
    success=ks.exists();
    if (success) {
      try {
        success=getPrivateKey(ks,ksPW,alias,keyPW) != null;
      }
 catch (      Exception e) {
        success=false;
      }
    }
    if (!success)     error("Key gen failed for unknown reasons",null);
  }
  if (success) {
    SecureFileOutputStream.setPerms(ks);
    info("Created self-signed certificate for " + cname + " in keystore: "+ ks.getAbsolutePath());
  }
 else {
    StringBuilder buf=new StringBuilder(256);
    for (int i=0; i < args.length; i++) {
      buf.append('"').append(args[i]).append("\" ");
    }
    error("Failed to generate keys using command line: " + buf,null);
  }
  return success;
}
