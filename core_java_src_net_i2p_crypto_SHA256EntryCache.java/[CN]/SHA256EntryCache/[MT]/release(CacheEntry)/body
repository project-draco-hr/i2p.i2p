{
  entry.reset();
  if (false)   return;
switch (entry.bucket) {
case 1024:
synchronized (_available[ONE_KB]) {
      if (_available[ONE_KB].size() < MAX_CACHED) {
        _available[ONE_KB].add(entry);
      }
    }
  return;
case 4 * 1024:
synchronized (_available[FOUR_KB]) {
  if (_available[FOUR_KB].size() < MAX_CACHED) {
    _available[FOUR_KB].add(entry);
  }
}
return;
case 8 * 1024:
synchronized (_available[EIGHT_KB]) {
if (_available[EIGHT_KB].size() < MAX_CACHED) {
_available[EIGHT_KB].add(entry);
}
}
return;
case 16 * 1024:
synchronized (_available[SIXTEEN_KB]) {
if (_available[SIXTEEN_KB].size() < MAX_CACHED) {
_available[SIXTEEN_KB].add(entry);
}
}
return;
case 32 * 1024:
synchronized (_available[THIRTYTWO_KB]) {
if (_available[THIRTYTWO_KB].size() < MAX_CACHED) {
_available[THIRTYTWO_KB].add(entry);
}
}
return;
case 48 * 1024:
synchronized (_available[FOURTYEIGHT_KB]) {
if (_available[FOURTYEIGHT_KB].size() < MAX_CACHED) {
_available[FOURTYEIGHT_KB].add(entry);
}
}
return;
}
}
