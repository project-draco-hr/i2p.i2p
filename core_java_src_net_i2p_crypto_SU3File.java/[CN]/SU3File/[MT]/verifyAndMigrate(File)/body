{
  InputStream in=null;
  OutputStream out=null;
  boolean rv=false;
  try {
    in=new BufferedInputStream(new FileInputStream(_file));
    in.mark(10);
    byte[] magic=new byte[MAGIC_BYTES.length];
    DataHelper.read(in,magic);
    if (!DataHelper.eq(magic,MAGIC_BYTES))     throw new IOException("Not an su3 file");
    skip(in,1);
    int foo=in.read();
    if (foo != FILE_VERSION)     throw new IOException("bad file version");
    skip(in,1);
    int sigTypeCode=in.read();
    _sigType=SigType.getByCode(sigTypeCode);
    if (_sigType == null)     throw new IOException("unknown sig type: " + sigTypeCode);
    in.reset();
    MessageDigest md=_sigType.getDigestInstance();
    DigestInputStream din=new DigestInputStream(in,md);
    in=din;
    if (!_headerVerified)     verifyHeader(in);
 else     skip(in,getContentOffset());
    if (_verifySignature) {
      if (_signerPubkey == null)       throw new IOException("unknown signer: " + _signer + " for content type: "+ _contentType.getName());
    }
    if (migrateTo != null)     out=new FileOutputStream(migrateTo);
    byte[] buf=new byte[16 * 1024];
    long tot=0;
    while (tot < _contentLength) {
      int read=in.read(buf,0,(int)Math.min(buf.length,_contentLength - tot));
      if (read < 0)       throw new EOFException();
      if (migrateTo != null)       out.write(buf,0,read);
      tot+=read;
    }
    if (_verifySignature) {
      byte[] sha=md.digest();
      din.on(false);
      Signature signature=new Signature(_sigType);
      signature.readBytes(in);
      int avail=in.available();
      if (avail > 0)       throw new IOException(avail + " bytes data after sig");
      SimpleDataStructure hash=_sigType.getHashInstance();
      hash.setData(sha);
      rv=_context.dsa().verifySignature(signature,hash,_signerPubkey);
    }
 else {
      rv=true;
    }
  }
 catch (  DataFormatException dfe) {
    IOException ioe=new IOException("foo");
    ioe.initCause(dfe);
    throw ioe;
  }
 finally {
    if (in != null)     try {
      in.close();
    }
 catch (    IOException ioe) {
    }
    if (out != null)     try {
      out.close();
    }
 catch (    IOException ioe) {
    }
    if (migrateTo != null && !rv)     migrateTo.delete();
  }
  return rv;
}
