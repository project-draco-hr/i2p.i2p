{
  InputStream in=null;
  DigestOutputStream out=null;
  boolean ok=false;
  try {
    in=new BufferedInputStream(new FileInputStream(content));
    MessageDigest md=sigType.getDigestInstance();
    out=new DigestOutputStream(new BufferedOutputStream(new FileOutputStream(_file)),md);
    out.write(MAGIC);
    out.write((byte)0);
    out.write((byte)FILE_VERSION);
    DataHelper.writeLong(out,2,sigType.getCode());
    DataHelper.writeLong(out,2,sigType.getSigLen());
    out.write((byte)0);
    byte[] verBytes=DataHelper.getUTF8(version);
    if (verBytes.length == 0 || verBytes.length > 255)     throw new IllegalArgumentException("bad version length");
    int verLen=Math.max(verBytes.length,MIN_VERSION_BYTES);
    out.write((byte)verLen);
    out.write((byte)0);
    byte[] signerBytes=DataHelper.getUTF8(signer);
    if (signerBytes.length == 0 || signerBytes.length > 255)     throw new IllegalArgumentException("bad signer length");
    out.write((byte)signerBytes.length);
    long contentLength=content.length();
    if (contentLength <= 0)     throw new IllegalArgumentException("No content");
    DataHelper.writeLong(out,8,contentLength);
    out.write((byte)0);
    out.write((byte)TYPE_ZIP);
    out.write((byte)0);
    if (contentType < 0 || contentType > 255)     throw new IllegalArgumentException("bad content type");
    out.write((byte)contentType);
    out.write(new byte[12]);
    out.write(verBytes);
    if (verBytes.length < MIN_VERSION_BYTES)     out.write(new byte[MIN_VERSION_BYTES - verBytes.length]);
    out.write(signerBytes);
    byte[] buf=new byte[16 * 1024];
    long tot=0;
    while (tot < contentLength) {
      int read=in.read(buf,0,(int)Math.min(buf.length,contentLength - tot));
      if (read < 0)       throw new EOFException();
      out.write(buf,0,read);
      tot+=read;
    }
    byte[] sha=md.digest();
    out.on(false);
    SimpleDataStructure hash=sigType.getHashInstance();
    hash.setData(sha);
    Signature signature=_context.dsa().sign(hash,privkey,sigType);
    signature.writeBytes(out);
    ok=true;
  }
 catch (  DataFormatException dfe) {
    IOException ioe=new IOException("foo");
    ioe.initCause(dfe);
    throw ioe;
  }
 finally {
    if (in != null)     try {
      in.close();
    }
 catch (    IOException ioe) {
    }
    if (out != null)     try {
      out.close();
    }
 catch (    IOException ioe) {
    }
    if (!ok)     _file.delete();
  }
}
