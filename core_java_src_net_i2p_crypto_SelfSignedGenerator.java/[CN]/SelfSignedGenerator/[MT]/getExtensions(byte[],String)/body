{
  int pidx=1;
  int skip=pubbytes[pidx++];
  if ((skip & 0x80) != 0)   pidx+=skip & 0x80;
  pidx++;
  MessageDigest md=SHA1.getInstance();
  md.update(pubbytes,pidx,pubbytes.length - pidx);
  byte[] sha=md.digest();
  byte[] oid1=getEncodedOID(OID_SKI);
  byte[] oid2=getEncodedOID(OID_USAGE);
  byte[] oid3=getEncodedOID(OID_BASIC);
  byte[] oid4=getEncodedOID(OID_SAN);
  byte[] oid5=getEncodedOID(OID_AKI);
  byte[] TRUE=new byte[]{1,1,(byte)0xff};
  int wrap1len=spaceFor(sha.length);
  int ext1len=oid1.length + spaceFor(wrap1len);
  int wrap2len=4;
  int ext2len=oid2.length + TRUE.length + spaceFor(wrap2len);
  int wrap3len=spaceFor(TRUE.length);
  int ext3len=oid3.length + TRUE.length + spaceFor(wrap3len);
  byte[] cnameBytes=DataHelper.getASCII(cname);
  int wrap41len=spaceFor(cnameBytes.length);
  int wrap4len=spaceFor(wrap41len);
  int ext4len=oid4.length + spaceFor(wrap4len);
  int wrap51len=wrap1len;
  int wrap5len=spaceFor(wrap51len);
  int ext5len=oid5.length + spaceFor(wrap5len);
  int extslen=spaceFor(ext1len) + spaceFor(ext2len) + spaceFor(ext4len)+ spaceFor(ext5len);
  final boolean isCA=!cname.contains("@");
  if (isCA)   extslen+=spaceFor(ext3len);
  int seqlen=spaceFor(extslen);
  int totlen=spaceFor(seqlen);
  byte[] rv=new byte[totlen];
  int idx=0;
  rv[idx++]=(byte)0xa3;
  idx=intToASN1(rv,idx,seqlen);
  rv[idx++]=(byte)0x30;
  idx=intToASN1(rv,idx,extslen);
  rv[idx++]=(byte)0x30;
  idx=intToASN1(rv,idx,ext1len);
  System.arraycopy(oid1,0,rv,idx,oid1.length);
  idx+=oid1.length;
  rv[idx++]=(byte)0x04;
  idx=intToASN1(rv,idx,wrap1len);
  rv[idx++]=(byte)0x04;
  idx=intToASN1(rv,idx,sha.length);
  System.arraycopy(sha,0,rv,idx,sha.length);
  idx+=sha.length;
  rv[idx++]=(byte)0x30;
  idx=intToASN1(rv,idx,ext5len);
  System.arraycopy(oid5,0,rv,idx,oid5.length);
  idx+=oid5.length;
  rv[idx++]=(byte)0x04;
  idx=intToASN1(rv,idx,wrap5len);
  rv[idx++]=(byte)0x30;
  idx=intToASN1(rv,idx,wrap51len);
  rv[idx++]=(byte)0x80;
  idx=intToASN1(rv,idx,sha.length);
  System.arraycopy(sha,0,rv,idx,sha.length);
  idx+=sha.length;
  if (isCA) {
    rv[idx++]=(byte)0x30;
    idx=intToASN1(rv,idx,ext3len);
    System.arraycopy(oid3,0,rv,idx,oid3.length);
    idx+=oid3.length;
    System.arraycopy(TRUE,0,rv,idx,TRUE.length);
    idx+=TRUE.length;
    rv[idx++]=(byte)0x04;
    idx=intToASN1(rv,idx,wrap3len);
    rv[idx++]=(byte)0x30;
    idx=intToASN1(rv,idx,TRUE.length);
    System.arraycopy(TRUE,0,rv,idx,TRUE.length);
    idx+=TRUE.length;
  }
  rv[idx++]=(byte)0x30;
  idx=intToASN1(rv,idx,ext2len);
  System.arraycopy(oid2,0,rv,idx,oid2.length);
  idx+=oid2.length;
  System.arraycopy(TRUE,0,rv,idx,TRUE.length);
  idx+=TRUE.length;
  rv[idx++]=(byte)0x04;
  idx=intToASN1(rv,idx,wrap2len);
  rv[idx++]=(byte)0x03;
  rv[idx++]=(byte)0x02;
  rv[idx++]=(byte)0x01;
  rv[idx++]=(byte)0xa6;
  rv[idx++]=(byte)0x30;
  idx=intToASN1(rv,idx,ext4len);
  System.arraycopy(oid4,0,rv,idx,oid4.length);
  idx+=oid4.length;
  rv[idx++]=(byte)0x04;
  idx=intToASN1(rv,idx,wrap4len);
  rv[idx++]=(byte)0x30;
  idx=intToASN1(rv,idx,wrap41len);
  rv[idx++]=(byte)(isCA ? 0x82 : 0x81);
  idx=intToASN1(rv,idx,cnameBytes.length);
  System.arraycopy(cnameBytes,0,rv,idx,cnameBytes.length);
  idx+=cnameBytes.length;
  return rv;
}
