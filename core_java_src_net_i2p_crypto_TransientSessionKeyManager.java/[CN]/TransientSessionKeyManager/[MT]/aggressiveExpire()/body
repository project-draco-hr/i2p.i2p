{
  int removed=0;
  int remaining=0;
  long now=_context.clock().now();
  StringBuffer buf=null;
  StringBuffer bufSummary=null;
  if (_log.shouldLog(Log.WARN)) {
    buf=new StringBuffer(128);
    buf.append("Expiring inbound: ");
    bufSummary=new StringBuffer(1024);
  }
synchronized (_inboundTagSets) {
    for (Iterator iter=_inboundTagSets.keySet().iterator(); iter.hasNext(); ) {
      SessionTag tag=(SessionTag)iter.next();
      TagSet ts=(TagSet)_inboundTagSets.get(tag);
      long age=now - ts.getDate();
      if (age > SESSION_LIFETIME_MAX_MS) {
        iter.remove();
        removed++;
        if (buf != null)         buf.append(tag.toString()).append(" @ age ").append(DataHelper.formatDuration(age));
      }
 else       if (false && (bufSummary != null)) {
        bufSummary.append("\nTagSet: " + ts.toString() + ", key: "+ ts.getAssociatedKey().toBase64()+ "/"+ ts.getAssociatedKey().toString()+ ": tag: "+ tag.toString());
      }
    }
    remaining=_inboundTagSets.size();
  }
  _context.statManager().addRateData("crypto.sessionTagsRemaining",remaining,0);
  if ((buf != null) && (removed > 0))   _log.warn(buf.toString());
  if (bufSummary != null)   _log.warn("Cleaning up with remaining: " + bufSummary.toString());
synchronized (_outboundSessions) {
    for (Iterator iter=_outboundSessions.keySet().iterator(); iter.hasNext(); ) {
      PublicKey key=(PublicKey)iter.next();
      OutboundSession sess=(OutboundSession)_outboundSessions.get(key);
      removed+=sess.expireTags();
      if (sess.availableTags() <= 0) {
        iter.remove();
        removed++;
      }
    }
  }
  return removed;
}
