{
  StringBuilder buf=new StringBuilder(1024);
  buf.append("<h2>Inbound sessions</h2>" + "<table>");
  Set<TagSet> inbound=getInboundTagSets();
  Map<SessionKey,Set<TagSet>> inboundSets=new HashMap(inbound.size());
  for (Iterator<TagSet> iter=inbound.iterator(); iter.hasNext(); ) {
    TagSet ts=iter.next();
    if (!inboundSets.containsKey(ts.getAssociatedKey()))     inboundSets.put(ts.getAssociatedKey(),new HashSet());
    Set<TagSet> sets=inboundSets.get(ts.getAssociatedKey());
    sets.add(ts);
  }
  int total=0;
  long now=_context.clock().now();
  for (  Map.Entry<SessionKey,Set<TagSet>> e : inboundSets.entrySet()) {
    SessionKey skey=e.getKey();
    Set<TagSet> sets=new TreeSet(new TagSetComparator());
    sets.addAll(e.getValue());
    buf.append("<tr><td><b>Session key</b>: ").append(skey.toBase64()).append("</td>" + "<td><b># Sets:</b> ").append(sets.size()).append("</td></tr>" + "<tr><td colspan=\"2\"><ul>");
    for (Iterator<TagSet> siter=sets.iterator(); siter.hasNext(); ) {
      TagSet ts=siter.next();
      int size=ts.getTags().size();
      total+=size;
      buf.append("<li><b>Received:</b> ").append(DataHelper.formatDuration(now - ts.getDate())).append(" ago with ");
      buf.append(size).append(" tags remaining</li>");
    }
    buf.append("</ul></td></tr>\n");
    out.write(buf.toString());
    buf.setLength(0);
  }
  buf.append("<tr><th colspan=\"2\">Total tags: ").append(total).append(" (");
  buf.append(DataHelper.formatSize(32 * total)).append("B)</th></tr>\n" + "</table>" + "<h2><b>Outbound sessions</b></h2>"+ "<table>");
  total=0;
  Set<OutboundSession> outbound=getOutboundSessions();
  for (Iterator<OutboundSession> iter=outbound.iterator(); iter.hasNext(); ) {
    OutboundSession sess=iter.next();
    Set<TagSet> sets=new TreeSet(new TagSetComparator());
    sets.addAll(sess.getTagSets());
    buf.append("<tr><td><b>Target key:</b> ").append(sess.getTarget().toBase64().substring(0,64)).append("<br>" + "<b>Established:</b> ").append(DataHelper.formatDuration(now - sess.getEstablishedDate())).append(" ago<br>" + "<b>Last Used:</b> ").append(DataHelper.formatDuration(now - sess.getLastUsedDate())).append(" ago<br>" + "<b>Session key:</b> ").append(sess.getCurrentKey().toBase64()).append("</td>" + "<td><b># Sets:</b> ").append(sess.getTagSets().size()).append("</td></tr>" + "<tr><td colspan=\"2\"><ul>");
    for (Iterator<TagSet> siter=sets.iterator(); siter.hasNext(); ) {
      TagSet ts=siter.next();
      int size=ts.getTags().size();
      total+=size;
      buf.append("<li><b>Sent:</b> ").append(DataHelper.formatDuration(now - ts.getDate())).append(" ago with ");
      buf.append(size).append(" tags remaining; acked? ").append(ts.getAcked()).append("</li>");
    }
    buf.append("</ul></td></tr>\n");
    out.write(buf.toString());
    buf.setLength(0);
  }
  buf.append("<tr><th colspan=\"2\">Total tags: ").append(total).append(" (");
  buf.append(DataHelper.formatSize(32 * total)).append("B)</th></tr>\n" + "</table>");
  out.write(buf.toString());
}
