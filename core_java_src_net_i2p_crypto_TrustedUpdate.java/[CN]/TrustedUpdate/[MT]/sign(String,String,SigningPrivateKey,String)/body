{
  byte[] versionHeader={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
  byte[] versionRawBytes=null;
  if (version.length() > VERSION_BYTES)   version=version.substring(0,VERSION_BYTES);
  try {
    versionRawBytes=version.getBytes("UTF-8");
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException("wtf, your JVM doesnt support utf-8? " + e.getMessage());
  }
  System.arraycopy(versionRawBytes,0,versionHeader,0,versionRawBytes.length);
  FileInputStream fileInputStream=null;
  Signature signature=null;
  SequenceInputStream bytesToSignInputStream=null;
  ByteArrayInputStream versionHeaderInputStream=null;
  try {
    fileInputStream=new FileInputStream(inputFile);
    versionHeaderInputStream=new ByteArrayInputStream(versionHeader);
    bytesToSignInputStream=new SequenceInputStream(versionHeaderInputStream,fileInputStream);
    signature=_context.dsa().sign(bytesToSignInputStream,signingPrivateKey);
  }
 catch (  Exception e) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Error signing",e);
    return null;
  }
 finally {
    if (bytesToSignInputStream != null)     try {
      bytesToSignInputStream.close();
    }
 catch (    IOException ioe) {
    }
    fileInputStream=null;
  }
  FileOutputStream fileOutputStream=null;
  try {
    fileOutputStream=new FileOutputStream(signedFile);
    fileOutputStream.write(signature.getData());
    fileOutputStream.write(versionHeader);
    fileInputStream=new FileInputStream(inputFile);
    byte[] buffer=new byte[1024];
    int bytesRead=0;
    while ((bytesRead=fileInputStream.read(buffer)) != -1)     fileOutputStream.write(buffer,0,bytesRead);
    fileOutputStream.close();
  }
 catch (  IOException ioe) {
    if (_log.shouldLog(Log.WARN))     _log.log(Log.WARN,"Error writing signed file " + signedFile,ioe);
    return null;
  }
 finally {
    if (fileInputStream != null)     try {
      fileInputStream.close();
    }
 catch (    IOException ioe) {
    }
    if (fileOutputStream != null)     try {
      fileOutputStream.close();
    }
 catch (    IOException ioe) {
    }
  }
  return signature;
}
