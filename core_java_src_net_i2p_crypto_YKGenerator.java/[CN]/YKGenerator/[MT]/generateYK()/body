{
  NativeBigInteger k=null;
  BigInteger y=null;
  long t0=0;
  long t1=0;
  while (k == null) {
    t0=Clock.getInstance().now();
    k=new NativeBigInteger(KeyGenerator.PUBKEY_EXPONENT_SIZE,RandomSource.getInstance());
    t1=Clock.getInstance().now();
    if (BigInteger.ZERO.compareTo(k) == 0) {
      k=null;
      continue;
    }
    BigInteger kPlus2=k.add(_two);
    if (kPlus2.compareTo(CryptoConstants.elgp) > 0)     k=null;
  }
  long t2=Clock.getInstance().now();
  y=CryptoConstants.elgg.modPow(k,CryptoConstants.elgp);
  BigInteger yk[]=new BigInteger[2];
  yk[0]=y;
  yk[1]=k;
  long diff=t2 - t0;
  if (diff > 1000) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Took too long to generate YK value for ElGamal (" + diff + "ms)");
  }
  return yk;
}
