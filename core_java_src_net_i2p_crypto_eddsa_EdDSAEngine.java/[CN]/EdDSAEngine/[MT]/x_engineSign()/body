{
  Curve curve=key.getParams().getCurve();
  ScalarOps sc=key.getParams().getScalarOps();
  byte[] a=((EdDSAPrivateKey)key).geta();
  byte[] message;
  int offset, length;
  if (oneShotMode) {
    if (oneShotBytes == null)     throw new SignatureException("update() not called first");
    message=oneShotBytes;
    offset=oneShotOffset;
    length=oneShotLength;
  }
 else {
    if (baos == null)     message=new byte[0];
 else     message=baos.toByteArray();
    offset=0;
    length=message.length;
  }
  digest.update(message,offset,length);
  byte[] r=digest.digest();
  r=sc.reduce(r);
  GroupElement R=key.getParams().getB().scalarMultiply(r);
  byte[] Rbyte=R.toByteArray();
  digest.update(Rbyte);
  digest.update(((EdDSAPrivateKey)key).getAbyte());
  digest.update(message,offset,length);
  byte[] h=digest.digest();
  h=sc.reduce(h);
  byte[] S=sc.multiplyAndAdd(h,a,r);
  int b=curve.getField().getb();
  ByteBuffer out=ByteBuffer.allocate(b / 4);
  out.put(Rbyte).put(S);
  return out.array();
}
