{
  BigInteger elgp=key.getParams().getP();
  BigInteger pm1=elgp.subtract(BigInteger.ONE);
  BigInteger elgg=key.getParams().getG();
  BigInteger x=((ElGamalPrivateKey)key).getX();
  if (!(x instanceof NativeBigInteger))   x=new NativeBigInteger(x);
  byte[] data=digest.digest();
  BigInteger k;
  boolean ok;
  do {
    k=new BigInteger(2048,RandomSource.getInstance());
    ok=k.compareTo(pm1) == -1;
    ok=ok && k.compareTo(BigInteger.ONE) == 1;
    ok=ok && k.gcd(pm1).equals(BigInteger.ONE);
  }
 while (!ok);
  BigInteger r=elgg.modPow(k,elgp);
  BigInteger kinv=k.modInverse(pm1);
  BigInteger h=new NativeBigInteger(1,data);
  BigInteger s=(kinv.multiply(h.subtract(x.multiply(r)))).mod(pm1);
  byte[] rv;
  try {
    rv=SigUtil.sigBytesToASN1(r,s);
  }
 catch (  IllegalArgumentException iae) {
    throw new SignatureException("ASN1",iae);
  }
  return rv;
}
