{
  StringBuffer buf=new StringBuffer(64);
  buf.append("[Certificate: type: ");
  if (getCertificateType() == CERTIFICATE_TYPE_NULL)   buf.append("Null certificate");
 else   if (getCertificateType() == CERTIFICATE_TYPE_HASHCASH)   buf.append("Hashcash certificate");
 else   if (getCertificateType() == CERTIFICATE_TYPE_HIDDEN)   buf.append("Hidden certificate");
 else   if (getCertificateType() == CERTIFICATE_TYPE_SIGNED)   buf.append("Signed certificate");
 else   buf.append("Unknown certificate type (").append(getCertificateType()).append(")");
  if (_payload == null) {
    buf.append(" null payload");
  }
 else {
    buf.append(" payload size: ").append(_payload.length);
    if (getCertificateType() == CERTIFICATE_TYPE_HASHCASH) {
      buf.append(" Stamp: ").append(new String(_payload));
    }
 else     if (getCertificateType() == CERTIFICATE_TYPE_SIGNED && _payload.length == CERTIFICATE_LENGTH_SIGNED_WITH_HASH) {
      buf.append(" Signed by hash: ").append(Base64.encode(_payload,Signature.SIGNATURE_BYTES,Hash.HASH_LENGTH));
    }
 else {
      int len=32;
      if (len > _payload.length)       len=_payload.length;
      buf.append(" first ").append(len).append(" bytes: ");
      buf.append(DataHelper.toString(_payload,len));
    }
  }
  buf.append("]");
  return buf.toString();
}
