{
  PrintWriter out=null;
  IllegalArgumentException iae=null;
  File tmpFile=new File(file.getPath() + ".tmp");
  try {
    FileOutputStream fos=new SecureFileOutputStream(tmpFile);
    out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(fos,"UTF-8")));
    out.println("# NOTE: This I2P config file must use UTF-8 encoding");
    for (    Map.Entry<Object,Object> entry : props.entrySet()) {
      String name=(String)entry.getKey();
      String val=(String)entry.getValue();
      if (ILLEGAL_KEY.matcher(name).matches()) {
        if (iae == null)         iae=new IllegalArgumentException("Invalid character (one of \"#;=\\r\\n\") in key: \"" + name + "\" = \""+ val+ '\"');
        continue;
      }
      if (ILLEGAL_VALUE.matcher(val).matches()) {
        if (iae == null)         iae=new IllegalArgumentException("Invalid character (one of \"#\\r\\n\") in value: \"" + name + "\" = \""+ val+ '\"');
        continue;
      }
      out.println(name + "=" + val);
    }
    out.flush();
    fos.getFD().sync();
    out.close();
    if (out.checkError()) {
      out=null;
      tmpFile.delete();
      throw new IOException("Failed to write properties to " + tmpFile);
    }
    out=null;
    if (!FileUtil.rename(tmpFile,file))     throw new IOException("Failed rename from " + tmpFile + " to "+ file);
  }
  finally {
    if (out != null)     out.close();
  }
  if (iae != null)   throw iae;
}
