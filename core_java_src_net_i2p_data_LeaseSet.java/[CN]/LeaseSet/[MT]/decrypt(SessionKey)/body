{
  int size=_leases.size();
  if (size < 2)   throw new DataFormatException("Bad number of leases for decryption");
  int datalen=DATA_LEN * size;
  ByteArrayOutputStream baos=new ByteArrayOutputStream(datalen);
  for (int i=0; i < size; i++) {
    _leases.get(i).getGateway().writeBytes(baos);
    _leases.get(i).getTunnelId().writeBytes(baos);
  }
  byte[] iv=new byte[IV_LEN];
  System.arraycopy(_destination.getPublicKey().getData(),0,iv,0,IV_LEN);
  int enclen=((DATA_LEN * (size - 1) / 16) + 1) * 16;
  byte[] enc=new byte[enclen];
  System.arraycopy(baos.toByteArray(),0,enc,0,enclen);
  byte[] dec=new byte[enclen];
  I2PAppContext.getGlobalContext().aes().decrypt(enc,0,dec,0,key,iv,enclen);
  ByteArrayInputStream bais=new ByteArrayInputStream(dec);
  _decryptedLeases=new ArrayList<Lease>(size - 1);
  for (int i=0; i < size - 1; i++) {
    Lease l=new Lease();
    Hash h=new Hash();
    h.readBytes(bais);
    l.setGateway(h);
    TunnelId t=new TunnelId();
    t.readBytes(bais);
    l.setTunnelId(t);
    l.setEndDate(_leases.get(i).getEndDate());
    _decryptedLeases.add(l);
  }
}
