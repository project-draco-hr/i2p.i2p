{
  int size=_leases.size();
  if (size < 1 || size > MAX_LEASES - 1)   throw new IllegalArgumentException("Bad number of leases for encryption");
  int datalen=((DATA_LEN * size / 16) + 1) * 16;
  ByteArrayOutputStream baos=new ByteArrayOutputStream(datalen);
  for (int i=0; i < size; i++) {
    ((Lease)_leases.get(i)).getGateway().writeBytes(baos);
    ((Lease)_leases.get(i)).getTunnelId().writeBytes(baos);
  }
  int padlen=datalen - (DATA_LEN * size);
  byte[] pad=new byte[padlen];
  RandomSource.getInstance().nextBytes(pad);
  baos.write(pad);
  byte[] iv=new byte[IV_LEN];
  System.arraycopy(_destination.getPublicKey().getData(),0,iv,0,IV_LEN);
  byte[] enc=new byte[DATA_LEN * (size + 1)];
  I2PAppContext.getGlobalContext().aes().encrypt(baos.toByteArray(),0,enc,0,key,iv,datalen);
  padlen=enc.length - datalen;
  RandomSource.getInstance().nextBytes(enc,datalen,padlen);
  Lease padLease=new Lease();
  padLease.setEndDate(((Lease)_leases.get(0)).getEndDate());
  _leases.add(padLease);
  ByteArrayInputStream bais=new ByteArrayInputStream(enc);
  for (int i=0; i < size + 1; i++) {
    Hash h=new Hash();
    h.readBytes(bais);
    ((Lease)_leases.get(i)).setGateway(h);
    TunnelId t=new TunnelId();
    t.readBytes(bais);
    ((Lease)_leases.get(i)).setTunnelId(t);
  }
}
