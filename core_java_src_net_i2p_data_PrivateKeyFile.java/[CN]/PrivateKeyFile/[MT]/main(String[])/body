{
  if (args.length == 0 || (args[0].startsWith("-") && args.length == 1) || (args[0].equals("-t") && args.length != 3)) {
    System.err.println("Usage: PrivateKeyFile filename (generates if nonexistent, then prints)");
    System.err.println("       PrivateKeyFile -h filename (generates if nonexistent, adds hashcash cert)");
    System.err.println("       PrivateKeyFile -h effort filename (specify HashCash effort instead of default " + HASH_EFFORT + ")");
    System.err.println("       PrivateKeyFile -n filename (changes to null cert)");
    System.err.println("       PrivateKeyFile -s filename signwithdestfile (generates if nonexistent, adds cert signed by 2nd dest)");
    System.err.println("       PrivateKeyFile -u filename (changes to unknown cert)");
    System.err.println("       PrivateKeyFile -x filename (changes to hidden cert)");
    System.err.println("       PrivateKeyFile -t sigtype filename (changes to KeyCertificate of the given sig type");
    return;
  }
  I2PClient client=I2PClientFactory.createClient();
  int filearg=0;
  if (args.length > 1) {
    if (args.length >= 2 && (args[0].equals("-h") || args[0].equals("-t")))     filearg=args.length - 1;
 else     filearg=1;
  }
  try {
    File f=new File(args[filearg]);
    PrivateKeyFile pkf=new PrivateKeyFile(f,client);
    Destination d=pkf.createIfAbsent();
    System.out.println("Original Destination:");
    System.out.println(pkf);
    verifySignature(d);
    if (args.length == 1)     return;
    if (args[0].equals("-n")) {
      pkf.setCertType(Certificate.CERTIFICATE_TYPE_NULL);
      System.out.println("New destination with null cert is:");
    }
 else     if (args[0].equals("-u")) {
      pkf.setCertType(99);
      System.out.println("New destination with unknown cert is:");
    }
 else     if (args[0].equals("-x")) {
      pkf.setCertType(Certificate.CERTIFICATE_TYPE_HIDDEN);
      System.out.println("New destination with hidden cert is:");
    }
 else     if (args[0].equals("-h")) {
      int hashEffort=HASH_EFFORT;
      if (args.length == 3)       hashEffort=Integer.parseInt(args[1]);
      System.out.println("Estimating hashcash generation time, stand by...");
      System.out.println(estimateHashCashTime(hashEffort));
      pkf.setHashCashCert(hashEffort);
      System.out.println("New destination with hashcash cert is:");
    }
 else     if (args.length == 3 && args[0].equals("-s")) {
      PrivateKeyFile pkf2=new PrivateKeyFile(args[2]);
      pkf.setSignedCert(pkf2);
      System.out.println("New destination with signed cert is:");
    }
 else     if (args.length == 3 && args[0].equals("-t")) {
      SigType type=SigType.parseSigType(args[1]);
      if (type == null)       throw new IllegalArgumentException("Signature type " + args[1] + " is not supported");
      pkf.setKeyCert(type);
      System.out.println("New destination with key cert is:");
    }
    System.out.println(pkf);
    pkf.write();
    verifySignature(pkf.getDestination());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
