{
  if (args.length == 0) {
    System.err.println("Usage: PrivateKeyFile filename (generates if nonexistent, then prints)");
    System.err.println("       PrivateKeyFile -h filename (generates if nonexistent, adds hashcash cert)");
    System.err.println("       PrivateKeyFile -h effort filename (specify HashCash effort instead of default " + HASH_EFFORT + ")");
    System.err.println("       PrivateKeyFile -n filename (changes to null cert)");
    System.err.println("       PrivateKeyFile -s filename signwithdestfile (generates if nonexistent, adds cert signed by 2nd dest)");
    System.err.println("       PrivateKeyFile -u filename (changes to unknown cert)");
    System.err.println("       PrivateKeyFile -x filename (changes to hidden cert)");
    return;
  }
  I2PClient client=I2PClientFactory.createClient();
  int filearg=0;
  if (args.length > 1) {
    if (args.length >= 2 && args[0].equals("-h"))     filearg=args.length - 1;
 else     filearg=1;
  }
  try {
    File f=new File(args[filearg]);
    PrivateKeyFile pkf=new PrivateKeyFile(f,client);
    Destination d=pkf.createIfAbsent();
    System.out.println("Original Destination:");
    System.out.println(pkf);
    verifySignature(d);
    if (args.length == 1)     return;
    Certificate c=new Certificate();
    if (args[0].equals("-n")) {
    }
 else     if (args[0].equals("-u")) {
      c.setCertificateType(99);
    }
 else     if (args[0].equals("-x")) {
      c.setCertificateType(Certificate.CERTIFICATE_TYPE_HIDDEN);
    }
 else     if (args[0].equals("-h")) {
      int hashEffort=HASH_EFFORT;
      if (args.length == 3)       hashEffort=Integer.parseInt(args[1]);
      System.out.println("Estimating hashcash generation time, stand by...");
      long low=HashCash.estimateTime(hashEffort);
      System.out.println("It is estimated this will take " + DataHelper.formatDuration(low) + " to "+ DataHelper.formatDuration(4 * low));
      long begin=System.currentTimeMillis();
      System.out.println("Starting hashcash generation now...");
      String resource=d.getPublicKey().toBase64() + d.getSigningPublicKey().toBase64();
      HashCash hc=HashCash.mintCash(resource,hashEffort);
      System.out.println("Generation took: " + DataHelper.formatDuration(System.currentTimeMillis() - begin));
      System.out.println("Full Hashcash is: " + hc);
      String hcs=hc.toString();
      int end1=0;
      for (int i=0; i < 3; i++) {
        end1=1 + hcs.indexOf(':',end1);
        if (end1 < 0) {
          System.out.println("Bad hashcash");
          return;
        }
      }
      int start2=hcs.indexOf(':',end1);
      if (start2 < 0) {
        System.out.println("Bad hashcash");
        return;
      }
      hcs=hcs.substring(0,end1) + hcs.substring(start2);
      System.out.println("Short Hashcash is: " + hcs);
      c.setCertificateType(Certificate.CERTIFICATE_TYPE_HASHCASH);
      c.setPayload(hcs.getBytes());
    }
 else     if (args.length == 3 && args[0].equals("-s")) {
      File f2=new File(args[2]);
      I2PClient client2=I2PClientFactory.createClient();
      PrivateKeyFile pkf2=new PrivateKeyFile(f2,client2);
      Destination d2=pkf2.getDestination();
      SigningPrivateKey spk2=pkf2.getSigningPrivKey();
      System.out.println("Signing With Dest:");
      System.out.println(pkf2.toString());
      int len=PublicKey.KEYSIZE_BYTES + SigningPublicKey.KEYSIZE_BYTES;
      byte[] data=new byte[len];
      System.arraycopy(d.getPublicKey().getData(),0,data,0,PublicKey.KEYSIZE_BYTES);
      System.arraycopy(d.getSigningPublicKey().getData(),0,data,PublicKey.KEYSIZE_BYTES,SigningPublicKey.KEYSIZE_BYTES);
      byte[] payload=new byte[Hash.HASH_LENGTH + Signature.SIGNATURE_BYTES];
      byte[] sig=DSAEngine.getInstance().sign(new ByteArrayInputStream(data),spk2).getData();
      System.arraycopy(sig,0,payload,0,Signature.SIGNATURE_BYTES);
      byte[] h2=d2.calculateHash().getData();
      System.arraycopy(h2,0,payload,Signature.SIGNATURE_BYTES,Hash.HASH_LENGTH);
      c.setCertificateType(Certificate.CERTIFICATE_TYPE_SIGNED);
      c.setPayload(payload);
    }
    d.setCertificate(c);
    System.out.println("New signed destination is:");
    System.out.println(pkf);
    pkf.write();
    verifySignature(d);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
