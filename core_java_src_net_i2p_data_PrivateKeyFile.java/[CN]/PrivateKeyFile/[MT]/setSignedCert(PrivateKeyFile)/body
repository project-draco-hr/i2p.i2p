{
  Certificate c=setCertType(Certificate.CERTIFICATE_TYPE_SIGNED);
  Destination d2;
  try {
    d2=pkf2.getDestination();
  }
 catch (  Exception e) {
    return null;
  }
  if (d2 == null)   return null;
  SigningPrivateKey spk2=pkf2.getSigningPrivKey();
  System.out.println("Signing With Dest:");
  System.out.println(pkf2.toString());
  int len=PublicKey.KEYSIZE_BYTES + SigningPublicKey.KEYSIZE_BYTES;
  byte[] data=new byte[len];
  System.arraycopy(this.dest.getPublicKey().getData(),0,data,0,PublicKey.KEYSIZE_BYTES);
  System.arraycopy(this.dest.getSigningPublicKey().getData(),0,data,PublicKey.KEYSIZE_BYTES,SigningPublicKey.KEYSIZE_BYTES);
  byte[] payload=new byte[Hash.HASH_LENGTH + Signature.SIGNATURE_BYTES];
  Signature sign=DSAEngine.getInstance().sign(new ByteArrayInputStream(data),spk2);
  if (sign == null)   return null;
  byte[] sig=sign.getData();
  System.arraycopy(sig,0,payload,0,Signature.SIGNATURE_BYTES);
  byte[] h2=d2.calculateHash().getData();
  System.arraycopy(h2,0,payload,Signature.SIGNATURE_BYTES,Hash.HASH_LENGTH);
  c.setCertificateType(Certificate.CERTIFICATE_TYPE_SIGNED);
  c.setPayload(payload);
  return c;
}
