{
  if (d.getCertificate().getCertificateType() != Certificate.CERTIFICATE_TYPE_SIGNED)   return false;
  int len=PublicKey.KEYSIZE_BYTES + SigningPublicKey.KEYSIZE_BYTES;
  byte[] data=new byte[len];
  System.arraycopy(d.getPublicKey().getData(),0,data,0,PublicKey.KEYSIZE_BYTES);
  System.arraycopy(d.getSigningPublicKey().getData(),0,data,PublicKey.KEYSIZE_BYTES,SigningPublicKey.KEYSIZE_BYTES);
  Signature sig=new Signature(d.getCertificate().getPayload());
  String[] filenames=new String[]{"privatehosts.txt","userhosts.txt","hosts.txt"};
  for (int i=0; i < filenames.length; i++) {
    Properties hosts=new Properties();
    try {
      File f=new File(filenames[i]);
      if ((f.exists()) && (f.canRead())) {
        DataHelper.loadProps(hosts,f,true);
        for (Iterator iter=hosts.entrySet().iterator(); iter.hasNext(); ) {
          Map.Entry entry=(Map.Entry)iter.next();
          String s=(String)entry.getValue();
          Destination signer=new Destination(s);
          if (checkSignature(sig,data,signer.getSigningPublicKey())) {
            System.out.println("Good signature from: " + entry.getKey());
            return true;
          }
        }
      }
    }
 catch (    Exception ioe) {
    }
  }
  System.out.println("No valid signer found");
  return false;
}
