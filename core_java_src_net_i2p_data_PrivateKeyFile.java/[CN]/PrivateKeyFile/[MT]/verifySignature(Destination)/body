{
  if (d.getCertificate().getCertificateType() != Certificate.CERTIFICATE_TYPE_SIGNED)   return false;
  int len=PublicKey.KEYSIZE_BYTES + SigningPublicKey.KEYSIZE_BYTES;
  byte[] data=new byte[len];
  System.arraycopy(d.getPublicKey().getData(),0,data,0,PublicKey.KEYSIZE_BYTES);
  System.arraycopy(d.getSigningPublicKey().getData(),0,data,PublicKey.KEYSIZE_BYTES,SigningPublicKey.KEYSIZE_BYTES);
  Signature sig=new Signature();
  byte[] payload=d.getCertificate().getPayload();
  Hash signerHash=null;
  if (payload == null) {
    System.out.println("Bad signed cert - no payload");
    return false;
  }
 else   if (payload.length == Signature.SIGNATURE_BYTES) {
    sig.setData(payload);
  }
 else   if (payload.length == Certificate.CERTIFICATE_LENGTH_SIGNED_WITH_HASH) {
    byte[] pl=new byte[Signature.SIGNATURE_BYTES];
    System.arraycopy(payload,0,pl,0,Signature.SIGNATURE_BYTES);
    sig.setData(pl);
    byte[] hash=new byte[Hash.HASH_LENGTH];
    System.arraycopy(payload,Signature.SIGNATURE_BYTES,hash,0,Hash.HASH_LENGTH);
    signerHash=new Hash(hash);
    System.out.println("Destination is signed by " + Base32.encode(hash) + ".b32.i2p");
  }
 else {
    System.out.println("Bad signed cert - length = " + payload.length);
    return false;
  }
  String[] filenames=new String[]{"privatehosts.txt","userhosts.txt","hosts.txt"};
  int tried=0;
  for (int i=0; i < filenames.length; i++) {
    Properties hosts=new Properties();
    try {
      File f=new File(filenames[i]);
      if ((f.exists()) && (f.canRead())) {
        DataHelper.loadProps(hosts,f,true);
        int sz=hosts.size();
        if (sz > 0) {
          tried+=sz;
          if (signerHash == null)           System.out.println("Attempting to verify using " + sz + " hosts, this may take a while");
        }
        for (        Map.Entry<Object,Object> entry : hosts.entrySet()) {
          String s=(String)entry.getValue();
          Destination signer=new Destination(s);
          if (signerHash == null || signer.calculateHash().equals(signerHash)) {
            if (checkSignature(sig,data,signer.getSigningPublicKey())) {
              System.out.println("Good signature from: " + entry.getKey());
              return true;
            }
            if (signerHash != null) {
              System.out.println("Bad signature from: " + entry.getKey());
            }
          }
        }
      }
    }
 catch (    DataFormatException dfe) {
    }
catch (    IOException ioe) {
    }
  }
  if (tried > 0)   System.out.println("No valid signer found");
 else   System.out.println("No addressbooks found to valididate signer");
  return false;
}
