{
  _period=PersistenceHelper.getInt(props,prefix,".period");
  _creationDate=PersistenceHelper.getLong(props,prefix,".creationDate");
  _lastCoalesceDate=PersistenceHelper.getLong(props,prefix,".lastCoalesceDate");
  _currentTotalValue=PersistenceHelper.getDouble(props,prefix,".currentTotalValue");
  _currentEventCount=PersistenceHelper.getInt(props,prefix,".currentEventCount");
  _currentTotalEventTime=PersistenceHelper.getLong(props,prefix,".currentTotalEventTime");
  _lastTotalValue=PersistenceHelper.getDouble(props,prefix,".lastTotalValue");
  _lastEventCount=PersistenceHelper.getInt(props,prefix,".lastEventCount");
  _lastTotalEventTime=PersistenceHelper.getLong(props,prefix,".lastTotalEventTime");
  _extremeTotalValue=PersistenceHelper.getDouble(props,prefix,".extremeTotalValue");
  _extremeEventCount=PersistenceHelper.getInt(props,prefix,".extremeEventCount");
  _extremeTotalEventTime=PersistenceHelper.getLong(props,prefix,".extremeTotalEventTime");
  _lifetimeTotalValue=PersistenceHelper.getDouble(props,prefix,".lifetimeTotalValue");
  _lifetimeEventCount=PersistenceHelper.getLong(props,prefix,".lifetimeEventCount");
  _lifetimeTotalEventTime=PersistenceHelper.getLong(props,prefix,".lifetimeTotalEventTime");
  if (treatAsCurrent)   _lastCoalesceDate=now();
  if (_period <= 0)   throw new IllegalArgumentException("Period for " + prefix + " is invalid");
  coalesce();
}
