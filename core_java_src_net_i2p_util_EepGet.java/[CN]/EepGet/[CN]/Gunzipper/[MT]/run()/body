{
  ReusableGZIPInputStream in=ReusableGZIPInputStream.acquire();
  ByteArray ba=null;
  long written=0;
  try {
    in.initialize(_inRaw);
    ba=_cache.acquire();
    byte buf[]=ba.getData();
    int read=-1;
    while ((read=in.read(buf)) != -1) {
      _out.write(buf,0,read);
    }
  }
 catch (  IOException ioe) {
    _decompressException=ioe;
    if (_log.shouldLog(Log.WARN))     _log.warn("Error decompressing: " + written + ", "+ (in != null ? in.getTotalRead() + "/" + in.getTotalExpanded() : ""),ioe);
  }
catch (  OutOfMemoryError oom) {
    _decompressException=new IOException("OOM in HTTP Decompressor");
    _log.error("OOM in HTTP Decompressor",oom);
  }
 finally {
    if (_out != null)     try {
      _out.close();
    }
 catch (    IOException ioe) {
    }
    ReusableGZIPInputStream.release(in);
    if (ba != null)     _cache.release(ba);
  }
}
