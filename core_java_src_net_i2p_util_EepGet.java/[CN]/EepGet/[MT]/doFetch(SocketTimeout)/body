{
  _headersRead=false;
  _aborted=false;
  try {
    readHeaders();
  }
  finally {
    _headersRead=true;
  }
  if (_aborted)   throw new IOException("Timed out reading the HTTP headers");
  timeout.resetTimer();
  if (_fetchInactivityTimeout > 0)   timeout.setInactivityTimeout(_fetchInactivityTimeout);
 else   timeout.setInactivityTimeout(60 * 1000);
  if (_redirectLocation != null) {
    try {
      URL oldURL=new URL(_actualURL);
      String query=oldURL.getQuery();
      if (query == null)       query="";
      if (_redirectLocation.startsWith("http://")) {
        if ((_redirectLocation.indexOf('?') < 0) && (query.length() > 0))         _actualURL=_redirectLocation + "?" + query;
 else         _actualURL=_redirectLocation;
      }
 else {
        URL url=new URL(_actualURL);
        if (_redirectLocation.startsWith("/"))         _actualURL="http://" + url.getHost() + ":"+ url.getPort()+ _redirectLocation;
 else         _actualURL="http://" + url.getHost() + ":"+ url.getPort()+ "/"+ _redirectLocation;
        if ((_actualURL.indexOf('?') < 0) && (query.length() > 0))         _actualURL=_actualURL + "?" + query;
 else         _actualURL=_actualURL;
      }
    }
 catch (    MalformedURLException mue) {
      throw new IOException("Redirected from an invalid URL");
    }
    _redirects++;
    if (_redirects > 5)     throw new IOException("Too many redirects: to " + _redirectLocation);
    if (_log.shouldLog(Log.INFO))     _log.info("Redirecting to " + _redirectLocation);
    sendRequest(timeout);
    doFetch(timeout);
    return;
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Headers read completely, reading " + _bytesRemaining);
  boolean strictSize=(_bytesRemaining >= 0);
  if ((_minSize > 0) && (_bytesRemaining < _minSize))   throw new IOException("HTTP response size " + _bytesRemaining + " violates minimum of "+ _minSize+ " bytes");
  if ((_maxSize > -1) && (_bytesRemaining > _maxSize))   throw new IOException("HTTP response size " + _bytesRemaining + " violates maximum of "+ _maxSize+ " bytes");
  int remaining=(int)_bytesRemaining;
  byte buf[]=new byte[1024];
  while (_keepFetching && ((remaining > 0) || !strictSize) && !_aborted) {
    int toRead=buf.length;
    if (strictSize && toRead > remaining)     toRead=remaining;
    int read=_proxyIn.read(buf,0,toRead);
    if (read == -1)     break;
    timeout.resetTimer();
    _out.write(buf,0,read);
    _bytesTransferred+=read;
    _alreadyTransferred+=read;
    if ((_maxSize > -1) && (_alreadyTransferred > _maxSize))     throw new IOException("Bytes transferred " + _alreadyTransferred + " violates maximum of "+ _maxSize+ " bytes");
    remaining-=read;
    if (remaining == 0 && _encodingChunked) {
      int char1=_proxyIn.read();
      if (char1 == '\r') {
        int char2=_proxyIn.read();
        if (char2 == '\n') {
          remaining=(int)readChunkLength();
        }
 else {
          _out.write(char1);
          _out.write(char2);
          _bytesTransferred+=2;
          remaining-=2;
          read+=2;
        }
      }
 else {
        _out.write(char1);
        _bytesTransferred++;
        remaining--;
        read++;
      }
    }
    timeout.resetTimer();
    if (read > 0)     for (int i=0; i < _listeners.size(); i++)     ((StatusListener)_listeners.get(i)).bytesTransferred(_alreadyTransferred,read,_bytesTransferred,_encodingChunked ? -1 : _bytesRemaining,_url);
  }
  if (_out != null)   _out.close();
  _out=null;
  if (_aborted)   throw new IOException("Timed out reading the HTTP data");
  timeout.cancel();
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Done transferring " + _bytesTransferred + " (ok? "+ !_transferFailed+ ")");
  if (_transferFailed) {
    for (int i=0; i < _listeners.size(); i++)     ((StatusListener)_listeners.get(i)).attemptFailed(_url,_bytesTransferred,_bytesRemaining,_currentAttempt,_numRetries,new Exception("Attempt failed"));
  }
 else   if ((_minSize > 0) && (_alreadyTransferred < _minSize)) {
    throw new IOException("Bytes transferred " + _alreadyTransferred + " violates minimum of "+ _minSize+ " bytes");
  }
 else   if ((_bytesRemaining == -1) || (remaining == 0)) {
    for (int i=0; i < _listeners.size(); i++)     ((StatusListener)_listeners.get(i)).transferComplete(_alreadyTransferred,_bytesTransferred,_encodingChunked ? -1 : _bytesRemaining,_url,_outputFile,_notModified);
  }
 else {
    throw new IOException("Disconnection on attempt " + _currentAttempt + " after "+ _bytesTransferred);
  }
}
