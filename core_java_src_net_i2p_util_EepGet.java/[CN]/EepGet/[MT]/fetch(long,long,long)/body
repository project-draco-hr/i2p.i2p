{
  _fetchHeaderTimeout=fetchHeaderTimeout;
  _fetchEndTime=(totalTimeout > 0 ? System.currentTimeMillis() + totalTimeout : -1);
  _fetchInactivityTimeout=inactivityTimeout;
  _keepFetching=true;
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Fetching (proxied? " + _shouldProxy + ") url="+ _actualURL);
  while (_keepFetching) {
    SocketTimeout timeout=null;
    if (_fetchHeaderTimeout > 0) {
      timeout=new SocketTimeout(_fetchHeaderTimeout);
      final SocketTimeout stimeout=timeout;
      timeout.setTimeoutCommand(new Runnable(){
        public void run(){
          if (_log.shouldLog(Log.DEBUG))           _log.debug("timeout reached on " + _url + ": "+ stimeout);
          _aborted=true;
        }
      }
);
      timeout.setTotalTimeoutPeriod(_fetchEndTime);
    }
    try {
      for (int i=0; i < _listeners.size(); i++)       _listeners.get(i).attempting(_url);
      sendRequest(timeout);
      if (timeout != null)       timeout.resetTimer();
      doFetch(timeout);
      if (timeout != null)       timeout.cancel();
      if (!_transferFailed)       return true;
      break;
    }
 catch (    IOException ioe) {
      if (timeout != null)       timeout.cancel();
      for (int i=0; i < _listeners.size(); i++)       _listeners.get(i).attemptFailed(_url,_bytesTransferred,_bytesRemaining,_currentAttempt,_numRetries,ioe);
      if (_log.shouldLog(Log.WARN))       _log.warn("ERR: doFetch failed ",ioe);
      if (ioe instanceof MalformedURLException)       _keepFetching=false;
    }
 finally {
      if (_out != null) {
        try {
          _out.close();
        }
 catch (        IOException cioe) {
        }
        _out=null;
      }
      if (_proxy != null) {
        try {
          _proxy.close();
          _proxy=null;
        }
 catch (        IOException ioe) {
        }
      }
    }
    _currentAttempt++;
    if (_currentAttempt > _numRetries || (_alreadyTransferred == 0 && _currentAttempt > MAX_COMPLETE_FAILS) || !_keepFetching)     break;
    _redirects=0;
    try {
      long delay=_context.random().nextInt(60 * 1000);
      Thread.sleep(5 * 1000 + delay);
    }
 catch (    InterruptedException ie) {
    }
  }
  for (int i=0; i < _listeners.size(); i++)   _listeners.get(i).transferFailed(_url,_bytesTransferred,_bytesRemaining,_currentAttempt);
  if (_log.shouldLog(Log.WARN))   _log.warn("All attempts failed for " + _url);
  return false;
}
