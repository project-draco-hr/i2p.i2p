{
  String proxyHost="127.0.0.1";
  int proxyPort=4444;
  int numRetries=5;
  int markSize=1024;
  int lineLen=40;
  long inactivityTimeout=INACTIVITY_TIMEOUT;
  String etag=null;
  String saveAs=null;
  String url=null;
  List<String> extra=null;
  String username=null;
  String password=null;
  try {
    for (int i=0; i < args.length; i++) {
      if (args[i].equals("-p")) {
        proxyHost=args[++i].substring(0,args[i].indexOf(':'));
        String port=args[i].substring(args[i].indexOf(':') + 1);
        proxyPort=Integer.parseInt(port);
      }
 else       if (args[i].equals("-n")) {
        numRetries=Integer.parseInt(args[i + 1]);
        i++;
      }
 else       if (args[i].equals("-t")) {
        inactivityTimeout=1000 * Integer.parseInt(args[i + 1]);
        i++;
      }
 else       if (args[i].equals("-e")) {
        etag="\"" + args[i + 1] + "\"";
        i++;
      }
 else       if (args[i].equals("-o")) {
        saveAs=args[i + 1];
        i++;
      }
 else       if (args[i].equals("-m")) {
        markSize=Integer.parseInt(args[++i]);
        lineLen=Integer.parseInt(args[++i]);
      }
 else       if (args[i].equals("-h")) {
        if (extra == null)         extra=new ArrayList(2);
        extra.add(args[++i]);
        extra.add(args[++i]);
      }
 else       if (args[i].equals("-u")) {
        username=args[++i];
        password=args[++i];
      }
 else       if (args[i].startsWith("-")) {
        usage();
        return;
      }
 else {
        url=args[i];
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    usage();
    return;
  }
  if (url == null) {
    usage();
    return;
  }
  if (saveAs == null)   saveAs=suggestName(url);
  EepGet get=new EepGet(I2PAppContext.getGlobalContext(),true,proxyHost,proxyPort,numRetries,saveAs,url,true,etag);
  if (extra != null) {
    for (int i=0; i < extra.size(); i+=2) {
      get.addHeader(extra.get(i),extra.get(i + 1));
    }
  }
  if (username != null && password != null)   get.addAuthorization(username,password);
  get.addStatusListener(get.new CLIStatusListener(markSize,lineLen));
  if (!get.fetch(CONNECT_TIMEOUT,-1,inactivityTimeout))   System.exit(1);
}
