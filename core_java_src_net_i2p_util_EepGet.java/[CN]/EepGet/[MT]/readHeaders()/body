{
  String key=null;
  StringBuilder buf=new StringBuilder(32);
  boolean read=DataHelper.readLine(_proxyIn,buf);
  if (!read)   throw new IOException("Unable to read the first line");
  _responseCode=handleStatus(buf.toString());
  boolean redirect=false;
  if (_log.shouldLog(Log.DEBUG))   _log.debug("rc: " + _responseCode + " for "+ _actualURL);
  boolean rcOk=false;
switch (_responseCode) {
case 200:
    if (_outputStream != null)     _out=_outputStream;
 else     _out=new FileOutputStream(_outputFile,false);
  _alreadyTransferred=0;
rcOk=true;
break;
case 206:
if (_outputStream != null) _out=_outputStream;
 else _out=new FileOutputStream(_outputFile,true);
rcOk=true;
break;
case 301:
case 302:
case 303:
case 307:
_alreadyTransferred=0;
rcOk=true;
redirect=true;
break;
case 304:
_bytesRemaining=0;
_keepFetching=false;
_notModified=true;
return;
case 401:
case 403:
case 404:
case 409:
case 503:
_transferFailed=true;
if (_alreadyTransferred > 0 || !_shouldWriteErrorToOutput) {
_keepFetching=false;
return;
}
rcOk=true;
if (_out == null) {
if (_outputStream != null) _out=_outputStream;
 else _out=new FileOutputStream(_outputFile,true);
}
break;
case 407:
_alreadyTransferred=0;
if (_authState != null) rcOk=!_authState.authSent;
 else rcOk=false;
redirect=rcOk;
_keepFetching=rcOk;
break;
case 416:
_bytesRemaining=0;
if (_alreadyTransferred > 0 || !_shouldWriteErrorToOutput) {
_keepFetching=false;
return;
}
rcOk=true;
if (_out == null) {
if (_outputStream != null) _out=_outputStream;
 else _out=new FileOutputStream(_outputFile,true);
}
break;
case 504:
if (_alreadyTransferred > 0 || (!_shouldWriteErrorToOutput) || _currentAttempt < _numRetries) {
throw new IOException("HTTP Proxy timeout");
}
rcOk=true;
if (_out == null) {
if (_outputStream != null) _out=_outputStream;
 else _out=new FileOutputStream(_outputFile,true);
}
_transferFailed=true;
break;
default :
if (_alreadyTransferred > 0 || !_shouldWriteErrorToOutput) {
_keepFetching=false;
}
 else {
rcOk=true;
if (_out == null) {
if (_outputStream != null) _out=_outputStream;
 else _out=new FileOutputStream(_outputFile,true);
}
}
_transferFailed=true;
}
_isGzippedResponse=false;
_etag=null;
_lastModified=null;
buf.setLength(0);
byte lookahead[]=new byte[3];
while (true) {
int cur=_proxyIn.read();
switch (cur) {
case -1:
throw new IOException("Headers ended too soon");
case ':':
if (key == null) {
key=buf.toString();
buf.setLength(0);
increment(lookahead,cur);
break;
}
 else {
buf.append((char)cur);
increment(lookahead,cur);
break;
}
case '\n':
case '\r':
if (key != null) handle(key,buf.toString());
buf.setLength(0);
key=null;
increment(lookahead,cur);
if (isEndOfHeaders(lookahead)) {
if (!rcOk) throw new IOException("Invalid HTTP response code: " + _responseCode + ' '+ _responseText);
if (_encodingChunked) {
_bytesRemaining=readChunkLength();
}
if (!redirect) _redirectLocation=null;
 else if (_responseCode == 407) _redirectLocation=_actualURL;
return;
}
break;
default :
buf.append((char)cur);
increment(lookahead,cur);
}
if (buf.length() > 1024) throw new IOException("Header line too long: " + buf.toString());
}
}
