{
  if (_outputStream != null) {
  }
 else {
    File outFile=new File(_outputFile);
    if (outFile.exists())     _alreadyTransferred=outFile.length();
  }
  String req=getRequest();
  if (_proxyIn != null)   try {
    _proxyIn.close();
  }
 catch (  IOException ioe) {
  }
  if (_proxyOut != null)   try {
    _proxyOut.close();
  }
 catch (  IOException ioe) {
  }
  if (_proxy != null)   try {
    _proxy.close();
  }
 catch (  IOException ioe) {
  }
  if (_shouldProxy) {
    _proxy=InternalSocket.getSocket(_proxyHost,_proxyPort);
  }
 else {
    try {
      URI url=new URI(_actualURL);
      if ("http".equals(url.getScheme())) {
        String host=url.getHost();
        String hostlc=host.toLowerCase(Locale.US);
        if (hostlc.endsWith(".i2p"))         throw new UnknownHostException("I2P addresses must be proxied");
        if (hostlc.endsWith(".onion"))         throw new UnknownHostException("Tor addresses must be proxied");
        int port=url.getPort();
        if (port == -1)         port=80;
        if (_fetchHeaderTimeout > 0) {
          _proxy=new Socket();
          _proxy.setSoTimeout(_fetchHeaderTimeout);
          _proxy.connect(new InetSocketAddress(host,port),_fetchHeaderTimeout);
        }
 else {
          _proxy=new Socket(host,port);
        }
      }
 else {
        throw new MalformedURLException("URL is not supported:" + _actualURL);
      }
    }
 catch (    URISyntaxException use) {
      IOException ioe=new MalformedURLException("Request URL is invalid");
      ioe.initCause(use);
      throw ioe;
    }
  }
  _proxyIn=_proxy.getInputStream();
  if (!(_proxy instanceof InternalSocket))   _proxyIn=new BufferedInputStream(_proxyIn);
  _proxyOut=_proxy.getOutputStream();
  if (timeout != null)   timeout.setSocket(_proxy);
  _proxyOut.write(DataHelper.getUTF8(req));
  _proxyOut.flush();
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Request flushed");
}
