{
  ZipFile zip=null;
  try {
    byte buf[]=new byte[16 * 1024];
    zip=new ZipFile(zipfile);
    Enumeration entries=zip.entries();
    while (entries.hasMoreElements()) {
      ZipEntry entry=(ZipEntry)entries.nextElement();
      if (entry.getName().indexOf("..") != -1) {
        System.err.println("ERROR: Refusing to extract a zip entry with '..' in it [" + entry.getName() + "]");
        return false;
      }
      File target=new File(targetDir,entry.getName());
      File parent=target.getParentFile();
      if ((parent != null) && (!parent.exists())) {
        boolean parentsOk=parent.mkdirs();
        if (!parentsOk) {
          System.err.println("ERROR: Unable to create the parent dir for " + entry.getName() + ": ["+ parent.getAbsolutePath()+ "]");
          return false;
        }
      }
      if (entry.isDirectory()) {
        if (!target.exists()) {
          boolean created=target.mkdirs();
          if (!created) {
            System.err.println("ERROR: Unable to create the directory [" + entry.getName() + "]");
            return false;
          }
 else {
            System.err.println("INFO: Creating directory [" + entry.getName() + "]");
          }
        }
      }
 else {
        InputStream in=null;
        FileOutputStream fos=null;
        JarOutputStream jos=null;
        try {
          in=zip.getInputStream(entry);
          if (entry.getName().endsWith(".jar.pack") || entry.getName().endsWith(".war.pack")) {
            target=new File(targetDir,entry.getName().substring(0,entry.getName().length() - ".pack".length()));
            jos=new JarOutputStream(new FileOutputStream(target));
            unpack(in,jos);
            System.err.println("INFO: File [" + entry.getName() + "] extracted and unpacked");
          }
 else {
            fos=new FileOutputStream(target);
            int read=0;
            while ((read=in.read(buf)) != -1) {
              fos.write(buf,0,read);
            }
            System.err.println("INFO: File [" + entry.getName() + "] extracted");
          }
        }
 catch (        IOException ioe) {
          System.err.println("ERROR: Error extracting the zip entry (" + entry.getName() + ')');
          if (ioe.getMessage() != null && ioe.getMessage().indexOf("CAFED00D") >= 0)           System.err.println("This may be caused by a packed library that requires Java 1.6, your Java version is: " + System.getProperty("java.version"));
          ioe.printStackTrace();
          return false;
        }
catch (        Exception e) {
          System.err.println("ERROR: Error extracting the zip entry (" + entry.getName() + ')');
          e.printStackTrace();
          return false;
        }
 finally {
          try {
            if (in != null)             in.close();
          }
 catch (          IOException ioe) {
          }
          try {
            if (fos != null)             fos.close();
          }
 catch (          IOException ioe) {
          }
          try {
            if (jos != null)             jos.close();
          }
 catch (          IOException ioe) {
          }
        }
      }
    }
    return true;
  }
 catch (  IOException ioe) {
    System.err.println("ERROR: Unable to extract the zip file");
    ioe.printStackTrace();
    return false;
  }
 finally {
    if (zip != null) {
      try {
        zip.close();
      }
 catch (      IOException ioe) {
      }
    }
  }
}
