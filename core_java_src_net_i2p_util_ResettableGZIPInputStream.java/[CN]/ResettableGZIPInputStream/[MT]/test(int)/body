{
  byte b[]=new byte[size];
  new java.util.Random().nextBytes(b);
  try {
    java.io.ByteArrayOutputStream baos=new java.io.ByteArrayOutputStream(size);
    java.util.zip.GZIPOutputStream o=new java.util.zip.GZIPOutputStream(baos);
    o.write(b);
    o.finish();
    o.flush();
    byte compressed[]=baos.toByteArray();
    ResettableGZIPInputStream in=new ResettableGZIPInputStream(new ByteArrayInputStream(compressed));
    java.io.ByteArrayOutputStream baos2=new java.io.ByteArrayOutputStream(size);
    byte rbuf[]=new byte[512];
    while (true) {
      int read=in.read(rbuf);
      if (read == -1)       break;
      baos2.write(rbuf,0,read);
    }
    byte rv[]=baos2.toByteArray();
    if (rv.length != b.length)     throw new RuntimeException("read length: " + rv.length + " expected: "+ b.length);
    if (!net.i2p.data.DataHelper.eq(rv,0,b,0,b.length)) {
      throw new RuntimeException("foo, read=" + rv.length);
    }
 else {
      System.out.println("match, w00t @ " + size);
      return true;
    }
  }
 catch (  Exception e) {
    System.out.println("Error dealing with size=" + size + ": "+ e.getMessage());
    e.printStackTrace();
    return false;
  }
}
