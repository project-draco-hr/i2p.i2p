{
  byte b[]=new byte[size];
  new java.util.Random().nextBytes(b);
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream(size);
    GZIPOutputStream o=new GZIPOutputStream(baos);
    o.write(b);
    o.finish();
    o.flush();
    byte compressed[]=baos.toByteArray();
    ReusableGZIPInputStream in=ReusableGZIPInputStream.acquire();
    in.initialize(new ByteArrayInputStream(compressed));
    ByteArrayOutputStream baos2=new ByteArrayOutputStream(size);
    byte rbuf[]=new byte[128];
    try {
      while (true) {
        int read=in.read(rbuf);
        if (read == -1)         break;
        baos2.write(rbuf,0,read);
      }
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
      long crcVal=in.getCurrentCRCVal();
      throw ioe;
    }
catch (    RuntimeException re) {
      re.printStackTrace();
      throw re;
    }
    ReusableGZIPInputStream.release(in);
    byte rv[]=baos2.toByteArray();
    if (rv.length != b.length)     throw new RuntimeException("read length: " + rv.length + " expected: "+ b.length);
    if (!DataHelper.eq(rv,0,b,0,b.length)) {
      throw new RuntimeException("foo, read=" + rv.length);
    }
 else {
      System.out.println("match, w00t");
      return true;
    }
  }
 catch (  Exception e) {
    System.out.println("Error dealing with size=" + size + ": "+ e.getMessage());
    e.printStackTrace();
    return false;
  }
}
