{
  byte b[]=new byte[size];
  new java.util.Random().nextBytes(b);
  try {
    ReusableGZIPOutputStream o=ReusableGZIPOutputStream.acquire();
    o.write(b);
    o.finish();
    o.flush();
    byte compressed[]=o.getData();
    ReusableGZIPOutputStream.release(o);
    GZIPInputStream in=new GZIPInputStream(new ByteArrayInputStream(compressed));
    ByteArrayOutputStream baos2=new ByteArrayOutputStream(256 * 1024);
    byte rbuf[]=new byte[128];
    while (true) {
      int read=in.read(rbuf);
      if (read == -1)       break;
      baos2.write(rbuf,0,read);
    }
    byte rv[]=baos2.toByteArray();
    if (!DataHelper.eq(rv,0,b,0,b.length)) {
      throw new RuntimeException("foo, read=" + rv.length);
    }
 else {
      System.out.println("match, w00t @ " + size);
      return true;
    }
  }
 catch (  Exception e) {
    System.out.println("Error on size=" + size + ": "+ e.getMessage());
    e.printStackTrace();
    return false;
  }
}
