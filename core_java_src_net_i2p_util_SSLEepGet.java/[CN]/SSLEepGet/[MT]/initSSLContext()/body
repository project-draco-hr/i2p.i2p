{
  KeyStore ks=KeyStoreUtil.loadSystemKeyStore();
  if (ks == null) {
    _log.error("Key Store init error");
    return null;
  }
  if (_log.shouldLog(Log.INFO)) {
    int count=KeyStoreUtil.countCerts(ks);
    _log.info("Loaded " + count + " default trusted certificates");
  }
  File dir=new File(_context.getBaseDir(),CERT_DIR);
  int adds=KeyStoreUtil.addCerts(dir,ks);
  int totalAdds=adds;
  if (adds > 0 && _log.shouldLog(Log.INFO))   _log.info("Loaded " + adds + " trusted certificates from "+ dir.getAbsolutePath());
  if (!_context.getBaseDir().getAbsolutePath().equals(_context.getConfigDir().getAbsolutePath())) {
    dir=new File(_context.getConfigDir(),CERT_DIR);
    adds=KeyStoreUtil.addCerts(dir,ks);
    totalAdds+=adds;
    if (adds > 0 && _log.shouldLog(Log.INFO))     _log.info("Loaded " + adds + " trusted certificates from "+ dir.getAbsolutePath());
  }
  dir=new File(System.getProperty("user.dir"));
  if (!_context.getBaseDir().getAbsolutePath().equals(dir.getAbsolutePath())) {
    dir=new File(_context.getConfigDir(),CERT_DIR);
    adds=KeyStoreUtil.addCerts(dir,ks);
    totalAdds+=adds;
    if (adds > 0 && _log.shouldLog(Log.INFO))     _log.info("Loaded " + adds + " trusted certificates from "+ dir.getAbsolutePath());
  }
  if (_log.shouldLog(Log.INFO))   _log.info("Loaded total of " + totalAdds + " new trusted certificates");
  try {
    SSLContext sslc=SSLContext.getInstance("TLS");
    TrustManagerFactory tmf=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
    tmf.init(ks);
    X509TrustManager defaultTrustManager=(X509TrustManager)tmf.getTrustManagers()[0];
    _stm=new SavingTrustManager(defaultTrustManager);
    sslc.init(null,new TrustManager[]{_stm},null);
    if (_log.shouldLog(Log.DEBUG)) {
      SSLEngine eng=sslc.createSSLEngine();
      SSLParameters params=sslc.getDefaultSSLParameters();
      String[] s=eng.getSupportedProtocols();
      Arrays.sort(s);
      _log.debug("Supported protocols: " + s.length);
      for (int i=0; i < s.length; i++) {
        _log.debug(s[i]);
      }
      s=eng.getEnabledProtocols();
      Arrays.sort(s);
      _log.debug("Enabled protocols: " + s.length);
      for (int i=0; i < s.length; i++) {
        _log.debug(s[i]);
      }
      s=params.getProtocols();
      if (s == null)       s=new String[0];
      _log.debug("Default protocols: " + s.length);
      Arrays.sort(s);
      for (int i=0; i < s.length; i++) {
        _log.debug(s[i]);
      }
      s=eng.getSupportedCipherSuites();
      Arrays.sort(s);
      _log.debug("Supported ciphers: " + s.length);
      for (int i=0; i < s.length; i++) {
        _log.debug(s[i]);
      }
      s=eng.getEnabledCipherSuites();
      Arrays.sort(s);
      _log.debug("Enabled ciphers: " + s.length);
      for (int i=0; i < s.length; i++) {
        _log.debug(s[i]);
      }
      s=params.getCipherSuites();
      if (s == null)       s=new String[0];
      _log.debug("Default ciphers: " + s.length);
      Arrays.sort(s);
      for (int i=0; i < s.length; i++) {
        _log.debug(s[i]);
      }
    }
    return sslc;
  }
 catch (  GeneralSecurityException gse) {
    _log.error("Key Store update error",gse);
  }
  return null;
}
