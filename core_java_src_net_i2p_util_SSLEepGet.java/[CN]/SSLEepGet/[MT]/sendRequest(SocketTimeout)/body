{
  if (_outputStream != null) {
  }
 else {
    File outFile=new File(_outputFile);
    if (outFile.exists())     _alreadyTransferred=outFile.length();
  }
  String req=getRequest();
  URL url=new URL(_actualURL);
  String host=null;
  int port=0;
  if ("https".equals(url.getProtocol())) {
    host=url.getHost();
    if (host.toLowerCase(Locale.US).endsWith(".i2p"))     throw new MalformedURLException("I2P addresses unsupported");
    port=url.getPort();
    if (port == -1)     port=443;
    if (_sslContext != null)     _proxy=_sslContext.getSocketFactory().createSocket();
 else     _proxy=SSLSocketFactory.getDefault().createSocket();
    if (_fetchHeaderTimeout > 0) {
      _proxy.setSoTimeout(_fetchHeaderTimeout);
      _proxy.connect(new InetSocketAddress(host,port),_fetchHeaderTimeout);
    }
 else {
      _proxy.connect(new InetSocketAddress(host,port));
    }
    SSLSocket socket=(SSLSocket)_proxy;
    I2PSSLSocketFactory.setProtocolsAndCiphers(socket);
  }
 else {
    throw new MalformedURLException("Only https supported: " + _actualURL);
  }
  _proxyIn=_proxy.getInputStream();
  _proxyOut=_proxy.getOutputStream();
  try {
    _proxyOut.write(DataHelper.getUTF8(req));
    _proxyOut.flush();
  }
 catch (  SSLHandshakeException sslhe) {
    _log.error("SSL negotiation error with " + host + ':'+ port+ " - self-signed certificate or untrusted certificate authority?",sslhe);
    if (_saveCerts && _stm != null)     saveCerts(host,_stm);
 else     if (_commandLine) {
      System.out.println("FAILED (probably due to untrusted certificates) - Run with -s option to save certificates");
    }
    throw sslhe;
  }
  _proxyIn=new BufferedInputStream(_proxyIn);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Request flushed");
}
