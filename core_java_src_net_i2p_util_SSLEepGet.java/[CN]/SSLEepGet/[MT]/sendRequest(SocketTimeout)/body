{
  if (_outputStream != null) {
  }
 else {
    File outFile=new File(_outputFile);
    if (outFile.exists())     _alreadyTransferred=outFile.length();
  }
  String req=getRequest();
  String host;
  int port;
  try {
    URI url=new URI(_actualURL);
    if ("https".equals(url.getScheme())) {
      host=url.getHost();
      if (host.toLowerCase(Locale.US).endsWith(".i2p"))       throw new MalformedURLException("I2P addresses unsupported");
      port=url.getPort();
      if (port == -1)       port=443;
      if (_sslContext != null)       _proxy=_sslContext.getSocketFactory().createSocket(host,port);
 else       _proxy=SSLSocketFactory.getDefault().createSocket(host,port);
      if (_fetchHeaderTimeout > 0) {
        _proxy.setSoTimeout(_fetchHeaderTimeout);
      }
      SSLSocket socket=(SSLSocket)_proxy;
      I2PSSLSocketFactory.setProtocolsAndCiphers(socket);
      if (!_bypassVerification) {
        try {
          I2PSSLSocketFactory.verifyHostname(_context,socket,host);
        }
 catch (        SSLException ssle) {
          if (_saveCerts > 0 && _stm != null)           saveCerts(host,_stm);
          throw ssle;
        }
      }
    }
 else {
      throw new MalformedURLException("Only https supported: " + _actualURL);
    }
  }
 catch (  URISyntaxException use) {
    IOException ioe=new MalformedURLException("Redirected to invalid URL");
    ioe.initCause(use);
    throw ioe;
  }
  _proxyIn=_proxy.getInputStream();
  _proxyOut=_proxy.getOutputStream();
  try {
    _proxyOut.write(DataHelper.getUTF8(req));
    _proxyOut.flush();
    if (_saveCerts > 1 && _stm != null)     saveCerts(host,_stm);
  }
 catch (  SSLException sslhe) {
    _log.error("SSL negotiation error with " + host + ':'+ port+ " - self-signed certificate or untrusted certificate authority?",sslhe);
    if (_saveCerts > 0 && _stm != null)     saveCerts(host,_stm);
 else     if (_commandLine) {
      System.out.println("FAILED (probably due to untrusted certificates) - Run with -s option to save certificates");
    }
    throw sslhe;
  }
  _proxyIn=new BufferedInputStream(_proxyIn);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Request flushed");
}
