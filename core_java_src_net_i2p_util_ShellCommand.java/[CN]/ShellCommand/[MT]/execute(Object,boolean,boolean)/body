{
  StreamConsumer processStderrConsumer;
  StreamConsumer processStdoutConsumer;
  StreamReader processStderrReader;
  StreamWriter processStdinWriter;
  StreamReader processStdoutReader;
  try {
    if (shellCommand instanceof String)     _process=Runtime.getRuntime().exec((String)shellCommand);
 else     if (shellCommand instanceof String[])     _process=Runtime.getRuntime().exec((String[])shellCommand);
 else     throw new ClassCastException("shell command must be a String or a String[]");
    if (consumeOutput) {
      processStderrConsumer=new StreamConsumer(_process.getErrorStream());
      processStderrConsumer.start();
      processStdoutConsumer=new StreamConsumer(_process.getInputStream());
      processStdoutConsumer.start();
    }
 else {
      _errorStream=_process.getErrorStream();
      _inputStream=_process.getInputStream();
      _outputStream=_process.getOutputStream();
      processStderrReader=new StreamReader(_errorStream);
      processStderrReader.start();
      processStdinWriter=new StreamWriter(_outputStream);
      processStdinWriter.start();
      processStdoutReader=new StreamReader(_inputStream);
      processStdoutReader.start();
    }
    if (waitForExitStatus) {
      try {
        _process.waitFor();
      }
 catch (      Exception e) {
        if (!consumeOutput)         killStreams();
        return false;
      }
      if (!consumeOutput)       killStreams();
      if (_process.exitValue() > 0)       return false;
    }
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}
