{
  if (log.shouldLog(Log.INFO)) {
    log.info("magic bytes " + magicBytes);
    log.info("fileLen " + fileLen);
    log.info("freeListStart " + freeListStart);
    log.info("mounted " + mounted);
    log.info("spanSize " + spanSize);
    log.info("Metaindex");
    log.info("Checking meta index in blockfile " + file);
  }
  boolean rv=metaIndex.bslck(fix,true);
  if (rv) {
    if (log.shouldLog(Log.WARN))     log.warn("Repaired meta index in blockfile " + file);
  }
 else {
    if (log.shouldLog(Log.INFO))     log.info("No errors in meta index in blockfile " + file);
  }
  int items=0;
  for (SkipIterator iter=metaIndex.iterator(); iter.hasNext(); ) {
    String slname=(String)iter.nextKey();
    Integer page=(Integer)iter.next();
    if (log.shouldLog(Log.INFO))     log.info("List " + slname + " page "+ page);
    try {
      boolean fail;
      if (slname.equals("%%__REVERSE__%%")) {
        Serializer<Integer> keyser=new IntBytes();
        fail=getIndex(slname,keyser,new IdentityBytes()) == null;
      }
 else {
        Serializer<String> keyser=new UTF8StringBytes();
        fail=getIndex(slname,keyser,new IdentityBytes()) == null;
      }
      if (fail) {
        log.error("Can't find list? " + slname);
        continue;
      }
      items++;
    }
 catch (    IOException ioe) {
      log.error("Error with list " + slname,ioe);
    }
  }
  log.info("Checked meta index and " + items + " skiplists");
  if (freeListStart != 0) {
    try {
      if (flb == null)       flb=new FreeListBlock(file,freeListStart);
      flb.flbck(true);
    }
 catch (    IOException ioe) {
      log.error("Free list error",ioe);
    }
  }
 else {
    if (log.shouldLog(Log.INFO))     log.info("No freelist");
  }
  return rv;
}
