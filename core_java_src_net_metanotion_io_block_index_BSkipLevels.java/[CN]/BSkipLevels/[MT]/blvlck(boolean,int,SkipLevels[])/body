{
  bf.log.warn("    Skip level at width " + width);
  bf.log.warn("        levels " + this.levels.length);
  bf.log.warn("        first key " + this.key());
  bf.log.warn("        spanPage " + this.spanPage);
  bf.log.warn("        levelPage " + this.levelPage);
  SkipLevels higher=null;
  for (int i=levels.length - 1; i >= 0; i--) {
    if (levels[i] != null) {
      bf.log.info("                level " + i + " -> "+ levels[i].key()+ " ");
      if (higher != null) {
        if (higher.key().compareTo(key()) < 0)         bf.log.warn("                Higher level has lower key " + higher.key());
      }
    }
 else {
      bf.log.info("                level " + i + " empty");
      if (higher != null)       bf.log.warn("                Higher level is not empty, key is " + higher.key());
    }
  }
  if (prevLevels != null) {
    int min=Math.min(prevLevels.length,levels.length);
    for (int i=0; i < min; i++) {
      if (prevLevels[i] == this) {
        prevLevels[i]=levels[i];
      }
 else       if (prevLevels[i] != null) {
        bf.log.warn("                Previous levels is non-null " + prevLevels[i].key() + " but not pointing to us at level "+ i);
        prevLevels[i]=levels[i];
      }
 else {
        if (levels[i] != null) {
          bf.log.warn("                Previous levels is null but we are non-null " + levels[i].key() + " at level "+ i);
          prevLevels[i]=levels[i];
        }
      }
    }
  }
 else {
    prevLevels=new SkipLevels[levels.length];
    System.arraycopy(levels,0,prevLevels,0,levels.length);
  }
  if (levels[0] != null)   levels[0].blvlck(fix,width + 1,prevLevels);
  return false;
}
