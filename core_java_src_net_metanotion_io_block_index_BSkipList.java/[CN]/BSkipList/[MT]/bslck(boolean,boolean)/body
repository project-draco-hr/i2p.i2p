{
  BlockFile.log.warn("    size " + this.size);
  BlockFile.log.warn("    spans " + this.spanHash.size());
  BlockFile.log.warn("    levels " + this.levelHash.size());
  BlockFile.log.warn("    skipPage " + this.skipPage);
  BlockFile.log.warn("    firstSpanPage " + this.firstSpanPage);
  BlockFile.log.warn("    firstLevelPage " + this.firstLevelPage);
  BlockFile.log.warn("    maxLevels " + this.maxLevels());
  printSL();
  print();
  BlockFile.log.warn("*** Lvlck() ***");
  stack.blvlck(fix,0);
  int items=0;
  for (SkipIterator iter=this.iterator(); iter.hasNext(); ) {
    String key=(String)iter.nextKey();
    if (isMeta) {
      int sz=((Integer)iter.next()).intValue();
      BlockFile.log.warn("        Item " + key + " page "+ sz);
    }
 else {
      String cls=iter.next().getClass().getSimpleName();
      BlockFile.log.warn("        Item " + key + " class "+ cls);
    }
    items++;
  }
  BlockFile.log.warn("    actual size " + items);
  if (items != this.size)   BlockFile.log.warn("****** size mismatch, header = " + this.size + " actual = "+ items);
}
