{
  this.bf=bf;
  this.bsl=bsl;
  BSkipSpan.load(this,bf,bsl,spanPage,key,val);
  this.next=null;
  this.prev=null;
  BSkipSpan<K,V> bss=this;
  int np=nextPage;
  while (np != 0) {
    BSkipSpan<K,V> temp=bsl.spanHash.get(Integer.valueOf(np));
    if (temp != null) {
      bss.next=temp;
      break;
    }
    bss.next=new BSkipSpan<K,V>(bf,bsl);
    bss.next.next=null;
    bss.next.prev=bss;
    bss=(BSkipSpan<K,V>)bss.next;
    BSkipSpan.load(bss,bf,bsl,np,key,val);
    np=bss.nextPage;
  }
  bss=this;
  np=prevPage;
  while (np != 0) {
    BSkipSpan<K,V> temp=bsl.spanHash.get(Integer.valueOf(np));
    if (temp != null) {
      bss.prev=temp;
      break;
    }
    bss.prev=new BSkipSpan<K,V>(bf,bsl);
    bss.prev.next=bss;
    bss.prev.prev=null;
    bss=(BSkipSpan<K,V>)bss.prev;
    BSkipSpan.load(bss,bf,bsl,np,key,val);
    np=bss.prevPage;
  }
}
