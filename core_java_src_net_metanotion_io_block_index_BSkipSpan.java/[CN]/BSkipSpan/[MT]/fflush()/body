{
  if (isKilled) {
    BlockFile.log.error("Already killed!! " + this,new Exception());
    return;
  }
  try {
    BlockFile.pageSeek(bf.file,page);
    bf.file.writeInt(MAGIC);
    bf.file.writeInt(overflowPage);
    prevPage=(prev != null) ? ((BSkipSpan)prev).page : 0;
    nextPage=(next != null) ? ((BSkipSpan)next).page : 0;
    bf.file.writeInt(prevPage);
    bf.file.writeInt(nextPage);
    if (keys == null)     return;
    bf.file.writeShort((short)keys.length);
    bf.file.writeShort((short)nKeys);
    int ksz, vsz;
    int curPage=this.page;
    int[] curNextPage=new int[1];
    curNextPage[0]=this.overflowPage;
    int[] pageCounter=new int[1];
    pageCounter[0]=HEADER_LEN;
    byte[] keyData;
    byte[] valData;
    for (int i=0; i < nKeys; i++) {
      if ((pageCounter[0] + 4) > BlockFile.PAGESIZE) {
        if (curNextPage[0] == 0) {
          curNextPage[0]=bf.allocPage();
          BlockFile.pageSeek(bf.file,curNextPage[0]);
          bf.file.writeInt(BlockFile.MAGIC_CONT);
          bf.file.writeInt(0);
          BlockFile.pageSeek(bf.file,curPage);
          bf.file.skipBytes(4);
          bf.file.writeInt(curNextPage[0]);
        }
        BlockFile.pageSeek(bf.file,curNextPage[0]);
        curPage=curNextPage[0];
        bf.file.skipBytes(4);
        curNextPage[0]=bf.file.readUnsignedInt();
        pageCounter[0]=CONT_HEADER_LEN;
      }
      if (keys[i] == null || vals[i] == null) {
        BlockFile.log.error("Dropping null data in entry " + i + " page "+ curPage+ " key="+ this.keys[i]+ " val="+ this.vals[i]);
        nKeys--;
        i--;
        continue;
      }
      keyData=this.keySer.getBytes(keys[i]);
      valData=this.valSer.getBytes(vals[i]);
      if (keyData.length > 65535 || valData.length > 65535) {
        BlockFile.log.error("Dropping huge data in entry " + i + " page "+ curPage+ " keylen="+ keyData.length+ " vallen="+ valData.length);
        nKeys--;
        i--;
        continue;
      }
      pageCounter[0]+=4;
      bf.file.writeShort(keyData.length);
      bf.file.writeShort(valData.length);
      curPage=bf.writeMultiPageData(keyData,curPage,pageCounter,curNextPage);
      curPage=bf.writeMultiPageData(valData,curPage,pageCounter,curNextPage);
    }
    BlockFile.pageSeek(bf.file,this.page);
    bf.file.skipBytes(4);
    this.overflowPage=bf.file.readUnsignedInt();
  }
 catch (  IOException ioe) {
    throw new RuntimeException("Error writing to database",ioe);
  }
}
