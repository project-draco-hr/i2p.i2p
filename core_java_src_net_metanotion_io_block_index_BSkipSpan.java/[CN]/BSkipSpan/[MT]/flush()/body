{
  try {
    BlockFile.pageSeek(bf.file,page);
    bf.file.writeInt(overflowPage);
    bf.file.writeInt((prev != null) ? ((BSkipSpan)prev).page : 0);
    bf.file.writeInt((next != null) ? ((BSkipSpan)next).page : 0);
    bf.file.writeShort((short)keys.length);
    bf.file.writeShort((short)nKeys);
    int ksz, vsz;
    int curPage=this.page;
    int[] curNextPage=new int[1];
    curNextPage[0]=this.overflowPage;
    int[] pageCounter=new int[1];
    pageCounter[0]=16;
    byte[] keyData;
    byte[] valData;
    for (int i=0; i < nKeys; i++) {
      if ((pageCounter[0] + 4) > BlockFile.PAGESIZE) {
        if (curNextPage[0] == 0) {
          curNextPage[0]=bf.allocPage();
          BlockFile.pageSeek(bf.file,curNextPage[0]);
          bf.file.writeInt(0);
          BlockFile.pageSeek(bf.file,curPage);
          bf.file.writeInt(curNextPage[0]);
        }
        BlockFile.pageSeek(bf.file,curNextPage[0]);
        curPage=curNextPage[0];
        curNextPage[0]=bf.file.readInt();
        pageCounter[0]=4;
      }
      keyData=this.keySer.getBytes(keys[i]);
      valData=this.valSer.getBytes(vals[i]);
      pageCounter[0]+=4;
      bf.file.writeShort(keyData.length);
      bf.file.writeShort(valData.length);
      curPage=bf.writeMultiPageData(keyData,curPage,pageCounter,curNextPage);
      curPage=bf.writeMultiPageData(valData,curPage,pageCounter,curNextPage);
    }
    BlockFile.pageSeek(bf.file,this.page);
    this.overflowPage=bf.file.readInt();
  }
 catch (  IOException ioe) {
    throw new Error();
  }
}
