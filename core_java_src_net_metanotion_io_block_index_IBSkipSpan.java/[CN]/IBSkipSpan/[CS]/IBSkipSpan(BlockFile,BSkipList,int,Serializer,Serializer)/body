{
  super(bf,bsl);
  if (bf.log.shouldLog(Log.DEBUG))   bf.log.debug("New ibss page " + spanPage);
  BSkipSpan.loadInit(this,bf,bsl,spanPage,key,val);
  loadFirstKey();
  this.next=null;
  this.prev=null;
  IBSkipSpan bss=this;
  IBSkipSpan temp;
  int np=nextPage;
  while (np != 0) {
    temp=(IBSkipSpan)bsl.spanHash.get(Integer.valueOf(np));
    if (temp != null) {
      bss.next=temp;
      break;
    }
    bss.next=new IBSkipSpan(bf,bsl);
    bss.next.next=null;
    bss.next.prev=bss;
    Comparable previousFirstKey=bss.firstKey;
    bss=(IBSkipSpan)bss.next;
    BSkipSpan.loadInit(bss,bf,bsl,np,key,val);
    bss.loadFirstKey();
    Comparable nextFirstKey=bss.firstKey;
    if (previousFirstKey == null || nextFirstKey == null || previousFirstKey.compareTo(nextFirstKey) >= 0) {
      bf.log.error("Corrupt database, span out of order " + ((BSkipSpan)bss.prev).page + " first key "+ previousFirstKey+ " next page "+ bss.page+ " first key "+ nextFirstKey);
    }
    np=bss.nextPage;
  }
  bss=this;
  np=prevPage;
  while (np != 0) {
    temp=(IBSkipSpan)bsl.spanHash.get(Integer.valueOf(np));
    if (temp != null) {
      bss.prev=temp;
      break;
    }
    bss.prev=new IBSkipSpan(bf,bsl);
    bss.prev.next=bss;
    bss.prev.prev=null;
    Comparable nextFirstKey=bss.firstKey;
    bss=(IBSkipSpan)bss.prev;
    BSkipSpan.loadInit(bss,bf,bsl,np,key,val);
    bss.loadFirstKey();
    Comparable previousFirstKey=bss.firstKey;
    if (previousFirstKey == null || nextFirstKey == null || previousFirstKey.compareTo(nextFirstKey) >= 0) {
      bf.log.error("Corrupt database, span out of order " + bss.page + " first key "+ previousFirstKey+ " next page "+ ((BSkipSpan)bss.next).page+ " first key "+ nextFirstKey);
    }
    np=bss.prevPage;
  }
}
