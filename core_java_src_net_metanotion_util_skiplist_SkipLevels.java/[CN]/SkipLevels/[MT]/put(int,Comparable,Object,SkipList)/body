{
  boolean modified=false;
  for (int i=Math.min(start,levels.length - 1); i >= 0; i--) {
    if ((levels[i] != null) && (levels[i].key().compareTo(key) <= 0)) {
      SkipLevels slvls=levels[i].put(i,key,val,sl);
      if (slvls != null) {
        for (int j=i + 1; j < Math.min(slvls.levels.length,levels.length); j++) {
          slvls.levels[j]=levels[j];
          levels[j]=slvls;
          modified=true;
        }
        if (levels.length < slvls.levels.length) {
          if (modified) {
            this.flush();
            slvls.flush();
          }
          return slvls;
        }
      }
      if (modified)       this.flush();
      return null;
    }
  }
  SkipSpan ss=bottom.put(key,val,sl);
  if (ss != null) {
    int height=sl.generateColHeight();
    if (height != 0) {
      SkipLevels slvls=this.newInstance(height,ss,sl);
      for (int i=0; i < (Math.min(height,levels.length)); i++) {
        slvls.levels[i]=levels[i];
        levels[i]=slvls;
        modified=true;
      }
      if (modified) {
        this.flush();
        slvls.flush();
      }
      if (levels.length < height)       return slvls;
    }
    sl.addSpan(height != 0);
  }
  return null;
}
