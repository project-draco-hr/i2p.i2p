{
  Object[] res=null;
  SkipLevels slvls=null;
  for (int i=Math.min(start,levels.length - 1); i >= 0; i--) {
    if (levels[i] != null) {
      int cmp=levels[i].key().compareTo(key);
      if ((cmp < 0) || ((i == 0) && (cmp <= 0))) {
        res=levels[i].remove(i,key,sl);
        if ((res != null) && (res[1] != null)) {
          slvls=(SkipLevels)res[1];
          if (levels.length >= slvls.levels.length) {
            res[1]=null;
          }
          for (int j=0; j < Math.min(slvls.levels.length,levels.length); j++) {
            if (levels[j] == slvls) {
              levels[j]=slvls.levels[j];
            }
          }
          this.flush();
        }
        return res;
      }
    }
  }
  res=bottom.remove(key,sl);
  if ((res != null) && (res[1] != null)) {
    if (res[1] == bottom) {
      res[1]=this;
    }
 else {
      boolean isFirst=sl.first == bottom;
      if (isFirst && levels[0] != null) {
        SkipSpan ssres=(SkipSpan)res[1];
        if (bottom.firstKey().equals(ssres.firstKey())) {
          if (_log.shouldLog(Log.INFO)) {
            _log.info("First Level, bottom.remove() copied and did not return itself!!!! in remove " + key);
            _log.info("Us:     " + print());
            _log.info("next:   " + levels[0].print());
            _log.info("ssres.firstKey():   " + ssres.firstKey());
            _log.info("ssres.keys[0]:   " + ssres.keys[0]);
            _log.info("FIXUP TIME");
          }
          SkipLevels replace=levels[0];
          for (int i=0; i < levels.length; i++) {
            if (levels[i] == null)             break;
            if (i >= replace.levels.length)             break;
            if (levels[i].key().equals(replace.key())) {
              if (_log.shouldLog(Log.INFO))               _log.info("equal level " + i);
              levels[i]=replace.levels[i];
            }
 else             if (_log.shouldLog(Log.INFO)) {
              _log.info("not equal level " + i + ' '+ levels[i].key());
            }
          }
          this.flush();
          if (_log.shouldLog(Log.INFO))           _log.info("new Us: " + print());
          replace.killInstance();
        }
      }
      res[1]=null;
    }
  }
  if ((bottom.nKeys == 0) && (sl.first != bottom)) {
    if (res == null) {
      _log.warn("WTF killing with no return value " + print());
    }
 else     if (res[1] == null) {
      _log.warn("WTF killing with no return value 1 " + print());
    }
 else     if (res[1] != this) {
      _log.warn("WTF killing with return value not us " + res[1] + ' '+ print());
    }
    this.killInstance();
  }
  return res;
}
