{
  digest.reset();
  if (key.length > BLOCK_LENGTH) {
    digest.update(key,0,key.length);
    try {
      digest.digest(inputPad,0,digestSize);
    }
 catch (    DigestException de) {
      digest.reset();
      throw new IllegalArgumentException(de);
    }
    for (int i=digestSize; i < inputPad.length; i++) {
      inputPad[i]=0;
    }
  }
 else {
    System.arraycopy(key,0,inputPad,0,key.length);
    for (int i=key.length; i < inputPad.length; i++) {
      inputPad[i]=0;
    }
  }
  System.arraycopy(inputPad,0,outputPad,0,inputPad.length);
  for (int i=0; i < inputPad.length; i++) {
    inputPad[i]^=IPAD;
  }
  for (int i=0; i < outputPad.length; i++) {
    outputPad[i]^=OPAD;
  }
  digest.update(inputPad,0,inputPad.length);
}
