{
  int times=100;
  long keygentime=0;
  long encrypttime=0;
  long decrypttime=0;
  long maxKey=0;
  long minKey=0;
  long maxE=0;
  long minE=0;
  long maxD=0;
  long minD=0;
  Object[] keys=KeyGenerator.getInstance().generatePKIKeypair();
  byte[] message=new byte[222];
  for (int i=0; i < message.length; i++)   message[i]=(byte)((i % 26) + 'a');
  for (int x=0; x < times; x++) {
    long startkeys=System.currentTimeMillis();
    keys=KeyGenerator.getInstance().generatePKIKeypair();
    PublicKey pubkey=(PublicKey)keys[0];
    PrivateKey privkey=(PrivateKey)keys[1];
    long endkeys=System.currentTimeMillis();
    long startencrypt=System.currentTimeMillis();
    byte[] e=_context.elGamalEngine().encrypt(message,pubkey);
    long endencryptstartdecrypt=System.currentTimeMillis();
    byte[] d=_context.elGamalEngine().decrypt(e,privkey);
    long enddecrypt=System.currentTimeMillis();
    System.out.print(".");
    keygentime+=endkeys - startkeys;
    encrypttime+=endencryptstartdecrypt - startencrypt;
    decrypttime+=enddecrypt - endencryptstartdecrypt;
    if (!DataHelper.eq(d,message)) {
      System.out.println("Lengths: source [" + message.length + "] dest ["+ d.length+ "]");
      byte hash1[]=SHA256Generator.getInstance().calculateHash(message).getData();
      byte hash2[]=SHA256Generator.getInstance().calculateHash(d).getData();
      System.out.println("Hashes: source [" + DataHelper.toString(hash1,hash1.length) + "] dest ["+ DataHelper.toString(hash2,hash2.length)+ "]");
      throw new RuntimeException("Holy crap, decrypted != source message");
    }
    if ((minKey == 0) && (minE == 0) && (minD == 0)) {
      minKey=endkeys - startkeys;
      maxKey=endkeys - startkeys;
      minE=endencryptstartdecrypt - startencrypt;
      maxE=endencryptstartdecrypt - startencrypt;
      minD=enddecrypt - endencryptstartdecrypt;
      maxD=enddecrypt - endencryptstartdecrypt;
    }
 else {
      if (minKey > endkeys - startkeys)       minKey=endkeys - startkeys;
      if (maxKey < endkeys - startkeys)       maxKey=endkeys - startkeys;
      if (minE > endencryptstartdecrypt - startencrypt)       minE=endencryptstartdecrypt - startencrypt;
      if (maxE < endencryptstartdecrypt - startencrypt)       maxE=endencryptstartdecrypt - startencrypt;
      if (minD > enddecrypt - endencryptstartdecrypt)       minD=enddecrypt - endencryptstartdecrypt;
      if (maxD < enddecrypt - endencryptstartdecrypt)       maxD=enddecrypt - endencryptstartdecrypt;
    }
  }
  System.out.println();
  System.out.println("Key Generation Time Average: " + (keygentime / times) + "\ttotal: "+ keygentime+ "\tmin: "+ minKey+ "\tmax: "+ maxKey+ "\tKeygen/second: "+ (keygentime == 0 ? "NaN" : "" + (times * 1000) / keygentime));
  System.out.println("Encryption Time Average    : " + (encrypttime / times) + "\ttotal: "+ encrypttime+ "\tmin: "+ minE+ "\tmax: "+ maxE+ "\tEncryption Bps: "+ (times * message.length * 1000) / encrypttime);
  System.out.println("Decryption Time Average    : " + (decrypttime / times) + "\ttotal: "+ decrypttime+ "\tmin: "+ minD+ "\tmax: "+ maxD+ "\tDecryption Bps: "+ (times * message.length * 1000) / decrypttime);
}
