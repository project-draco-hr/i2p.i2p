{
  RandomSource.getInstance().nextBoolean();
  byte src[]=new byte[200];
  RandomSource.getInstance().nextBytes(src);
  I2PAppContext ctx=new I2PAppContext();
  for (int i=0; i < 10; i++) {
    Object keys[]=KeyGenerator.getInstance().generatePKIKeypair();
    byte ctext[]=ctx.elGamalEngine().encrypt(src,(PublicKey)keys[0]);
    byte ptext[]=ctx.elGamalEngine().decrypt(ctext,(PrivateKey)keys[1]);
    assertTrue(DataHelper.eq(ptext,src));
  }
  Object obj[]=KeyGenerator.getInstance().generateSigningKeypair();
  SigningPublicKey fake=(SigningPublicKey)obj[0];
  for (int i=0; i < 10; i++) {
    Object keys[]=KeyGenerator.getInstance().generateSigningKeypair();
    Signature sig=DSAEngine.getInstance().sign(src,(SigningPrivateKey)keys[1]);
    assertTrue(DSAEngine.getInstance().verifySignature(sig,src,(SigningPublicKey)keys[0]));
    assertFalse(DSAEngine.getInstance().verifySignature(sig,src,fake));
  }
  for (int i=0; i < 1000; i++) {
    KeyGenerator.getInstance().generateSessionKey();
  }
}
