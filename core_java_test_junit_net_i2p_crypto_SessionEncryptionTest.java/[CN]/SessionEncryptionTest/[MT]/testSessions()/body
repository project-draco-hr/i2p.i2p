{
  Object keys[]=KeyGenerator.getInstance().generatePKIKeypair();
  PublicKey pubKey=(PublicKey)keys[0];
  PrivateKey privKey=(PrivateKey)keys[1];
  SessionKey curKey=_context.sessionKeyManager().createSession(pubKey);
  SessionTag tag1=new SessionTag(true);
  SessionTag tag2=new SessionTag(true);
  SessionTag tag3=new SessionTag(true);
  SessionTag tag4=new SessionTag(true);
  HashSet<SessionTag> firstTags=new HashSet<SessionTag>();
  firstTags.add(tag1);
  firstTags.add(tag2);
  HashSet<SessionTag> secondTags=new HashSet<SessionTag>();
  secondTags.add(tag3);
  secondTags.add(tag4);
  byte[] msg1="msg 1".getBytes();
  byte[] msg2="msg 2".getBytes();
  byte[] msg3="msg 3".getBytes();
  byte[] msg4="msg 4".getBytes();
  byte[] msg5="msg 5".getBytes();
  byte emsg1[]=_context.elGamalAESEngine().encrypt(msg1,pubKey,curKey,firstTags,64);
  byte dmsg1[]=_context.elGamalAESEngine().decrypt(emsg1,privKey);
  assertTrue(DataHelper.eq(dmsg1,msg1));
  TagSetHandle tsh=_context.sessionKeyManager().tagsDelivered(pubKey,curKey,firstTags);
  _context.sessionKeyManager().tagsAcked(pubKey,curKey,tsh);
  curKey=_context.sessionKeyManager().getCurrentKey(pubKey);
  SessionTag curTag=_context.sessionKeyManager().consumeNextAvailableTag(pubKey,curKey);
  assertNotNull(curTag);
  byte emsg2[]=_context.elGamalAESEngine().encrypt(msg2,pubKey,curKey,null,curTag,64);
  byte dmsg2[]=_context.elGamalAESEngine().decrypt(emsg2,privKey);
  assertTrue(DataHelper.eq(dmsg2,msg2));
  curKey=_context.sessionKeyManager().getCurrentKey(pubKey);
  curTag=_context.sessionKeyManager().consumeNextAvailableTag(pubKey,curKey);
  assertNotNull(curTag);
  assertNotNull(curKey);
  byte emsg3[]=_context.elGamalAESEngine().encrypt(msg3,pubKey,curKey,secondTags,curTag,64);
  byte dmsg3[]=_context.elGamalAESEngine().decrypt(emsg3,privKey);
  assertTrue(DataHelper.eq(dmsg3,msg3));
  tsh=_context.sessionKeyManager().tagsDelivered(pubKey,curKey,secondTags);
  _context.sessionKeyManager().tagsAcked(pubKey,curKey,tsh);
  curKey=_context.sessionKeyManager().getCurrentKey(pubKey);
  curTag=_context.sessionKeyManager().consumeNextAvailableTag(pubKey,curKey);
  assertNotNull(curTag);
  assertNotNull(curKey);
  byte emsg4[]=_context.elGamalAESEngine().encrypt(msg4,pubKey,curKey,null,curTag,64);
  byte dmsg4[]=_context.elGamalAESEngine().decrypt(emsg4,privKey);
  assertTrue(DataHelper.eq(dmsg4,msg4));
  curKey=_context.sessionKeyManager().getCurrentKey(pubKey);
  curTag=_context.sessionKeyManager().consumeNextAvailableTag(pubKey,curKey);
  assertNotNull(curTag);
  assertNotNull(curKey);
  byte emsg5[]=_context.elGamalAESEngine().encrypt(msg5,pubKey,curKey,null,curTag,64);
  byte dmsg5[]=_context.elGamalAESEngine().decrypt(emsg5,privKey);
  assertTrue(DataHelper.eq(dmsg5,msg5));
}
