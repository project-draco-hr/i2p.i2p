{
  final GroupElement neutral=GroupElement.p3(curve,curve.getField().ZERO,curve.getField().ONE,curve.getField().ONE,curve.getField().ZERO);
  for (int i=0; i < 1000; i++) {
    final GroupElement g=getRandomGroupElement();
    final GroupElement h1=addGroupElements(g,neutral);
    final GroupElement h2=addGroupElements(neutral,g);
    Assert.assertThat(g,IsEqual.equalTo(h1));
    Assert.assertThat(g,IsEqual.equalTo(h2));
  }
  for (int i=0; i < 1000; i++) {
    GroupElement g=getRandomGroupElement();
    GroupElement h=toRepresentation(g,GroupElement.Representation.P2);
    Assert.assertThat(h,IsEqual.equalTo(g));
    h=toRepresentation(g,GroupElement.Representation.P1P1);
    Assert.assertThat(g,IsEqual.equalTo(h));
    h=toRepresentation(g,GroupElement.Representation.CACHED);
    Assert.assertThat(h,IsEqual.equalTo(g));
    g=toRepresentation(g,GroupElement.Representation.P2);
    h=toRepresentation(g,GroupElement.Representation.P3);
    Assert.assertThat(g,IsEqual.equalTo(h));
    g=toRepresentation(g,GroupElement.Representation.P2);
    h=toRepresentation(g,GroupElement.Representation.P1P1);
    Assert.assertThat(g,IsEqual.equalTo(h));
  }
  for (int i=0; i < 10; i++) {
    final GroupElement g=MathUtils.getRandomGroupElement();
    final GroupElement h=MathUtils.scalarMultiplyGroupElement(g,curve.getField().ZERO);
    Assert.assertThat(curve.getZero(GroupElement.Representation.P3),IsEqual.equalTo(h));
  }
}
