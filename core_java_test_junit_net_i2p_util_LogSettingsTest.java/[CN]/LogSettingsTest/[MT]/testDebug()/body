{
  p.setProperty("logger.record.net.i2p.util.LogSettings",Log.toLevelString(Log.DEBUG));
  p.setProperty("logger.minimumOnScreenLevel",Log.toLevelString(Log.DEBUG));
  DataHelper.storeProps(p,f);
  _context.logManager().rereadConfig();
  PipedInputStream pin=new PipedInputStream();
  BufferedReader in=new BufferedReader(new InputStreamReader(pin));
  PrintStream systemOut=System.out;
  PrintStream pout=new PrintStream(new PipedOutputStream(pin));
  System.setOut(pout);
  try {
    log.debug("DEBUG" + ": debug");
    log.info("DEBUG" + ": info");
    log.warn("DEBUG" + ": warn");
    log.error("DEBUG" + ": error");
    log.log(Log.CRIT,"DEBUG" + ": crit");
    _context.logManager().flush();
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ie) {
    }
    for (int i=0; i < 5; i++)     pout.println("");
    pout.flush();
    String l1=in.readLine();
    String l2=in.readLine();
    String l3=in.readLine();
    String l4=in.readLine();
    String l5=in.readLine();
    assertTrue(l1.matches(".*DEBUG: debug") && l2.matches(".*DEBUG: info") && l3.matches(".*DEBUG: warn")&& l4.matches(".*DEBUG: error")&& l5.matches(".*DEBUG: crit"));
  }
  finally {
    System.setOut(systemOut);
    pout.close();
  }
}
