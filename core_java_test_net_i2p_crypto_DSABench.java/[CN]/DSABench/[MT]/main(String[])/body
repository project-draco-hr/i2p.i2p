{
  int times=100;
  long keygentime=0;
  long signtime=0;
  long verifytime=0;
  long maxKey=0;
  long minKey=0;
  long maxS=0;
  long minS=0;
  long maxV=0;
  long minV=0;
  Object[] keys=KeyGenerator.getInstance().generateSigningKeypair();
  byte[] message=new byte[32 + 32];
  for (int i=0; i < message.length; i++)   message[i]=(byte)((i % 26) + 'a');
  for (int x=0; x < times; x++) {
    long startkeys=System.currentTimeMillis();
    keys=KeyGenerator.getInstance().generateSigningKeypair();
    SigningPublicKey pubkey=(SigningPublicKey)keys[0];
    SigningPrivateKey privkey=(SigningPrivateKey)keys[1];
    long endkeys=System.currentTimeMillis();
    long startsign=System.currentTimeMillis();
    Signature s=DSAEngine.getInstance().sign(message,privkey);
    long endsignstartverify=System.currentTimeMillis();
    boolean v=DSAEngine.getInstance().verifySignature(s,message,pubkey);
    long endverify=System.currentTimeMillis();
    System.out.print(".");
    keygentime+=endkeys - startkeys;
    signtime+=endsignstartverify - startsign;
    verifytime+=endverify - endsignstartverify;
    if (!v) {
      throw new RuntimeException("Holy crap, did not verify");
    }
    if ((minKey == 0) && (minS == 0) && (minV == 0)) {
      minKey=endkeys - startkeys;
      maxKey=endkeys - startkeys;
      minS=endsignstartverify - startsign;
      maxS=endsignstartverify - startsign;
      minV=endverify - endsignstartverify;
      maxV=endverify - endsignstartverify;
    }
 else {
      if (minKey > endkeys - startkeys)       minKey=endkeys - startkeys;
      if (maxKey < endkeys - startkeys)       maxKey=endkeys - startkeys;
      if (minS > endsignstartverify - startsign)       minS=endsignstartverify - startsign;
      if (maxS < endsignstartverify - startsign)       maxS=endsignstartverify - startsign;
      if (minV > endverify - endsignstartverify)       minV=endverify - endsignstartverify;
      if (maxV < endverify - endsignstartverify)       maxV=endverify - endsignstartverify;
    }
  }
  System.out.println();
  System.out.println("Key Generation Time Average: " + (keygentime / times) + "\ttotal: "+ keygentime+ "\tmin: "+ minKey+ "\tmax: "+ maxKey+ "\tKeygen/second: "+ (keygentime == 0 ? "NaN" : "" + (times * 1000) / keygentime));
  System.out.println("Signing Time Average       : " + (signtime / times) + "\ttotal: "+ signtime+ "\tmin: "+ minS+ "\tmax: "+ maxS+ "\tSigning Bps: "+ (times * message.length * 1000) / signtime);
  System.out.println("Verification Time Average  : " + (verifytime / times) + "\ttotal: "+ verifytime+ "\tmin: "+ minV+ "\tmax: "+ maxV+ "\tDecryption Bps: "+ (times * message.length * 1000) / verifytime);
}
