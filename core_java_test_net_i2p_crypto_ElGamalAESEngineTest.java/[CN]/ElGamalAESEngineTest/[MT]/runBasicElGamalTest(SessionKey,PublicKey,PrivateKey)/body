{
  try {
    ByteArrayOutputStream elgSrc=new ByteArrayOutputStream(256);
    key.writeBytes(elgSrc);
    byte preIV[]=new byte[32];
    RandomSource.getInstance().nextBytes(preIV);
    elgSrc.write(preIV);
    elgSrc.flush();
    byte elgEncr[]=ElGamalEngine.getInstance().encrypt(elgSrc.toByteArray(),pubKey);
    byte elgDecr[]=ElGamalEngine.getInstance().decrypt(elgEncr,privKey);
    ByteArrayInputStream bais=new ByteArrayInputStream(elgDecr);
    SessionKey nk=new SessionKey();
    nk.readBytes(bais);
    byte postpreIV[]=new byte[32];
    int read=bais.read(postpreIV);
    if (read != postpreIV.length) {
      throw new Exception("Somehow ElGamal broke and 256 bytes is less than 32 bytes...");
    }
    boolean eq=(DataHelper.eq(preIV,postpreIV) && DataHelper.eq(key,nk));
    if (!eq) {
      _log.error("elgEncr.length: " + elgEncr.length + " elgDecr.length: "+ elgDecr.length);
      _log.error("Pre IV.................: " + DataHelper.toString(preIV,32));
      _log.error("Pre IV after decryption: " + DataHelper.toString(postpreIV,32));
      _log.error("SessionKey.................: " + DataHelper.toString(key.getData(),32));
      _log.error("SessionKey after decryption: " + DataHelper.toString(nk.getData(),32));
      _log.error("PublicKey: " + DataHelper.toDecimalString(pubKey.getData(),pubKey.getData().length));
      _log.error("PrivateKey: " + DataHelper.toDecimalString(privKey.getData(),privKey.getData().length));
      throw new Exception("Not equal!");
    }
 else {
      _log.debug("Basic ElG D(E(val)) == val");
    }
  }
 catch (  Exception e) {
    _log.error("Error",e);
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException ie) {
    }
    System.exit(0);
  }
}
