{
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream(numBytes);
    DataHelper.writeLong(baos,numBytes,value);
    byte written[]=baos.toByteArray();
    byte extract[]=DataHelper.toLong(numBytes,value);
    if (extract.length != numBytes)     throw new RuntimeException("testLong(" + numBytes + ","+ value+ ") FAILED (len="+ extract.length+ ")");
    if (!DataHelper.eq(written,extract))     throw new RuntimeException("testLong(" + numBytes + ","+ value+ ") FAILED");
    byte extract2[]=new byte[numBytes];
    DataHelper.toLong(extract2,0,numBytes,value);
    if (!DataHelper.eq(extract,extract2))     throw new RuntimeException("testLong(" + numBytes + ","+ value+ ") FAILED on toLong");
    long read=DataHelper.fromLong(extract,0,numBytes);
    if (read != value)     throw new RuntimeException("testLong(" + numBytes + ","+ value+ ") FAILED on read ("+ read+ ")");
    ByteArrayInputStream bais=new ByteArrayInputStream(written);
    read=DataHelper.readLong(bais,numBytes);
    if (read != value)     throw new RuntimeException("testLong(" + numBytes + ","+ value+ ") FAILED on readLong ("+ read+ ")");
    read=DataHelper.fromLong(written,0,numBytes);
    if (read != value)     throw new RuntimeException("testLong(" + numBytes + ","+ value+ ") FAILED on fromLong ("+ read+ ")");
  }
 catch (  Exception e) {
    throw new RuntimeException("test(" + numBytes + ","+ value+ "): "+ e.getMessage());
  }
}
