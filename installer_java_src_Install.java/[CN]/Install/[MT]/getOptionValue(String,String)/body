{
  if ("string".equals(type)) {
    return answer;
  }
 else   if ("string>0".equals(type)) {
    if (answer.length() > 0) {
      return answer;
    }
 else {
      showOptError("Empty answers are not allowed.");
    }
  }
 else   if ("directory".equals(type)) {
    File f=new File(answer);
    if (f.exists()) {
      if (f.isDirectory()) {
        showOptError("Using existing target directory " + f.getAbsolutePath());
        return f;
      }
 else {
        showOptError("Location " + f.getAbsolutePath() + " is not a directory.  "+ "Lets try again");
      }
    }
 else {
      boolean create=confirmOption("Target directory " + f.getAbsolutePath() + " does not exist - create? ",false);
      if (!create) {
        showOptError("Lets try that again");
      }
 else {
        boolean created=f.mkdirs();
        if (created) {
          showOptError("Target directory " + f.getAbsolutePath() + " created");
          return f;
        }
 else {
          showOptError("Failed to create the " + "directory.  Lets choose " + "another.");
        }
      }
    }
  }
 else   if ("boolean".equals(type)) {
    answer=answer.toLowerCase();
    if ("yes".equals(answer) || "y".equals(answer))     answer="true";
    if ("no".equals(answer) || "n".equals(answer))     answer="false";
    if ("true".equals(answer) || "false".equals(answer)) {
      return new Boolean("true".equals(answer));
    }
    showOptError("Incorrect boolean value, try `yes' ?r `no'");
  }
 else   if ("numeric".equals(type) || "port".equals(type)) {
    try {
      int num=Integer.parseInt(answer);
      if ("numeric".equals(type) || (num > 0 && num < 65536)) {
        return new Integer(num);
      }
      showOptError("Port number must be from 1 to 65535");
    }
 catch (    NumberFormatException ex) {
      showOptError("Incorrect value: " + ex.getMessage());
    }
  }
 else   if ("bandwidth".equals(type)) {
    try {
      answer=answer.toLowerCase();
      int factor=1;
      if (answer.endsWith("g"))       factor=1024 * 1024 * 1024;
      if (answer.endsWith("m"))       factor=1024 * 1024;
      if (answer.endsWith("k"))       factor=1024;
      if (factor > 1)       answer=answer.substring(0,answer.length() - 1);
      int val=factor * Integer.parseInt(answer);
      if (val == -1 || val > 0) {
        return new Integer(val);
      }
      showOptError("Value must be -1 or positive.");
    }
 catch (    NumberFormatException ex) {
      showOptError("Invalid number [" + answer + "].  Valid numbers are of the form -1, 42, 68k, 7m, 9g");
    }
  }
 else {
    throw new RuntimeException("cannot read installer option: " + type);
  }
  return null;
}
