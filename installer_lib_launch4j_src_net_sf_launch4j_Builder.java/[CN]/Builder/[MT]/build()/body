{
  final Config c=ConfigPersister.getInstance().getConfig();
  try {
    c.validate();
  }
 catch (  InvariantViolationException e) {
    throw new BuilderException(e.getMessage());
  }
  File rc=null;
  File ro=null;
  File outfile=null;
  FileInputStream is=null;
  FileOutputStream os=null;
  final RcBuilder rcb=new RcBuilder();
  try {
    String basedir=Util.getJarBasedir();
    if (basedir == null) {
      basedir=".";
    }
    rc=rcb.build(c);
    ro=File.createTempFile("launch4j","o");
    outfile=ConfigPersister.getInstance().getOutputFile();
    Cmd resCmd=new Cmd(basedir);
    resCmd.addExe("/bin/windres").add(Util.WINDOWS_OS ? "--preprocessor=type" : "--preprocessor=cat").add("-J rc -O coff -F pe-i386").add(rc.getPath()).add(ro.getPath());
    _log.append("Compiling resources");
    Util.exec(resCmd.toString(),_log);
    Cmd ldCmd=new Cmd(basedir);
    ldCmd.addExe("/bin/ld").add("-mi386pe").add("--oformat pei-i386").add((c.getHeaderType() == Config.GUI_HEADER) ? "--subsystem windows" : "--subsystem console").add("-s").addFile("/w32api/crt2.o").addFile((c.getHeaderType() == Config.GUI_HEADER) ? "/head/guihead.o" : "/head/consolehead.o").addFile("/head/head.o").addAbsFile(ro.getPath()).addFile("/w32api/libmingw32.a").addFile("/w32api/libgcc.a").addFile("/w32api/libmsvcrt.a").addFile("/w32api/libkernel32.a").addFile("/w32api/libuser32.a").addFile("/w32api/libadvapi32.a").addFile("/w32api/libshell32.a").add("-o").addAbsFile(outfile.getPath());
    _log.append("Linking");
    Util.exec(ldCmd.toString(),_log);
    _log.append("Wrapping");
    int len;
    byte[] buffer=new byte[1024];
    is=new FileInputStream(Util.getAbsoluteFile(ConfigPersister.getInstance().getConfigPath(),c.getJar()));
    os=new FileOutputStream(outfile,true);
    while ((len=is.read(buffer)) > 0) {
      os.write(buffer,0,len);
    }
    _log.append("Successfully created " + outfile.getPath());
    return outfile;
  }
 catch (  IOException e) {
    Util.delete(outfile);
    _log.append(e.getMessage());
    throw new BuilderException(e);
  }
catch (  ExecException e) {
    Util.delete(outfile);
    String msg=e.getMessage();
    if (msg != null && msg.indexOf("windres") != -1) {
      _log.append("Generated resource file...\n");
      _log.append(rcb.getContent());
    }
    throw new BuilderException(e);
  }
 finally {
    Util.close(is);
    Util.close(os);
    Util.delete(rc);
    Util.delete(ro);
  }
}
