{
  Validator.checkOptString(minVersion,10,VERSION_PATTERN,"jre.minVersion","Minimum JRE version should be x.x.x[_xx]");
  Validator.checkOptString(maxVersion,10,VERSION_PATTERN,"jre.maxVersion","Maximum JRE version should be x.x.x[_xx]");
  if (Validator.isEmpty(path)) {
    Validator.checkFalse(Validator.isEmpty(minVersion),"jre.path","Specify embedded JRE path or/and minimum JRE version.");
  }
 else {
    Validator.checkRelativeWinPath(path,"jre.path","Embedded JRE path must be a path relative to the executable.");
  }
  if (!Validator.isEmpty(maxVersion)) {
    Validator.checkFalse(Validator.isEmpty(minVersion),"jre.minVersion","Specify minimum JRE version.");
    Validator.checkTrue(minVersion.compareTo(maxVersion) <= 0,"jre.minVersion","Minimum JRE version is greater than the maximum.");
  }
  Validator.checkTrue(initialHeapSize >= 0,"jre.initialHeapSize","Initial heap size cannot be negative," + " specify 0 or leave the field blank to use the JVM default.");
  Validator.checkTrue(maxHeapSize == 0 || initialHeapSize <= maxHeapSize,"jre.maxHeapSize","Maximum heap size cannot be less than the initial" + " size, specify 0 or leave the field blank to use the JVM default.");
  Validator.checkOptString(args,512,"jre.args","JVM arguments");
}
