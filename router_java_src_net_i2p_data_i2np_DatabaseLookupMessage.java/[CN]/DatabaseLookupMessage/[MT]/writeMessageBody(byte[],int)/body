{
  if (_key == null)   throw new I2NPMessageException("Key being searched for not specified");
  if (_fromHash == null)   throw new I2NPMessageException("From address not specified");
  System.arraycopy(_key.getData(),0,out,curIndex,Hash.HASH_LENGTH);
  curIndex+=Hash.HASH_LENGTH;
  System.arraycopy(_fromHash.getData(),0,out,curIndex,Hash.HASH_LENGTH);
  curIndex+=Hash.HASH_LENGTH;
  byte flag;
  if (_replyKey != null)   flag=FLAG_ENCRYPT;
 else   flag=0;
switch (_type) {
case LS:
    flag|=FLAG_TYPE_LS;
  break;
case RI:
flag|=FLAG_TYPE_RI;
break;
case EXPL:
flag|=FLAG_TYPE_EXPL;
break;
case ANY:
default :
break;
}
if (_replyTunnel != null) {
flag|=FLAG_TUNNEL;
out[curIndex++]=flag;
DataHelper.toLong(out,curIndex,4,_replyTunnel.getTunnelId());
curIndex+=4;
}
 else {
out[curIndex++]=flag;
}
if ((_dontIncludePeers == null) || (_dontIncludePeers.isEmpty())) {
out[curIndex++]=0x0;
out[curIndex++]=0x0;
}
 else {
int size=_dontIncludePeers.size();
if (size > MAX_NUM_PEERS) throw new I2NPMessageException("Too many peers: " + size);
DataHelper.toLong(out,curIndex,2,size);
curIndex+=2;
for (Hash peer : _dontIncludePeers) {
System.arraycopy(peer.getData(),0,out,curIndex,Hash.HASH_LENGTH);
curIndex+=Hash.HASH_LENGTH;
}
}
if (_replyKey != null) {
System.arraycopy(_replyKey.getData(),0,out,curIndex,SessionKey.KEYSIZE_BYTES);
curIndex+=SessionKey.KEYSIZE_BYTES;
out[curIndex++]=1;
System.arraycopy(_replyTag.getData(),0,out,curIndex,SessionTag.BYTE_LENGTH);
curIndex+=SessionTag.BYTE_LENGTH;
}
return curIndex;
}
