{
  if (type != MESSAGE_TYPE)   throw new I2NPMessageException("Message type is incorrect for this message");
  int curIndex=offset;
  byte keyData[]=new byte[Hash.HASH_LENGTH];
  System.arraycopy(data,curIndex,keyData,0,Hash.HASH_LENGTH);
  curIndex+=Hash.HASH_LENGTH;
  _key=new Hash(keyData);
  _type=(int)DataHelper.fromLong(data,curIndex,1);
  curIndex++;
  _replyToken=DataHelper.fromLong(data,curIndex,4);
  curIndex+=4;
  if (_replyToken > 0) {
    long tunnel=DataHelper.fromLong(data,curIndex,4);
    if (tunnel > 0)     _replyTunnel=new TunnelId(tunnel);
    curIndex+=4;
    byte gw[]=new byte[Hash.HASH_LENGTH];
    System.arraycopy(data,curIndex,gw,0,Hash.HASH_LENGTH);
    curIndex+=Hash.HASH_LENGTH;
    _replyGateway=new Hash(gw);
  }
 else {
    _replyTunnel=null;
    _replyGateway=null;
  }
  if (_type == KEY_TYPE_LEASESET) {
    _leaseSet=new LeaseSet();
    try {
      _leaseSet.readBytes(new ByteArrayInputStream(data,curIndex,data.length - curIndex));
    }
 catch (    DataFormatException dfe) {
      throw new I2NPMessageException("Error reading the leaseSet",dfe);
    }
  }
 else   if (_type == KEY_TYPE_ROUTERINFO) {
    _info=new RouterInfo();
    int compressedSize=(int)DataHelper.fromLong(data,curIndex,2);
    curIndex+=2;
    try {
      byte decompressed[]=DataHelper.decompress(data,curIndex,compressedSize);
      _info.readBytes(new ByteArrayInputStream(decompressed));
    }
 catch (    DataFormatException dfe) {
      throw new I2NPMessageException("Error reading the routerInfo",dfe);
    }
catch (    IOException ioe) {
      throw new I2NPMessageException("Compressed routerInfo was corrupt",ioe);
    }
  }
 else {
    throw new I2NPMessageException("Invalid type of key read from the structure - " + _type);
  }
}
