{
  if (type != MESSAGE_TYPE)   throw new I2NPMessageException("Message type is incorrect for this message");
  int curIndex=offset;
  _key=Hash.create(data,curIndex);
  if (_key.equals(Hash.FAKE_HASH)) {
    _context.statManager().addRateData("netDb.DSMAllZeros",1);
    throw new I2NPMessageException("DSM all zeros");
  }
  curIndex+=Hash.HASH_LENGTH;
  int dbType=data[curIndex] & 0x01;
  curIndex++;
  _replyToken=DataHelper.fromLong(data,curIndex,4);
  curIndex+=4;
  if (_replyToken > 0) {
    long tunnel=DataHelper.fromLong(data,curIndex,4);
    if (tunnel > 0)     _replyTunnel=new TunnelId(tunnel);
    curIndex+=4;
    _replyGateway=Hash.create(data,curIndex);
    curIndex+=Hash.HASH_LENGTH;
  }
 else {
    _replyTunnel=null;
    _replyGateway=null;
  }
  if (dbType == DatabaseEntry.KEY_TYPE_LEASESET) {
    _dbEntry=new LeaseSet();
    try {
      _dbEntry.readBytes(new ByteArrayInputStream(data,curIndex,data.length - curIndex));
    }
 catch (    DataFormatException dfe) {
      throw new I2NPMessageException("Error reading the leaseSet",dfe);
    }
catch (    IOException ioe) {
      throw new I2NPMessageException("Error reading the leaseSet",ioe);
    }
  }
 else {
    _dbEntry=new RouterInfo();
    int compressedSize=(int)DataHelper.fromLong(data,curIndex,2);
    curIndex+=2;
    if (compressedSize <= 0 || curIndex + compressedSize > data.length || curIndex + compressedSize > dataSize + offset)     throw new I2NPMessageException("Compressed RI length: " + compressedSize + " but remaining bytes: "+ Math.min(data.length - curIndex,dataSize + offset - curIndex));
    try {
      byte decompressed[]=DataHelper.decompress(data,curIndex,compressedSize);
      _dbEntry.readBytes(new ByteArrayInputStream(decompressed));
    }
 catch (    DataFormatException dfe) {
      throw new I2NPMessageException("Error reading the routerInfo",dfe);
    }
catch (    IOException ioe) {
      throw new I2NPMessageException("Corrupt compressed routerInfo size = " + compressedSize,ioe);
    }
  }
}
