{
  try {
    if (type < 0)     type=(int)DataHelper.readLong(in,1);
    _uniqueId=DataHelper.readLong(in,4);
    _expiration=DataHelper.readDate(in);
    int size=(int)DataHelper.readLong(in,2);
    Hash h=new Hash();
    h.readBytes(in);
    if (buffer.length < size) {
      if (size > 64 * 1024)       throw new I2NPMessageException("size=" + size);
      buffer=new byte[size];
    }
    int cur=0;
    while (cur < size) {
      int numRead=in.read(buffer,cur,size - cur);
      if (numRead == -1) {
        throw new I2NPMessageException("Payload is too short [" + numRead + ", wanted "+ size+ "]");
      }
      cur+=numRead;
    }
    Hash calc=_context.sha().calculateHash(buffer,0,size);
    if (!calc.equals(h))     throw new I2NPMessageException("Hash does not match");
    long start=_context.clock().now();
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Reading bytes: type = " + type + " / uniqueId : "+ _uniqueId+ " / expiration : "+ _expiration);
    readMessage(buffer,0,size,type);
    long time=_context.clock().now() - start;
    if (time > 50)     _context.statManager().addRateData("i2np.readTime",time,time);
    return size + Hash.HASH_LENGTH + 1+ 4+ DataHelper.DATE_LENGTH;
  }
 catch (  DataFormatException dfe) {
    throw new I2NPMessageException("Error reading the message header",dfe);
  }
}
