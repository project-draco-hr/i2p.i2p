{
  int headerSize=HEADER_LENGTH;
  if (type >= 0)   headerSize--;
  if (maxLen < headerSize)   throw new I2NPMessageException("Payload is too short " + maxLen);
  int cur=offset;
  if (type < 0) {
    type=data[cur] & 0xff;
    cur++;
  }
  _uniqueId=DataHelper.fromLong(data,cur,4);
  cur+=4;
  _expiration=DataHelper.fromLong(data,cur,DataHelper.DATE_LENGTH);
  cur+=DataHelper.DATE_LENGTH;
  int size=(int)DataHelper.fromLong(data,cur,2);
  cur+=2;
  if (cur + size > data.length || headerSize + size > maxLen)   throw new I2NPMessageException("Payload is too short [" + "data.len=" + data.length + "maxLen="+ maxLen+ " offset="+ offset+ " cur="+ cur+ " wanted="+ size+ "]: "+ getClass().getSimpleName());
  int sz=Math.min(size,maxLen - headerSize);
  byte[] calc=SimpleByteCache.acquire(Hash.HASH_LENGTH);
  _context.sha().calculateHash(data,cur + CHECKSUM_LENGTH,sz,calc,0);
  boolean eq=DataHelper.eq(data,cur,calc,0,CHECKSUM_LENGTH);
  cur+=CHECKSUM_LENGTH;
  SimpleByteCache.release(calc);
  if (!eq)   throw new I2NPMessageException("Bad checksum on " + size + " byte I2NP "+ getClass().getSimpleName());
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Reading bytes: type = " + type + " / uniqueId : "+ _uniqueId+ " / expiration : "+ _expiration);
  readMessage(data,cur,sz,type);
  cur+=sz;
  return cur - offset;
}
