{
  if (type != MESSAGE_TYPE)   throw new I2NPMessageException("Message type is incorrect for this message");
  int curIndex=offset;
  _tunnelId=new TunnelId(DataHelper.fromLong(data,curIndex,4));
  curIndex+=4;
  if (_tunnelId.getTunnelId() <= 0)   throw new I2NPMessageException("Invalid tunnel Id " + _tunnelId);
  _size=DataHelper.fromLong(data,curIndex,4);
  curIndex+=4;
  if (_size < 0)   throw new I2NPMessageException("Invalid size in the structure: " + _size);
  if (_size > 64 * 1024)   throw new I2NPMessageException("Invalid size in the structure: " + _size);
  _data=new byte[(int)_size];
  System.arraycopy(data,curIndex,_data,0,(int)_size);
  curIndex+=_size;
  int includeVerification=(int)DataHelper.fromLong(data,curIndex,1);
  curIndex++;
  if (includeVerification == FLAG_INCLUDESTRUCTURE) {
    byte vHash[]=new byte[Hash.HASH_LENGTH];
    System.arraycopy(data,curIndex,vHash,0,Hash.HASH_LENGTH);
    curIndex+=Hash.HASH_LENGTH;
    byte vSig[]=new byte[Signature.SIGNATURE_BYTES];
    System.arraycopy(data,curIndex,vSig,0,Signature.SIGNATURE_BYTES);
    curIndex+=Signature.SIGNATURE_BYTES;
    _verification=new TunnelVerificationStructure(new Hash(vHash),new Signature(vSig));
    int len=(int)DataHelper.fromLong(data,curIndex,2);
    curIndex+=2;
    if ((len <= 0) || (len > 4 * 1024))     throw new I2NPMessageException("wtf, size of instructions: " + len);
    _encryptedInstructions=new byte[len];
    System.arraycopy(data,curIndex,_encryptedInstructions,0,len);
    curIndex+=len;
  }
}
