{
  if (_signature != null)   throw new IllegalStateException();
  InputStream din;
  MessageDigest digest;
  if (verifySig) {
    digest=SHA1.getInstance();
    din=new DigestInputStream(in,digest);
  }
 else {
    digest=null;
    din=in;
  }
  _identity=new RouterIdentity();
  _identity.readBytes(din);
  _published=DataHelper.readLong(din,8);
  int numAddresses=(int)DataHelper.readLong(din,1);
  for (int i=0; i < numAddresses; i++) {
    RouterAddress address=new RouterAddress();
    address.readBytes(din);
    _addresses.add(address);
  }
  int numPeers=(int)DataHelper.readLong(din,1);
  if (numPeers == 0) {
    _peers=null;
  }
 else {
    _peers=new HashSet<Hash>(numPeers);
    for (int i=0; i < numPeers; i++) {
      Hash peerIdentityHash=new Hash();
      peerIdentityHash.readBytes(din);
      _peers.add(peerIdentityHash);
    }
  }
  DataHelper.readProperties(din,_options);
  _signature=new Signature(_identity.getSigningPublicKey().getType());
  _signature.readBytes(in);
  if (verifySig) {
    SHA1Hash hash=new SHA1Hash(digest.digest());
    _isValid=DSAEngine.getInstance().verifySignature(_signature,hash,_identity.getSigningPublicKey());
    _validated=true;
    if (!_isValid) {
      throw new DataFormatException("Bad sig");
    }
  }
}
