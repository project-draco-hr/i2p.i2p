{
  File BLFile=new File(file);
  if (!BLFile.isAbsolute())   BLFile=new File(_context.getConfigDir(),file);
  if (BLFile == null || (!BLFile.exists()) || BLFile.length() <= 0) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Blocklist file not found: " + file);
    return;
  }
  long start=_context.clock().now();
  int maxSize=getSize(BLFile);
  try {
    _blocklist=new long[maxSize + 1];
  }
 catch (  OutOfMemoryError oom) {
    _log.log(Log.CRIT,"OOM creating the blocklist");
    return;
  }
  int count=0;
  int badcount=0;
  int peercount=0;
  long ipcount=0;
  BufferedReader br=null;
  try {
    br=new BufferedReader(new InputStreamReader(new FileInputStream(BLFile),"UTF-8"));
    String buf=null;
    while ((buf=br.readLine()) != null && count < maxSize) {
      Entry e=parse(buf,true);
      if (e == null) {
        badcount++;
        continue;
      }
      if (e.peer != null) {
        _peerBlocklist.put(e.peer,e.comment);
        peercount++;
        continue;
      }
      byte[] ip1=e.ip1;
      byte[] ip2=e.ip2;
      store(ip1,ip2,count++);
      ipcount+=1 + toInt(ip2) - toInt(ip1);
    }
  }
 catch (  IOException ioe) {
    _blocklist=null;
    if (_log.shouldLog(Log.ERROR))     _log.error("Error reading the BLFile",ioe);
    return;
  }
catch (  OutOfMemoryError oom) {
    _blocklist=null;
    _log.log(Log.CRIT,"OOM reading the blocklist");
    return;
  }
 finally {
    if (br != null)     try {
      br.close();
    }
 catch (    IOException ioe) {
    }
  }
  if (_wrapSave != null) {
    store(_wrapSave.ip1,_wrapSave.ip2,count++);
    ipcount+=1 + toInt(_wrapSave.ip2) - toInt(_wrapSave.ip1);
  }
  int removed=0;
  try {
    Arrays.sort(_blocklist,0,count);
    removed=removeOverlap(_blocklist,count);
    if (removed > 0) {
      Arrays.sort(_blocklist,0,count);
    }
  }
 catch (  OutOfMemoryError oom) {
    _blocklist=null;
    _log.log(Log.CRIT,"OOM sorting the blocklist");
    return;
  }
  _blocklistSize=count - removed;
  if (_log.shouldLog(Log.INFO)) {
    _log.info("Removed " + badcount + " bad entries and comment lines");
    _log.info("Read " + count + " valid entries from the blocklist "+ BLFile);
    _log.info("Merged " + removed + " overlapping entries");
    _log.info("Result is " + _blocklistSize + " entries");
    _log.info("Blocking " + ipcount + " IPs and "+ peercount+ " hashes");
    _log.info("Blocklist processing finished, time: " + (_context.clock().now() - start));
  }
}
