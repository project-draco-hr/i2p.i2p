{
  Set<Integer> singles=new TreeSet<Integer>();
  singles.addAll(_singleIPBlocklist);
  if (!(singles.isEmpty() && _singleIPv6Blocklist.isEmpty())) {
    out.write("<table><tr><th align=\"center\" colspan=\"2\"><b>");
    out.write(_t("IPs Banned Until Restart"));
    out.write("</b></td></tr>");
    for (    Integer ii : singles) {
      int ip=ii.intValue();
      if (ip < 0)       continue;
      out.write("<tr><td align=\"center\" width=\"50%\">");
      out.write(toStr(ip));
      out.write("</td><td width=\"50%\">&nbsp;</td></tr>\n");
    }
    for (    Integer ii : singles) {
      int ip=ii.intValue();
      if (ip >= 0)       break;
      out.write("<tr><td align=\"center\" width=\"50%\">");
      out.write(toStr(ip));
      out.write("</td><td width=\"50%\">&nbsp;</td></tr>\n");
    }
    if (!_singleIPv6Blocklist.isEmpty()) {
      List<BigInteger> s6;
synchronized (_singleIPv6Blocklist) {
        s6=new ArrayList<BigInteger>(_singleIPv6Blocklist.keySet());
      }
      Collections.sort(s6);
      for (      BigInteger bi : s6) {
        out.write("<tr><td align=\"center\" width=\"50%\">");
        out.write(Addresses.toString(toIPBytes(bi)));
        out.write("</td><td width=\"50%\">&nbsp;</td></tr>\n");
      }
    }
    out.write("</table>");
  }
  if (_blocklistSize > 0) {
    out.write("<table><tr><th align=\"center\" colspan=\"2\"><b>");
    out.write(_t("IPs Permanently Banned"));
    out.write("</b></th></tr><tr><td align=\"center\" width=\"50%\"><b>");
    out.write(_t("From"));
    out.write("</b></td><td align=\"center\" width=\"50%\"><b>");
    out.write(_t("To"));
    out.write("</b></td></tr>");
    int max=Math.min(_blocklistSize,MAX_DISPLAY);
    int displayed=0;
    for (int i=0; i < _blocklistSize && displayed < max; i++) {
      int from=getFrom(_blocklist[i]);
      if (from < 0)       continue;
      out.write("<tr><td align=\"center\" width=\"50%\">");
      out.write(toStr(from));
      out.write("</td><td align=\"center\" width=\"50%\">");
      int to=getTo(_blocklist[i]);
      if (to != from) {
        out.write(toStr(to));
        out.write("</td></tr>\n");
      }
 else       out.write("&nbsp;</td></tr>\n");
      displayed++;
    }
    for (int i=0; i < max && displayed++ < max; i++) {
      int from=getFrom(_blocklist[i]);
      if (from >= 0)       break;
      out.write("<tr><td align=\"center\" width=\"50%\">");
      out.write(toStr(from));
      out.write("</td><td align=\"center\" width=\"50%\">");
      int to=getTo(_blocklist[i]);
      if (to != from) {
        out.write(toStr(to));
        out.write("</td></tr>\n");
      }
 else       out.write("&nbsp;</td></tr>\n");
    }
    if (_blocklistSize > MAX_DISPLAY)     out.write("<tr><th colspan=2>First " + MAX_DISPLAY + " displayed, see the "+ BLOCKLIST_FILE_DEFAULT+ " file for the full list</th></tr>");
    out.write("</table>");
  }
 else {
    out.write("<br><i>");
    out.write(_t("none"));
    out.write("</i>");
  }
  out.flush();
}
