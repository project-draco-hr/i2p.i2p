{
  long exp=messageBody.getMessageExpiration();
  if (_log.shouldLog(Log.INFO))   _log.info("Rcvd" + " ID " + messageBody.getUniqueId() + " exp. "+ new Date(exp)+ " type "+ messageBody.getClass().getSimpleName());
  int type=messageBody.getType();
  String invalidReason=null;
  if (type == TunnelDataMessage.MESSAGE_TYPE) {
    invalidReason=_context.messageValidator().validateMessage(exp);
  }
 else {
    invalidReason=_context.messageValidator().validateMessage(messageBody.getUniqueId(),exp);
  }
  if (invalidReason != null) {
    int level=Log.WARN;
    if (_log.shouldLog(level))     _log.log(level,"Dropping message [" + messageBody.getUniqueId() + " expiring on "+ exp+ "]: "+ messageBody.getClass().getSimpleName()+ ": "+ invalidReason+ ": "+ messageBody);
    _context.statManager().addRateData("inNetPool.dropped",1);
    _context.statManager().addRateData("inNetPool.duplicate",1);
    _context.messageHistory().droppedOtherMessage(messageBody,(fromRouter != null ? fromRouter.calculateHash() : fromRouterHash));
    _context.messageHistory().messageProcessingError(messageBody.getUniqueId(),messageBody.getClass().getSimpleName(),"Duplicate/expired");
    return -1;
  }
 else {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Message received [" + messageBody.getUniqueId() + " expiring on "+ exp+ "] is NOT a duplicate or exipired");
  }
  boolean jobFound=false;
  boolean allowMatches=true;
  if (type == TunnelGatewayMessage.MESSAGE_TYPE) {
    shortCircuitTunnelGateway(messageBody);
    allowMatches=false;
  }
 else   if (type == TunnelDataMessage.MESSAGE_TYPE) {
    shortCircuitTunnelData(messageBody,fromRouterHash);
    allowMatches=false;
  }
 else {
    if ((type > 0) && (type < _handlerJobBuilders.length)) {
      HandlerJobBuilder builder=_handlerJobBuilders[type];
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Add msg to the pool - builder: " + builder + " type: "+ messageBody.getClass().getSimpleName());
      if (builder != null) {
        Job job=builder.createJob(messageBody,fromRouter,fromRouterHash);
        if (job != null) {
          _context.jobQueue().addJob(job);
          jobFound=true;
        }
 else {
          jobFound=true;
        }
      }
    }
  }
  if (allowMatches) {
    int replies=handleReplies(messageBody);
    if (replies <= 0) {
      if (!jobFound) {
        _context.messageHistory().droppedOtherMessage(messageBody,(fromRouter != null ? fromRouter.calculateHash() : fromRouterHash));
        if (type == DeliveryStatusMessage.MESSAGE_TYPE) {
          long arr=((DeliveryStatusMessage)messageBody).getArrival();
          if (arr > 10) {
            long timeSinceSent=_context.clock().now() - arr;
            if (_log.shouldLog(Log.WARN))             _log.warn("Dropping unhandled delivery status message created " + timeSinceSent + "ms ago: "+ messageBody);
            _context.statManager().addRateData("inNetPool.droppedDeliveryStatusDelay",timeSinceSent);
          }
        }
 else         if (type == DatabaseSearchReplyMessage.MESSAGE_TYPE) {
          if (_log.shouldLog(Log.INFO))           _log.info("Dropping slow db lookup response: " + messageBody);
          _context.statManager().addRateData("inNetPool.droppedDbLookupResponseMessage",1);
        }
 else         if (type == DatabaseLookupMessage.MESSAGE_TYPE) {
          if (_log.shouldLog(Log.DEBUG))           _log.debug("Dropping netDb lookup due to throttling");
        }
 else {
          if (_log.shouldLog(Log.WARN))           _log.warn("Message expiring on " + messageBody.getMessageExpiration() + " was not handled by a HandlerJobBuilder - DROPPING: "+ messageBody,new Exception("f00!"));
          _context.statManager().addRateData("inNetPool.dropped",1);
        }
      }
 else {
        String mtype=messageBody.getClass().getName();
        _context.messageHistory().receiveMessage(mtype,messageBody.getUniqueId(),messageBody.getMessageExpiration(),fromRouterHash,true);
        return 0;
      }
    }
  }
  String mtype=messageBody.getClass().getName();
  _context.messageHistory().receiveMessage(mtype,messageBody.getUniqueId(),messageBody.getMessageExpiration(),fromRouterHash,true);
  return 0;
}
