{
  Date exp=msg.getMessage().getMessageExpiration();
  boolean valid=_context.messageValidator().validateMessage(msg.getMessage().getUniqueId(),exp.getTime());
  if (!valid) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Duplicate message received [" + msg.getMessage().getUniqueId() + " expiring on "+ exp+ "]: "+ msg.getMessage().getClass().getName());
    _context.statManager().addRateData("inNetPool.dropped",1,0);
    _context.statManager().addRateData("inNetPool.duplicate",1,0);
    _context.messageHistory().droppedOtherMessage(msg.getMessage());
    _context.messageHistory().messageProcessingError(msg.getMessage().getUniqueId(),msg.getMessage().getClass().getName(),"Duplicate/expired");
    return -1;
  }
 else {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Message received [" + msg.getMessage().getUniqueId() + " expiring on "+ exp+ "] is NOT a duplicate or exipired");
  }
  int size=-1;
  int type=msg.getMessage().getType();
  HandlerJobBuilder builder=(HandlerJobBuilder)_handlerJobBuilders.get(new Integer(type));
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Add message to the inNetMessage pool - builder: " + builder + " message class: "+ msg.getMessage().getClass().getName());
  if (builder != null) {
    Job job=builder.createJob(msg.getMessage(),msg.getFromRouter(),msg.getFromRouterHash(),msg.getReplyBlock());
    if (job != null) {
      _context.jobQueue().addJob(job);
synchronized (_messages) {
        size=_messages.size();
      }
    }
  }
  List origMessages=_context.messageRegistry().getOriginalMessages(msg.getMessage());
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Original messages for inbound message: " + origMessages.size());
  if (origMessages.size() > 1) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Orig: " + origMessages + " \nthe above are replies for: "+ msg,new Exception("Multiple matches"));
  }
  for (int i=0; i < origMessages.size(); i++) {
    OutNetMessage omsg=(OutNetMessage)origMessages.get(i);
    ReplyJob job=omsg.getOnReplyJob();
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Original message [" + i + "] "+ omsg.getReplySelector()+ " : "+ omsg+ ": reply job: "+ job);
    if (job != null) {
      job.setMessage(msg.getMessage());
      _context.jobQueue().addJob(job);
    }
  }
  if (origMessages.size() <= 0) {
    if (size == -1) {
      _context.messageHistory().droppedOtherMessage(msg.getMessage());
      if (msg.getMessage().getType() == DeliveryStatusMessage.MESSAGE_TYPE) {
        long timeSinceSent=_context.clock().now() - ((DeliveryStatusMessage)msg.getMessage()).getArrival().getTime();
        if (_log.shouldLog(Log.INFO))         _log.info("Dropping unhandled delivery status message created " + timeSinceSent + "ms ago: "+ msg);
        _context.statManager().addRateData("inNetPool.droppedDeliveryStatusDelay",timeSinceSent,timeSinceSent);
      }
 else {
        if (_log.shouldLog(Log.ERROR))         _log.error("Message " + msg.getMessage() + " was not handled by a HandlerJobBuilder - DROPPING: "+ msg,new Exception("DROPPED MESSAGE"));
        _context.statManager().addRateData("inNetPool.dropped",1,0);
      }
    }
 else {
      String mtype=msg.getMessage().getClass().getName();
      _context.messageHistory().receiveMessage(mtype,msg.getMessage().getUniqueId(),msg.getMessage().getMessageExpiration(),msg.getFromRouterHash(),true);
      return size;
    }
  }
  String mtype=msg.getMessage().getClass().getName();
  _context.messageHistory().receiveMessage(mtype,msg.getMessage().getUniqueId(),msg.getMessage().getMessageExpiration(),msg.getFromRouterHash(),true);
  return size;
}
