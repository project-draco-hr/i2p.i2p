{
  try {
    while (_alive) {
      long now=_context.clock().now();
      long timeToWait=-1;
      try {
synchronized (_jobLock) {
          Job lastJob=null;
          long lastTime=Long.MIN_VALUE;
          for (Iterator<Job> iter=_timedJobs.iterator(); iter.hasNext(); ) {
            Job j=iter.next();
            long timeLeft=j.getTiming().getStartAfter() - now;
            if (lastJob != null && lastTime > j.getTiming().getStartAfter()) {
              _log.error("Job " + lastJob + " out of order with job "+ j+ " difference of "+ DataHelper.formatDuration(lastTime - j.getTiming().getStartAfter()));
            }
            lastJob=j;
            lastTime=lastJob.getTiming().getStartAfter();
            if (timeLeft <= 0) {
              if (j instanceof JobImpl)               ((JobImpl)j).madeReady();
              _readyJobs.offer(j);
              iter.remove();
            }
 else {
              timeToWait=timeLeft;
              if (timeToWait > 10 * 1000 && iter.hasNext()) {
                if (_log.shouldLog(Log.INFO))                 _log.info("Failsafe re-sort job " + j + " with delay "+ DataHelper.formatDuration(timeToWait));
                iter.remove();
                Job nextJob=iter.next();
                _timedJobs.add(j);
                long nextTimeLeft=nextJob.getTiming().getStartAfter() - now;
                if (timeToWait > nextTimeLeft) {
                  _log.error("Job " + j + " out of order with job "+ nextJob+ " difference of "+ DataHelper.formatDuration(timeToWait - nextTimeLeft));
                  timeToWait=Math.max(10,nextTimeLeft);
                }
              }
              break;
            }
          }
          if (timeToWait < 0)           timeToWait=1000;
 else           if (timeToWait < 10)           timeToWait=10;
 else           if (timeToWait > 10 * 1000)           timeToWait=10 * 1000;
          _nextPumperRun=_context.clock().now() + timeToWait;
          _jobLock.wait(timeToWait);
        }
      }
 catch (      InterruptedException ie) {
      }
    }
  }
 catch (  Throwable t) {
    _context.clock().removeUpdateListener(this);
    if (_log.shouldLog(Log.ERROR))     _log.error("wtf, pumper killed",t);
  }
}
