{
  if (job == null || !_alive)   return;
  long numReady;
  boolean alreadyExists=false;
  boolean dropped=false;
  long now=_context.clock().now();
  long start=job.getTiming().getStartAfter();
  if (start > now + 3 * 24 * 60* 60* 1000L) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Scheduling job far in the future: " + (new Date(start)) + ' '+ job);
  }
synchronized (_jobLock) {
    if (_readyJobs.contains(job))     alreadyExists=true;
    numReady=_readyJobs.size();
    if (!alreadyExists) {
      boolean removed=_timedJobs.remove(job);
      if (removed && _log.shouldLog(Log.WARN))       _log.warn("Rescheduling job: " + job);
    }
    if ((!alreadyExists) && shouldDrop(job,numReady)) {
      job.dropped();
      dropped=true;
    }
 else {
      if (!alreadyExists) {
        if (start <= now) {
          job.getTiming().setStartAfter(now);
          if (job instanceof JobImpl)           ((JobImpl)job).madeReady();
          _readyJobs.offer(job);
        }
 else {
          _timedJobs.add(job);
          if (start < _nextPumperRun)           _jobLock.notifyAll();
        }
      }
    }
  }
  _context.statManager().addRateData("jobQueue.readyJobs",numReady);
  if (dropped) {
    _context.statManager().addRateData("jobQueue.droppedJobs",1);
    if (_log.shouldLog(Log.WARN))     _log.warn("Dropping job due to overload!  # ready jobs: " + numReady + ": job = "+ job);
    String key=job.getName();
    JobStats stats=_jobStats.get(key);
    if (stats == null) {
      stats=new JobStats(key);
      JobStats old=_jobStats.putIfAbsent(key,stats);
      if (old != null)       stats=old;
    }
    stats.jobDropped();
  }
}
