{
  if (job == null || !_alive)   return;
  long numReady=0;
  boolean alreadyExists=false;
  boolean dropped=false;
synchronized (_jobLock) {
    if (_readyJobs.contains(job))     alreadyExists=true;
    numReady=_readyJobs.size();
    if (!alreadyExists) {
      boolean removed=_timedJobs.remove(job);
      if (removed && _log.shouldLog(Log.WARN))       _log.warn("Rescheduling job: " + job);
    }
    if ((!alreadyExists) && shouldDrop(job,numReady)) {
      job.dropped();
      dropped=true;
    }
 else {
      if (!alreadyExists) {
        if (job.getTiming().getStartAfter() <= _context.clock().now()) {
          job.getTiming().setStartAfter(_context.clock().now());
          if (job instanceof JobImpl)           ((JobImpl)job).madeReady();
          _readyJobs.offer(job);
        }
 else {
          _timedJobs.add(job);
          _jobLock.notifyAll();
        }
      }
    }
  }
  _context.statManager().addRateData("jobQueue.readyJobs",numReady,0);
  if (dropped) {
    _context.statManager().addRateData("jobQueue.droppedJobs",1,0);
    _log.logAlways(Log.WARN,"Dropping job due to overload!  # ready jobs: " + numReady + ": job = "+ job);
  }
}
