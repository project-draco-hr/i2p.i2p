{
  ArrayList readyJobs=null;
  ArrayList timedJobs=null;
  ArrayList activeJobs=new ArrayList(1);
  ArrayList justFinishedJobs=new ArrayList(4);
synchronized (_readyJobs) {
    readyJobs=new ArrayList(_readyJobs);
  }
synchronized (_timedJobs) {
    timedJobs=new ArrayList(_timedJobs);
  }
synchronized (_queueRunners) {
    for (Iterator iter=_queueRunners.values().iterator(); iter.hasNext(); ) {
      JobQueueRunner runner=(JobQueueRunner)iter.next();
      Job job=runner.getCurrentJob();
      if (job != null) {
        activeJobs.add(job);
      }
 else {
        job=runner.getLastJob();
        justFinishedJobs.add(job);
      }
    }
  }
  StringBuffer buf=new StringBuffer(32 * 1024);
  buf.append("<h2>JobQueue</h2>");
  buf.append("# runners: ");
synchronized (_queueRunners) {
    buf.append(_queueRunners.size());
  }
  buf.append("<br />\n");
  long now=_context.clock().now();
  buf.append("# active jobs: ").append(activeJobs.size()).append("<ol>\n");
  for (int i=0; i < activeJobs.size(); i++) {
    Job j=(Job)activeJobs.get(i);
    buf.append("<li> [started ").append(now - j.getTiming().getStartAfter()).append("ms ago]: ");
    buf.append(j.toString()).append("</li>\n");
  }
  buf.append("</ol>\n");
  buf.append("# just finished jobs: ").append(justFinishedJobs.size()).append("<ol>\n");
  for (int i=0; i < justFinishedJobs.size(); i++) {
    Job j=(Job)justFinishedJobs.get(i);
    buf.append("<li> [finished ").append(now - j.getTiming().getActualEnd()).append("ms ago]: ");
    buf.append(j.toString()).append("</li>\n");
  }
  buf.append("</ol>\n");
  buf.append("# ready/waiting jobs: ").append(readyJobs.size()).append(" <i>(lots of these mean there's likely a big problem)</i><ol>\n");
  for (int i=0; i < readyJobs.size(); i++) {
    Job j=(Job)readyJobs.get(i);
    buf.append("<li> [waiting ").append(now - j.getTiming().getStartAfter()).append("ms]: ");
    buf.append(j.toString()).append("</li>\n");
  }
  buf.append("</ol>\n");
  buf.append("# timed jobs: ").append(timedJobs.size()).append("<ol>\n");
  TreeMap ordered=new TreeMap();
  for (int i=0; i < timedJobs.size(); i++) {
    Job j=(Job)timedJobs.get(i);
    ordered.put(new Long(j.getTiming().getStartAfter()),j);
  }
  for (Iterator iter=ordered.values().iterator(); iter.hasNext(); ) {
    Job j=(Job)iter.next();
    buf.append("<li>").append(j.getName()).append(" @ ");
    buf.append(new Date(j.getTiming().getStartAfter())).append("</li>\n");
  }
  buf.append("</ol>\n");
  getJobStats(buf);
  out.write(buf.toString().getBytes());
}
