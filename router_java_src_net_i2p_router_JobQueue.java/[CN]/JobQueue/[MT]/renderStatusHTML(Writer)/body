{
  ArrayList readyJobs=null;
  ArrayList timedJobs=null;
  ArrayList activeJobs=new ArrayList(1);
  ArrayList justFinishedJobs=new ArrayList(4);
  out.flush();
  int states[]=null;
  int numRunners=0;
synchronized (_queueRunners) {
    states=new int[_queueRunners.size()];
    int i=0;
    for (Iterator iter=_queueRunners.values().iterator(); iter.hasNext(); i++) {
      JobQueueRunner runner=(JobQueueRunner)iter.next();
      states[i]=runner.getState();
      Job job=runner.getCurrentJob();
      if (job != null) {
        activeJobs.add(job);
      }
 else {
        job=runner.getLastJob();
        if (job != null)         justFinishedJobs.add(job);
      }
    }
    numRunners=_queueRunners.size();
  }
synchronized (_jobLock) {
    readyJobs=new ArrayList(_readyJobs);
    timedJobs=new ArrayList(_timedJobs);
  }
  StringBuilder buf=new StringBuilder(32 * 1024);
  buf.append("<b><div class=\"joblog\"><h3>I2P Job Queue</h3><div class=\"wideload\">Job runners: ").append(numRunners);
  buf.append("</b><br />\n");
  long now=_context.clock().now();
  buf.append("<hr><b>Active jobs: ").append(activeJobs.size()).append("</b><ol>\n");
  for (int i=0; i < activeJobs.size(); i++) {
    Job j=(Job)activeJobs.get(i);
    buf.append("<li>[started ").append(DataHelper.formatDuration(now - j.getTiming().getStartAfter())).append(" ago]: ");
    buf.append(j.toString()).append("</li>\n");
  }
  buf.append("</ol>\n");
  buf.append("<hr><b>Just finished jobs: ").append(justFinishedJobs.size()).append("</b><ol>\n");
  for (int i=0; i < justFinishedJobs.size(); i++) {
    Job j=(Job)justFinishedJobs.get(i);
    buf.append("<li>[finished ").append(DataHelper.formatDuration(now - j.getTiming().getActualEnd())).append(" ago]: ");
    buf.append(j.toString()).append("</li>\n");
  }
  buf.append("</ol>\n");
  buf.append("<hr><b>Ready/waiting jobs: ").append(readyJobs.size()).append("</b><ol>\n");
  for (int i=0; i < readyJobs.size(); i++) {
    Job j=(Job)readyJobs.get(i);
    buf.append("<li>[waiting ");
    buf.append(DataHelper.formatDuration(now - j.getTiming().getStartAfter()));
    buf.append("]: ");
    buf.append(j.toString()).append("</li>\n");
  }
  buf.append("</ol>\n");
  out.flush();
  buf.append("<hr><b>Scheduled jobs: ").append(timedJobs.size()).append("</b><ol>\n");
  TreeMap ordered=new TreeMap();
  for (int i=0; i < timedJobs.size(); i++) {
    Job j=(Job)timedJobs.get(i);
    ordered.put(new Long(j.getTiming().getStartAfter()),j);
  }
  for (Iterator iter=ordered.values().iterator(); iter.hasNext(); ) {
    Job j=(Job)iter.next();
    long time=j.getTiming().getStartAfter() - now;
    buf.append("<li>").append(j.getName()).append(" in ");
    buf.append(DataHelper.formatDuration(time)).append("</li>\n");
  }
  buf.append("</ol></div>\n");
  out.flush();
  getJobStats(buf);
  out.flush();
  out.write(buf.toString());
}
