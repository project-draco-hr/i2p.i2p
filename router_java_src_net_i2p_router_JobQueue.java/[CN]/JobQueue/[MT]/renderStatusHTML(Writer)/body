{
  ArrayList readyJobs=null;
  ArrayList timedJobs=null;
  ArrayList activeJobs=new ArrayList(1);
  ArrayList justFinishedJobs=new ArrayList(4);
  out.write("<!-- jobQueue rendering -->\n");
  out.flush();
  int states[]=null;
  int numRunners=0;
synchronized (_queueRunners) {
    states=new int[_queueRunners.size()];
    int i=0;
    for (Iterator iter=_queueRunners.values().iterator(); iter.hasNext(); i++) {
      JobQueueRunner runner=(JobQueueRunner)iter.next();
      states[i]=runner.getState();
      Job job=runner.getCurrentJob();
      if (job != null) {
        activeJobs.add(job);
      }
 else {
        job=runner.getLastJob();
        if (job != null)         justFinishedJobs.add(job);
      }
    }
    numRunners=_queueRunners.size();
  }
  StringBuffer str=new StringBuffer(128);
  str.append("<!-- after queueRunner sync: states: ");
  for (int i=0; states != null && i < states.length; i++)   str.append(states[i]).append(" ");
  str.append(" -->\n");
  str.append("<!-- jobs: ");
  for (int i=0; i < activeJobs.size(); i++)   str.append(activeJobs.get(i).toString()).append(" ");
  str.append("-->\n");
  out.write(str.toString());
  out.flush();
synchronized (_jobLock) {
    readyJobs=new ArrayList(_readyJobs);
    timedJobs=new ArrayList(_timedJobs);
  }
  out.write("<!-- jobQueue rendering: after jobLock sync -->\n");
  out.flush();
  StringBuffer buf=new StringBuffer(32 * 1024);
  buf.append("<h2>JobQueue</h2>");
  buf.append("# runners: ").append(numRunners).append(" [states=");
  if (states != null)   for (int i=0; i < states.length; i++)   buf.append(states[i]).append(" ");
  buf.append("]<br />\n");
  long now=_context.clock().now();
  buf.append("# active jobs: ").append(activeJobs.size()).append("<ol>\n");
  for (int i=0; i < activeJobs.size(); i++) {
    Job j=(Job)activeJobs.get(i);
    buf.append("<li> [started ").append(now - j.getTiming().getStartAfter()).append("ms ago]: ");
    buf.append(j.toString()).append("</li>\n");
  }
  buf.append("</ol>\n");
  buf.append("# just finished jobs: ").append(justFinishedJobs.size()).append("<ol>\n");
  for (int i=0; i < justFinishedJobs.size(); i++) {
    Job j=(Job)justFinishedJobs.get(i);
    buf.append("<li> [finished ").append(now - j.getTiming().getActualEnd()).append("ms ago]: ");
    buf.append(j.toString()).append("</li>\n");
  }
  buf.append("</ol>\n");
  buf.append("# ready/waiting jobs: ").append(readyJobs.size()).append(" <i>(lots of these mean there's likely a big problem)</i><ol>\n");
  for (int i=0; i < readyJobs.size(); i++) {
    Job j=(Job)readyJobs.get(i);
    buf.append("<li> [waiting ");
    buf.append(DataHelper.formatDuration(now - j.getTiming().getStartAfter()));
    buf.append("]: ");
    buf.append(j.toString()).append("</li>\n");
  }
  buf.append("</ol>\n");
  out.flush();
  buf.append("# timed jobs: ").append(timedJobs.size()).append("<ol>\n");
  TreeMap ordered=new TreeMap();
  for (int i=0; i < timedJobs.size(); i++) {
    Job j=(Job)timedJobs.get(i);
    ordered.put(new Long(j.getTiming().getStartAfter()),j);
  }
  for (Iterator iter=ordered.values().iterator(); iter.hasNext(); ) {
    Job j=(Job)iter.next();
    long time=j.getTiming().getStartAfter() - now;
    buf.append("<li>").append(j.getName()).append(" in ");
    buf.append(DataHelper.formatDuration(time)).append("</li>\n");
  }
  buf.append("</ol>\n");
  out.write("<!-- jobQueue rendering: after main buffer, before stats -->\n");
  out.flush();
  getJobStats(buf);
  out.write("<!-- jobQueue rendering: after stats -->\n");
  out.flush();
  out.write(buf.toString());
}
