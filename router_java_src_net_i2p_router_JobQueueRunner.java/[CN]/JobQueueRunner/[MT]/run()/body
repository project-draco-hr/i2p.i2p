{
  long lastActive=_context.clock().now();
  while ((_keepRunning) && (_context.jobQueue().isAlive())) {
    try {
      Job job=_context.jobQueue().getNext();
      if (job == null) {
        if (_context.router().isAlive())         if (_log.shouldLog(Log.ERROR))         _log.error("getNext returned null - dead?");
        continue;
      }
      long now=_context.clock().now();
      long enqueuedTime=0;
      if (job instanceof JobImpl) {
        long when=((JobImpl)job).getMadeReadyOn();
        if (when <= 0) {
          _log.error("Job was not made ready?! " + job,new Exception("Not made ready?!"));
        }
 else {
          enqueuedTime=now - when;
        }
      }
      _currentJob=job;
      _lastJob=null;
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Runner " + _id + " running job "+ job.getJobId()+ ": "+ job.getName());
      long origStartAfter=job.getTiming().getStartAfter();
      long doStart=_context.clock().now();
      job.getTiming().start();
      runCurrentJob();
      job.getTiming().end();
      long duration=job.getTiming().getActualEnd() - job.getTiming().getActualStart();
      long beforeUpdate=_context.clock().now();
      _context.jobQueue().updateStats(job,doStart,origStartAfter,duration);
      long diff=_context.clock().now() - beforeUpdate;
      long lag=doStart - origStartAfter;
      if (lag < 0)       lag=0;
      _context.statManager().addRateData("jobQueue.jobRun",duration,duration);
      _context.statManager().addRateData("jobQueue.jobLag",lag);
      _context.statManager().addRateData("jobQueue.jobWait",enqueuedTime,enqueuedTime);
      if (duration > 1000) {
        _context.statManager().addRateData("jobQueue.jobRunSlow",duration,duration);
        if (_log.shouldLog(Log.WARN))         _log.warn("Duration of " + duration + " (lag "+ (doStart - origStartAfter)+ ") on job "+ _currentJob);
      }
      if (diff > 100) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Updating statistics for the job took too long [" + diff + "ms]");
      }
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Job duration " + duration + "ms for "+ job.getName()+ " with lag of "+ (doStart - origStartAfter)+ "ms");
      lastActive=_context.clock().now();
      _lastJob=_currentJob;
      _currentJob=null;
      _lastEnd=lastActive;
    }
 catch (    Throwable t) {
      _log.log(Log.CRIT,"error running?",t);
    }
  }
  if (_context.router().isAlive())   _log.log(Log.CRIT,"Queue runner " + _id + " exiting");
  _context.jobQueue().removeRunner(_id);
}
