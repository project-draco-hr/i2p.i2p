{
  if (useSmallPayload()) {
    DeliveryStatusMessage m=new DeliveryStatusMessage(_context);
    long now=_context.clock().now();
    m.setArrival(now);
    m.setMessageExpiration(now + 10 * 1000);
    m.setMessageId(_context.random().nextLong(I2NPMessage.MAX_ID_VALUE));
    return m;
  }
 else {
    DataMessage m=new DataMessage(_context);
    byte data[]=new byte[4096];
    _context.random().nextBytes(data);
    m.setData(data);
    long now=_context.clock().now();
    m.setMessageExpiration(now + 10 * 1000);
    if (true) {
      DeliveryInstructions instructions=new DeliveryInstructions();
      instructions.setDeliveryMode(DeliveryInstructions.DELIVERY_MODE_LOCAL);
      PayloadGarlicConfig payload=new PayloadGarlicConfig();
      payload.setCertificate(new Certificate(Certificate.CERTIFICATE_TYPE_NULL,null));
      payload.setId(_context.random().nextLong(I2NPMessage.MAX_ID_VALUE));
      payload.setId(m.getUniqueId());
      payload.setPayload(m);
      payload.setRecipient(_context.router().getRouterInfo());
      payload.setDeliveryInstructions(instructions);
      payload.setRequestAck(false);
      payload.setExpiration(m.getMessageExpiration());
      SessionKey encryptKey=_context.keyGenerator().generateSessionKey();
      SessionTag encryptTag=new SessionTag(true);
      SessionKey sentKey=new SessionKey();
      Set sentTags=null;
      GarlicMessage msg=GarlicMessageBuilder.buildMessage(_context,payload,sentKey,sentTags,_context.keyManager().getPublicKey(),encryptKey,encryptTag);
      Set encryptTags=new HashSet(1);
      encryptTags.add(encryptTag);
      _context.sessionKeyManager().tagsReceived(encryptKey,encryptTags);
      return msg;
    }
 else {
      return m;
    }
  }
}
