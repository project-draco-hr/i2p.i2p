{
  long now=_context.clock().now();
  if (now > tunnel.getExpiration()) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Not sending a test message to " + tunnel + " because it expired");
    tunnel.logComplete();
    _active.remove(tunnel);
    return;
  }
  if (TEST_LIVE_TUNNELS) {
    TunnelInfo inbound=tunnel.getInbound();
    TunnelInfo outbound=tunnel.getOutbound();
    if ((inbound == null) || (outbound == null)) {
      pickTunnels(tunnel);
      inbound=tunnel.getInbound();
      outbound=tunnel.getOutbound();
    }
    if (inbound == null) {
      log(tunnel,"No inbound tunnels found");
      _active.remove(tunnel);
      return;
    }
 else     if (outbound == null) {
      log(tunnel,"No outbound tunnels found");
      tunnel.logComplete();
      _active.remove(tunnel);
      return;
    }
    if ((now >= inbound.getExpiration()) || (now >= outbound.getExpiration())) {
      tunnel.logComplete();
      _active.remove(tunnel);
      return;
    }
    if (_log.shouldLog(Log.DEBUG))     _log.debug("inbound and outbound found for " + tunnel);
    I2NPMessage payloadMessage=createPayloadMessage();
    if (_log.shouldLog(Log.DEBUG))     _log.debug("testing live tunnels with inbound [" + inbound + "] and outbound ["+ outbound+ "]");
    _context.messageRegistry().registerPending(new Selector(tunnel,payloadMessage.getUniqueId()),new SendAgain(_context,tunnel,payloadMessage.getUniqueId(),true),new SendAgain(_context,tunnel,payloadMessage.getUniqueId(),false),10 * 1000);
    _context.tunnelDispatcher().dispatchOutbound(payloadMessage,outbound.getSendTunnelId(0),inbound.getReceiveTunnelId(0),inbound.getPeer(0));
  }
 else {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("NOT testing live tunnels for [" + tunnel + "]");
    RouterInfo target=_context.netDb().lookupRouterInfoLocally(tunnel.getPeer(0));
    if (target == null) {
      log(tunnel,"lookup failed");
      return;
    }
    I2NPMessage payloadMessage=createPayloadMessage();
    TunnelGatewayMessage tm=new TunnelGatewayMessage(_context);
    tm.setMessage(payloadMessage);
    tm.setTunnelId(tunnel.getReceiveTunnelId(0));
    tm.setMessageExpiration(payloadMessage.getMessageExpiration());
    OutNetMessage om=new OutNetMessage(_context);
    om.setMessage(tm);
    SendAgain failed=new SendAgain(_context,tunnel,payloadMessage.getUniqueId(),false);
    om.setOnFailedReplyJob(failed);
    om.setOnReplyJob(new SendAgain(_context,tunnel,payloadMessage.getUniqueId(),true));
    om.setReplySelector(new Selector(tunnel,payloadMessage.getUniqueId()));
    om.setTarget(target);
    om.setExpiration(tm.getMessageExpiration());
    om.setPriority(40);
    _context.outNetMessagePool().add(om);
  }
}
