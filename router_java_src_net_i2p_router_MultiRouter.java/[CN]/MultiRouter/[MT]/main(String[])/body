{
  if ((args == null) || (args.length <= 1)) {
    usage();
    return;
  }
  _defaultContext=new I2PAppContext(getEnv(args[0]));
  _log=_defaultContext.logManager().getLog(MultiRouter.class);
  try {
    Thread.sleep(5 * 1000);
  }
 catch (  InterruptedException ie) {
  }
  _defaultContext.clock().setOffset(0);
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      Thread.currentThread().setName("Router* Shutdown");
      try {
        Thread.sleep(120 * 1000);
      }
 catch (      InterruptedException ie) {
      }
      Runtime.getRuntime().halt(-1);
    }
  }
);
  for (int i=1; i < args.length; i++) {
    Router router=new Router(getEnv(args[i]));
    router.setKillVMOnEnd(false);
    _routers.add(router);
    _log.info("Router " + i + " created from "+ args[i]);
  }
  for (int i=0; i < _routers.size(); i++) {
    Router r=(Router)_routers.get(i);
    long offset=r.getContext().random().nextLong(Router.CLOCK_FUDGE_FACTOR / 2);
    if (r.getContext().random().nextBoolean())     offset=0 - offset;
    r.getContext().clock().setOffset(offset,true);
    r.runRouter();
    _log.info("Router " + i + " started with clock offset "+ offset);
    try {
      Thread.sleep(2 * 1000 + new java.util.Random().nextInt(2) * 1000);
    }
 catch (    InterruptedException ie) {
    }
  }
  _log.info("All " + _routers.size() + " routers started up");
  waitForCompletion();
}
