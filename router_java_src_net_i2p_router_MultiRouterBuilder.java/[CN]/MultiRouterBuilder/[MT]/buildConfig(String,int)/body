{
  File baseDir=new File(dir);
  baseDir.mkdirs();
  File cfgFile=new File(baseDir,"router.config");
  StringBuffer buf=new StringBuffer(8 * 1024);
  buf.append("i2np.bandwidth.inboundBytesPerMinute=-60\n");
  buf.append("i2np.bandwidth.outboundBytesPerMinute=-60\n");
  buf.append("router.publishPeerRankings=true\n");
  buf.append("router.keepHistory=true\n");
  buf.append("router.submitHistory=false\n");
  buf.append("router.maxJobRunners=1\n");
  buf.append("router.jobLagWarning=10000\n");
  buf.append("router.jobLagFatal=30000\n");
  buf.append("router.jobRunWarning=10000\n");
  buf.append("router.jobRunFatal=30000\n");
  buf.append("router.jobWarmupTime=600000\n");
  buf.append("router.targetClients=2\n");
  buf.append("tunnels.numInbound=2\n");
  buf.append("tunnels.numOutbound=2\n");
  buf.append("tunnels.depthInbound=2\n");
  buf.append("tunnels.depthOutbound=2\n");
  buf.append("tunnels.tunnelDuration=600000\n");
  buf.append("router.maxWaitingJobs=30\n");
  buf.append("router.profileDir=").append(baseDir.getPath()).append("/peerProfiles\n");
  buf.append("router.historyFilename=").append(baseDir.getPath()).append("/messageHistory.txt\n");
  buf.append("router.sessionKeys.location=").append(baseDir.getPath()).append("/sessionKeys.dat\n");
  buf.append("router.info.location=").append(baseDir.getPath()).append("/router.info\n");
  buf.append("router.keys.location=").append(baseDir.getPath()).append("/router.keys\n");
  buf.append("router.networkDatabase.dbDir=").append(baseDir.getPath()).append("/netDb\n");
  buf.append("router.tunnelPoolFile=").append(baseDir.getPath()).append("/tunnelPool.dat\n");
  buf.append("router.keyBackupDir=").append(baseDir.getPath()).append("/keyBackup\n");
  buf.append("i2np.tcp.port=").append(basePort).append('\n');
  buf.append("i2cp.port=").append(basePort + 1).append('\n');
  buf.append("router.adminPort=").append(basePort + 2).append('\n');
  buf.append("#clientApp.0.main=net.i2p.sam.SAMBridge\n");
  buf.append("#clientApp.0.name=SAM\n");
  buf.append("#clientApp.0.args=localhost ").append(basePort + 3).append(" i2cp.tcp.host=localhost i2cp.tcp.port=").append(basePort + 1).append("\n");
  buf.append("#clientApp.1.main=net.i2p.i2ptunnel.I2PTunnel\n");
  buf.append("#clientApp.1.name=EepProxy\n");
  buf.append("#clientApp.1.args=-nogui -e \"config localhost ").append(basePort + 1).append("\" -e \"httpclient ").append(basePort + 4).append("\"\n");
  buf.append("#clientApp.2.main=net.i2p.heartbeat.Heartbeat\n");
  buf.append("#clientApp.2.name=Heartbeat\n");
  buf.append("#clientApp.2.args=").append(baseDir.getPath()).append("/heartbeat.config\n");
  try {
    FileOutputStream fos=new FileOutputStream(cfgFile);
    fos.write(buf.toString().getBytes());
    fos.close();
    fos=new FileOutputStream(new File(baseDir,"heartbeat.config"));
    StringBuffer tbuf=new StringBuffer(1024);
    tbuf.append("i2cpHost=localhost\n");
    tbuf.append("i2cpPort=").append(basePort + 1).append('\n');
    tbuf.append("numHops=2\n");
    tbuf.append("privateDestinationFile=").append(baseDir.getPath()).append("/heartbeat.keys\n");
    tbuf.append("publicDestinationFile=").append(baseDir.getPath()).append("/heartbeat.txt\n");
    fos.write(tbuf.toString().getBytes());
    fos.close();
    File envFile=new File(baseDir,"routerEnv.txt");
    fos=new FileOutputStream(envFile);
    fos.write(("loggerFilenameOverride=" + baseDir + "/logs/log-router-#.txt\n").getBytes());
    fos.write(("router.configLocation=" + baseDir + "/router.config\n").getBytes());
    fos.write(("i2p.vmCommSystem=true\n").getBytes());
    fos.write(("i2p.encryption=off\n").getBytes());
    fos.close();
    File f=new File(baseDir,"logs");
    f.mkdirs();
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
}
