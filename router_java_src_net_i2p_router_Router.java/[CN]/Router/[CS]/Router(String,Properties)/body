{
  _gracefulExitCode=-1;
  _config=new ConcurrentHashMap();
  if (configFilename == null) {
    if (envProps != null) {
      _configFilename=envProps.getProperty(PROP_CONFIG_FILE);
    }
    if (_configFilename == null)     _configFilename=System.getProperty(PROP_CONFIG_FILE,"router.config");
  }
 else {
    _configFilename=configFilename;
  }
  String migrate=System.getProperty("i2p.dir.migrate");
  boolean migrateFiles=Boolean.valueOf(migrate).booleanValue();
  String userDir=WorkingDir.getWorkingDir(envProps,migrateFiles);
  File cf=new File(_configFilename);
  if (!cf.isAbsolute()) {
    cf=new File(userDir,_configFilename);
    _configFilename=cf.getAbsolutePath();
  }
  readConfig();
  if (envProps == null)   envProps=new Properties();
  envProps.putAll(_config);
  if (envProps.getProperty("i2p.dir.config") == null)   envProps.setProperty("i2p.dir.config",userDir);
  envProps.setProperty("i2p.systemTimeZone",originalTimeZoneID);
  List<RouterContext> contexts=RouterContext.getContexts();
  if (contexts.isEmpty()) {
    RouterContext.killGlobalContext();
  }
 else   if (System.getProperty("java.vendor").contains("Android")) {
    System.err.println("Warning: Killing " + contexts.size() + " other routers in this JVM");
    contexts.clear();
    RouterContext.killGlobalContext();
  }
 else {
    System.err.println("Warning: " + contexts.size() + " other routers in this JVM");
  }
  _context=new RouterContext(this,envProps);
  if (!isOnlyRouterRunning()) {
    System.err.println("ERROR: There appears to be another router already running!");
    System.err.println("       Please make sure to shut down old instances before starting up");
    System.err.println("       a new one.  If you are positive that no other instance is running,");
    System.err.println("       please delete the file " + getPingFile().getAbsolutePath());
    System.exit(-1);
  }
  if (_config.get("router.firstVersion") == null) {
    _config.put("router.firstVersion",RouterVersion.VERSION);
    String now=Long.toString(System.currentTimeMillis());
    _config.put("router.firstInstalled",now);
    _config.put("router.updateLastInstalled",now);
    saveConfig();
  }
  installUpdates();
  beginMarkingLiveliness();
  System.setProperty("router.version",RouterVersion.VERSION);
  _context.initAll();
  if (_context.hasWrapper()) {
    File f=new File(System.getProperty("java.io.tmpdir"),"wrapper.log");
    if (!f.exists())     f=new File(_context.getBaseDir(),"wrapper.log");
    if (f.exists())     SecureFileOutputStream.setPerms(f);
  }
  _routerInfo=null;
  _higherVersionSeen=false;
  _log=_context.logManager().getLog(Router.class);
  _log.info("New router created with config file " + _configFilename);
  _killVMOnEnd=true;
  _oomListener=new I2PThread.OOMEventListener(){
    public void outOfMemory(    OutOfMemoryError oom){
      clearCaches();
      _log.log(Log.CRIT,"Thread ran out of memory",oom);
      for (int i=0; i < 5; i++) {
        try {
          _log.log(Log.CRIT,"free mem: " + Runtime.getRuntime().freeMemory() + " total mem: "+ Runtime.getRuntime().totalMemory());
          break;
        }
 catch (        OutOfMemoryError oome) {
        }
      }
      shutdown(EXIT_OOM);
    }
  }
;
  _shutdownHook=new ShutdownHook(_context);
  _gracefulShutdownDetector=new I2PAppThread(new GracefulShutdown(),"Graceful shutdown hook",true);
  _gracefulShutdownDetector.start();
  _watchdog=new RouterWatchdog(_context);
  _watchdogThread=new I2PAppThread(_watchdog,"RouterWatchdog",true);
  _watchdogThread.start();
}
