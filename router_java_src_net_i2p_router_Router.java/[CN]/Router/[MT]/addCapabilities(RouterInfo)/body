{
  int bwLim=Math.min(_context.bandwidthLimiter().getInboundKBytesPerSecond(),_context.bandwidthLimiter().getOutboundKBytesPerSecond());
  bwLim=(int)(bwLim * getSharePercentage());
  if (_log.shouldLog(Log.INFO))   _log.info("Adding capabilities w/ bw limit @ " + bwLim,new Exception("caps"));
  String force=_context.getProperty(PROP_FORCE_BWCLASS);
  if (force != null && force.length() > 0) {
    ri.addCapability(force.charAt(0));
  }
 else   if (bwLim < 12) {
    ri.addCapability(CAPABILITY_BW12);
  }
 else   if (bwLim <= 32) {
    ri.addCapability(CAPABILITY_BW32);
  }
 else   if (bwLim <= 64) {
    ri.addCapability(CAPABILITY_BW64);
  }
 else   if (bwLim <= 128) {
    ri.addCapability(CAPABILITY_BW128);
  }
 else {
    ri.addCapability(CAPABILITY_BW256);
  }
  if (_context.netDb().floodfillEnabled() && !_context.getBooleanProperty("router.hideFloodfillParticipant"))   ri.addCapability(FloodfillNetworkDatabaseFacade.CAPABILITY_FLOODFILL);
  if (_context.getBooleanProperty(PROP_HIDDEN))   ri.addCapability(RouterInfo.CAPABILITY_HIDDEN);
  if (_context.getBooleanProperty(PROP_FORCE_UNREACHABLE)) {
    ri.addCapability(CAPABILITY_UNREACHABLE);
    return;
  }
switch (_context.commSystem().getReachabilityStatus()) {
case CommSystemFacade.STATUS_OK:
    ri.addCapability(CAPABILITY_REACHABLE);
  break;
case CommSystemFacade.STATUS_DIFFERENT:
case CommSystemFacade.STATUS_REJECT_UNSOLICITED:
ri.addCapability(CAPABILITY_UNREACHABLE);
break;
case CommSystemFacade.STATUS_DISCONNECTED:
case CommSystemFacade.STATUS_HOSED:
case CommSystemFacade.STATUS_UNKNOWN:
break;
}
}
