{
  int bwLim=Math.min(_context.bandwidthLimiter().getInboundKBytesPerSecond(),_context.bandwidthLimiter().getOutboundKBytesPerSecond());
  bwLim=(int)(((float)bwLim) * getSharePercentage());
  if (_log.shouldLog(Log.INFO))   _log.info("Adding capabilities w/ bw limit @ " + bwLim,new Exception("caps"));
  if (bwLim < 12) {
    ri.addCapability(CAPABILITY_BW12);
  }
 else   if (bwLim <= 32) {
    ri.addCapability(CAPABILITY_BW32);
  }
 else   if (bwLim <= 64) {
    ri.addCapability(CAPABILITY_BW64);
  }
 else   if (bwLim <= 128) {
    ri.addCapability(CAPABILITY_BW128);
  }
 else {
    ri.addCapability(CAPABILITY_BW256);
  }
  if (FloodfillNetworkDatabaseFacade.floodfillEnabled(_context) && !Boolean.valueOf(_context.getProperty("router.hideFloodfillParticipant")).booleanValue())   ri.addCapability(FloodfillNetworkDatabaseFacade.CAPACITY_FLOODFILL);
  if (Boolean.valueOf(_context.getProperty(PROP_HIDDEN)).booleanValue())   ri.addCapability(RouterInfo.CAPABILITY_HIDDEN);
  if (Boolean.valueOf(_context.getProperty(PROP_FORCE_UNREACHABLE)).booleanValue()) {
    ri.addCapability(CAPABILITY_UNREACHABLE);
    return;
  }
switch (_context.commSystem().getReachabilityStatus()) {
case CommSystemFacade.STATUS_OK:
    ri.addCapability(CAPABILITY_REACHABLE);
  break;
case CommSystemFacade.STATUS_DIFFERENT:
case CommSystemFacade.STATUS_REJECT_UNSOLICITED:
ri.addCapability(CAPABILITY_UNREACHABLE);
break;
case CommSystemFacade.STATUS_UNKNOWN:
break;
}
}
