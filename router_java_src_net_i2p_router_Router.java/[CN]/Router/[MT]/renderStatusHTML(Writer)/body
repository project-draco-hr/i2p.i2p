{
  out.write("<h1>Router console</h1>\n" + "<i><a href=\"/oldconsole.jsp\">console</a> | <a href=\"/oldstats.jsp\">stats</a></i><br>\n" + "<form action=\"/oldconsole.jsp\">"+ "<select name=\"go\" onChange='location.href=this.value'>"+ "<option value=\"/oldconsole.jsp#bandwidth\">Bandwidth</option>\n"+ "<option value=\"/oldconsole.jsp#clients\">Clients</option>\n"+ "<option value=\"/oldconsole.jsp#transports\">Transports</option>\n"+ "<option value=\"/oldconsole.jsp#profiles\">Peer Profiles</option>\n"+ "<option value=\"/oldconsole.jsp#tunnels\">Tunnels</option>\n"+ "<option value=\"/oldconsole.jsp#jobs\">Jobs</option>\n"+ "<option value=\"/oldconsole.jsp#shitlist\">Shitlist</option>\n"+ "<option value=\"/oldconsole.jsp#pending\">Pending messages</option>\n"+ "<option value=\"/oldconsole.jsp#netdb\">Network Database</option>\n"+ "<option value=\"/oldconsole.jsp#logs\">Log messages</option>\n"+ "</select> <input type=\"submit\" value=\"GO\" /> </form>"+ "<hr />\n");
  StringBuffer buf=new StringBuffer(32 * 1024);
  if ((_routerInfo != null) && (_routerInfo.getIdentity() != null))   buf.append("<b>Router: </b> ").append(_routerInfo.getIdentity().getHash().toBase64()).append("<br />\n");
  buf.append("<b>As of: </b> ").append(new Date(_context.clock().now())).append(" (uptime: ").append(DataHelper.formatDuration(getUptime())).append(") <br />\n");
  buf.append("<b>Started on: </b> ").append(new Date(getWhenStarted())).append("<br />\n");
  buf.append("<b>Clock offset: </b> ").append(_context.clock().getOffset()).append("ms (OS time: ").append(new Date(_context.clock().now() - _context.clock().getOffset())).append(")<br />\n");
  long tot=Runtime.getRuntime().totalMemory() / 1024;
  long free=Runtime.getRuntime().freeMemory() / 1024;
  buf.append("<b>Memory:</b> In use: ").append((tot - free)).append("KB Free: ").append(free).append("KB <br />\n");
  buf.append("<b>Version:</b> Router: ").append(RouterVersion.VERSION).append(" / SDK: ").append(CoreVersion.VERSION).append("<br />\n");
  if (_higherVersionSeen)   buf.append("<b><font color=\"red\">HIGHER VERSION SEEN</font><b> - please <a href=\"http://www.i2p.net/\">check</a> to see if there is a new release out<br />\n");
  buf.append("<hr /><a name=\"bandwidth\"> </a><h2>Bandwidth</h2>\n");
  long sent=_context.bandwidthLimiter().getTotalAllocatedOutboundBytes();
  long received=_context.bandwidthLimiter().getTotalAllocatedInboundBytes();
  buf.append("<ul>");
  buf.append("<li> ").append(sent).append(" bytes sent, ");
  buf.append(received).append(" bytes received</li>");
  long notSent=_context.bandwidthLimiter().getTotalWastedOutboundBytes();
  long notReceived=_context.bandwidthLimiter().getTotalWastedInboundBytes();
  buf.append("<li> ").append(notSent).append(" bytes outbound bytes unused, ");
  buf.append(notReceived).append(" bytes inbound bytes unused</li>");
  DecimalFormat fmt=new DecimalFormat("##0.00");
  long lifetime=_context.clock().now() - _context.clock().getOffset() - getWhenStarted();
  lifetime/=1000;
  if ((sent > 0) && (received > 0)) {
    double sendKBps=sent / (lifetime * 1024.0);
    double receivedKBps=received / (lifetime * 1024.0);
    buf.append("<li>Lifetime rate: ");
    buf.append(fmt.format(sendKBps)).append("KBps sent ");
    buf.append(fmt.format(receivedKBps)).append("KBps received");
    buf.append("</li>");
  }
  if ((notSent > 0) && (notReceived > 0)) {
    double notSendKBps=notSent / (lifetime * 1024.0);
    double notReceivedKBps=notReceived / (lifetime * 1024.0);
    buf.append("<li>Lifetime unused rate: ");
    buf.append(fmt.format(notSendKBps)).append("KBps outbound unused  ");
    buf.append(fmt.format(notReceivedKBps)).append("KBps inbound unused");
    buf.append("</li>");
  }
  RateStat sendRate=_context.statManager().getRate("transport.sendMessageSize");
  for (int i=0; i < sendRate.getPeriods().length; i++) {
    Rate rate=sendRate.getRate(sendRate.getPeriods()[i]);
    double bytes=rate.getLastTotalValue();
    long ms=rate.getLastTotalEventTime() + rate.getLastTotalEventTime();
    if (ms <= 0) {
      bytes=0;
      ms=1;
    }
    buf.append("<li>");
    buf.append(DataHelper.formatDuration(rate.getPeriod())).append(" instantaneous send avg: ");
    double bps=bytes * 1000.0d / ms;
    if (bps > 2048) {
      bps/=1024.0d;
      buf.append(fmt.format(bps)).append(" KBps");
    }
 else {
      buf.append(fmt.format(bps)).append(" Bps");
    }
    buf.append(" over ").append((long)bytes).append(" bytes");
    buf.append("</li><li>");
    buf.append(DataHelper.formatDuration(rate.getPeriod())).append(" period send avg: ");
    bps=bytes * 1000.0d / (rate.getPeriod());
    if (bps > 2048) {
      bps/=1024.0d;
      buf.append(fmt.format(bps)).append(" KBps");
    }
 else {
      buf.append(fmt.format(bps)).append(" Bps");
    }
    buf.append(" over ").append((long)bytes).append(" bytes");
    buf.append("</li>");
  }
  RateStat receiveRate=_context.statManager().getRate("transport.receiveMessageSize");
  for (int i=0; i < receiveRate.getPeriods().length; i++) {
    Rate rate=receiveRate.getRate(receiveRate.getPeriods()[i]);
    double bytes=rate.getLastTotalValue();
    long ms=rate.getLastTotalEventTime();
    if (ms <= 0) {
      bytes=0;
      ms=1;
    }
    buf.append("<li>");
    buf.append(DataHelper.formatDuration(rate.getPeriod())).append(" instantaneous receive avg: ");
    double bps=bytes * 1000.0d / ms;
    if (bps > 2048) {
      bps/=1024.0d;
      buf.append(fmt.format(bps)).append(" KBps ");
    }
 else {
      buf.append(fmt.format(bps)).append(" Bps ");
    }
    buf.append(" over ").append((long)bytes).append(" bytes");
    buf.append("</li><li>");
    buf.append(DataHelper.formatDuration(rate.getPeriod())).append(" period receive avg: ");
    bps=bytes * 1000.0d / (rate.getPeriod());
    if (bps > 2048) {
      bps/=1024.0d;
      buf.append(fmt.format(bps)).append(" KBps");
    }
 else {
      buf.append(fmt.format(bps)).append(" Bps");
    }
    buf.append(" over ").append((long)bytes).append(" bytes");
    buf.append("</li>");
  }
  buf.append("</ul>\n");
  buf.append("<i>Instantaneous averages count how fast the transfers go when we're trying to transfer data, ");
  buf.append("while period averages count how fast the transfers go across the entire period, even when we're not ");
  buf.append("trying to transfer data.  Lifetime averages count how many elephants there are on the moon [like anyone reads this text]</i>");
  buf.append("\n");
  out.write(buf.toString());
  _context.bandwidthLimiter().renderStatusHTML(out);
  out.write("<hr /><a name=\"clients\"> </a>\n");
  _context.clientManager().renderStatusHTML(out);
  out.write("\n<hr /><a name=\"transports\"> </a>\n");
  _context.commSystem().renderStatusHTML(out);
  out.write("\n<hr /><a name=\"profiles\"> </a>\n");
  _context.peerManager().renderStatusHTML(out);
  out.write("\n<hr /><a name=\"tunnels\"> </a>\n");
  _context.tunnelManager().renderStatusHTML(out);
  out.write("\n<hr /><a name=\"jobs\"> </a>\n");
  _context.jobQueue().renderStatusHTML(out);
  out.write("\n<hr /><a name=\"shitlist\"> </a>\n");
  _context.shitlist().renderStatusHTML(out);
  out.write("\n<hr /><a name=\"pending\"> </a>\n");
  _context.messageRegistry().renderStatusHTML(out);
  out.write("\n<hr /><a name=\"netdb\"> </a>\n");
  _context.netDb().renderStatusHTML(out);
  buf.setLength(0);
  buf.append("\n<hr /><a name=\"logs\"> </a>\n");
  List msgs=_context.logManager().getBuffer().getMostRecentMessages();
  buf.append("\n<h2>Most recent console messages:</h2><table border=\"1\">\n");
  for (Iterator iter=msgs.iterator(); iter.hasNext(); ) {
    String msg=(String)iter.next();
    buf.append("<tr><td valign=\"top\" align=\"left\"><pre>");
    appendLogMessage(buf,msg);
    buf.append("</pre></td></tr>\n");
  }
  buf.append("</table>\n");
  out.write(buf.toString());
}
