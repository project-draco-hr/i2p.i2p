{
synchronized (_stateLock) {
    if (_state != State.INITIALIZED)     throw new IllegalStateException();
    changeState(State.STARTING_1);
  }
  String last=_config.get("router.previousFullVersion");
  if (last != null) {
    _eventLog.addEvent(EventLog.UPDATED,"from " + last + " to "+ RouterVersion.FULL_VERSION);
    saveConfig("router.previousFullVersion",null);
  }
  _eventLog.addEvent(EventLog.STARTED,RouterVersion.FULL_VERSION);
  startupStuff();
  changeState(State.STARTING_2);
  _started=_context.clock().now();
  try {
    Runtime.getRuntime().addShutdownHook(_shutdownHook);
  }
 catch (  IllegalStateException ise) {
  }
  I2PThread.addOOMEventListener(_oomListener);
  _context.keyManager().startup();
  setupHandlers();
  _context.messageValidator().startup();
  _context.tunnelDispatcher().startup();
  _context.inNetMessagePool().startup();
  startupQueue();
  _context.simpleScheduler().addPeriodicEvent(new CoalesceStatsEvent(_context),COALESCE_TIME);
  _context.jobQueue().addJob(new UpdateRoutingKeyModifierJob(_context));
  _context.blocklist().startup();
synchronized (_configFileLock) {
    if (!_config.containsKey(PROP_IB_RANDOM_KEY)) {
      byte rk[]=new byte[32];
      _context.random().nextBytes(rk);
      _config.put(PROP_IB_RANDOM_KEY,Base64.encode(rk));
      _context.random().nextBytes(rk);
      _config.put(PROP_OB_RANDOM_KEY,Base64.encode(rk));
      saveConfig();
    }
  }
  long before=System.currentTimeMillis();
  _context.clock().getTimestamper().waitForInitialization();
  long waited=System.currentTimeMillis() - before;
  if (_log.shouldLog(Log.INFO))   _log.info("Waited " + waited + "ms to initialize");
  changeState(State.STARTING_3);
  _context.jobQueue().addJob(new StartupJob(_context));
}
