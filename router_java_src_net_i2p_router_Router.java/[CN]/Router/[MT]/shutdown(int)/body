{
  _isAlive=false;
  _context.random().saveSeed();
  I2PThread.removeOOMEventListener(_oomListener);
  for (  Runnable task : _context.getShutdownTasks()) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Running shutdown task " + task.getClass());
    try {
      task.run();
    }
 catch (    Throwable t) {
      _log.log(Log.CRIT,"Error running shutdown task",t);
    }
  }
  _context.removeShutdownTasks();
  try {
    _context.clientManager().shutdown();
  }
 catch (  Throwable t) {
    _log.log(Log.CRIT,"Error shutting down the client manager",t);
  }
  try {
    _context.namingService().shutdown();
  }
 catch (  Throwable t) {
    _log.log(Log.CRIT,"Error shutting down the naming service",t);
  }
  try {
    _context.jobQueue().shutdown();
  }
 catch (  Throwable t) {
    _log.log(Log.CRIT,"Error shutting down the job queue",t);
  }
  try {
    _context.statPublisher().shutdown();
  }
 catch (  Throwable t) {
    _log.log(Log.CRIT,"Error shutting down the stats manager",t);
  }
  try {
    _context.tunnelManager().shutdown();
  }
 catch (  Throwable t) {
    _log.log(Log.CRIT,"Error shutting down the tunnel manager",t);
  }
  try {
    _context.tunnelDispatcher().shutdown();
  }
 catch (  Throwable t) {
    _log.log(Log.CRIT,"Error shutting down the tunnel dispatcher",t);
  }
  try {
    _context.netDb().shutdown();
  }
 catch (  Throwable t) {
    _log.log(Log.CRIT,"Error shutting down the networkDb",t);
  }
  try {
    _context.commSystem().shutdown();
  }
 catch (  Throwable t) {
    _log.log(Log.CRIT,"Error shutting down the comm system",t);
  }
  try {
    _context.bandwidthLimiter().shutdown();
  }
 catch (  Throwable t) {
    _log.log(Log.CRIT,"Error shutting down the comm system",t);
  }
  try {
    _context.peerManager().shutdown();
  }
 catch (  Throwable t) {
    _log.log(Log.CRIT,"Error shutting down the peer manager",t);
  }
  try {
    _context.messageRegistry().shutdown();
  }
 catch (  Throwable t) {
    _log.log(Log.CRIT,"Error shutting down the message registry",t);
  }
  try {
    _context.messageValidator().shutdown();
  }
 catch (  Throwable t) {
    _log.log(Log.CRIT,"Error shutting down the message validator",t);
  }
  try {
    _context.inNetMessagePool().shutdown();
  }
 catch (  Throwable t) {
    _log.log(Log.CRIT,"Error shutting down the inbound net pool",t);
  }
  _context.deleteTempDir();
  RouterContext.listContexts().remove(_context);
  try {
    ((FortunaRandomSource)_context.random()).shutdown();
  }
 catch (  Throwable t) {
    _log.log(Log.CRIT,"Error shutting random()",t);
  }
  finalShutdown(exitCode);
}
