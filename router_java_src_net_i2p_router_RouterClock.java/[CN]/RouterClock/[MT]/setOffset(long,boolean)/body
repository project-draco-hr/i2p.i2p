{
  if (false)   return;
  long delta=offsetMs - _offset;
  if (!force) {
    if ((offsetMs > MAX_OFFSET) || (offsetMs < 0 - MAX_OFFSET)) {
      getLog().error("Maximum offset shift exceeded [" + offsetMs + "], NOT HONORING IT");
      return;
    }
    if (_alreadyChanged && (System.currentTimeMillis() - _startedOn > 10 * 60 * 1000)) {
      if ((delta > MAX_LIVE_OFFSET) || (delta < 0 - MAX_LIVE_OFFSET)) {
        getLog().log(Log.CRIT,"The clock has already been updated, but you want to change it by " + delta + " to "+ offsetMs+ "?  Did something break?");
        return;
      }
    }
    if ((delta < MIN_OFFSET_CHANGE) && (delta > 0 - MIN_OFFSET_CHANGE)) {
      getLog().debug("Not changing offset since it is only " + delta + "ms");
      _alreadyChanged=true;
      return;
    }
    if (Boolean.valueOf(_contextRC.getProperty("router.clockOffsetSanityCheck","true")).booleanValue() == true) {
      Long peerClockSkew=_contextRC.commSystem().getFramedAveragePeerClockSkew(50);
      if (peerClockSkew != null) {
        long currentPeerClockSkew=peerClockSkew.longValue();
        long predictedPeerClockSkew=currentPeerClockSkew + (delta / 1000l);
        if ((Math.abs(predictedPeerClockSkew) > (Math.abs(currentPeerClockSkew) + 5)) || (Math.abs(predictedPeerClockSkew) > 20)) {
          getLog().error("Ignoring clock offset " + offsetMs + "ms (current "+ _offset+ "ms) since it would increase peer clock skew from "+ currentPeerClockSkew+ "s to "+ predictedPeerClockSkew+ "s. Broken server in pool.ntp.org?");
          return;
        }
 else {
          getLog().debug("Approving clock offset " + offsetMs + "ms (current "+ _offset+ "ms) since it would decrease peer clock skew from "+ currentPeerClockSkew+ "s to "+ predictedPeerClockSkew+ "s.");
        }
      }
    }
  }
  if (_alreadyChanged) {
    if (delta > 15 * 1000)     getLog().error("Warning - Updating clock offset to " + offsetMs + "ms from "+ _offset+ "ms");
 else     if (getLog().shouldLog(Log.INFO))     getLog().info("Updating clock offset to " + offsetMs + "ms from "+ _offset+ "ms");
    if (!_statCreated)     _contextRC.statManager().createRateStat("clock.skew","How far is the already adjusted clock being skewed?","Clock",new long[]{10 * 60 * 1000,3 * 60 * 60* 1000,24 * 60 * 60* 60});
    _statCreated=true;
    _contextRC.statManager().addRateData("clock.skew",delta,0);
  }
 else {
    getLog().log(Log.INFO,"Initializing clock offset to " + offsetMs + "ms from "+ _offset+ "ms");
  }
  _alreadyChanged=true;
  _offset=offsetMs;
  fireOffsetChanged(delta);
}
