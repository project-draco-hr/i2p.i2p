{
  _context=context;
  _log=context.logManager().getLog(RouterThrottleImpl.class);
  _context.statManager().createRateStat("router.throttleNetworkCause","How lagged the jobQueue was when an I2NP was throttled","Throttle",new long[]{60 * 1000,10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("router.throttleNetDbCause","How lagged the jobQueue was when a networkDb request was throttled","Throttle",new long[]{60 * 1000,10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("router.throttleTunnelCause","How lagged the jobQueue was when a tunnel request was throttled","Throttle",new long[]{60 * 1000,10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("tunnel.bytesAllocatedAtAccept","How many bytes had been 'allocated' for participating tunnels when we accepted a request?","Tunnels",new long[]{10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("router.throttleTunnelProcessingTime1m","How long it takes to process a message (1 minute average) when we throttle a tunnel?","Throttle",new long[]{60 * 1000,10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("router.throttleTunnelProcessingTime10m","How long it takes to process a message (10 minute average) when we throttle a tunnel?","Throttle",new long[]{60 * 1000,10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("router.throttleTunnelMaxExceeded","How many tunnels we are participating in when we refuse one due to excees?","Throttle",new long[]{10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("router.throttleTunnelProbTooFast","How many tunnels beyond the previous 1h average are we participating in when we throttle?","Throttle",new long[]{10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("router.throttleTunnelProbTestSlow","How slow are our tunnel tests when our average exceeds the old average and we throttle?","Throttle",new long[]{10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("router.throttleTunnelBandwidthExceeded","How much bandwidth is allocated when we refuse due to bandwidth allocation?","Throttle",new long[]{10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("router.throttleTunnelBytesAllowed","How many bytes are allowed to be sent when we get a tunnel request (period is how many are currently allocated)?","Throttle",new long[]{10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("router.throttleTunnelBytesUsed","Used Bps at request (period = max KBps)?","Throttle",new long[]{10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("router.throttleTunnelFailCount1m","How many messages failed to be sent in the last 2 minutes when we throttle based on a spike in failures (period = 10 minute average failure count)?","Throttle",new long[]{60 * 1000,10 * 60 * 1000,60 * 60 * 1000});
}
