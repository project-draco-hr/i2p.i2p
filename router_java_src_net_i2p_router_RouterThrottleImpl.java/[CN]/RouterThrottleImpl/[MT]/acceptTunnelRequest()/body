{
  if (_context.getProperty(Router.PROP_SHUTDOWN_IN_PROGRESS) != null) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Refusing tunnel request since we are shutting down ASAP");
    setTunnelStatus(_x("Rejecting tunnels: Shutting down"));
    return TunnelHistory.TUNNEL_REJECT_BANDWIDTH;
  }
  if (_context.router().getUptime() < 20 * 60 * 1000)   return TunnelHistory.TUNNEL_REJECT_BANDWIDTH;
  long lag=_context.jobQueue().getMaxLag();
  RateStat rs=_context.statManager().getRate("transport.sendProcessingTime");
  Rate r=rs.getRate(60 * 1000);
  if (r != null) {
    double totalSendProcessingTimeEvents=r.getCurrentEventCount() + r.getLastEventCount();
    double avgSendProcessingTime=0;
    double currentSendProcessingTime=0;
    double lastSendProcessingTime=0;
    if (r.getCurrentEventCount() > 0) {
      currentSendProcessingTime=r.getCurrentTotalValue() / r.getCurrentEventCount();
    }
    if (r.getLastEventCount() > 0) {
      lastSendProcessingTime=r.getLastTotalValue() / r.getLastEventCount();
    }
    if (totalSendProcessingTimeEvents > 0) {
      avgSendProcessingTime=(r.getCurrentTotalValue() + r.getLastTotalValue()) / totalSendProcessingTimeEvents;
    }
 else {
      avgSendProcessingTime=r.getAverageValue();
      if (_log.shouldLog(Log.WARN)) {
        _log.warn("No events occurred. Using 1 minute average to look at message delay.");
      }
    }
    int maxProcessingTime=_context.getProperty(PROP_MAX_PROCESSINGTIME,DEFAULT_MAX_PROCESSINGTIME);
    if ((avgSendProcessingTime > maxProcessingTime * 0.9 || currentSendProcessingTime > maxProcessingTime || lastSendProcessingTime > maxProcessingTime)) {
      if (_log.shouldLog(Log.WARN)) {
        _log.warn("Refusing tunnel request due to sendProcessingTime of " + avgSendProcessingTime + " ms over the last two minutes, which is too much.");
      }
      setTunnelStatus(_x("Rejecting tunnels: High message delay"));
      return TunnelHistory.TUNNEL_REJECT_BANDWIDTH;
    }
  }
  int numTunnels=_context.tunnelManager().getParticipatingCount();
  if (numTunnels > getMinThrottleTunnels()) {
    double tunnelGrowthFactor=getTunnelGrowthFactor();
    Rate avgTunnels=_context.statManager().getRate("tunnel.participatingTunnels").getRate(10 * 60 * 1000);
    if (avgTunnels != null) {
      double avg=0;
      if (avgTunnels.getLastEventCount() > 0)       avg=avgTunnels.getAverageValue();
 else       avg=avgTunnels.getLifetimeAverageValue();
      int min=getMinThrottleTunnels();
      if (avg < min)       avg=min;
      if ((avg > 0) && (avg * tunnelGrowthFactor < numTunnels)) {
        double probAccept=(avg * tunnelGrowthFactor) / numTunnels;
        probAccept=probAccept * probAccept;
        int v=_context.random().nextInt(100);
        if (v < probAccept * 100) {
          if (_log.shouldLog(Log.INFO))           _log.info("Probabalistically accept tunnel request (p=" + probAccept + " v="+ v+ " avg="+ avg+ " current="+ numTunnels+ ")");
        }
 else {
          if (_log.shouldLog(Log.WARN))           _log.warn("Probabalistically refusing tunnel request (avg=" + avg + " current="+ numTunnels+ ")");
          _context.statManager().addRateData("router.throttleTunnelProbTooFast",(long)(numTunnels - avg),0);
          setTunnelStatus(_x("Rejecting most tunnels: High number of requests"));
          return TunnelHistory.TUNNEL_REJECT_PROBABALISTIC_REJECT;
        }
      }
 else {
        if (_log.shouldLog(Log.INFO))         _log.info("Accepting tunnel request, since the tunnel count average is " + avg + " and we only have "+ numTunnels+ ")");
      }
    }
  }
  double tunnelTestTimeGrowthFactor=getTunnelTestTimeGrowthFactor();
  Rate tunnelTestTime1m=_context.statManager().getRate("tunnel.testSuccessTime").getRate(1 * 60 * 1000);
  Rate tunnelTestTime10m=_context.statManager().getRate("tunnel.testSuccessTime").getRate(10 * 60 * 1000);
  if ((tunnelTestTime1m != null) && (tunnelTestTime10m != null) && (tunnelTestTime1m.getLastEventCount() > 0)) {
    double avg1m=tunnelTestTime1m.getAverageValue();
    double avg10m=0;
    if (tunnelTestTime10m.getLastEventCount() > 0)     avg10m=tunnelTestTime10m.getAverageValue();
 else     avg10m=tunnelTestTime10m.getLifetimeAverageValue();
    if (avg10m < 5000)     avg10m=5000;
    if ((avg10m > 0) && (avg1m > avg10m * tunnelTestTimeGrowthFactor)) {
      double probAccept=(avg10m * tunnelTestTimeGrowthFactor) / avg1m;
      probAccept=probAccept * probAccept;
      int v=_context.random().nextInt(100);
      if (v < probAccept * 100) {
        if (_log.shouldLog(Log.INFO))         _log.info("Probabalistically accept tunnel request (p=" + probAccept + " v="+ v+ " test time avg 1m="+ avg1m+ " 10m="+ avg10m+ ")");
      }
    }
 else {
    }
  }
  int max=_context.getProperty(PROP_MAX_TUNNELS,DEFAULT_MAX_TUNNELS);
  if (numTunnels >= max) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Refusing tunnel request since we are already participating in " + numTunnels + " (our max is "+ max+ ")");
    _context.statManager().addRateData("router.throttleTunnelMaxExceeded",numTunnels,0);
    setTunnelStatus(_x("Rejecting tunnels: Limit reached"));
    return TunnelHistory.TUNNEL_REJECT_BANDWIDTH;
  }
  rs=_context.statManager().getRate("tunnel.participatingMessageCount");
  r=null;
  double messagesPerTunnel=DEFAULT_MESSAGES_PER_TUNNEL_ESTIMATE;
  if (rs != null) {
    r=rs.getRate(60 * 1000);
    if (r != null) {
      long count=r.getLastEventCount() + r.getCurrentEventCount();
      if (count > 0)       messagesPerTunnel=(r.getLastTotalValue() + r.getCurrentTotalValue()) / count;
 else       messagesPerTunnel=r.getLifetimeAverageValue();
    }
  }
  if (messagesPerTunnel < DEFAULT_MESSAGES_PER_TUNNEL_ESTIMATE)   messagesPerTunnel=DEFAULT_MESSAGES_PER_TUNNEL_ESTIMATE;
  double bytesAllocated=messagesPerTunnel * numTunnels * net.i2p.router.tunnel.TrivialPreprocessor.PREPROCESSED_SIZE;
  if (!allowTunnel(bytesAllocated,numTunnels)) {
    _context.statManager().addRateData("router.throttleTunnelBandwidthExceeded",(long)bytesAllocated,0);
    return TunnelHistory.TUNNEL_REJECT_BANDWIDTH;
  }
  _context.statManager().addRateData("tunnel.bytesAllocatedAtAccept",(long)bytesAllocated,60 * 10 * 1000);
  return TUNNEL_ACCEPT;
}
