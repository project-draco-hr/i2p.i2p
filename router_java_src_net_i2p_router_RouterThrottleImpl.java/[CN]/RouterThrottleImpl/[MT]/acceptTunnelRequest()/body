{
  if (_context.router().gracefulShutdownInProgress()) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Refusing tunnel request since we are shutting down ASAP");
    setShutdownStatus();
    return TunnelHistory.TUNNEL_REJECT_BANDWIDTH;
  }
  if (_context.router().getUptime() < DEFAULT_REJECT_STARTUP_TIME) {
    setTunnelStatus(_x("Rejecting tunnels: Starting up"));
    return TunnelHistory.TUNNEL_REJECT_BANDWIDTH;
  }
  long lag=_context.jobQueue().getMaxLag();
  if (lag > JOB_LAG_LIMIT_TUNNEL) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Refusing tunnel request, as the job lag is " + lag);
    _context.statManager().addRateData("router.throttleTunnelCause",lag);
    setTunnelStatus(_x("Rejecting tunnels: High job lag"));
    return TunnelHistory.TUNNEL_REJECT_BANDWIDTH;
  }
  RateAverages ra=RateAverages.getTemp();
  RateStat rs=_context.statManager().getRate("transport.sendProcessingTime");
  Rate r=null;
  if (rs != null)   r=rs.getRate(60 * 1000);
  if (r != null) {
    r.computeAverages(ra,false);
    int maxProcessingTime=_context.getProperty(PROP_MAX_PROCESSINGTIME,DEFAULT_MAX_PROCESSINGTIME);
    if ((ra.getAverage() > maxProcessingTime * 0.9 || ra.getCurrent() > maxProcessingTime || ra.getLast() > maxProcessingTime)) {
      if (_log.shouldLog(Log.WARN)) {
        _log.warn("Refusing tunnel request due to sendProcessingTime " + ((int)ra.getCurrent()) + " / "+ ((int)ra.getLast())+ " / "+ ((int)ra.getAverage())+ " / "+ maxProcessingTime+ " current/last/avg/max ms");
      }
      setTunnelStatus(_x("Rejecting tunnels: High message delay"));
      return TunnelHistory.TUNNEL_REJECT_BANDWIDTH;
    }
  }
  int numTunnels=_context.tunnelManager().getParticipatingCount();
  int maxTunnels=_context.getProperty(PROP_MAX_TUNNELS,DEFAULT_MAX_TUNNELS);
  if (numTunnels >= maxTunnels) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Refusing tunnel request since we are already participating in " + numTunnels + " (our max is "+ maxTunnels+ ")");
    _context.statManager().addRateData("router.throttleTunnelMaxExceeded",numTunnels);
    setTunnelStatus(_x("Rejecting tunnels: Limit reached"));
    return TunnelHistory.TUNNEL_REJECT_BANDWIDTH;
  }
  if ((numTunnels > getMinThrottleTunnels()) && (DEFAULT_MAX_TUNNELS <= maxTunnels)) {
    Rate avgTunnels=_context.statManager().getRate("tunnel.participatingTunnels").getRate(10 * 60 * 1000);
    if (avgTunnels != null) {
      double avg=avgTunnels.getAvgOrLifetimeAvg();
      double tunnelGrowthFactor=getTunnelGrowthFactor();
      int min=getMinThrottleTunnels();
      if (avg < min)       avg=min;
      if ((avg > 0) && (avg * tunnelGrowthFactor < numTunnels)) {
        double probAccept=(avg * tunnelGrowthFactor) / numTunnels;
        probAccept*=probAccept;
        int v=_context.random().nextInt(100);
        if (v < probAccept * 100) {
          if (_log.shouldLog(Log.INFO))           _log.info("Probabalistically accept tunnel request (p=" + probAccept + " v="+ v+ " avg="+ avg+ " current="+ numTunnels+ ")");
        }
 else {
          if (_log.shouldLog(Log.WARN))           _log.warn("Probabalistically refusing tunnel request (avg=" + avg + " current="+ numTunnels+ ")");
          _context.statManager().addRateData("router.throttleTunnelProbTooFast",(long)(numTunnels - avg));
          if (probAccept <= 0.5)           setTunnelStatus(_x("Rejecting most tunnels: High number of requests"));
 else           if (probAccept <= 0.9)           setTunnelStatus(_x("Accepting most tunnels"));
 else           setTunnelStatus(_x("Accepting tunnels"));
          return TunnelHistory.TUNNEL_REJECT_PROBABALISTIC_REJECT;
        }
      }
 else {
        if (_log.shouldLog(Log.INFO))         _log.info("Accepting tunnel request, since the tunnel count average is " + avg + " and we only have "+ numTunnels+ ")");
      }
    }
  }
  double tunnelTestTimeGrowthFactor=getTunnelTestTimeGrowthFactor();
  Rate tunnelTestTime1m=_context.statManager().getRate("tunnel.testSuccessTime").getRate(1 * 60 * 1000);
  Rate tunnelTestTime10m=_context.statManager().getRate("tunnel.testSuccessTime").getRate(10 * 60 * 1000);
  if ((tunnelTestTime1m != null) && (tunnelTestTime10m != null) && (tunnelTestTime1m.getLastEventCount() > 0)) {
    double avg1m=tunnelTestTime1m.getAverageValue();
    double avg10m=tunnelTestTime10m.getAvgOrLifetimeAvg();
    if (avg10m < 5000)     avg10m=5000;
    if ((avg10m > 0) && (avg1m > avg10m * tunnelTestTimeGrowthFactor)) {
      double probAccept=(avg10m * tunnelTestTimeGrowthFactor) / avg1m;
      probAccept=probAccept * probAccept;
      int v=_context.random().nextInt(100);
      if (v < probAccept * 100) {
        if (_log.shouldLog(Log.INFO))         _log.info("Probabalistically accept tunnel request (p=" + probAccept + " v="+ v+ " test time avg 1m="+ avg1m+ " 10m="+ avg10m+ ")");
      }
    }
 else {
    }
  }
  rs=_context.statManager().getRate("tunnel.participatingMessageCount");
  r=null;
  double messagesPerTunnel=DEFAULT_MESSAGES_PER_TUNNEL_ESTIMATE;
  if (rs != null) {
    r=rs.getRate(60 * 1000);
    if (r != null)     messagesPerTunnel=r.computeAverages(ra,true).getAverage();
  }
  if (messagesPerTunnel < DEFAULT_MESSAGES_PER_TUNNEL_ESTIMATE)   messagesPerTunnel=DEFAULT_MESSAGES_PER_TUNNEL_ESTIMATE;
  double bytesAllocated=messagesPerTunnel * numTunnels * PREPROCESSED_SIZE;
  if (!allowTunnel(bytesAllocated,numTunnels)) {
    _context.statManager().addRateData("router.throttleTunnelBandwidthExceeded",(long)bytesAllocated);
    return TunnelHistory.TUNNEL_REJECT_BANDWIDTH;
  }
  _context.statManager().addRateData("tunnel.bytesAllocatedAtAccept",(long)bytesAllocated,60 * 10 * 1000);
  return TUNNEL_ACCEPT;
}
