{
  int maxKBps=Math.min(_context.bandwidthLimiter().getOutboundKBytesPerSecond(),_context.bandwidthLimiter().getInboundKBytesPerSecond());
  int used1s=_context.router().get1sRate();
  int used15s=_context.router().get15sRate();
  int used1m=_context.router().get1mRate();
  int used=Math.min(used15s,used1s);
  double share=_context.router().getSharePercentage();
  int availBps=(int)(((maxKBps * 1024) * share) - used);
  _context.statManager().addRateData("router.throttleTunnelBytesUsed",used,maxKBps);
  _context.statManager().addRateData("router.throttleTunnelBytesAllowed",availBps,(long)bytesAllocated);
  long overage=used1m - (maxKBps * 1024);
  if ((overage > 0) && ((overage / (float)(maxKBps * 1024f)) > _context.random().nextFloat())) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Reject tunnel, 1m rate (" + used1m + ") indicates overload.");
    return false;
  }
  float maxBps=maxKBps * 1024f;
  float pctFull=(maxBps - availBps) / (maxBps);
  double probReject=Math.pow(pctFull,16);
  double rand=_context.random().nextFloat();
  boolean reject=(availBps < MIN_AVAILABLE_BPS) || (rand <= probReject);
  if (reject && _log.shouldLog(Log.WARN))   _log.warn("reject = " + reject + " avail/maxK/used "+ availBps+ "/"+ maxKBps+ "/"+ used+ " pReject = "+ probReject+ " pFull = "+ pctFull+ " numTunnels = "+ numTunnels+ "rand = "+ rand+ " est = "+ bytesAllocated+ " share = "+ (float)share);
 else   if (_log.shouldLog(Log.DEBUG))   _log.debug("reject = " + reject + " avail/maxK/used "+ availBps+ "/"+ maxKBps+ "/"+ used+ " pReject = "+ probReject+ " pFull = "+ pctFull+ " numTunnels = "+ numTunnels+ "rand = "+ rand+ " est = "+ bytesAllocated+ " share = "+ (float)share);
  if (probReject >= 0.9)   setTunnelStatus("Rejecting tunnels: Bandwidth limit");
 else   if (probReject >= 0.5)   setTunnelStatus("Rejecting " + ((int)(100.0 * probReject)) + "% of tunnels: Bandwidth limit");
 else   if (probReject >= 0.1)   setTunnelStatus("Accepting " + (100 - (int)(100.0 * probReject)) + "% of tunnels");
 else   setTunnelStatus("Accepting tunnels");
  return !reject;
}
