{
  int maxKBpsIn=_context.bandwidthLimiter().getInboundKBytesPerSecond();
  int maxKBpsOut=_context.bandwidthLimiter().getOutboundKBytesPerSecond();
  int maxKBps=Math.min(maxKBpsIn,maxKBpsOut);
  int usedIn=Math.min(_context.router().get1sRateIn(),_context.router().get15sRateIn());
  int usedOut=Math.min(_context.router().get1sRate(true),_context.router().get15sRate(true));
  int used=Math.max(usedIn,usedOut);
  int used1mIn=_context.router().get1mRateIn();
  int used1mOut=_context.router().get1mRate(true);
  int availBps=(maxKBpsIn * 1024) - usedIn;
  availBps=Math.min(availBps,(maxKBpsOut * 1024) - usedOut);
  if (availBps < MIN_AVAILABLE_BPS) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Reject, avail (" + availBps + ") less than min");
    setTunnelStatus(LIMIT_STR);
    return false;
  }
  double share=_context.router().getSharePercentage();
  used=Math.min(used,(int)(bytesAllocated / (10 * 60)));
  availBps=Math.min(availBps,(int)(((maxKBps * 1024) * share) - used));
  _context.statManager().addRateData("router.throttleTunnelBytesUsed",used,maxKBps);
  _context.statManager().addRateData("router.throttleTunnelBytesAllowed",availBps,(long)bytesAllocated);
  long overage=used1mIn - (maxKBpsIn * 1024);
  overage=Math.max(overage,used1mOut - (maxKBpsOut * 1024));
  if ((overage > 0) && ((overage / (float)(maxKBps * 1024f)) > _context.random().nextFloat())) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Reject tunnel, 1m rate (" + overage + " over) indicates overload.");
    setTunnelStatus(LIMIT_STR);
    return false;
  }
  float maxBps=maxKBps * 1024f;
  float pctFull=(maxBps - availBps) / (maxBps);
  double probReject=Math.pow(pctFull,16);
  double rand=_context.random().nextFloat();
  boolean reject=rand <= probReject;
  if (reject && _log.shouldLog(Log.WARN))   _log.warn("Reject avail/maxK/used " + availBps + "/"+ maxKBps+ "/"+ used+ " pReject = "+ probReject+ " pFull = "+ pctFull+ " numTunnels = "+ numTunnels+ " rand = "+ rand+ " est = "+ bytesAllocated);
 else   if (_log.shouldLog(Log.DEBUG))   _log.debug("Accept avail/maxK/used " + availBps + "/"+ maxKBps+ "/"+ used+ " pReject = "+ probReject+ " pFull = "+ pctFull+ " numTunnels = "+ numTunnels+ " rand = "+ rand+ " est = "+ bytesAllocated);
  if (probReject >= 0.9)   setTunnelStatus(LIMIT_STR);
 else   if (probReject >= 0.5)   setTunnelStatus("Rejecting " + ((int)(100.0 * probReject)) + "% of tunnels: Bandwidth limit");
 else   if (probReject >= 0.1)   setTunnelStatus("Accepting " + (100 - (int)(100.0 * probReject)) + "% of tunnels");
 else   setTunnelStatus("Accepting tunnels");
  return !reject;
}
