{
  Properties stats=new Properties();
  stats.setProperty("router.version",RouterVersion.VERSION);
  stats.setProperty("coreVersion",CoreVersion.VERSION);
  int newlines=0;
  FileInputStream in=null;
  try {
    in=new FileInputStream(Router.IDENTLOG);
    int c=-1;
    while ((c=in.read()) != -1) {
      if (c == '\n')       newlines++;
    }
  }
 catch (  IOException ioe) {
  }
 finally {
    if (in != null)     try {
      in.close();
    }
 catch (    IOException ioe) {
    }
  }
  if (newlines > 0)   stats.setProperty("stat_identities",newlines + "");
  if (_includePeerRankings) {
    if (false)     stats.putAll(_context.profileManager().summarizePeers(_publishedStats));
    includeThroughput(stats);
    includeRate("router.invalidMessageTime",stats,new long[]{10 * 60 * 1000});
    includeRate("router.duplicateMessageId",stats,new long[]{24 * 60 * 60* 1000});
    includeRate("tunnel.fragmentedDropped",stats,new long[]{10 * 60 * 1000,3 * 60 * 60* 1000});
    includeRate("tunnel.testFailedTime",stats,new long[]{10 * 60 * 1000});
    includeRate("tunnel.buildFailure",stats,new long[]{60 * 60 * 1000});
    includeRate("tunnel.buildSuccess",stats,new long[]{60 * 60 * 1000});
    includeRate("tunnel.batchMultipleCount",stats,new long[]{10 * 60 * 1000,60 * 60 * 1000});
    includeRate("tunnel.corruptMessage",stats,new long[]{60 * 60 * 1000l,3 * 60 * 60* 1000l});
    includeRate("router.fastPeers",stats,new long[]{60 * 60 * 1000});
    includeRate("udp.statusOK",stats,new long[]{20 * 60 * 1000});
    includeRate("udp.statusDifferent",stats,new long[]{20 * 60 * 1000});
    includeRate("udp.statusReject",stats,new long[]{20 * 60 * 1000});
    includeRate("udp.statusUnknown",stats,new long[]{20 * 60 * 1000});
    includeRate("udp.statusKnownCharlie",stats,new long[]{1 * 60 * 1000,10 * 60 * 1000});
    includeRate("udp.addressUpdated",stats,new long[]{1 * 60 * 1000});
    includeRate("udp.addressTestInsteadOfUpdate",stats,new long[]{1 * 60 * 1000});
    includeRate("clock.skew",stats,new long[]{10 * 60 * 1000,3 * 60 * 60* 1000,24 * 60 * 60* 1000});
    includeRate("crypto.elGamal.encrypt",stats,new long[]{60 * 1000,60 * 60 * 1000});
    includeRate("tunnel.participatingTunnels",stats,new long[]{5 * 60 * 1000,60 * 60 * 1000});
    includeRate("tunnel.testSuccessTime",stats,new long[]{10 * 60 * 1000l});
    includeRate("client.sendAckTime",stats,new long[]{60 * 60 * 1000},true);
    includeRate("udp.sendConfirmTime",stats,new long[]{10 * 60 * 1000});
    includeRate("udp.sendVolleyTime",stats,new long[]{10 * 60 * 1000});
    includeRate("udp.ignoreRecentDuplicate",stats,new long[]{60 * 1000});
    includeRate("udp.congestionOccurred",stats,new long[]{10 * 60 * 1000});
    long publishedUptime=_context.router().getUptime();
    if (publishedUptime < 60 * 60 * 1000)     publishedUptime=60 * 60 * 1000;
    stats.setProperty("stat_uptime",DataHelper.formatDuration(publishedUptime));
    stats.setProperty("stat__rateKey","avg;maxAvg;pctLifetime;[sat;satLim;maxSat;maxSatLim;][num;lifetimeFreq;maxFreq]");
    includeRate("tunnel.buildRequestTime",stats,new long[]{60 * 1000,10 * 60 * 1000});
    includeRate("tunnel.decryptRequestTime",stats,new long[]{60 * 1000,10 * 60 * 1000});
    includeRate("tunnel.buildClientExpire",stats,new long[]{60 * 1000,10 * 60 * 1000});
    includeRate("tunnel.buildClientReject",stats,new long[]{60 * 1000,10 * 60 * 1000});
    includeRate("tunnel.buildClientSuccess",stats,new long[]{60 * 1000,10 * 60 * 1000});
    includeRate("tunnel.buildExploratoryExpire",stats,new long[]{60 * 1000,10 * 60 * 1000});
    includeRate("tunnel.buildExploratoryReject",stats,new long[]{60 * 1000,10 * 60 * 1000});
    includeRate("tunnel.buildExploratorySuccess",stats,new long[]{60 * 1000,10 * 60 * 1000});
    includeRate("tunnel.rejectTimeout",stats,new long[]{60 * 1000,10 * 60 * 1000});
    includeRate("udp.packetDequeueTime",stats,new long[]{60 * 1000});
    includeRate("udp.packetVerifyTime",stats,new long[]{60 * 1000});
    includeRate("tunnel.rejectOverloaded",stats,new long[]{60 * 1000,10 * 60 * 1000});
    includeRate("tunnel.acceptLoad",stats,new long[]{60 * 1000,10 * 60 * 1000});
    if (FloodfillNetworkDatabaseFacade.isFloodfill(_context.router().getRouterInfo())) {
      stats.setProperty("netdb.knownRouters","" + _context.netDb().getKnownRouters());
      stats.setProperty("netdb.knownLeaseSets","" + _context.netDb().getKnownLeaseSets());
    }
    _log.debug("Publishing peer rankings");
  }
 else {
    _log.debug("Not publishing peer rankings");
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Building status: " + stats);
  return stats;
}
