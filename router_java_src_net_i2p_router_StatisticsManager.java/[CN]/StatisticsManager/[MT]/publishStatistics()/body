{
  Properties stats=new Properties();
  stats.setProperty("router.version",RouterVersion.VERSION);
  stats.setProperty("router.id",RouterVersion.ID);
  stats.setProperty("coreVersion",CoreVersion.VERSION);
  stats.setProperty("core.id",CoreVersion.ID);
  if (_includePeerRankings) {
    stats.putAll(_context.profileManager().summarizePeers(_publishedStats));
    includeThroughput(stats);
    includeRate("router.duplicateMessageId",stats,new long[]{24 * 60 * 60* 1000});
    includeRate("tunnel.fragmentedDropped",stats,new long[]{10 * 60 * 1000,3 * 60 * 60* 1000});
    includeRate("tunnel.testFailedTime",stats,new long[]{60 * 60 * 1000});
    includeRate("tunnel.buildFailure",stats,new long[]{60 * 60 * 1000});
    includeRate("tunnel.buildSuccess",stats,new long[]{60 * 60 * 1000});
    includeRate("tunnel.batchMultipleCount",stats,new long[]{10 * 60 * 1000,60 * 60 * 1000});
    includeRate("tunnel.corruptMessage",stats,new long[]{60 * 60 * 1000l,3 * 60 * 60* 1000l});
    includeRate("router.fastPeers",stats,new long[]{60 * 60 * 1000});
    includeRate("udp.statusOK",stats,new long[]{20 * 60 * 1000});
    includeRate("udp.statusDifferent",stats,new long[]{20 * 60 * 1000});
    includeRate("udp.statusReject",stats,new long[]{20 * 60 * 1000});
    includeRate("udp.statusUnknown",stats,new long[]{20 * 60 * 1000});
    includeRate("udp.addressUpdated",stats,new long[]{1 * 60 * 1000});
    includeRate("udp.addressTestInsteadOfUpdate",stats,new long[]{1 * 60 * 1000});
    includeRate("clock.skew",stats,new long[]{10 * 60 * 1000,3 * 60 * 60* 1000,24 * 60 * 60* 1000});
    includeRate("crypto.elGamal.encrypt",stats,new long[]{60 * 60 * 1000});
    includeRate("tunnel.participatingTunnels",stats,new long[]{5 * 60 * 1000,60 * 60 * 1000});
    includeRate("tunnel.testSuccessTime",stats,new long[]{60 * 60 * 1000l,24 * 60 * 60* 1000l});
    includeRate("client.sendAckTime",stats,new long[]{60 * 60 * 1000},true);
    includeRate("udp.sendConfirmTime",stats,new long[]{10 * 60 * 1000});
    includeRate("udp.sendVolleyTime",stats,new long[]{10 * 60 * 1000});
    includeRate("udp.ignoreRecentDuplicate",stats,new long[]{10 * 60 * 1000});
    includeRate("udp.congestionOccurred",stats,new long[]{10 * 60 * 1000});
    stats.setProperty("stat_uptime",DataHelper.formatDuration(_context.router().getUptime()));
    stats.setProperty("stat__rateKey","avg;maxAvg;pctLifetime;[sat;satLim;maxSat;maxSatLim;][num;lifetimeFreq;maxFreq]");
    _log.debug("Publishing peer rankings");
  }
 else {
    _log.debug("Not publishing peer rankings");
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Building status: " + stats);
  return stats;
}
