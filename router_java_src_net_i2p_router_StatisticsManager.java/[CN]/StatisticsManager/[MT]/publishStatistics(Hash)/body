{
  Properties stats=new Properties();
  stats.setProperty("router.version",RouterVersion.VERSION);
  if (CoreVersion.VERSION.equals("0.9.23"))   stats.setProperty("coreVersion",CoreVersion.VERSION);
  stats.setProperty(RouterInfo.PROP_NETWORK_ID,Integer.toString(Router.NETWORK_ID));
  stats.setProperty(RouterInfo.PROP_CAPABILITIES,_context.router().getCapabilities());
  if (_context.getBooleanPropertyDefaultTrue(PROP_PUBLISH_RANKINGS) && _context.random().nextInt(RANDOM_INCLUDE_STATS) == 0) {
    includeRate("tunnel.participatingTunnels",stats,new long[]{60 * 60 * 1000},true);
    long rate=60 * 60 * 1000;
    includeTunnelRates("Exploratory",stats,rate);
  }
  if (CoreVersion.VERSION.equals("0.9.23"))   stats.setProperty("stat_uptime","90m");
  if (FloodfillNetworkDatabaseFacade.isFloodfill(_context.router().getRouterInfo())) {
    int ri=_context.router().getUptime() > 30 * 60 * 1000 ? _context.netDb().getKnownRouters() : 3000 + _context.random().nextInt(1000);
    stats.setProperty("netdb.knownRouters",String.valueOf(ri));
    int ls=_context.router().getUptime() > 30 * 60 * 1000 ? _context.netDb().getKnownLeaseSets() : 30 + _context.random().nextInt(40);
    stats.setProperty("netdb.knownLeaseSets",String.valueOf(ls));
  }
  String contact=_context.getProperty(PROP_CONTACT_NAME);
  if (contact != null)   stats.setProperty("contact",contact);
  String family=_context.getProperty(FamilyKeyCrypto.PROP_FAMILY_NAME);
  if (family != null) {
    stats.setProperty(FamilyKeyCrypto.OPT_NAME,family);
    String sig=null;
    RouterInfo oldRI=_context.router().getRouterInfo();
    if (oldRI != null) {
      if (family.equals(oldRI.getOption(FamilyKeyCrypto.OPT_NAME))) {
        sig=oldRI.getOption(FamilyKeyCrypto.OPT_SIG);
        if (sig != null)         stats.setProperty(FamilyKeyCrypto.OPT_SIG,sig);
      }
    }
    if (sig == null) {
      FamilyKeyCrypto fkc=_context.router().getFamilyKeyCrypto();
      if (fkc != null) {
        try {
          sig=fkc.sign(family,h);
          stats.setProperty(FamilyKeyCrypto.OPT_SIG,sig);
        }
 catch (        GeneralSecurityException gse) {
          _log.error("Failed to sign router family",gse);
        }
      }
    }
  }
  return stats;
}
