{
  String val=_context.router().getConfigSetting(PROP_PUBLISH_RANKINGS);
  try {
    if (val == null) {
      if (_log.shouldLog(Log.INFO))       _log.info("Peer publishing setting " + PROP_PUBLISH_RANKINGS + " not set - using default "+ DEFAULT_PROP_PUBLISH_RANKINGS);
      val=DEFAULT_PROP_PUBLISH_RANKINGS;
    }
 else {
      if (_log.shouldLog(Log.INFO))       _log.info("Peer publishing setting " + PROP_PUBLISH_RANKINGS + " set to "+ val);
    }
    boolean v=Boolean.TRUE.toString().equalsIgnoreCase(val);
    _includePeerRankings=v;
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Setting includePeerRankings = " + v);
  }
 catch (  Throwable t) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Error determining whether to publish rankings [" + PROP_PUBLISH_RANKINGS + "="+ val+ "], so we're defaulting to FALSE");
    _includePeerRankings=false;
  }
  val=_context.router().getConfigSetting(PROP_MAX_PUBLISHED_PEERS);
  if (val == null) {
    _publishedStats=DEFAULT_MAX_PUBLISHED_PEERS;
  }
 else {
    try {
      int num=Integer.parseInt(val);
      _publishedStats=num;
    }
 catch (    NumberFormatException nfe) {
      if (_log.shouldLog(Log.ERROR))       _log.error("Invalid max number of peers to publish [" + val + "], defaulting to "+ DEFAULT_MAX_PUBLISHED_PEERS,nfe);
      _publishedStats=DEFAULT_MAX_PUBLISHED_PEERS;
    }
  }
}
