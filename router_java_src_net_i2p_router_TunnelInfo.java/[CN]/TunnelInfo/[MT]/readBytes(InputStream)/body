{
  _options=DataHelper.readProperties(in);
  Boolean includeDest=DataHelper.readBoolean(in);
  if (includeDest.booleanValue()) {
    _destination=new Destination();
    _destination.readBytes(in);
  }
 else {
    _destination=null;
  }
  Boolean includeThis=DataHelper.readBoolean(in);
  if (includeThis.booleanValue()) {
    _thisHop=new Hash();
    _thisHop.readBytes(in);
  }
 else {
    _thisHop=null;
  }
  Boolean includeNext=DataHelper.readBoolean(in);
  if (includeNext.booleanValue()) {
    _nextHop=new Hash();
    _nextHop.readBytes(in);
  }
 else {
    _nextHop=null;
  }
  Boolean includeNextInfo=DataHelper.readBoolean(in);
  if (includeNextInfo.booleanValue()) {
    _nextHopInfo=new TunnelInfo(_context);
    _nextHopInfo.readBytes(in);
  }
 else {
    _nextHopInfo=null;
  }
  _id=new TunnelId();
  _id.readBytes(in);
  Boolean includeConfigKey=DataHelper.readBoolean(in);
  if (includeConfigKey.booleanValue()) {
    _configurationKey=new TunnelConfigurationSessionKey();
    _configurationKey.readBytes(in);
  }
 else {
    _configurationKey=null;
  }
  Boolean includeEncryptionKey=DataHelper.readBoolean(in);
  if (includeEncryptionKey.booleanValue()) {
    _encryptionKey=new TunnelSessionKey();
    _encryptionKey.readBytes(in);
  }
 else {
    _encryptionKey=null;
  }
  Boolean includeSigningKey=DataHelper.readBoolean(in);
  if (includeSigningKey.booleanValue()) {
    _signingKey=new TunnelSigningPrivateKey();
    _signingKey.readBytes(in);
  }
 else {
    _signingKey=null;
  }
  Boolean includeVerificationKey=DataHelper.readBoolean(in);
  if (includeVerificationKey.booleanValue()) {
    _verificationKey=new TunnelSigningPublicKey();
    _verificationKey.readBytes(in);
  }
 else {
    _verificationKey=null;
  }
  _settings=new TunnelSettings(_context);
  _settings.readBytes(in);
  Boolean ready=DataHelper.readBoolean(in);
  if (ready != null)   setIsReady(ready.booleanValue());
}
