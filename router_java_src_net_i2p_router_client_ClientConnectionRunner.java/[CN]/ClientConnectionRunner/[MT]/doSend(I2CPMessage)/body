{
  if (_out == null)   throw new I2CPMessageException("Output stream is not initialized");
  if (msg == null)   throw new I2CPMessageException("Null message?!");
  if (_log.shouldLog(Log.DEBUG)) {
    if ((_config == null) || (_config.getDestination() == null))     _log.debug("before doSend of a " + msg.getClass().getName() + " message on for establishing i2cp con");
 else     _log.debug("before doSend of a " + msg.getClass().getName() + " message on for "+ _config.getDestination().calculateHash().toBase64());
  }
  long before=_context.clock().now();
  try {
synchronized (_out) {
      msg.writeMessage(_out);
      _out.flush();
    }
    if (_log.shouldLog(Log.DEBUG))     _log.debug("after doSend of a " + msg.getClass().getName() + " message");
  }
 catch (  I2CPMessageException ime) {
    _log.error("Message exception sending I2CP message",ime);
    throw ime;
  }
catch (  IOException ioe) {
    _log.error("IO exception sending I2CP message",ioe);
    throw ioe;
  }
catch (  Throwable t) {
    _log.log(Log.CRIT,"Unhandled exception sending I2CP message",t);
    throw new IOException("Unhandled exception sending I2CP message: " + t.getMessage());
  }
 finally {
    long after=_context.clock().now();
    long lag=after - before;
    if (lag > 300) {
      if (_log.shouldLog(Log.WARN))       _log.warn("synchronization on the i2cp message send took too long (" + lag + "ms): "+ msg);
    }
  }
}
