{
  if (_dead) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Requesting leaseSet from a dead client: " + set);
    if (onFailedJob != null)     _context.jobQueue().addJob(onFailedJob);
    return;
  }
  int leases=set.getLeaseCount();
  LeaseSet current=null;
synchronized (this) {
    Destination dest=set.getDestination();
    if (dest != null)     current=getLeaseSet(dest.calculateHash());
    if (current != null && current.getLeaseCount() == leases) {
      for (int i=0; i < leases; i++) {
        if (!current.getLease(i).getTunnelId().equals(set.getLease(i).getTunnelId()))         break;
        if (!current.getLease(i).getGateway().equals(set.getLease(i).getGateway()))         break;
        if (i == leases - 1) {
          if (_log.shouldLog(Log.INFO))           _log.info("Requested leaseSet hasn't changed");
          if (onCreateJob != null)           _context.jobQueue().addJob(onCreateJob);
          return;
        }
      }
    }
  }
  if (_log.shouldLog(Log.INFO))   _log.info("Current leaseSet " + current + "\nNew leaseSet "+ set);
  Hash h=set.getDestination().calculateHash();
  SessionParams sp=_sessions.get(h);
  if (sp == null)   return;
  LeaseRequestState state;
synchronized (this) {
    state=sp.leaseRequest;
    if (state != null) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Already requesting " + state);
      LeaseSet requested=state.getRequested();
      LeaseSet granted=state.getGranted();
      long ours=set.getEarliestLeaseDate();
      if (((requested != null) && (requested.getEarliestLeaseDate() > ours)) || ((granted != null) && (granted.getEarliestLeaseDate() > ours))) {
      }
 else {
        _context.simpleTimer2().addEvent(new Rerequest(set,expirationTime,onCreateJob,onFailedJob),3 * 1000);
      }
      return;
    }
 else {
      sp.leaseRequest=state=new LeaseRequestState(onCreateJob,onFailedJob,_context.clock().now() + expirationTime,set);
      if (_log.shouldLog(Log.DEBUG))       _log.debug("New request: " + state);
    }
  }
  _context.jobQueue().addJob(new RequestLeaseSetJob(_context,this,state));
}
