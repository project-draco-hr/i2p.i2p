{
  long before=_context.clock().now();
  try {
synchronized (_out) {
      msg.writeMessage(_out);
      _out.flush();
    }
    if (_log.shouldLog(Log.DEBUG))     _log.debug("after writeMessage(" + msg.getClass().getName() + "): "+ (_context.clock().now() - before)+ "ms");
  }
 catch (  I2CPMessageException ime) {
    _log.error("Error sending I2CP message to client",ime);
    stopRunning();
  }
catch (  EOFException eofe) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Error sending I2CP message - client went away",eofe);
    stopRunning();
  }
catch (  IOException ioe) {
    int level;
    String emsg;
    if (ioe.getMessage() != null && ioe.getMessage().startsWith("Pipe closed")) {
      level=Log.WARN;
      emsg="Error sending I2CP message - client went away";
    }
 else {
      level=Log.ERROR;
      emsg="IO Error sending I2CP message to client";
    }
    if (_log.shouldLog(level))     _log.log(level,emsg,ioe);
    stopRunning();
  }
catch (  Throwable t) {
    _log.log(Log.CRIT,"Unhandled exception sending I2CP message to client",t);
    stopRunning();
  }
 finally {
    long after=_context.clock().now();
    long lag=after - before;
    if (lag > 300) {
      if (_log.shouldLog(Log.WARN))       _log.warn("synchronization on the i2cp message send took too long (" + lag + "ms): "+ msg);
    }
  }
}
