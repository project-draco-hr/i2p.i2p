{
  _running=true;
  int curDelay=1000;
  while (_running) {
    try {
      _socket=getServerSocket();
      if (_log.shouldLog(Log.DEBUG))       _log.debug("ServerSocket created, before accept: " + _socket);
      curDelay=1000;
      _listening=true;
      while (_running) {
        try {
          Socket socket=_socket.accept();
          if (validate(socket)) {
            if (_log.shouldLog(Log.DEBUG))             _log.debug("Connection received");
            runConnection(socket);
          }
 else {
            if (_log.shouldLog(Log.WARN))             _log.warn("Refused connection from " + socket.getInetAddress());
            try {
              socket.close();
            }
 catch (            IOException ioe) {
            }
          }
        }
 catch (        IOException ioe) {
          if (isAlive())           _log.error("Server error accepting",ioe);
        }
catch (        Throwable t) {
          if (isAlive())           _log.error("Fatal error running client listener - killing the thread!",t);
          _listening=false;
          return;
        }
      }
    }
 catch (    IOException ioe) {
      if (isAlive())       _log.error("Error listening on port " + _port,ioe);
    }
    _listening=false;
    if (_socket != null) {
      try {
        _socket.close();
      }
 catch (      IOException ioe) {
      }
      _socket=null;
    }
    if (!isAlive())     break;
    if (curDelay < 60 * 1000)     _log.error("Error listening, waiting " + (curDelay / 1000) + "s before we try again");
 else     _log.log(Log.CRIT,"I2CP error listening to port " + _port + " - is another I2P instance running? Resolve conflicts and restart");
    try {
      Thread.sleep(curDelay);
    }
 catch (    InterruptedException ie) {
    }
    curDelay=Math.min(curDelay * 3,60 * 1000);
  }
  if (isAlive())   _log.error("CANCELING I2CP LISTEN",new Exception("I2CP Listen cancelled!!!"));
  _running=false;
}
