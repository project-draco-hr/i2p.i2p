{
  if ((message.getLeaseSet() == null) || (message.getPrivateKey() == null) || (message.getSigningPrivateKey() == null)) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Null lease set granted: " + message);
    _runner.disconnectClient("Invalid CreateLeaseSetMessage");
    return;
  }
  SessionId id=message.getSessionId();
  SessionConfig cfg=_runner.getConfig(id);
  if (cfg == null) {
    List<SessionId> current=_runner.getSessionIds();
    String msg="CreateLeaseSet invalid session: " + id + " current: "+ current;
    if (_log.shouldLog(Log.ERROR))     _log.error(msg);
    _runner.disconnectClient(msg);
    return;
  }
  Destination dest=cfg.getDestination();
  Destination ndest=message.getLeaseSet().getDestination();
  if (!dest.equals(ndest)) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Different destination in LS");
    _runner.disconnectClient("Different destination in LS");
    return;
  }
  LeaseSetKeys keys=_context.keyManager().getKeys(dest);
  if (keys == null || !message.getPrivateKey().equals(keys.getDecryptionKey())) {
    PublicKey pk;
    try {
      pk=message.getPrivateKey().toPublic();
    }
 catch (    IllegalArgumentException iae) {
      if (_log.shouldLog(Log.ERROR))       _log.error("Bad private key in LS");
      _runner.disconnectClient("Bad private key in LS");
      return;
    }
    if (!pk.equals(message.getLeaseSet().getEncryptionKey())) {
      if (_log.shouldLog(Log.ERROR))       _log.error("Private/public crypto key mismatch in LS");
      _runner.disconnectClient("Private/public crypto key mismatch in LS");
      return;
    }
    _context.keyManager().registerKeys(dest,message.getSigningPrivateKey(),message.getPrivateKey());
  }
 else   if (!message.getSigningPrivateKey().equals(keys.getRevocationKey())) {
    _context.keyManager().registerKeys(dest,message.getSigningPrivateKey(),message.getPrivateKey());
  }
  try {
    _context.netDb().publish(message.getLeaseSet());
  }
 catch (  IllegalArgumentException iae) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Invalid leaseset from client",iae);
    _runner.disconnectClient("Invalid leaseset: " + iae);
    return;
  }
  if (_log.shouldLog(Log.INFO))   _log.info("New lease set granted for destination " + dest);
  _runner.leaseSetCreated(message.getLeaseSet());
}
