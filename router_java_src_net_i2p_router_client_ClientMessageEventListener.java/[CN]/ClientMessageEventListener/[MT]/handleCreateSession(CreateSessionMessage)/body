{
  SessionConfig in=message.getSessionConfig();
  if (in.verifySignature()) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Signature verified correctly on create session message");
  }
 else {
    if (_log.shouldLog(Log.ERROR))     _log.error("Signature verification *FAILED* on a create session message.  Hijack attempt?");
    _runner.disconnectClient("Invalid signature on CreateSessionMessage");
    return;
  }
  if (_enforceAuth && _context.getBooleanProperty(PROP_AUTH)) {
    Properties props=in.getOptions();
    String user=props.getProperty("i2cp.username");
    String pw=props.getProperty("i2cp.password");
    if (user == null || user.length() == 0 || pw == null || pw.length() == 0) {
      _log.error("I2CP auth failed for client: " + props.getProperty("inbound.nickname"));
      _runner.disconnectClient("Authorization required to create session, specify i2cp.username and i2cp.password in session options");
      return;
    }
    PasswordManager mgr=new PasswordManager(_context);
    if (!mgr.checkHash(PROP_AUTH,user,pw)) {
      _log.error("I2CP auth failed for client: " + props.getProperty("inbound.nickname") + " user: "+ user);
      _runner.disconnectClient("Authorization failed for Create Session, user = " + user);
      return;
    }
    if (_log.shouldLog(Log.INFO))     _log.info("I2CP auth success for client: " + props.getProperty("inbound.nickname") + " user: "+ user);
  }
  SessionId sessionId=new SessionId();
  sessionId.setSessionId(getNextSessionId());
  _runner.setSessionId(sessionId);
  sendStatusMessage(SessionStatusMessage.STATUS_CREATED);
  SessionConfig cfg=new SessionConfig(in.getDestination());
  cfg.setSignature(in.getSignature());
  Properties props=new Properties();
  props.putAll(in.getOptions());
  cfg.setOptions(props);
  _runner.sessionEstablished(cfg);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("after sessionEstablished for " + message.getSessionConfig().getDestination().calculateHash().toBase64());
  startCreateSessionJob();
}
