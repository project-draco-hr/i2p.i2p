{
  if (_runner.isDead())   return;
  _log.info("Message recieved: \n" + message);
switch (message.getType()) {
case GetDateMessage.MESSAGE_TYPE:
    handleGetDate(reader,(GetDateMessage)message);
  break;
case SetDateMessage.MESSAGE_TYPE:
handleSetDate(reader,(SetDateMessage)message);
break;
case CreateSessionMessage.MESSAGE_TYPE:
handleCreateSession(reader,(CreateSessionMessage)message);
break;
case SendMessageMessage.MESSAGE_TYPE:
handleSendMessage(reader,(SendMessageMessage)message);
break;
case ReceiveMessageBeginMessage.MESSAGE_TYPE:
handleReceiveBegin(reader,(ReceiveMessageBeginMessage)message);
break;
case ReceiveMessageEndMessage.MESSAGE_TYPE:
handleReceiveEnd(reader,(ReceiveMessageEndMessage)message);
break;
case CreateLeaseSetMessage.MESSAGE_TYPE:
handleCreateLeaseSet(reader,(CreateLeaseSetMessage)message);
break;
case DestroySessionMessage.MESSAGE_TYPE:
handleDestroySession(reader,(DestroySessionMessage)message);
break;
default :
_log.warn("Unhandled I2CP type received: " + message.getType());
}
}
