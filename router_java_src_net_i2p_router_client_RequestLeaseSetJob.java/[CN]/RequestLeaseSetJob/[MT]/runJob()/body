{
  if (_runner.isDead())   return;
  LeaseSet requested=_requestState.getRequested();
  long endTime=requested.getEarliestLeaseDate();
  long fudge=MAX_FUDGE - ((endTime - getContext().clock().now()) / (10 * 60 * 1000 / MAX_FUDGE));
  endTime+=fudge;
  I2CPMessage msg;
  if (getContext().getProperty(PROP_VARIABLE,DFLT_VARIABLE) && (_runner instanceof QueuedClientConnectionRunner || RequestVariableLeaseSetMessage.isSupported(_runner.getClientVersion()))) {
    RequestVariableLeaseSetMessage rmsg=new RequestVariableLeaseSetMessage();
    rmsg.setSessionId(_runner.getSessionId());
    for (int i=0; i < requested.getLeaseCount(); i++) {
      Lease lease=requested.getLease(i);
      if (lease.getEndDate().getTime() < endTime) {
        Lease nl=new Lease();
        nl.setGateway(lease.getGateway());
        nl.setTunnelId(lease.getTunnelId());
        nl.setEndDate(new Date(endTime));
        lease=nl;
      }
      rmsg.addEndpoint(lease);
    }
    msg=rmsg;
  }
 else {
    RequestLeaseSetMessage rmsg=new RequestLeaseSetMessage();
    Date end=new Date(endTime);
    rmsg.setEndDate(end);
    rmsg.setSessionId(_runner.getSessionId());
    for (int i=0; i < requested.getLeaseCount(); i++) {
      Lease lease=requested.getLease(i);
      rmsg.addEndpoint(lease.getGateway(),lease.getTunnelId());
    }
    msg=rmsg;
  }
  try {
    _runner.doSend(msg);
    getContext().jobQueue().addJob(new CheckLeaseRequestStatus());
  }
 catch (  I2CPMessageException ime) {
    getContext().statManager().addRateData("client.requestLeaseSetDropped",1);
    _log.error("Error sending I2CP message requesting the lease set",ime);
    _requestState.setIsSuccessful(false);
    if (_requestState.getOnFailed() != null)     RequestLeaseSetJob.this.getContext().jobQueue().addJob(_requestState.getOnFailed());
    _runner.failLeaseRequest(_requestState);
  }
}
