{
  int removed=0;
  int remaining=0;
  long now=_context.clock().now();
synchronized (_inboundTagSets) {
    for (Iterator<TagSet> iter=_inboundTagSets.values().iterator(); iter.hasNext(); ) {
      TagSet ts=iter.next();
      if (ts.getDate() <= now) {
        iter.remove();
        removed++;
      }
    }
    remaining=_inboundTagSets.size();
  }
  _context.statManager().addRateData("crypto.sessionTagsRemaining",remaining,0);
  if (removed > 0 && _log.shouldLog(Log.DEBUG))   _log.debug("Expired inbound: " + removed);
synchronized (_outboundSessions) {
    for (Iterator<OutboundSession> iter=_outboundSessions.values().iterator(); iter.hasNext(); ) {
      OutboundSession sess=iter.next();
      removed+=sess.expireTags();
      if (sess.getLastUsedDate() < now - (SESSION_LIFETIME_MAX_MS / 2) && sess.availableTags() <= 0) {
        iter.remove();
        removed++;
      }
    }
  }
  return removed;
}
