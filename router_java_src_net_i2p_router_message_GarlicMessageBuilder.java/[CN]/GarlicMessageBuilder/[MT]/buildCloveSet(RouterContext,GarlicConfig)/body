{
  ByteArrayOutputStream baos=null;
  Log log=ctx.logManager().getLog(GarlicMessageBuilder.class);
  try {
    if (config instanceof PayloadGarlicConfig) {
      byte clove[]=buildClove(ctx,(PayloadGarlicConfig)config);
      baos=new ByteArrayOutputStream(clove.length + 16);
      DataHelper.writeLong(baos,1,1);
      baos.write(clove);
    }
 else {
      byte cloves[][]=new byte[config.getCloveCount()][];
      for (int i=0; i < config.getCloveCount(); i++) {
        GarlicConfig c=config.getClove(i);
        if (c instanceof PayloadGarlicConfig) {
          cloves[i]=buildClove(ctx,(PayloadGarlicConfig)c);
        }
 else {
          log.debug("Subclove IS NOT a payload garlic clove");
          cloves[i]=buildClove(ctx,c);
        }
        if (cloves[i] == null)         throw new DataFormatException("Unable to build clove");
      }
      int len=1;
      for (int i=0; i < cloves.length; i++)       len+=cloves[i].length;
      baos=new ByteArrayOutputStream(len + 16);
      DataHelper.writeLong(baos,1,cloves.length);
      for (int i=0; i < cloves.length; i++)       baos.write(cloves[i]);
    }
    if (baos == null)     new ByteArrayOutputStream(16);
    config.getCertificate().writeBytes(baos);
    DataHelper.writeLong(baos,4,config.getId());
    DataHelper.writeLong(baos,DataHelper.DATE_LENGTH,config.getExpiration());
  }
 catch (  IOException ioe) {
    log.error("Error building the clove set",ioe);
  }
catch (  DataFormatException dfe) {
    log.error("Error building the clove set",dfe);
  }
  return baos.toByteArray();
}
