{
  Log log=ctx.logManager().getLog(GarlicMessageBuilder.class);
  PublicKey key=config.getRecipientPublicKey();
  if (key == null) {
    if (config.getRecipient() == null) {
      throw new IllegalArgumentException("Null recipient specified");
    }
 else     if (config.getRecipient().getIdentity() == null) {
      throw new IllegalArgumentException("Null recipient.identity specified");
    }
 else     if (config.getRecipient().getIdentity().getPublicKey() == null) {
      throw new IllegalArgumentException("Null recipient.identity.publicKey specified");
    }
 else     key=config.getRecipient().getIdentity().getPublicKey();
  }
  if (log.shouldLog(Log.INFO))   log.info("Encrypted with public key to expire on " + new Date(config.getExpiration()));
  SessionKey curKey=skm.getCurrentOrNewKey(key);
  SessionTag curTag=null;
  curTag=skm.consumeNextAvailableTag(key,curKey);
  if (log.shouldLog(Log.DEBUG)) {
    int availTags=skm.getAvailableTags(key,curKey);
    log.debug("Available tags for encryption: " + availTags + " low threshold: "+ lowTagsThreshold);
  }
  if (numTagsToDeliver > 0 && skm.shouldSendTags(key,curKey,lowTagsThreshold)) {
    for (int i=0; i < numTagsToDeliver; i++)     wrappedTags.add(new SessionTag(true));
    if (log.shouldLog(Log.INFO))     log.info("Too few tags available so we're including " + numTagsToDeliver);
  }
  wrappedKey.setData(curKey.getData());
  return buildMessage(ctx,config,wrappedKey,wrappedTags,key,curKey,curTag);
}
