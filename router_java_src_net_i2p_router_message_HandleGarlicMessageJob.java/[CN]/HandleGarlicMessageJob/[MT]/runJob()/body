{
  CloveSet set=GarlicMessageParser.getInstance().getGarlicCloves(_message,KeyManager.getInstance().getPrivateKey());
  if (set == null) {
    Set keys=KeyManager.getInstance().getAllKeys();
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Decryption with the router's key failed, now try with the " + keys.size() + " leaseSet keys");
    for (Iterator iter=keys.iterator(); iter.hasNext(); ) {
      LeaseSetKeys lskeys=(LeaseSetKeys)iter.next();
      set=GarlicMessageParser.getInstance().getGarlicCloves(_message,lskeys.getDecryptionKey());
      if (set != null) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Decrypted garlic message with lease set key for destination " + lskeys.getDestination().calculateHash().toBase64() + " SUCCEEDED: "+ set);
        break;
      }
 else {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Decrypting garlic message with lease set key for destination " + lskeys.getDestination().calculateHash().toBase64() + " failed");
      }
    }
  }
 else {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Decrypted clove set found " + set.getCloveCount() + " cloves: "+ set);
  }
  if (set != null) {
    for (int i=0; i < set.getCloveCount(); i++) {
      GarlicClove clove=set.getClove(i);
      handleClove(clove);
    }
  }
 else {
    if (_log.shouldLog(Log.ERROR))     _log.error("CloveMessageParser failed to decrypt the message [" + _message.getUniqueId() + "] to us when received from ["+ _fromHash+ "] / ["+ _from+ "]",new Exception("Decrypt garlic failed"));
    MessageHistory.getInstance().messageProcessingError(_message.getUniqueId(),_message.getClass().getName(),"Garlic could not be decrypted");
  }
}
