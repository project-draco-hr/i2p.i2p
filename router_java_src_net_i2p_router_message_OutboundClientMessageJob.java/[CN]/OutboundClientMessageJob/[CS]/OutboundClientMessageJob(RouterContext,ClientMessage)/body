{
  super(ctx);
  _log=ctx.logManager().getLog(OutboundClientMessageJob.class);
  ctx.statManager().createFrequencyStat("client.sendMessageFailFrequency","How often does a client fail to send a message?","ClientMessages",new long[]{60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.sendMessageSize","How large are messages sent by the client?","ClientMessages",new long[]{60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.sendAttemptAverage","How many different tunnels do we have to try when sending a client message?","ClientMessages",new long[]{60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.sendAckTime","How long does it take to get an ACK back from a message?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.sendsPerFailure","How many send attempts do we make when they all fail?","ClientMessages",new long[]{60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.timeoutCongestionTunnel","How lagged our tunnels are when a send times out?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.timeoutCongestionMessage","How fast we process messages locally when a send times out?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.timeoutCongestionInbound","How much faster we are receiving data than our average bps when a send times out?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  long timeoutMs=OVERALL_TIMEOUT_MS_DEFAULT;
  String param=msg.getSenderConfig().getOptions().getProperty(OVERALL_TIMEOUT_MS_PARAM);
  if (param == null)   param=ctx.router().getConfigSetting(OVERALL_TIMEOUT_MS_PARAM);
  if (param != null) {
    try {
      timeoutMs=Long.parseLong(param);
    }
 catch (    NumberFormatException nfe) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Invalid client message timeout specified [" + param + "], defaulting to "+ OVERALL_TIMEOUT_MS_DEFAULT,nfe);
      timeoutMs=OVERALL_TIMEOUT_MS_DEFAULT;
    }
  }
  _overallExpiration=timeoutMs + getContext().clock().now();
  _status=new OutboundClientMessageStatus(ctx,msg);
  _nextStep=new NextStepJob();
  _lookupLeaseSetFailed=new LookupLeaseSetFailedJob();
  _shouldBundle=getShouldBundle();
}
