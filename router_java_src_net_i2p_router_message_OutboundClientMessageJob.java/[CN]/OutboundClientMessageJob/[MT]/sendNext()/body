{
  if (_log.shouldLog(Log.DEBUG)) {
    _log.debug(getJobId() + ": sendNext() called with " + _status.getNumSent()+ " already sent");
  }
  if (_status.getSuccess()) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug(getJobId() + ": sendNext() - already successful!");
    return;
  }
  if (_status.getFailure()) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug(getJobId() + ": sendNext() - already failed!");
    return;
  }
  long now=getContext().clock().now();
  if (now >= _overallExpiration) {
    if (_log.shouldLog(Log.WARN))     _log.warn(getJobId() + ": sendNext() - Expired");
    dieFatal();
    return;
  }
  Lease nextLease=getNextLease();
  if (_log.shouldLog(Log.DEBUG))   _log.debug(getJobId() + ": Send outbound client message - next lease found for [" + _status.getTo().calculateHash().toBase64()+ "] - "+ nextLease);
  if (nextLease == null) {
    if (_log.shouldLog(Log.WARN))     _log.warn(getJobId() + ": No more leases, and we still haven't heard back from the peer" + ", refetching the leaseSet to try again");
    LeaseSet ls=_status.getLeaseSet();
    _status.setLeaseSet(null);
    long remainingMs=_overallExpiration - getContext().clock().now();
    if (_status.getNumLookups() < MAX_LEASE_LOOKUPS) {
      _status.incrementLookups();
      Hash to=_status.getMessage().getDestination().calculateHash();
      _status.clearAlreadySent();
      getContext().netDb().fail(to);
      getContext().netDb().lookupLeaseSet(to,_nextStep,_lookupLeaseSetFailed,remainingMs);
      if (ls != null)       getContext().jobQueue().addJob(new ShortCircuitSearchJob(ls));
      return;
    }
 else {
      if (_log.shouldLog(Log.WARN))       _log.warn(getJobId() + ": sendNext() - max # lease lookups exceeded! " + _status.getNumLookups());
      dieFatal();
      return;
    }
  }
  getContext().jobQueue().addJob(new SendJob(nextLease));
}
