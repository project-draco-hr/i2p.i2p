{
  super(ctx);
  _log=ctx.logManager().getLog(OutboundClientMessageOneShotJob.class);
  long timeoutMs=OVERALL_TIMEOUT_MS_DEFAULT;
  _clientMessage=msg;
  _clientMessageId=msg.getMessageId();
  _clientMessageSize=msg.getPayload().getSize();
  _from=msg.getFromDestination();
  _to=msg.getDestination();
  _toString=_to.calculateHash().toBase64().substring(0,4);
  _leaseSetLookupBegin=-1;
  _start=getContext().clock().now();
  _overallExpiration=msg.getExpiration();
  if (_overallExpiration > 0) {
    _overallExpiration=Math.max(_overallExpiration,_start + OVERALL_TIMEOUT_MS_MIN);
    _overallExpiration=Math.min(_overallExpiration,_start + OVERALL_TIMEOUT_MS_DEFAULT);
    if (_log.shouldLog(Log.INFO))     _log.info(getJobId() + ": Message Expiration (ms): " + (_overallExpiration - _start));
  }
 else {
    String param=msg.getSenderConfig().getOptions().getProperty(OVERALL_TIMEOUT_MS_PARAM);
    if (param == null)     param=ctx.router().getConfigSetting(OVERALL_TIMEOUT_MS_PARAM);
    if (param != null) {
      try {
        timeoutMs=Long.parseLong(param);
      }
 catch (      NumberFormatException nfe) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Invalid client message timeout specified [" + param + "], defaulting to "+ OVERALL_TIMEOUT_MS_DEFAULT,nfe);
        timeoutMs=OVERALL_TIMEOUT_MS_DEFAULT;
      }
    }
    _overallExpiration=timeoutMs + _start;
    if (_log.shouldLog(Log.INFO))     _log.info(getJobId() + " Default Expiration (ms): " + timeoutMs);
  }
  _finished=false;
}
