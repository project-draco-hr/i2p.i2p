{
  super(ctx);
  _log=ctx.logManager().getLog(OutboundClientMessageOneShotJob.class);
synchronized (_initializeLock) {
    if (!_initialized) {
      SimpleScheduler.getInstance().addPeriodicEvent(new OCMOSJCacheCleaner(ctx),CLEAN_INTERVAL,CLEAN_INTERVAL);
      ctx.statManager().createFrequencyStat("client.sendMessageFailFrequency","How often does a client fail to send a message?","ClientMessages",new long[]{60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
      ctx.statManager().createRateStat("client.sendMessageSize","How large are messages sent by the client?","ClientMessages",new long[]{60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
      ctx.statManager().createRateStat("client.sendAckTime","Message round trip time","ClientMessages",new long[]{60 * 1000l,5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
      ctx.statManager().createRateStat("client.timeoutCongestionTunnel","How lagged our tunnels are when a send times out?","ClientMessages",new long[]{60 * 1000l,5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
      ctx.statManager().createRateStat("client.timeoutCongestionMessage","How fast we process messages locally when a send times out?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
      ctx.statManager().createRateStat("client.timeoutCongestionInbound","How much faster we are receiving data than our average bps when a send times out?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
      ctx.statManager().createRateStat("client.leaseSetFoundLocally","How often we tried to look for a leaseSet and found it locally?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
      ctx.statManager().createRateStat("client.leaseSetFoundRemoteTime","How long we tried to look for a remote leaseSet (when we succeeded)?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
      ctx.statManager().createRateStat("client.leaseSetFailedRemoteTime","How long we tried to look for a remote leaseSet (when we failed)?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
      ctx.statManager().createRateStat("client.dispatchPrepareTime","How long until we've queued up the dispatch job (since we started)?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
      ctx.statManager().createRateStat("client.dispatchTime","How long until we've dispatched the message (since we started)?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
      ctx.statManager().createRateStat("client.dispatchSendTime","How long the actual dispatching takes?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
      ctx.statManager().createRateStat("client.dispatchNoTunnels","How long after start do we run out of tunnels to send/receive with?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
      ctx.statManager().createRateStat("client.dispatchNoACK","Repeated message sends to a peer (no ack required)","ClientMessages",new long[]{60 * 1000l,5 * 60 * 1000l,60 * 60 * 1000l});
      _initialized=true;
    }
  }
  long timeoutMs=OVERALL_TIMEOUT_MS_DEFAULT;
  _clientMessage=msg;
  _clientMessageId=msg.getMessageId();
  _clientMessageSize=msg.getPayload().getSize();
  _from=msg.getFromDestination();
  _to=msg.getDestination();
  _toString=_to.calculateHash().toBase64().substring(0,4);
  _leaseSetLookupBegin=-1;
  _start=getContext().clock().now();
  _overallExpiration=msg.getExpiration();
  if (_overallExpiration > 0) {
    _overallExpiration=Math.max(_overallExpiration,_start + OVERALL_TIMEOUT_MS_MIN);
    _overallExpiration=Math.min(_overallExpiration,_start + OVERALL_TIMEOUT_MS_DEFAULT);
    if (_log.shouldLog(Log.WARN))     _log.warn("Message Expiration (ms): " + (_overallExpiration - _start));
  }
 else {
    String param=msg.getSenderConfig().getOptions().getProperty(OVERALL_TIMEOUT_MS_PARAM);
    if (param == null)     param=ctx.router().getConfigSetting(OVERALL_TIMEOUT_MS_PARAM);
    if (param != null) {
      try {
        timeoutMs=Long.parseLong(param);
      }
 catch (      NumberFormatException nfe) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Invalid client message timeout specified [" + param + "], defaulting to "+ OVERALL_TIMEOUT_MS_DEFAULT,nfe);
        timeoutMs=OVERALL_TIMEOUT_MS_DEFAULT;
      }
    }
    _overallExpiration=timeoutMs + _start;
    if (_log.shouldLog(Log.WARN))     _log.warn("Default Expiration (ms): " + timeoutMs);
  }
  _finished=false;
}
