{
  super(ctx);
  _start=ctx.clock().now();
  _cache=cache;
  _log=ctx.logManager().getLog(OutboundClientMessageOneShotJob.class);
  long timeoutMs=OVERALL_TIMEOUT_MS_DEFAULT;
  _clientMessage=msg;
  _clientMessageId=msg.getMessageId();
  _clientMessageSize=msg.getPayload().getSize();
  _from=msg.getFromDestination();
  _to=msg.getDestination();
  Hash toHash=_to.calculateHash();
  _hashPair=new OutboundCache.HashPair(_from.calculateHash(),toHash);
  _toString=toHash.toBase64().substring(0,4);
  _leaseSet=ctx.netDb().lookupLeaseSetLocally(toHash);
  long overallExpiration=msg.getExpiration();
  if (overallExpiration > 0) {
    if (overallExpiration < 24 * 60 * 60* 1000l) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Client bug - interval instead of timestamp " + overallExpiration);
      overallExpiration+=_start;
    }
    if (overallExpiration > _start) {
      long minTimeout=_leaseSet != null ? OVERALL_TIMEOUT_MS_MIN : OVERALL_TIMEOUT_NOLS_MIN;
      overallExpiration=Math.max(overallExpiration,_start + minTimeout);
      overallExpiration=Math.min(overallExpiration,_start + OVERALL_TIMEOUT_MS_MAX);
      if (_log.shouldLog(Log.INFO))       _log.info(getJobId() + ": Message Expiration (ms): " + (overallExpiration - _start));
    }
 else {
      if (_log.shouldLog(Log.WARN))       _log.warn(getJobId() + ": Expired before we got to it");
    }
  }
 else {
    String param=msg.getSenderConfig().getOptions().getProperty(OVERALL_TIMEOUT_MS_PARAM);
    if (param == null)     param=ctx.router().getConfigSetting(OVERALL_TIMEOUT_MS_PARAM);
    if (param != null) {
      try {
        timeoutMs=Long.parseLong(param);
      }
 catch (      NumberFormatException nfe) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Invalid client message timeout specified [" + param + "], defaulting to "+ OVERALL_TIMEOUT_MS_DEFAULT,nfe);
        timeoutMs=OVERALL_TIMEOUT_MS_DEFAULT;
      }
    }
    overallExpiration=timeoutMs + _start;
    if (_log.shouldLog(Log.DEBUG))     _log.debug(getJobId() + " Default Expiration (ms): " + timeoutMs);
  }
  _overallExpiration=overallExpiration;
}
