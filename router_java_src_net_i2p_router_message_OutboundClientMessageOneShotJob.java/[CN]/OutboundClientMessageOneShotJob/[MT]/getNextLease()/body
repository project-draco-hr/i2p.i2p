{
  if (_leaseSet == null) {
    _leaseSet=getContext().netDb().lookupLeaseSetLocally(_to.calculateHash());
    if (_leaseSet == null) {
      if (_log.shouldLog(Log.WARN))       _log.warn(getJobId() + ": Lookup locally didn't find the leaseSet for " + _toString);
      return false;
    }
  }
  _lease=_cache.leaseCache.get(_hashPair);
  if (_lease != null) {
    if (!_lease.isExpired(Router.CLOCK_FUDGE_FACTOR)) {
      for (int i=0; i < _leaseSet.getLeaseCount(); i++) {
        Lease lease=_leaseSet.getLease(i);
        if (_lease.getTunnelId().equals(lease.getTunnelId()) && _lease.getGateway().equals(lease.getGateway())) {
          if (_log.shouldLog(Log.INFO))           _log.info(getJobId() + ": Found in cache - lease for " + _toString);
          return true;
        }
      }
    }
    _cache.leaseCache.remove(_hashPair,_lease);
    if (_log.shouldLog(Log.INFO))     _log.info(getJobId() + ": Expired from cache - lease for " + _toString);
  }
  List<Lease> leases=new ArrayList(_leaseSet.getLeaseCount());
  for (int i=0; i < _leaseSet.getLeaseCount(); i++) {
    Lease lease=_leaseSet.getLease(i);
    if (lease.isExpired(Router.CLOCK_FUDGE_FACTOR)) {
      if (_log.shouldLog(Log.INFO))       _log.info(getJobId() + ": getNextLease() - expired lease! - " + lease+ " for "+ _toString);
      continue;
    }
 else {
      leases.add(lease);
    }
  }
  if (leases.isEmpty()) {
    if (_log.shouldLog(Log.INFO))     _log.info(getJobId() + ": No leases found from: " + _leaseSet);
    return false;
  }
  Collections.shuffle(leases,getContext().random());
  for (int i=0; i < leases.size(); i++) {
    Lease l=leases.get(i);
    RouterInfo ri=getContext().netDb().lookupRouterInfoLocally(l.getGateway());
    if (ri == null || ri.getCapabilities().indexOf(Router.CAPABILITY_UNREACHABLE) < 0) {
      _lease=l;
      break;
    }
    if (_log.shouldLog(Log.WARN))     _log.warn(getJobId() + ": Skipping unreachable gateway " + l.getGateway()+ " for "+ _toString);
  }
  if (_lease == null) {
    _lease=leases.get(0);
    if (_log.shouldLog(Log.WARN))     _log.warn(getJobId() + ": All leases are unreachable for " + _toString);
  }
  _cache.leaseCache.put(_hashPair,_lease);
  if (_log.shouldLog(Log.INFO))   _log.info(getJobId() + ": Added to cache - lease for " + _toString);
  _wantACK=true;
  return true;
}
