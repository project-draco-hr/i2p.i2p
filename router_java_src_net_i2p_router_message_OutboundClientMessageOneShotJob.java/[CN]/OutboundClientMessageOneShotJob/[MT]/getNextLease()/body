{
  _leaseSet=getContext().netDb().lookupLeaseSetLocally(_to.calculateHash());
  if (_leaseSet == null) {
    if (_log.shouldLog(Log.WARN))     _log.warn(getJobId() + ": Lookup locally didn't find the leaseSet for " + _toString);
    return false;
  }
  long now=getContext().clock().now();
synchronized (_leaseCache) {
    if (now - _lcleanTime > 5 * 60 * 1000) {
      cleanLeaseCache(_leaseCache);
      _lcleanTime=now;
    }
    _lease=(Lease)_leaseCache.get(hashPair());
    if (_lease != null) {
      if (!_lease.isExpired(Router.CLOCK_FUDGE_FACTOR)) {
        for (int i=0; i < _leaseSet.getLeaseCount(); i++) {
          Lease lease=_leaseSet.getLease(i);
          if (_lease.equals(lease)) {
            if (_log.shouldLog(Log.INFO))             _log.info("Found in cache - lease for " + _toString);
            return true;
          }
        }
      }
      if (_log.shouldLog(Log.INFO))       _log.info("Expired from cache - lease for " + _toString);
      _leaseCache.remove(_to);
    }
  }
  List leases=new ArrayList(_leaseSet.getLeaseCount());
  for (int i=0; i < _leaseSet.getLeaseCount(); i++) {
    Lease lease=_leaseSet.getLease(i);
    if (lease.isExpired(Router.CLOCK_FUDGE_FACTOR)) {
      if (_log.shouldLog(Log.INFO))       _log.info(getJobId() + ": getNextLease() - expired lease! - " + lease+ " for "+ _toString);
      continue;
    }
 else {
      leases.add(lease);
    }
  }
  if (leases.size() <= 0) {
    if (_log.shouldLog(Log.INFO))     _log.info(getJobId() + ": No leases found from: " + _leaseSet);
    return false;
  }
  Collections.shuffle(leases);
  for (int i=0; i < leases.size(); i++) {
    Lease l=(Lease)leases.get(i);
    RouterInfo ri=getContext().netDb().lookupRouterInfoLocally(l.getGateway());
    if (ri == null || ri.getCapabilities().indexOf(Router.CAPABILITY_UNREACHABLE) < 0) {
      _lease=l;
      break;
    }
    if (_log.shouldLog(Log.WARN))     _log.warn(getJobId() + ": Skipping unreachable gateway " + l.getGateway()+ " for "+ _toString);
  }
  if (_lease == null) {
    _lease=(Lease)leases.get(0);
    if (_log.shouldLog(Log.WARN))     _log.warn(getJobId() + ": All leases are unreachable for " + _toString);
  }
synchronized (_leaseCache) {
    _leaseCache.put(hashPair(),_lease);
  }
  if (_log.shouldLog(Log.INFO))   _log.info("Added to cache - lease for " + _toString);
  return true;
}
