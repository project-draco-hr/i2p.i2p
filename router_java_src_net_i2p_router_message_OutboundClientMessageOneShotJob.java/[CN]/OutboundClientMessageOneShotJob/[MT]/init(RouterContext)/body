{
  ctx.statManager().createFrequencyStat("client.sendMessageFailFrequency","How often does a client fail to send a message?","ClientMessages",new long[]{60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.sendMessageSize","How large are messages sent by the client?","ClientMessages",new long[]{60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRequiredRateStat("client.sendAckTime","Message round trip time (ms)","ClientMessages",new long[]{60 * 1000l,5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.timeoutCongestionTunnel","How lagged our tunnels are when a send times out?","ClientMessages",new long[]{60 * 1000l,5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.timeoutCongestionMessage","How fast we process messages locally when a send times out?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.timeoutCongestionInbound","How much faster we are receiving data than our average bps when a send times out?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.leaseSetFoundRemoteTime","How long we tried to look for a remote leaseSet (when we succeeded)?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.leaseSetFailedRemoteTime","How long we tried to look for a remote leaseSet (when we failed)?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.dispatchPrepareTime","How long until we've queued up the dispatch job (since we started)?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.dispatchTime","How long until we've dispatched the message (since we started)?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.dispatchSendTime","How long the actual dispatching takes?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.dispatchNoTunnels","How long after start do we run out of tunnels to send/receive with?","ClientMessages",new long[]{5 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("client.dispatchNoACK","Repeated message sends to a peer (no ack required)","ClientMessages",new long[]{60 * 1000l,5 * 60 * 1000l,60 * 60 * 1000l});
  ctx.statManager().createRateStat("crypto.garlic.decryptFail","How often garlic messages are undecryptable","Encryption",new long[]{5 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
}
