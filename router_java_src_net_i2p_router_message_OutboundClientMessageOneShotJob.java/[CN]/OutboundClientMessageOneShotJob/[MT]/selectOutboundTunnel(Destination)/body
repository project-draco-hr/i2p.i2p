{
  TunnelInfo tunnel;
synchronized (_cache.tunnelCache) {
    tunnel=_cache.backloggedTunnelCache.get(_hashPair);
    if (tunnel != null) {
      if (getContext().tunnelManager().isValidTunnel(_from.calculateHash(),tunnel)) {
        if (!getContext().commSystem().isBacklogged(tunnel.getPeer(1))) {
          if (_log.shouldLog(Log.WARN))           _log.warn("Switching back to tunnel " + tunnel + " for "+ _toString);
          _cache.backloggedTunnelCache.remove(_hashPair);
          _cache.tunnelCache.put(_hashPair,tunnel);
          _wantACK=true;
          return tunnel;
        }
      }
 else       _cache.backloggedTunnelCache.remove(_hashPair);
    }
    tunnel=_cache.tunnelCache.get(_hashPair);
    if (tunnel != null) {
      if (getContext().tunnelManager().isValidTunnel(_from.calculateHash(),tunnel)) {
        if (tunnel.getLength() <= 1 || !getContext().commSystem().isBacklogged(tunnel.getPeer(1)))         return tunnel;
        if (_log.shouldLog(Log.WARN))         _log.warn("Switching from backlogged " + tunnel + " for "+ _toString);
        _cache.backloggedTunnelCache.put(_hashPair,tunnel);
      }
      _cache.tunnelCache.remove(_hashPair);
    }
    tunnel=selectOutboundTunnel();
    if (tunnel != null)     _cache.tunnelCache.put(_hashPair,tunnel);
    _wantACK=true;
  }
  return tunnel;
}
