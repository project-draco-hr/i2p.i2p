{
synchronized (this) {
    if (_finished != Result.NONE) {
      if (_log.shouldLog(Log.WARN))       _log.warn(OutboundClientMessageOneShotJob.this.getJobId() + ": SEND-AFTER-" + _finished);
      return;
    }
  }
  long now=getContext().clock().now();
  if (now >= _overallExpiration) {
    dieFatal(MessageStatusMessage.STATUS_SEND_FAILURE_EXPIRED);
    return;
  }
  _outTunnel=selectOutboundTunnel(_to);
  if (_outTunnel == null) {
    if (_log.shouldLog(Log.WARN))     _log.warn(getJobId() + ": Could not find any outbound tunnels to send the payload through... this might take a while");
    getContext().statManager().addRateData("client.dispatchNoTunnels",now - _start);
    dieFatal(MessageStatusMessage.STATUS_SEND_FAILURE_NO_TUNNELS);
    return;
  }
  Long lastReplyRequestSent=_cache.lastReplyRequestCache.get(_hashPair);
  boolean shouldRequestReply=lastReplyRequestSent == null || lastReplyRequestSent.longValue() < now - REPLY_REQUEST_INTERVAL;
  int sendFlags=_clientMessage.getFlags();
  int tagsRequired=SendMessageOptions.getTagThreshold(sendFlags);
  boolean wantACK=_wantACK || shouldRequestReply || GarlicMessageBuilder.needsTags(getContext(),_leaseSet.getEncryptionKey(),_from.calculateHash(),tagsRequired);
  LeaseSet replyLeaseSet;
  String allow=_clientMessage.getSenderConfig().getOptions().getProperty(BUNDLE_REPLY_LEASESET);
  boolean allowLeaseBundle=SendMessageOptions.getSendLeaseSet(sendFlags) && (allow == null || Boolean.parseBoolean(allow));
  if (allowLeaseBundle) {
    replyLeaseSet=getReplyLeaseSet(false);
    if (replyLeaseSet != null)     wantACK=true;
  }
 else {
    replyLeaseSet=null;
  }
  long token;
  if (wantACK) {
    _cache.lastReplyRequestCache.put(_hashPair,Long.valueOf(now));
    token=getContext().random().nextLong(I2NPMessage.MAX_ID_VALUE);
    _inTunnel=selectInboundTunnel();
  }
 else {
    token=-1;
  }
  PayloadGarlicConfig clove=buildClove();
  if (clove == null) {
    dieFatal(MessageStatusMessage.STATUS_SEND_FAILURE_UNSUPPORTED_ENCRYPTION);
    return;
  }
  PublicKey key=_leaseSet.getEncryptionKey();
  SessionKey sessKey=new SessionKey();
  Set<SessionTag> tags=new HashSet<SessionTag>();
  int tagsToSend=SendMessageOptions.getTagsToSend(sendFlags);
  GarlicMessage msg=OutboundClientMessageJobHelper.createGarlicMessage(getContext(),token,_overallExpiration,key,clove,_from.calculateHash(),_to,_inTunnel,tagsToSend,tagsRequired,sessKey,tags,wantACK,replyLeaseSet);
  if (msg == null) {
    if (_log.shouldLog(Log.WARN))     _log.warn(getJobId() + ": Unable to create the garlic message (no tunnels left or too lagged) to " + _toString);
    getContext().statManager().addRateData("client.dispatchNoTunnels",now - _start);
    dieFatal(MessageStatusMessage.STATUS_SEND_FAILURE_NO_TUNNELS);
    return;
  }
  SendSuccessJob onReply=null;
  SendTimeoutJob onFail=null;
  ReplySelector selector=null;
  if (wantACK) {
    TagSetHandle tsh=null;
    if (!tags.isEmpty()) {
      SessionKeyManager skm=getContext().clientManager().getClientSessionKeyManager(_from.calculateHash());
      if (skm != null)       tsh=skm.tagsDelivered(_leaseSet.getEncryptionKey(),sessKey,tags);
    }
    onReply=new SendSuccessJob(getContext(),sessKey,tsh);
    onFail=new SendTimeoutJob(getContext(),sessKey,tsh);
    long expiration=Math.max(_overallExpiration,_start + REPLY_TIMEOUT_MS_MIN);
    selector=new ReplySelector(token,expiration);
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug(getJobId() + ": Sending msg out " + _outTunnel.getSendTunnelId(0)+ " to "+ _toString+ " at "+ _lease.getTunnelId()+ " on "+ _lease.getGateway());
  DispatchJob dispatchJob=new DispatchJob(getContext(),msg,selector,onReply,onFail);
  dispatchJob.runJob();
  getContext().statManager().addRateData("client.dispatchPrepareTime",now - _start);
  if (!wantACK)   getContext().statManager().addRateData("client.dispatchNoACK",1);
}
