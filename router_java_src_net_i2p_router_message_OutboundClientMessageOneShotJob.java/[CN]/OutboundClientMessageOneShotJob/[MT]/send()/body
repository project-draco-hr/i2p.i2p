{
  long token=getContext().random().nextLong(I2NPMessage.MAX_ID_VALUE);
  PublicKey key=_leaseSet.getEncryptionKey();
  SessionKey sessKey=new SessionKey();
  Set tags=new HashSet();
  LeaseSet replyLeaseSet=null;
  if (_shouldBundle) {
    replyLeaseSet=getContext().netDb().lookupLeaseSetLocally(_clientMessage.getFromDestination().calculateHash());
  }
  GarlicMessage msg=OutboundClientMessageJobHelper.createGarlicMessage(getContext(),token,_overallExpiration,key,_clove,_clientMessage.getDestination(),sessKey,tags,true,replyLeaseSet);
  if (_log.shouldLog(Log.DEBUG))   _log.debug(getJobId() + ": send() - token expected " + token);
  SendSuccessJob onReply=new SendSuccessJob(sessKey,tags);
  SendTimeoutJob onFail=new SendTimeoutJob();
  ReplySelector selector=new ReplySelector(token);
  if (_log.shouldLog(Log.DEBUG))   _log.debug(getJobId() + ": Placing GarlicMessage into the new tunnel message bound for " + _lease.getTunnelId()+ " on "+ _lease.getRouterIdentity().getHash().toBase64());
  TunnelId outTunnelId=selectOutboundTunnel();
  if (outTunnelId != null) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug(getJobId() + ": Sending tunnel message out " + outTunnelId+ " to "+ _lease.getTunnelId()+ " on "+ _lease.getRouterIdentity().getHash().toBase64());
    SendTunnelMessageJob j=new SendTunnelMessageJob(getContext(),msg,outTunnelId,_lease.getRouterIdentity().getHash(),_lease.getTunnelId(),null,onReply,onFail,selector,_overallExpiration - getContext().clock().now(),SEND_PRIORITY);
    getContext().jobQueue().addJob(j);
  }
 else {
    if (_log.shouldLog(Log.ERROR))     _log.error(getJobId() + ": Could not find any outbound tunnels to send the payload through... wtf?");
    dieFatal();
  }
  _clientMessage=null;
  _clove=null;
}
