{
  if (_finished)   return;
  long token=getContext().random().nextLong(I2NPMessage.MAX_ID_VALUE);
  PublicKey key=_leaseSet.getEncryptionKey();
  SessionKey sessKey=new SessionKey();
  Set tags=new HashSet();
  LeaseSet replyLeaseSet=null;
  if (_shouldBundle) {
    replyLeaseSet=getContext().netDb().lookupLeaseSetLocally(_from.calculateHash());
  }
  GarlicMessage msg=OutboundClientMessageJobHelper.createGarlicMessage(getContext(),token,_overallExpiration,key,_clove,_from.calculateHash(),_to,sessKey,tags,true,replyLeaseSet);
  if (msg == null) {
    dieFatal();
    return;
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug(getJobId() + ": send() - token expected " + token);
  SendSuccessJob onReply=new SendSuccessJob(getContext(),sessKey,tags);
  SendTimeoutJob onFail=new SendTimeoutJob(getContext());
  ReplySelector selector=new ReplySelector(token);
  if (_log.shouldLog(Log.DEBUG))   _log.debug(getJobId() + ": Placing GarlicMessage into the new tunnel message bound for " + _lease.getTunnelId()+ " on "+ _lease.getGateway().toBase64());
  TunnelInfo outTunnel=selectOutboundTunnel();
  if (outTunnel != null) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug(getJobId() + ": Sending tunnel message out " + outTunnel.getSendTunnelId(0)+ " to "+ _lease.getTunnelId()+ " on "+ _lease.getGateway().toBase64());
    getContext().jobQueue().addJob(new DispatchJob(getContext(),msg,outTunnel,selector,onReply,onFail,(int)(_overallExpiration - getContext().clock().now())));
  }
 else {
    if (_log.shouldLog(Log.ERROR))     _log.error(getJobId() + ": Could not find any outbound tunnels to send the payload through... wtf?");
    dieFatal();
  }
  _clientMessage=null;
  _clove=null;
}
