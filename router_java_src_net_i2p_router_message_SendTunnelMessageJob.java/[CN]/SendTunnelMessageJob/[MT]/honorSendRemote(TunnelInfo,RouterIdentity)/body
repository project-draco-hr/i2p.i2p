{
  _state=52;
  I2NPMessage msg=null;
  if (_targetTunnelId != null) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Forward " + _message.getClass().getName() + " message off to remote tunnel "+ _targetTunnelId.getTunnelId()+ " on router "+ _destRouter.toBase64());
    TunnelMessage tmsg=new TunnelMessage(getContext());
    tmsg.setEncryptedDeliveryInstructions(null);
    tmsg.setTunnelId(_targetTunnelId);
    tmsg.setVerificationStructure(null);
    byte data[]=_message.toByteArray();
    tmsg.setData(data);
    msg=tmsg;
    _state=53;
  }
 else {
    _state=54;
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Forward " + _message.getClass().getName() + " message off to remote router "+ _destRouter.toBase64());
    msg=_message;
  }
  long now=getContext().clock().now();
  long timeLeft=_expiration - now;
  if (timeLeft < 10 * 1000) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Why are we trying to send a " + _message.getClass().getName() + " message with "+ (_expiration - now)+ "ms left?",getAddedBy());
    if (timeLeft + Router.CLOCK_FUDGE_FACTOR < 0) {
      _log.error("Timed out honoring request to send a " + _message.getClass().getName() + " message remotely ["+ _message.getUniqueId()+ "] expired "+ (0 - timeLeft)+ "ms ago");
      return;
    }
  }
  _state=55;
  String bodyType=_message.getClass().getName();
  getContext().messageHistory().wrap(bodyType,_message.getUniqueId(),TunnelMessage.class.getName(),msg.getUniqueId());
  _state=56;
  SendMessageDirectJob j=new SendMessageDirectJob(getContext(),msg,_destRouter,_onSend,_onReply,_onFailure,null,(int)(timeLeft),_priority);
  _state=57;
  getContext().jobQueue().addJob(j);
}
