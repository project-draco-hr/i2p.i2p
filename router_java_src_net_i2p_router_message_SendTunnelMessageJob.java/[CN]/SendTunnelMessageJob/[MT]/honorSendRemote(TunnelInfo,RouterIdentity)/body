{
  I2NPMessage msg=null;
  if (_targetTunnelId != null) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Forward " + _message.getClass().getName() + " message off to remote tunnel "+ _targetTunnelId.getTunnelId()+ " on router "+ _destRouter.toBase64());
    TunnelMessage tmsg=new TunnelMessage(_context);
    tmsg.setEncryptedDeliveryInstructions(null);
    tmsg.setTunnelId(_targetTunnelId);
    tmsg.setVerificationStructure(null);
    ByteArrayOutputStream baos=new ByteArrayOutputStream(1024);
    try {
      _message.writeBytes(baos);
    }
 catch (    IOException ioe) {
      if (_log.shouldLog(Log.ERROR))       _log.error("Error writing out the message to be forwarded...??",ioe);
    }
catch (    DataFormatException dfe) {
      if (_log.shouldLog(Log.ERROR))       _log.error("Error writing message to be forwarded...???",dfe);
    }
    tmsg.setData(baos.toByteArray());
    msg=tmsg;
  }
 else {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Forward " + _message.getClass().getName() + " message off to remote router "+ _destRouter.toBase64());
    msg=_message;
  }
  long now=_context.clock().now();
  if (_expiration - 10 * 1000 < now) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Why are we trying to send a " + _message.getClass().getName() + " message with "+ (_expiration - now)+ "ms left?",getAddedBy());
  }
  String bodyType=_message.getClass().getName();
  _context.messageHistory().wrap(bodyType,_message.getUniqueId(),TunnelMessage.class.getName(),msg.getUniqueId());
  _context.jobQueue().addJob(new SendMessageDirectJob(_context,msg,_destRouter,_onSend,_onReply,_onFailure,null,_expiration,_priority));
}
