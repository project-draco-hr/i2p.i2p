{
  TunnelMessage msg=new TunnelMessage(getContext());
  SessionKey key=getContext().keyGenerator().generateSessionKey();
  DeliveryInstructions instructions=new DeliveryInstructions();
  instructions.setDelayRequested(false);
  instructions.setEncrypted(true);
  instructions.setEncryptionKey(key);
  if (_destRouter != null) {
    instructions.setRouter(_destRouter);
    if (_targetTunnelId != null) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Instructions target tunnel " + _targetTunnelId + " on router "+ _destRouter.calculateHash());
      instructions.setTunnelId(_targetTunnelId);
      instructions.setDeliveryMode(DeliveryInstructions.DELIVERY_MODE_TUNNEL);
    }
 else {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Instructions target router " + _destRouter.toBase64());
      instructions.setDeliveryMode(DeliveryInstructions.DELIVERY_MODE_ROUTER);
    }
  }
 else {
    if (_message instanceof DataMessage) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Instructions are for local message delivery at the endpoint with a DataMessage to be sent to a Destination");
      instructions.setDeliveryMode(DeliveryInstructions.DELIVERY_MODE_LOCAL);
    }
 else {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Instructions are for local delivery at the endpoint targetting the now-local router");
      instructions.setDeliveryMode(DeliveryInstructions.DELIVERY_MODE_LOCAL);
    }
  }
  if (info == null) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Tunnel info is null to send message " + _message);
    return null;
  }
 else   if ((info.getEncryptionKey() == null) || (info.getEncryptionKey().getKey() == null)) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Tunnel encryption key is null when we're the gateway?! info: " + info);
    return null;
  }
  byte encryptedInstructions[]=encrypt(instructions,info.getEncryptionKey().getKey(),INSTRUCTIONS_PADDING);
  byte encryptedMessage[]=encrypt(_message,key,PAYLOAD_PADDING);
  TunnelVerificationStructure verification=createVerificationStructure(encryptedMessage,info);
  String bodyType=_message.getClass().getName();
  getContext().messageHistory().wrap(bodyType,_message.getUniqueId(),TunnelMessage.class.getName(),msg.getUniqueId());
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Tunnel message prepared: instructions = " + instructions);
  msg.setData(encryptedMessage);
  msg.setEncryptedDeliveryInstructions(encryptedInstructions);
  msg.setTunnelId(_tunnelId);
  msg.setVerificationStructure(verification);
  return msg;
}
