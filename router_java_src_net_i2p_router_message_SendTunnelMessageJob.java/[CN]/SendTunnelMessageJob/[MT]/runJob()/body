{
  TunnelInfo info=_context.tunnelManager().getTunnelInfo(_tunnelId);
  if (info == null) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Message for unknown tunnel [" + _tunnelId + "] received, forward to "+ _destRouter);
    if ((_tunnelId == null) || (_destRouter == null)) {
      if (_log.shouldLog(Log.ERROR))       _log.error("Someone br0ke us.  where is this message supposed to go again?",getAddedBy());
      return;
    }
    TunnelMessage msg=new TunnelMessage(_context);
    try {
      ByteArrayOutputStream baos=new ByteArrayOutputStream(1024);
      _message.writeBytes(baos);
      msg.setData(baos.toByteArray());
      msg.setTunnelId(_tunnelId);
      msg.setMessageExpiration(new Date(_expiration));
      _context.jobQueue().addJob(new SendMessageDirectJob(_context,msg,_destRouter,_onSend,_onReply,_onFailure,_selector,_expiration,_priority));
      String bodyType=_message.getClass().getName();
      _context.messageHistory().wrap(bodyType,_message.getUniqueId(),TunnelMessage.class.getName(),msg.getUniqueId());
    }
 catch (    IOException ioe) {
      if (_log.shouldLog(Log.ERROR))       _log.error("Error writing out the tunnel message to send to the tunnel",ioe);
    }
catch (    DataFormatException dfe) {
      if (_log.shouldLog(Log.ERROR))       _log.error("Error writing out the tunnel message to send to the tunnel",dfe);
    }
    return;
  }
  info.messageProcessed();
  if (isEndpoint(info)) {
    if (_log.shouldLog(Log.INFO))     _log.info("Tunnel message where we're both the gateway and the endpoint - honor instructions");
    honorInstructions(info);
    return;
  }
 else   if (isGateway(info)) {
    handleAsGateway(info);
    return;
  }
 else {
    handleAsParticipant(info);
    return;
  }
}
