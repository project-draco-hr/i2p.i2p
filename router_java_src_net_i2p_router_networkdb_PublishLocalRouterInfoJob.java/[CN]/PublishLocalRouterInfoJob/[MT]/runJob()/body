{
  long last=getContext().netDb().getLastRouterInfoPublishTime();
  long now=getContext().clock().now();
  if (last + MIN_PUBLISH_DELAY > now) {
    long delay=getDelay();
    requeue(last + delay - now);
    return;
  }
  RouterInfo oldRI=getContext().router().getRouterInfo();
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Old routerInfo contains " + oldRI.getAddresses().size() + " addresses and "+ oldRI.getOptionsMap().size()+ " options");
  try {
    List<RouterAddress> oldAddrs=new ArrayList<RouterAddress>(oldRI.getAddresses());
    List<RouterAddress> newAddrs=getContext().commSystem().createAddresses();
    int count=_runCount.incrementAndGet();
    RouterInfo ri=new RouterInfo(oldRI);
    if (_notFirstTime && (count % 4) != 0 && oldAddrs.size() == newAddrs.size()) {
      boolean different=!oldRI.getCapabilities().equals(ri.getCapabilities());
      if (!different) {
        Comparator<RouterAddress> comp=new AddrComparator();
        Collections.sort(oldAddrs,comp);
        Collections.sort(newAddrs,comp);
        for (int i=0; i < oldAddrs.size(); i++) {
          if (!oldAddrs.get(i).deepEquals(newAddrs.get(i))) {
            different=true;
            break;
          }
        }
        if (!different) {
          if (_log.shouldLog(Log.INFO))           _log.info("Not republishing early because costs and caps and addresses are the same");
          requeue(getDelay());
          return;
        }
      }
      if (_log.shouldLog(Log.INFO))       _log.info("Republishing early because addresses or costs or caps have changed -" + " oldCaps: " + oldRI.getCapabilities() + " newCaps: "+ ri.getCapabilities()+ " old:\n"+ oldAddrs+ "\nnew:\n"+ newAddrs);
    }
    ri.setPublished(getContext().clock().now());
    Properties stats=getContext().statPublisher().publishStatistics();
    ri.setOptions(stats);
    ri.setAddresses(newAddrs);
    SigningPrivateKey key=getContext().keyManager().getSigningPrivateKey();
    if (key == null) {
      _log.log(Log.CRIT,"Internal error - signing private key not known?  rescheduling publish for 30s");
      requeue(30 * 1000);
      return;
    }
    ri.sign(key);
    getContext().router().setRouterInfo(ri);
    if (_log.shouldLog(Log.INFO))     _log.info("Newly updated routerInfo is published with " + stats.size() + "/"+ ri.getOptionsMap().size()+ " options on "+ new Date(ri.getPublished()));
    try {
      getContext().netDb().publish(ri);
    }
 catch (    IllegalArgumentException iae) {
      _log.log(Log.CRIT,"Error publishing our identity - corrupt? Restart required",iae);
      getContext().router().rebuildNewIdentity();
    }
  }
 catch (  DataFormatException dfe) {
    _log.error("Error signing the updated local router info!",dfe);
  }
  if (_notFirstTime) {
    requeue(getDelay());
  }
 else {
    requeue(FIRST_TIME_DELAY);
    _notFirstTime=true;
  }
}
