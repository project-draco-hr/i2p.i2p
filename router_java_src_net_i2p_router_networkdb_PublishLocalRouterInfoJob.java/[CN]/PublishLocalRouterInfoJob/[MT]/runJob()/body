{
  long last=getContext().netDb().getLastRouterInfoPublishTime();
  long now=getContext().clock().now();
  if (last + MIN_PUBLISH_DELAY > now) {
    long delay=getDelay();
    requeue(last + delay);
    return;
  }
  RouterInfo ri=new RouterInfo(getContext().router().getRouterInfo());
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Old routerInfo contains " + ri.getAddresses().size() + " addresses and "+ ri.getOptionsMap().size()+ " options");
  Properties stats=getContext().statPublisher().publishStatistics();
  stats.setProperty(RouterInfo.PROP_NETWORK_ID,"" + Router.NETWORK_ID);
  try {
    ri.setPublished(getContext().clock().now());
    ri.setOptions(stats);
    ri.setAddresses(getContext().commSystem().createAddresses());
    getContext().router().addCapabilities(ri);
    SigningPrivateKey key=getContext().keyManager().getSigningPrivateKey();
    if (key == null) {
      _log.log(Log.CRIT,"Internal error - signing private key not known?  rescheduling publish for 30s");
      requeue(30 * 1000);
      return;
    }
    ri.sign(key);
    getContext().router().setRouterInfo(ri);
    if (_log.shouldLog(Log.INFO))     _log.info("Newly updated routerInfo is published with " + stats.size() + "/"+ ri.getOptionsMap().size()+ " options on "+ new Date(ri.getPublished()));
    try {
      getContext().netDb().publish(ri);
    }
 catch (    IllegalArgumentException iae) {
      _log.log(Log.CRIT,"Error publishing our identity - corrupt? Restart required",iae);
      getContext().router().rebuildNewIdentity();
    }
  }
 catch (  DataFormatException dfe) {
    _log.error("Error signing the updated local router info!",dfe);
  }
  if (_notFirstTime) {
    long delay=getDelay();
    requeue(delay);
  }
 else {
    requeue(FIRST_TIME_DELAY);
    _notFirstTime=true;
  }
}
