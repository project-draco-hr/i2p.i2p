{
  int bucket=_facade.getKBuckets().pickBucket(key);
  long sendPeriod=(bucket + 1) * RESEND_BUCKET_FACTOR;
  long now=Clock.getInstance().now();
  if (lastPublished.longValue() < now - sendPeriod) {
    RouterInfo ri=_facade.lookupRouterInfoLocally(key);
    if (ri != null) {
      if (ri.isCurrent(2 * ExpireRoutersJob.EXPIRE_DELAY)) {
        return KBucketSet.NUM_BUCKETS - bucket;
      }
 else {
        _log.info("Not republishing router " + key + " since it is really old ["+ (now - ri.getPublished())+ "ms]");
        return -2;
      }
    }
 else {
      LeaseSet ls=_facade.lookupLeaseSetLocally(key);
      if (ls != null) {
        if (ls.isCurrent(Router.CLOCK_FUDGE_FACTOR)) {
          return KBucketSet.NUM_BUCKETS - bucket;
        }
 else {
          _log.info("Not republishing leaseSet " + key + " since it is really old ["+ (now - ls.getEarliestLeaseDate())+ "ms]");
          return -3;
        }
      }
 else {
        _log.info("Key " + key + " is not a leaseSet or routerInfo, definitely not publishing it");
        return -5;
      }
    }
  }
 else {
    if (now - RESEND_BUCKET_FACTOR > lastPublished.longValue()) {
      if (_facade.lookupRouterInfoLocally(key) != null) {
        int val=RandomSource.getInstance().nextInt(LEASE_REBROADCAST_PROBABILITY_SCALE);
        if (val <= LEASE_REBROADCAST_PROBABILITY) {
          _log.info("Randomized rebroadcast of leases tells us to send " + key + ": "+ val);
          return 1;
        }
      }
    }
    return -1;
  }
}
