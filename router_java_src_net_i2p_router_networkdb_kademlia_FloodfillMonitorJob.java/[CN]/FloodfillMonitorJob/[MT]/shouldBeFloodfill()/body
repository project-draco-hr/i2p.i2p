{
  if (getContext().router().gracefulShutdownInProgress())   return false;
  if (getContext().router().isHidden())   return false;
  String enabled=getContext().getProperty(PROP_FLOODFILL_PARTICIPANT,"auto");
  if ("true".equals(enabled))   return true;
  if ("false".equals(enabled))   return false;
  if (SystemVersion.isARM())   return false;
  if (getContext().getBooleanProperty(UDPTransport.PROP_LAPTOP_MODE))   return false;
  if (getContext().commSystem().isInBadCountry())   return false;
  String country=getContext().commSystem().getOurCountry();
  if ("a1".equals(country) || "a2".equals(country))   return false;
  if (getContext().router().getUptime() < MIN_UPTIME)   return false;
  RouterInfo ri=getContext().router().getRouterInfo();
  if (ri == null)   return false;
  char bw=ri.getBandwidthTier().charAt(0);
  if (bw < Router.CAPABILITY_BW128 || bw > Router.CAPABILITY_BW256)   return false;
  List<Hash> floodfillPeers=_facade.getFloodfillPeers();
  long now=getContext().clock().now();
  if (floodfillPeers == null || floodfillPeers.isEmpty()) {
    _lastChanged=now;
    return true;
  }
  boolean wasFF=_facade.floodfillEnabled();
  if (_lastChanged + MIN_CHANGE_DELAY > now)   return wasFF;
  int ffcount=floodfillPeers.size();
  int failcount=0;
  long before=now - 60 * 60 * 1000;
  for (  Hash peer : floodfillPeers) {
    PeerProfile profile=getContext().profileOrganizer().getProfile(peer);
    if (profile == null || profile.getLastHeardFrom() < before || profile.getIsFailing() || getContext().banlist().isBanlisted(peer) || getContext().commSystem().wasUnreachable(peer))     failcount++;
  }
  if (wasFF)   ffcount++;
  int good=ffcount - failcount;
  boolean happy=getContext().router().getRouterInfo().getCapabilities().indexOf("R") >= 0;
  RateStat lagStat=getContext().statManager().getRate("jobQueue.jobLag");
  happy=happy && lagStat.getRate(60 * 60 * 1000L).getAvgOrLifetimeAvg() < 25;
  happy=happy && getContext().tunnelManager().getInboundBuildQueueSize() < 5;
  happy=happy && _facade.getKnownRouters() >= 200;
  happy=happy && getContext().commSystem().countActivePeers() >= 50;
  happy=happy && getContext().tunnelManager().getParticipatingCount() >= 35;
  happy=happy && Math.abs(getContext().clock().getOffset()) < 10 * 1000;
  if (happy) {
    RouterAddress ra=getContext().router().getRouterInfo().getTargetAddress("SSU");
    if (ra == null)     happy=false;
 else {
      if (ra.getOption("ihost0") != null)       happy=false;
    }
  }
  double elG=0;
  RateStat stat=getContext().statManager().getRate("crypto.elGamal.decrypt");
  if (stat != null) {
    Rate rate=stat.getRate(60 * 60 * 1000L);
    if (rate != null) {
      elG=rate.getAvgOrLifetimeAvg();
      happy=happy && elG <= 40.0d;
    }
  }
  if (_log.shouldLog(Log.DEBUG)) {
    final RouterContext rc=getContext();
    final String log=String.format("FF criteria breakdown: happy=%b, capabilities=%s, maxLag=%d, known=%d, " + "active=%d, participating=%d, offset=%d, ssuAddr=%s ElG=%f",happy,rc.router().getRouterInfo().getCapabilities(),rc.jobQueue().getMaxLag(),_facade.getKnownRouters(),rc.commSystem().countActivePeers(),rc.tunnelManager().getParticipatingCount(),Math.abs(rc.clock().getOffset()),rc.router().getRouterInfo().getTargetAddress("SSU").toString(),elG);
    _log.debug(log);
  }
  if (good < MIN_FF && happy) {
    if (!wasFF) {
      _lastChanged=now;
      _log.logAlways(Log.INFO,"Only " + good + " ff peers and we want "+ MIN_FF+ " so we are becoming floodfill");
    }
    return true;
  }
  if (good > MAX_FF || (good > MIN_FF && !happy)) {
    if (wasFF) {
      _lastChanged=now;
      _log.logAlways(Log.INFO,"Have " + good + " ff peers and we need only "+ MIN_FF+ " to "+ MAX_FF+ " so we are disabling floodfill; reachable? "+ happy);
    }
    return false;
  }
  if (_log.shouldLog(Log.INFO))   _log.info("Have " + good + " ff peers, not changing, enabled? "+ wasFF+ "; reachable? "+ happy);
  return wasFF;
}
