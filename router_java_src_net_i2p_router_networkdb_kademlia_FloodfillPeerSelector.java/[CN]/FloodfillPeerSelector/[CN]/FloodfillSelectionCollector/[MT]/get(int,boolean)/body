{
  List<Hash> rv=new ArrayList(howMany);
  List<Hash> badff=new ArrayList(howMany);
  List<Hash> unconnectedff=new ArrayList(howMany);
  int found=0;
  long now=_context.clock().now();
  for (Iterator<Hash> iter=new RandomIterator(_floodfillMatches); (found < howMany) && iter.hasNext(); ) {
    Hash entry=iter.next();
    RouterInfo info=_context.netDb().lookupRouterInfoLocally(entry);
    if (info != null && now - info.getPublished() > 3 * 60 * 60* 1000) {
      badff.add(entry);
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Skipping, published a while ago: " + entry);
    }
 else {
      PeerProfile prof=_context.profileOrganizer().getProfile(entry);
      if (prof != null && now - prof.getLastSendFailed() < 30 * 60 * 1000) {
        badff.add(entry);
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Skipping, recent failed send: " + entry);
      }
 else       if (preferConnected && !_context.commSystem().isEstablished(entry)) {
        unconnectedff.add(entry);
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Skipping, unconnected: " + entry);
      }
 else {
        rv.add(entry);
        found++;
      }
    }
  }
  for (int i=0; found < howMany && i < unconnectedff.size(); i++) {
    rv.add(unconnectedff.get(i));
    found++;
  }
  for (int i=0; found < howMany && i < badff.size(); i++) {
    rv.add(badff.get(i));
    found++;
  }
  for (int i=rv.size(); i < howMany; i++) {
    if (_sorted.isEmpty())     break;
    Hash entry=_sorted.first();
    rv.add(entry);
    _sorted.remove(entry);
  }
  return rv;
}
