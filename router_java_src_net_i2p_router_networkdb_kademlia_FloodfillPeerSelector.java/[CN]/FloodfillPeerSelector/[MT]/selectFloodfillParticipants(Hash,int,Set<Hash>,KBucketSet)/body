{
  List<Hash> ffs=selectFloodfillParticipants(toIgnore,kbuckets);
  TreeSet<Hash> sorted=new TreeSet(new XORComparator(key));
  sorted.addAll(ffs);
  List<Hash> rv=new ArrayList(howMany);
  List<Hash> okff=new ArrayList(howMany);
  List<Hash> badff=new ArrayList(howMany);
  int found=0;
  long now=_context.clock().now();
  for (int i=0; found < howMany && i < ffs.size(); i++) {
    Hash entry=sorted.first();
    sorted.remove(entry);
    if (entry == null)     break;
    RouterInfo info=_context.netDb().lookupRouterInfoLocally(entry);
    if (info != null && now - info.getPublished() > 3 * 60 * 60* 1000) {
      badff.add(entry);
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Skipping, published a while ago: " + entry);
    }
 else {
      PeerProfile prof=_context.profileOrganizer().getProfile(entry);
      if (prof != null && prof.getDBHistory() != null && now - prof.getDBHistory().getLastStoreFailed() < now - NO_FAIL_STORE_GOOD && now - prof.getDBHistory().getLastLookupFailed() < now - NO_FAIL_LOOKUP_GOOD) {
        rv.add(entry);
        found++;
      }
 else       if (prof != null && prof.getDBHistory() != null && now - prof.getDBHistory().getLastStoreFailed() < now - NO_FAIL_STORE_OK && now - prof.getDBHistory().getLastLookupFailed() < now - NO_FAIL_LOOKUP_OK) {
        okff.add(entry);
      }
 else {
        badff.add(entry);
      }
    }
  }
  for (int i=0; found < howMany && i < okff.size(); i++) {
    rv.add(okff.get(i));
    found++;
  }
  for (int i=0; found < howMany && i < badff.size(); i++) {
    rv.add(badff.get(i));
    found++;
  }
  return rv;
}
