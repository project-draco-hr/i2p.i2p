{
  Hash rkey=getContext().routingKeyGenerator().getRoutingKey(_key);
  FloodfillPeerSelector sel=(FloodfillPeerSelector)_facade.getPeerSelector();
  Certificate keyCert=null;
  if (!_isRouterInfo) {
    Destination dest=_facade.lookupDestinationLocally(_key);
    if (dest != null) {
      Certificate cert=dest.getCertificate();
      if (cert.getCertificateType() == Certificate.CERTIFICATE_TYPE_KEY)       keyCert=cert;
    }
  }
  if (keyCert != null) {
    while (true) {
      List<Hash> peers=sel.selectFloodfillParticipants(rkey,1,_ignore,_facade.getKBuckets());
      if (peers.isEmpty())       break;
      Hash peer=peers.get(0);
      RouterInfo ri=_facade.lookupRouterInfoLocally(peer);
      if (ri != null && StoreJob.supportsCert(ri,keyCert))       return peer;
      if (_log.shouldLog(Log.INFO))       _log.info(getJobId() + ": Skipping verify w/ router that doesn't support key certs " + peer);
      _ignore.add(peer);
    }
  }
 else {
    List<Hash> peers=sel.selectFloodfillParticipants(rkey,1,_ignore,_facade.getKBuckets());
    if (!peers.isEmpty())     return peers.get(0);
  }
  if (_log.shouldLog(Log.WARN))   _log.warn("No other peers to verify floodfill with, using the one we sent to");
  return _sentTo;
}
