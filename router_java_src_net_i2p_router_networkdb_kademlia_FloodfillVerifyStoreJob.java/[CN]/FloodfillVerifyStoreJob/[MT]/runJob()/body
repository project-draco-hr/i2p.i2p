{
  _target=pickTarget();
  if (_target == null) {
    _facade.verifyFinished(_key);
    return;
  }
  DatabaseLookupMessage lookup=buildLookup();
  if (lookup == null) {
    _facade.verifyFinished(_key);
    return;
  }
  TunnelInfo outTunnel;
  if (_isRouterInfo || getContext().keyRing().get(_key) != null)   outTunnel=getContext().tunnelManager().selectOutboundExploratoryTunnel(_target);
 else   outTunnel=getContext().tunnelManager().selectOutboundTunnel(_key,_target);
  if (outTunnel == null) {
    if (_log.shouldLog(Log.WARN))     _log.warn("No outbound tunnels to verify a store");
    _facade.verifyFinished(_key);
    return;
  }
  RouterInfo peer=_facade.lookupRouterInfoLocally(_target);
  if (peer == null) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Fail finding target RI");
    _facade.verifyFinished(_key);
    return;
  }
  if (DatabaseLookupMessage.supportsEncryptedReplies(peer)) {
    MessageWrapper.OneTimeSession sess=MessageWrapper.generateSession(getContext());
    if (_log.shouldLog(Log.INFO))     _log.info("Requesting encrypted reply from " + _target + ' '+ sess.key+ ' '+ sess.tag);
    lookup.setReplySession(sess.key,sess.tag);
  }
  Hash fromKey;
  if (_isRouterInfo)   fromKey=null;
 else   fromKey=_key;
  _wrappedMessage=MessageWrapper.wrap(getContext(),lookup,fromKey,peer);
  if (_wrappedMessage == null) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Fail Garlic encrypting");
    _facade.verifyFinished(_key);
    return;
  }
  I2NPMessage sent=_wrappedMessage.getMessage();
  if (_log.shouldLog(Log.INFO))   _log.info("Starting verify (stored " + _key + " to "+ _sentTo+ "), asking "+ _target);
  _sendTime=getContext().clock().now();
  _expiration=_sendTime + VERIFY_TIMEOUT;
  getContext().messageRegistry().registerPending(new VerifyReplySelector(),new VerifyReplyJob(getContext()),new VerifyTimeoutJob(getContext()),VERIFY_TIMEOUT);
  getContext().tunnelDispatcher().dispatchOutbound(sent,outTunnel.getSendTunnelId(0),_target);
}
