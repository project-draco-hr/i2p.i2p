{
  long recvBegin=System.currentTimeMillis();
  String invalidMessage=null;
  boolean wasNew=false;
  RouterInfo prevNetDb=null;
  Hash key=_message.getKey();
  DatabaseEntry entry=_message.getEntry();
  if (entry.getType() == DatabaseEntry.KEY_TYPE_LEASESET) {
    getContext().statManager().addRateData("netDb.storeLeaseSetHandled",1,0);
    if (_log.shouldLog(Log.INFO))     _log.info("Handling dbStore of leaseset " + _message);
    try {
      if (getContext().clientManager().isLocal(key)) {
        throw new IllegalArgumentException("Peer attempted to store local leaseSet: " + key.toBase64().substring(0,4));
      }
      LeaseSet ls=(LeaseSet)entry;
      if (!ls.getReceivedAsReply())       ls.setReceivedAsPublished(true);
      LeaseSet match=getContext().netDb().store(key,ls);
      if (match == null) {
        wasNew=true;
      }
 else       if (match.getEarliestLeaseDate() < ls.getEarliestLeaseDate()) {
        wasNew=true;
        if (match.getReceivedAsPublished())         ls.setReceivedAsPublished(true);
      }
 else {
        wasNew=false;
      }
    }
 catch (    IllegalArgumentException iae) {
      invalidMessage=iae.getMessage();
    }
  }
 else   if (entry.getType() == DatabaseEntry.KEY_TYPE_ROUTERINFO) {
    RouterInfo ri=(RouterInfo)entry;
    getContext().statManager().addRateData("netDb.storeRouterInfoHandled",1,0);
    if (_log.shouldLog(Log.INFO))     _log.info("Handling dbStore of router " + key + " with publishDate of "+ new Date(ri.getPublished()));
    try {
      if (getContext().routerHash().equals(key)) {
        throw new IllegalArgumentException("Peer attempted to store our RouterInfo");
      }
      prevNetDb=getContext().netDb().store(key,ri);
      wasNew=((null == prevNetDb) || (prevNetDb.getPublished() < ri.getPublished()));
      if (wasNew) {
        if (prevNetDb == null) {
          if ((!getContext().banlist().isBanlistedForever(key)) && getContext().blocklist().isBlocklisted(key) && _log.shouldLog(Log.WARN))           _log.warn("Blocklisting new peer " + key + ' '+ ri);
        }
 else {
          Collection<RouterAddress> oldAddr=prevNetDb.getAddresses();
          Collection<RouterAddress> newAddr=ri.getAddresses();
          if ((!newAddr.equals(oldAddr)) && (!getContext().banlist().isBanlistedForever(key)) && getContext().blocklist().isBlocklisted(key)&& _log.shouldLog(Log.WARN))           _log.warn("New address received, Blocklisting old peer " + key + ' '+ ri);
        }
      }
      getContext().profileManager().heardAbout(key);
    }
 catch (    IllegalArgumentException iae) {
      invalidMessage=iae.getMessage();
    }
  }
 else {
    if (_log.shouldLog(Log.ERROR))     _log.error("Invalid DatabaseStoreMessage data type - " + entry.getType() + ": "+ _message);
  }
  long recvEnd=System.currentTimeMillis();
  getContext().statManager().addRateData("netDb.storeRecvTime",recvEnd - recvBegin,0);
  if (_message.getReplyToken() > 0)   sendAck();
  long ackEnd=System.currentTimeMillis();
  if (_from != null)   _fromHash=_from.getHash();
  if (_fromHash != null) {
    if (invalidMessage == null) {
      getContext().profileManager().dbStoreReceived(_fromHash,wasNew);
      getContext().statManager().addRateData("netDb.storeHandled",ackEnd - recvEnd,0);
    }
 else {
      if (_log.shouldLog(Log.WARN))       _log.warn("Peer " + _fromHash.toBase64() + " sent bad data: "+ invalidMessage);
    }
  }
 else   if (invalidMessage != null) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Unknown peer sent bad data: " + invalidMessage);
  }
  if (invalidMessage == null && FloodfillNetworkDatabaseFacade.floodfillEnabled(getContext()) && _message.getReplyToken() > 0) {
    if (wasNew) {
      if (_facade.shouldThrottleFlood(key)) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Too many recent stores, not flooding key: " + key);
        getContext().statManager().addRateData("netDb.floodThrottled",1,0);
        return;
      }
      long floodBegin=System.currentTimeMillis();
      _facade.flood(_message.getEntry());
      long floodEnd=System.currentTimeMillis();
      getContext().statManager().addRateData("netDb.storeFloodNew",floodEnd - floodBegin,0);
    }
 else {
      getContext().statManager().addRateData("netDb.storeFloodOld",1,0);
    }
  }
}
