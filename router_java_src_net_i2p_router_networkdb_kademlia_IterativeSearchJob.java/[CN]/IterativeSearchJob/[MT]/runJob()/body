{
  if (_facade.isNegativeCached(_key)) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Negative cached, not searching: " + _key);
    failed();
    return;
  }
  List<Hash> floodfillPeers;
  KBucketSet<Hash> ks=_facade.getKBuckets();
  if (ks != null) {
    floodfillPeers=((FloodfillPeerSelector)_facade.getPeerSelector()).selectFloodfillParticipants(_rkey,TOTAL_SEARCH_LIMIT,ks);
  }
 else {
    floodfillPeers=new ArrayList<Hash>(TOTAL_SEARCH_LIMIT);
  }
  String alwaysQuery=getContext().getProperty("netDb.alwaysQuery");
  if (alwaysQuery != null) {
    if (_alwaysQueryHash == null) {
      byte[] b=Base64.decode(alwaysQuery);
      if (b != null && b.length == Hash.HASH_LENGTH)       _alwaysQueryHash=Hash.create(b);
    }
  }
  if (floodfillPeers.isEmpty()) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Running netDb searches against the floodfill peers, but we don't know any");
    List<Hash> all=new ArrayList<Hash>(_facade.getAllRouters());
    if (all.isEmpty()) {
      if (_log.shouldLog(Log.ERROR))       _log.error("We don't know any peers at all");
      failed();
      return;
    }
    Iterator<Hash> iter=new RandomIterator<Hash>(all);
    for (int i=0; iter.hasNext() && i < MAX_NON_FF; i++) {
      floodfillPeers.add(iter.next());
    }
  }
  _toTry.addAll(floodfillPeers);
  _toTry.remove(getContext().routerHash());
  _toTry.remove(_key);
  if (_toTry.isEmpty()) {
    if (_log.shouldLog(Log.WARN))     _log.warn(getJobId() + ": ISJ for " + _key+ " had no peers to send to");
    failed();
    return;
  }
  MessageSelector replySelector=new IterativeLookupSelector(getContext(),this);
  ReplyJob onReply=new FloodOnlyLookupMatchJob(getContext(),this);
  Job onTimeout=new FloodOnlyLookupTimeoutJob(getContext(),this);
  _out=getContext().messageRegistry().registerPending(replySelector,onReply,onTimeout);
  if (_log.shouldLog(Log.INFO))   _log.info(getJobId() + ": New ISJ for " + (_isLease ? "LS " : "RI ")+ _key+ " (rkey "+ _rkey+ ") timeout "+ DataHelper.formatDuration(_timeoutMs)+ " toTry: "+ DataHelper.toString(_toTry));
  retry();
}
