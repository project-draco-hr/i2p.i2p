{
  Log log=I2PAppContext.getGlobalContext().logManager().getLog(KBucketImpl.class);
  StringBuffer buf=new StringBuffer(1024 * 1024 * 16);
  int low=1;
  int high=200;
  byte hash[]=new byte[Hash.HASH_LENGTH];
  RandomSource.getInstance().nextBytes(hash);
  KBucketImpl bucket=new KBucketImpl(I2PAppContext.getGlobalContext(),new Hash(hash));
  bucket.setRange(low,high);
  Hash lowerBoundKey=bucket.getRangeBeginKey();
  Hash upperBoundKey=bucket.getRangeEndKey();
  for (int i=0; i < 1000; i++) {
    Hash rnd=bucket.generateRandomKey();
    buf.append(toString(rnd.getData())).append('\n');
    boolean ok=bucket.shouldContain(rnd);
    if (!ok) {
      byte diff[]=DataHelper.xor(rnd.getData(),bucket.getLocal().getData());
      BigInteger dv=new BigInteger(1,diff);
      log.error("WTF! bucket doesn't want: \n" + toString(rnd.getData()) + "\nDelta: \n"+ toString(diff)+ "\nDelta val: \n"+ dv.toString(2)+ "\nBucket: \n"+ bucket,new Exception("WTF"));
      try {
        Thread.sleep(1000);
      }
 catch (      Exception e) {
      }
      System.exit(0);
    }
 else {
    }
  }
  log.info("Passed 1000 random key generations against a random hash\n" + buf.toString());
}
