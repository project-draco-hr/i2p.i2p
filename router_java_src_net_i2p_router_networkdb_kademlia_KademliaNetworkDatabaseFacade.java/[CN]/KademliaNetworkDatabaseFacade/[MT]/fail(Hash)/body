{
  if (!_initialized)   return;
  boolean isRouterInfo=false;
  Object o=_ds.get(dbEntry);
  if (o instanceof RouterInfo)   isRouterInfo=true;
  if (isRouterInfo) {
    int remaining=_kb.size();
    if (remaining < MIN_REMAINING_ROUTERS) {
      if (_log.shouldLog(Log.ERROR))       _log.error("Not removing " + dbEntry + " because we have so few routers left ("+ remaining+ ") - perhaps a reseed is necessary?");
      return;
    }
    if (System.currentTimeMillis() < _started + DONT_FAIL_PERIOD) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Not failing the key " + dbEntry.toBase64() + " since we've just started up and don't want to drop /everyone/");
      return;
    }
    boolean removed=_kb.remove(dbEntry);
    if (removed) {
      if (_log.shouldLog(Log.INFO))       _log.info("Removed kbucket entry for " + dbEntry);
    }
  }
 else {
    if (_log.shouldLog(Log.INFO))     _log.info("Dropping a lease: " + dbEntry);
  }
  _ds.remove(dbEntry);
synchronized (_lastSent) {
    _lastSent.remove(dbEntry);
  }
synchronized (_explicitSendKeys) {
    _explicitSendKeys.remove(dbEntry);
  }
synchronized (_passiveSendKeys) {
    _passiveSendKeys.remove(dbEntry);
  }
}
