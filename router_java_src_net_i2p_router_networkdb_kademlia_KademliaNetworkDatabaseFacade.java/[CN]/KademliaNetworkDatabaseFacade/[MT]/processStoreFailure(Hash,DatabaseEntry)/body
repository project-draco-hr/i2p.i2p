{
  if (entry.getHash().equals(h)) {
    if (entry.getType() == DatabaseEntry.KEY_TYPE_LEASESET) {
      LeaseSet ls=(LeaseSet)entry;
      Destination d=ls.getDestination();
      Certificate c=d.getCertificate();
      if (c.getCertificateType() == Certificate.CERTIFICATE_TYPE_KEY) {
        try {
          KeyCertificate kc=c.toKeyCertificate();
          SigType type=kc.getSigType();
          if (type == null || !type.isAvailable() || type.getBaseAlgorithm() == SigAlgo.RSA) {
            failPermanently(d);
            String stype=(type != null) ? type.toString() : Integer.toString(kc.getSigTypeCode());
            if (_log.shouldLog(Log.WARN))             _log.warn("Unsupported sig type " + stype + " for destination "+ h);
            throw new UnsupportedCryptoException("Sig type " + stype);
          }
        }
 catch (        DataFormatException dfe) {
        }
      }
    }
 else     if (entry.getType() == DatabaseEntry.KEY_TYPE_ROUTERINFO) {
      RouterInfo ri=(RouterInfo)entry;
      RouterIdentity id=ri.getIdentity();
      Certificate c=id.getCertificate();
      if (c.getCertificateType() == Certificate.CERTIFICATE_TYPE_KEY) {
        try {
          KeyCertificate kc=c.toKeyCertificate();
          SigType type=kc.getSigType();
          if (type == null || !type.isAvailable()) {
            String stype=(type != null) ? type.toString() : Integer.toString(kc.getSigTypeCode());
            _context.banlist().banlistRouterForever(h,"Unsupported signature type " + stype);
            if (_log.shouldLog(Log.WARN))             _log.warn("Unsupported sig type " + stype + " for router "+ h);
            throw new UnsupportedCryptoException("Sig type " + stype);
          }
        }
 catch (        DataFormatException dfe) {
        }
      }
    }
  }
  if (_log.shouldLog(Log.WARN))   _log.warn("Verify fail, cause unknown: " + entry);
}
