{
  StringBuffer buf=new StringBuffer(10 * 1024);
  buf.append("<h2>Kademlia Network DB Contents</h2>\n");
  if (!_initialized) {
    buf.append("<i>Not initialized</i>\n");
    out.write(buf.toString().getBytes());
    return;
  }
  Set leases=getLeases();
  buf.append("<h3>Leases</h3>\n");
  out.write(buf.toString().getBytes());
  buf.setLength(0);
  long now=_context.clock().now();
  for (Iterator iter=leases.iterator(); iter.hasNext(); ) {
    LeaseSet ls=(LeaseSet)iter.next();
    Hash key=ls.getDestination().calculateHash();
    buf.append("<b>LeaseSet: ").append(key.toBase64()).append("</b><br />\n");
    long exp=ls.getEarliestLeaseDate() - now;
    if (exp > 0)     buf.append("Earliest expiration date in: <i>").append(DataHelper.formatDuration(exp)).append("</i><br />\n");
 else     buf.append("Earliest expiration date was: <i>").append(DataHelper.formatDuration(0 - exp)).append(" ago</i><br />\n");
    for (int i=0; i < ls.getLeaseCount(); i++) {
      buf.append("Lease ").append(i).append(": gateway <i>");
      buf.append(ls.getLease(i).getRouterIdentity().getHash().toBase64().substring(0,6));
      buf.append("</i> tunnelId <i>").append(ls.getLease(i).getTunnelId().getTunnelId()).append("</i><br />\n");
    }
    buf.append("<hr />\n");
    out.write(buf.toString().getBytes());
    buf.setLength(0);
  }
  Hash us=_context.routerHash();
  Set routers=getRouters();
  out.write("<h3>Routers</h3>\n".getBytes());
  RouterInfo ourInfo=_context.router().getRouterInfo();
  renderRouterInfo(buf,ourInfo,true);
  out.write(buf.toString().getBytes());
  buf.setLength(0);
  Map versions=new TreeMap();
  for (Iterator iter=routers.iterator(); iter.hasNext(); ) {
    RouterInfo ri=(RouterInfo)iter.next();
    Hash key=ri.getIdentity().getHash();
    boolean isUs=key.equals(us);
    if (!isUs) {
      renderRouterInfo(buf,ri,false);
      out.write(buf.toString().getBytes());
      buf.setLength(0);
      String coreVersion=ri.getOptions().getProperty("coreVersion");
      String routerVersion=ri.getOptions().getProperty("router.version");
      if ((coreVersion != null) && (routerVersion != null)) {
        Map routerVersions=(Map)versions.get(coreVersion);
        if (routerVersions == null) {
          routerVersions=new TreeMap();
          versions.put(coreVersion,routerVersions);
        }
        Integer val=(Integer)routerVersions.get(routerVersion);
        if (val == null)         routerVersions.put(routerVersion,new Integer(1));
 else         routerVersions.put(routerVersion,new Integer(val.intValue() + 1));
      }
    }
  }
  if (versions.size() > 0) {
    buf.append("<table border=\"1\">\n");
    buf.append("<tr><td><b>Core version</b></td><td><b>Router version</b></td><td><b>Number</b></td></tr>\n");
    for (Iterator iter=versions.keySet().iterator(); iter.hasNext(); ) {
      String coreVersion=(String)iter.next();
      Map routerVersions=(Map)versions.get(coreVersion);
      for (Iterator routerIter=routerVersions.keySet().iterator(); routerIter.hasNext(); ) {
        String routerVersion=(String)routerIter.next();
        Integer num=(Integer)routerVersions.get(routerVersion);
        buf.append("<tr><td>").append(coreVersion);
        buf.append("</td><td>").append(routerVersion);
        buf.append("</td><td>").append(num.intValue()).append("</td></tr>\n");
      }
    }
    buf.append("</table>\n");
  }
  out.write(buf.toString().getBytes());
}
