{
  StringBuffer buf=new StringBuffer(10 * 1024);
  buf.append("<h2>Kademlia Network DB Contents</h2>\n");
  if (!_initialized) {
    buf.append("<i>Not initialized</i>\n");
    out.write(buf.toString().getBytes());
    return;
  }
  Set leases=getLeases();
  buf.append("<h3>Leases</h3>\n");
  out.write(buf.toString().getBytes());
  buf.setLength(0);
  long now=_context.clock().now();
  for (Iterator iter=leases.iterator(); iter.hasNext(); ) {
    LeaseSet ls=(LeaseSet)iter.next();
    Hash key=ls.getDestination().calculateHash();
    buf.append("<b>LeaseSet: ").append(key.toBase64()).append("</b><br />\n");
    long exp=ls.getEarliestLeaseDate() - now;
    buf.append("Earliest expiration date in: <i>").append(DataHelper.formatDuration(exp)).append("</i><br />\n");
    for (int i=0; i < ls.getLeaseCount(); i++) {
      buf.append("Lease ").append(i).append(": gateway <i>");
      buf.append(ls.getLease(i).getRouterIdentity().getHash().toBase64().substring(0,6));
      buf.append("</i> tunnelId <i>").append(ls.getLease(i).getTunnelId().getTunnelId()).append("</i><br />\n");
    }
    buf.append("<hr />\n");
    out.write(buf.toString().getBytes());
    buf.setLength(0);
  }
  Hash us=_context.routerHash();
  Set routers=getRouters();
  out.write("<h3>Routers</h3>\n".getBytes());
  RouterInfo ourInfo=_context.router().getRouterInfo();
  renderRouterInfo(buf,ourInfo,true);
  out.write(buf.toString().getBytes());
  buf.setLength(0);
  for (Iterator iter=routers.iterator(); iter.hasNext(); ) {
    RouterInfo ri=(RouterInfo)iter.next();
    Hash key=ri.getIdentity().getHash();
    boolean isUs=key.equals(us);
    if (!isUs) {
      renderRouterInfo(buf,ri,false);
      out.write(buf.toString().getBytes());
      buf.setLength(0);
    }
  }
}
