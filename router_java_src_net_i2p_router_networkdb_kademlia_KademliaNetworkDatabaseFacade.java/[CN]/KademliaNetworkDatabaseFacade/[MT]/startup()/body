{
  _log.info("Starting up the kademlia network database");
  RouterInfo ri=_context.router().getRouterInfo();
  String dbDir=_context.getProperty(PROP_DB_DIR,DEFAULT_DB_DIR);
  String enforce=_context.getProperty(PROP_ENFORCE_NETID);
  if (enforce != null)   _enforceNetId=Boolean.valueOf(enforce).booleanValue();
 else   _enforceNetId=DEFAULT_ENFORCE_NETID;
  _kb=new KBucketSet(_context,ri.getIdentity().getHash());
  try {
    _ds=new PersistentDataStore(_context,dbDir,this);
  }
 catch (  IOException ioe) {
    throw new RuntimeException("Unable to initialize netdb storage",ioe);
  }
  _dbDir=dbDir;
  createHandlers();
  _initialized=true;
  _started=System.currentTimeMillis();
  Job elj=new ExpireLeasesJob(_context,this);
  elj.getTiming().setStartAfter(_context.clock().now() + 2 * 60 * 1000);
  _context.jobQueue().addJob(elj);
  if (!QUIET) {
    if (_exploreJob == null)     _exploreJob=new StartExplorersJob(_context,this);
    _exploreJob.getTiming().setStartAfter(_context.clock().now() + EXPLORE_JOB_DELAY);
    _context.jobQueue().addJob(_exploreJob);
    if (_harvestJob == null && _context.getBooleanProperty(HarvesterJob.PROP_ENABLED))     _harvestJob=new HarvesterJob(_context,this);
    _context.jobQueue().addJob(_harvestJob);
  }
 else {
    _log.warn("Operating in quiet mode - not exploring or pushing data proactively, simply reactively");
    _log.warn("This should NOT be used in production");
  }
  Job plrij=new PublishLocalRouterInfoJob(_context);
  _context.jobQueue().addJob(plrij);
}
