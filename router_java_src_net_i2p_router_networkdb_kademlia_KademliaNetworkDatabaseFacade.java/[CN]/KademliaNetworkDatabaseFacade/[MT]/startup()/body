{
  _log.info("Starting up the kademlia network database");
  RouterInfo ri=_context.router().getRouterInfo();
  String dbDir=_context.router().getConfigSetting(PROP_DB_DIR);
  if (dbDir == null) {
    _log.info("No DB dir specified [" + PROP_DB_DIR + "], using ["+ DEFAULT_DB_DIR+ "]");
    dbDir=DEFAULT_DB_DIR;
  }
  String enforce=_context.getProperty(PROP_ENFORCE_NETID);
  if (enforce != null)   _enforceNetId=Boolean.valueOf(enforce).booleanValue();
 else   _enforceNetId=DEFAULT_ENFORCE_NETID;
  _kb=new KBucketSet(_context,ri.getIdentity().getHash());
  _ds=new PersistentDataStore(_context,dbDir,this);
  _explicitSendKeys=new HashSet(64);
  _passiveSendKeys=new HashSet(64);
  _exploreKeys=new HashSet(64);
  _lastSent=new HashMap(1024);
  _dbDir=dbDir;
  createHandlers();
  _initialized=true;
  _started=System.currentTimeMillis();
  if (false)   _context.jobQueue().addJob(new DataPublisherJob(_context,this));
  _context.jobQueue().addJob(new ExpireLeasesJob(_context,this));
  if (!_quiet) {
    _context.jobQueue().addJob(new DataRepublishingSelectorJob(_context,this));
    if (_exploreJob == null)     _exploreJob=new StartExplorersJob(_context,this);
    _exploreJob.getTiming().setStartAfter(_context.clock().now() + EXPLORE_JOB_DELAY);
    _context.jobQueue().addJob(_exploreJob);
    if (_harvestJob == null && "true".equals(_context.getProperty(HarvesterJob.PROP_ENABLED)))     _harvestJob=new HarvesterJob(_context,this);
    _context.jobQueue().addJob(_harvestJob);
  }
 else {
    _log.warn("Operating in quiet mode - not exploring or pushing data proactively, simply reactively");
    _log.warn("This should NOT be used in production");
  }
  _context.jobQueue().addJob(new PublishLocalRouterInfoJob(_context));
  try {
    publish(ri);
  }
 catch (  IllegalArgumentException iae) {
    _context.router().rebuildRouterInfo(true);
  }
}
