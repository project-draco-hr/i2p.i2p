{
  if (!key.equals(leaseSet.getDestination().calculateHash())) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Invalid store attempt! key does not match leaseSet.destination!  key = " + key + ", leaseSet = "+ leaseSet);
    return "Key does not match leaseSet.destination - " + key.toBase64();
  }
 else   if (!leaseSet.verifySignature()) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Invalid leaseSet signature!  leaseSet = " + leaseSet);
    return "Invalid leaseSet signature on " + leaseSet.getDestination().calculateHash().toBase64();
  }
 else   if (leaseSet.getEarliestLeaseDate() <= _context.clock().now() - 2 * Router.CLOCK_FUDGE_FACTOR) {
    long age=_context.clock().now() - leaseSet.getEarliestLeaseDate();
    if (_log.shouldLog(Log.WARN))     _log.warn("Old leaseSet!  not storing it: " + leaseSet.getDestination().calculateHash().toBase64() + " expires on "+ new Date(leaseSet.getEarliestLeaseDate()),new Exception("Rejecting store"));
    return "Expired leaseSet for " + leaseSet.getDestination().calculateHash().toBase64() + " expired "+ DataHelper.formatDuration(age)+ " ago";
  }
 else   if (leaseSet.getEarliestLeaseDate() > _context.clock().now() + (Router.CLOCK_FUDGE_FACTOR + MAX_LEASE_FUTURE)) {
    long age=leaseSet.getEarliestLeaseDate() - _context.clock().now();
    if (_log.shouldLog(Log.WARN))     _log.warn("LeaseSet expires too far in the future: " + leaseSet.getDestination().calculateHash().toBase64() + " expires "+ DataHelper.formatDuration(age)+ " from now");
    return "Future expiring leaseSet for " + leaseSet.getDestination().calculateHash() + " expiring in "+ DataHelper.formatDuration(age);
  }
  return null;
}
