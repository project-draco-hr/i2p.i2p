{
  if (!key.equals(leaseSet.getDestination().calculateHash())) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Invalid store attempt! key does not match leaseSet.destination!  key = " + key + ", leaseSet = "+ leaseSet);
    return false;
  }
 else   if (!leaseSet.verifySignature()) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Invalid leaseSet signature!  leaseSet = " + leaseSet);
    return false;
  }
 else   if (leaseSet.getEarliestLeaseDate() <= _context.clock().now() - Router.CLOCK_FUDGE_FACTOR) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Old leaseSet!  not storing it: " + leaseSet.getDestination().calculateHash().toBase64() + " expires on "+ new Date(leaseSet.getEarliestLeaseDate()),new Exception("Rejecting store"));
    return false;
  }
 else   if (leaseSet.getEarliestLeaseDate() > _context.clock().now() + Router.CLOCK_FUDGE_FACTOR + MAX_LEASE_FUTURE) {
    if (_log.shouldLog(Log.WARN))     _log.warn("LeaseSet to expire too far in the future: " + leaseSet.getDestination().calculateHash().toBase64() + " expires on "+ new Date(leaseSet.getEarliestLeaseDate()),new Exception("Rejecting store"));
    return false;
  }
  return true;
}
