{
  if (!key.equals(leaseSet.getDestination().calculateHash())) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Invalid store attempt! key does not match leaseSet.destination!  key = " + key + ", leaseSet = "+ leaseSet);
    return "Key does not match leaseSet.destination - " + key.toBase64();
  }
  if (!leaseSet.verifySignature()) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Invalid leaseSet signature!  leaseSet = " + leaseSet);
    return "Invalid leaseSet signature on " + leaseSet.getDestination().calculateHash().toBase64();
  }
  long earliest=leaseSet.getEarliestLeaseDate();
  long latest=leaseSet.getLatestLeaseDate();
  long now=_context.clock().now();
  if (earliest <= now - 10 * 60 * 1000L || latest <= now - Router.CLOCK_FUDGE_FACTOR) {
    long age=now - earliest;
    if (_log.shouldLog(Log.WARN))     _log.warn("Old leaseSet!  not storing it: " + leaseSet.getDestination().calculateHash() + " first exp. "+ new Date(earliest)+ " last exp. "+ new Date(latest),new Exception("Rejecting store"));
    return "Expired leaseSet for " + leaseSet.getDestination().calculateHash().toBase64() + " expired "+ DataHelper.formatDuration(age)+ " ago";
  }
  if (latest > now + (Router.CLOCK_FUDGE_FACTOR + MAX_LEASE_FUTURE)) {
    long age=latest - now;
    if (_log.shouldLog(Log.WARN))     _log.warn("LeaseSet expires too far in the future: " + leaseSet.getDestination().calculateHash() + " expires "+ DataHelper.formatDuration(age)+ " from now");
    return "Future expiring leaseSet for " + leaseSet.getDestination().calculateHash() + " expiring in "+ DataHelper.formatDuration(age);
  }
  return null;
}
