{
  int routerCount=0;
  File routerInfoFiles[]=_dbDir.listFiles(RouterInfoFilter.getInstance());
  if (_flat) {
    if (routerInfoFiles != null) {
      routerCount=routerInfoFiles.length;
      for (int i=0; i < routerInfoFiles.length; i++) {
        if (!_context.router().isAlive())         break;
        Hash key=getRouterInfoHash(routerInfoFiles[i].getName());
        if ((key != null) && (!isKnown(key))) {
          (new ReadRouterJob(routerInfoFiles[i],key)).runJob();
        }
      }
    }
  }
 else {
    if (routerInfoFiles != null)     migrate(_dbDir,routerInfoFiles);
    List<File> toRead=new ArrayList<File>(2048);
    for (int j=0; j < B64.length(); j++) {
      File subdir=new File(_dbDir,DIR_PREFIX + B64.charAt(j));
      File[] files=subdir.listFiles(RouterInfoFilter.getInstance());
      if (files == null)       continue;
      long lastMod=subdir.lastModified();
      if (routerCount >= MIN_ROUTERS && lastMod <= _lastModified)       continue;
      routerCount+=files.length;
      if (lastMod <= _lastModified)       continue;
      for (int i=0; i < files.length; i++) {
        toRead.add(files[i]);
      }
    }
    Collections.shuffle(toRead,_context.random());
    for (    File file : toRead) {
      Hash key=getRouterInfoHash(file.getName());
      if (key != null && !isKnown(key))       (new ReadRouterJob(file,key)).runJob();
    }
  }
  if (!_initialized) {
    _initialized=true;
    if (_facade.reseedChecker().checkReseed(routerCount)) {
      _lastReseed=_context.clock().now();
    }
 else {
      _context.router().setNetDbReady();
    }
  }
 else   if (_lastReseed < _context.clock().now() - MIN_RESEED_INTERVAL) {
    int count=Math.min(routerCount,size());
    if (count < MIN_ROUTERS) {
      if (_facade.reseedChecker().checkReseed(count))       _lastReseed=_context.clock().now();
    }
 else {
      _context.router().setNetDbReady();
    }
  }
}
