{
  Getopt g=new Getopt("PersistentDataStore",args,"i:o:c:");
  String in=System.getProperty("user.home") + "/.i2p";
  String out="netDb";
  int count=200;
  boolean error=false;
  int c;
  while ((c=g.getopt()) != -1) {
switch (c) {
case 'i':
      in=g.getOptarg();
    break;
case 'o':
  out=g.getOptarg();
break;
case 'c':
String scount=g.getOptarg();
try {
count=Integer.parseInt(scount);
}
 catch (NumberFormatException nfe) {
error=true;
}
break;
case '?':
case ':':
default :
error=true;
}
}
if (error) {
usage();
System.exit(1);
}
File confDir=new File(in);
File dbDir=new File(confDir,"netDb");
if (!dbDir.exists()) {
System.out.println("NetDB directory " + dbDir + " does not exist");
System.exit(1);
}
File myFile=new File(confDir,"router.info");
File toDir=new File(out);
toDir.mkdirs();
InputStream fis=null;
Hash me=null;
try {
fis=new BufferedInputStream(new FileInputStream(myFile));
RouterInfo ri=new RouterInfo();
ri.readBytes(fis,true);
me=ri.getIdentity().getHash();
}
 catch (Exception e) {
}
 finally {
if (fis != null) try {
fis.close();
}
 catch (IOException ioe) {
}
}
int routerCount=0;
List<File> toRead=new ArrayList<File>(2048);
for (int j=0; j < B64.length(); j++) {
File subdir=new File(dbDir,DIR_PREFIX + B64.charAt(j));
File[] files=subdir.listFiles(RouterInfoFilter.getInstance());
if (files == null) continue;
routerCount+=files.length;
for (int i=0; i < files.length; i++) {
toRead.add(files[i]);
}
}
if (toRead.isEmpty()) {
System.out.println("No files to copy in " + dbDir);
System.exit(1);
}
Collections.shuffle(toRead);
int copied=0;
long tooOld=System.currentTimeMillis() - 7 * 24 * 60* 60* 1000L;
for (File file : toRead) {
if (copied >= count) break;
Hash key=getRouterInfoHash(file.getName());
if (key == null) {
System.out.println("Skipping bad " + file);
continue;
}
if (key.equals(me)) {
System.out.println("Skipping my RI");
continue;
}
fis=null;
try {
fis=new BufferedInputStream(new FileInputStream(file));
RouterInfo ri=new RouterInfo();
ri.readBytes(fis,true);
try {
fis.close();
}
 catch (IOException ioe) {
}
fis=null;
if (ri.getPublished() < tooOld) {
System.out.println("Skipping too old " + key);
continue;
}
if (ri.getCapabilities().contains("U")) {
System.out.println("Skipping unreachable " + key);
continue;
}
Collection<RouterAddress> addrs=ri.getAddresses();
if (addrs.isEmpty()) {
System.out.println("Skipping hidden " + key);
continue;
}
boolean hasIntro=false;
boolean hasIPv4=false;
for (RouterAddress addr : addrs) {
if ("SSU".equals(addr.getTransportStyle()) && addr.getOption("ihost0") != null) {
hasIntro=true;
break;
}
String host=addr.getHost();
if (host != null && host.contains(".")) hasIPv4=true;
}
if (hasIntro) {
System.out.println("Skipping introduced " + key);
continue;
}
if (!hasIPv4) {
System.out.println("Skipping IPv6-only " + key);
continue;
}
File toFile=new File(toDir,file.getName());
boolean ok=FileUtil.copy(file,toFile,true,true);
if (ok) copied++;
 else System.out.println("Failed copy of " + file + " to "+ toDir);
}
 catch (Exception e) {
System.out.println("Skipping bad " + file);
}
 finally {
if (fis != null) try {
fis.close();
}
 catch (IOException ioe) {
}
}
}
if (copied > 0) {
System.out.println("Copied " + copied + " router info files to "+ toDir);
}
 else {
System.out.println("Failed to copy any files to " + toDir);
System.exit(1);
}
}
