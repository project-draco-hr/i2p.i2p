{
  if (_state.completed()) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug(getJobId() + ": Search already completed",new Exception("already completed"));
    return;
  }
  int toCheck=getBredth() - _state.getPending().size();
  if (toCheck <= 0) {
    if (_log.shouldLog(Log.INFO))     _log.info(getJobId() + ": Too many searches already pending (pending: " + _state.getPending().size()+ " max: "+ getBredth()+ ")");
    requeuePending();
    return;
  }
  int sent=0;
  Set attempted=_state.getAttempted();
  while (sent <= 0) {
    boolean onlyFloodfill=onlyQueryFloodfillPeers(getContext());
    if (_floodfillPeersExhausted && onlyFloodfill && _state.getPending().size() <= 0) {
      if (_log.shouldLog(Log.WARN))       _log.warn(getJobId() + ": no non-floodfill peers left, and no more pending.  Searched: " + _state.getAttempted().size()+ " failed: "+ _state.getFailed().size());
      fail();
      return;
    }
    List closestHashes=getClosestRouters(_state.getTarget(),toCheck,attempted);
    if ((closestHashes == null) || (closestHashes.size() <= 0)) {
      if (_state.getPending().size() <= 0) {
        if (_log.shouldLog(Log.INFO))         _log.info(getJobId() + ": No peers left, and none pending!  Already searched: " + _state.getAttempted().size()+ " failed: "+ _state.getFailed().size());
        fail();
      }
 else {
        if (_log.shouldLog(Log.INFO))         _log.info(getJobId() + ": No peers left, but some are pending!  Pending: " + _state.getPending().size()+ " attempted: "+ _state.getAttempted().size()+ " failed: "+ _state.getFailed().size());
        requeuePending();
      }
      return;
    }
 else {
      attempted.addAll(closestHashes);
      for (Iterator iter=closestHashes.iterator(); iter.hasNext(); ) {
        Hash peer=(Hash)iter.next();
        DataStructure ds=_facade.getDataStore().get(peer);
        if (ds == null) {
          if (_log.shouldLog(Log.INFO))           _log.info("Next closest peer " + peer + " was only recently referred to us, sending a search for them");
          getContext().netDb().lookupRouterInfo(peer,null,null,_timeoutMs);
        }
 else         if (!(ds instanceof RouterInfo)) {
          if (_log.shouldLog(Log.WARN))           _log.warn(getJobId() + ": Error selecting closest hash that wasnt a router! " + peer+ " : "+ (ds == null ? "null" : ds.getClass().getName()));
          _state.replyTimeout(peer);
        }
 else {
          RouterInfo ri=(RouterInfo)ds;
          if (!FloodfillNetworkDatabaseFacade.isFloodfill(ri)) {
            _floodfillPeersExhausted=true;
            if (onlyFloodfill)             continue;
          }
          if (ri.isHidden()) {
          }
 else {
            _state.addPending(peer);
            sendSearch((RouterInfo)ds);
            sent++;
          }
        }
      }
    }
  }
}
