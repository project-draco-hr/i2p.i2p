{
  long token=getContext().random().nextLong(I2NPMessage.MAX_ID_VALUE);
  Hash client=msg.getKey();
  TunnelInfo replyTunnel=getContext().tunnelManager().selectInboundTunnel(client);
  if (replyTunnel == null) {
    if (_log.shouldLog(Log.WARN))     _log.warn("No reply inbound tunnels available!");
    fail();
    return;
  }
  TunnelId replyTunnelId=replyTunnel.getReceiveTunnelId(0);
  msg.setReplyToken(token);
  msg.setReplyTunnel(replyTunnelId);
  msg.setReplyGateway(replyTunnel.getPeer(0));
  if (_log.shouldLog(Log.DEBUG))   _log.debug(getJobId() + ": send(dbStore) w/ token expected " + token);
  Hash to=peer.getIdentity().getHash();
  TunnelInfo outTunnel=getContext().tunnelManager().selectOutboundTunnel(client);
  if (outTunnel != null) {
    I2NPMessage sent;
    boolean shouldEncrypt=supportsEncryption(peer);
    if (shouldEncrypt) {
      MessageWrapper.WrappedMessage wm=MessageWrapper.wrap(getContext(),msg,client,peer);
      if (wm == null) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Fail garlic encrypting from: " + client);
        fail();
        return;
      }
      sent=wm.getMessage();
      _state.addPending(to,wm);
    }
 else {
      sent=msg;
      _state.addPending(to);
      _state.replyTimeout(to);
      getContext().jobQueue().addJob(new WaitJob(getContext()));
      return;
    }
    SendSuccessJob onReply=new SendSuccessJob(getContext(),peer,outTunnel,sent.getMessageSize());
    FailedJob onFail=new FailedJob(getContext(),peer,getContext().clock().now());
    StoreMessageSelector selector=new StoreMessageSelector(getContext(),getJobId(),peer,token,expiration);
    if (_log.shouldLog(Log.DEBUG)) {
      if (shouldEncrypt)       _log.debug("sending encrypted store to " + peer.getIdentity().getHash() + " through "+ outTunnel+ ": "+ sent);
 else       _log.debug("sending store to " + peer.getIdentity().getHash() + " through "+ outTunnel+ ": "+ sent);
    }
    getContext().messageRegistry().registerPending(selector,onReply,onFail,(int)(expiration - getContext().clock().now()));
    getContext().tunnelDispatcher().dispatchOutbound(sent,outTunnel.getSendTunnelId(0),null,to);
  }
 else {
    if (_log.shouldLog(Log.WARN))     _log.warn("No outbound tunnels to send a dbStore out - delaying...");
    _state.replyTimeout(to);
    Job waiter=new WaitJob(getContext());
    waiter.getTiming().setStartAfter(getContext().clock().now() + 3 * 1000);
    getContext().jobQueue().addJob(waiter);
  }
}
