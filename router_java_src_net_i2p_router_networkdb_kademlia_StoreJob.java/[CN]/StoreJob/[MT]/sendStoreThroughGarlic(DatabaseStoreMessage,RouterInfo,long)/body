{
  long token=1 + getContext().random().nextLong(I2NPMessage.MAX_ID_VALUE);
  Hash to=peer.getIdentity().getHash();
  TunnelInfo replyTunnel=getContext().tunnelManager().selectInboundExploratoryTunnel(to);
  if (replyTunnel == null) {
    _log.warn("No reply inbound tunnels available!");
    return;
  }
  TunnelId replyTunnelId=replyTunnel.getReceiveTunnelId(0);
  msg.setReplyToken(token);
  msg.setReplyTunnel(replyTunnelId);
  msg.setReplyGateway(replyTunnel.getPeer(0));
  if (_log.shouldLog(Log.DEBUG))   _log.debug(getJobId() + ": send(dbStore) w/ token expected " + token);
  _state.addPending(to);
  TunnelInfo outTunnel=getContext().tunnelManager().selectOutboundExploratoryTunnel(to);
  if (outTunnel != null) {
    SendSuccessJob onReply=new SendSuccessJob(getContext(),peer,outTunnel,msg.getMessageSize());
    FailedJob onFail=new FailedJob(getContext(),peer,getContext().clock().now());
    StoreMessageSelector selector=new StoreMessageSelector(getContext(),getJobId(),peer,token,expiration);
    if (_log.shouldLog(Log.DEBUG))     _log.debug("sending store to " + peer.getIdentity().getHash() + " through "+ outTunnel+ ": "+ msg);
    getContext().messageRegistry().registerPending(selector,onReply,onFail);
    getContext().tunnelDispatcher().dispatchOutbound(msg,outTunnel.getSendTunnelId(0),null,to);
  }
 else {
    if (_log.shouldLog(Log.WARN))     _log.warn("No outbound tunnels to send a dbStore out!");
    fail();
  }
}
