{
  List<URL> URLList=new ArrayList<URL>();
  String URLs=_context.getProperty(PROP_RESEED_URL);
  boolean defaulted=URLs == null;
  boolean SSLDisable=_context.getBooleanProperty(PROP_SSL_DISABLE);
  boolean SSLRequired=_context.getBooleanProperty(PROP_SSL_REQUIRED);
  if (defaulted) {
    if (SSLDisable)     URLs=DEFAULT_SEED_URL;
 else     URLs=DEFAULT_SSL_SEED_URL;
  }
  StringTokenizer tok=new StringTokenizer(URLs," ,");
  while (tok.hasMoreTokens()) {
    try {
      URLList.add(new URL(tok.nextToken().trim()));
    }
 catch (    MalformedURLException mue) {
    }
  }
  Collections.shuffle(URLList,_context.random());
  if (defaulted && !SSLDisable && !SSLRequired) {
    List<URL> URLList2=new ArrayList<URL>();
    tok=new StringTokenizer(DEFAULT_SEED_URL," ,");
    while (tok.hasMoreTokens()) {
      try {
        URLList2.add(new URL(tok.nextToken().trim()));
      }
 catch (      MalformedURLException mue) {
      }
    }
    Collections.shuffle(URLList2,_context.random());
    URLList.addAll(URLList2);
  }
  int total=0;
  for (int i=0; i < URLList.size() && _isRunning; i++) {
    URL url=URLList.get(i);
    int dl=0;
    if (ENABLE_SU3) {
      try {
        dl=reseedSU3(new URL(url.toString() + SU3_FILENAME),echoStatus);
      }
 catch (      MalformedURLException mue) {
      }
    }
    if (dl <= 0)     dl=reseedOne(url,echoStatus);
    if (dl > 0) {
      total+=dl;
      if (total >= 100)       break;
      for (int j=i + 1; j < URLList.size(); ) {
        if (url.getHost().equals(URLList.get(j).getHost()))         URLList.remove(j);
 else         j++;
      }
    }
  }
  return total;
}
