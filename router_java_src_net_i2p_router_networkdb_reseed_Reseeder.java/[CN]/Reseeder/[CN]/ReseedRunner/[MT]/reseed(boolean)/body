{
  List<URI> URLList=new ArrayList<URI>();
  String URLs=_context.getProperty(PROP_RESEED_URL);
  boolean defaulted=URLs == null;
  boolean SSLDisable=_context.getBooleanProperty(PROP_SSL_DISABLE);
  boolean SSLRequired=_context.getBooleanPropertyDefaultTrue(PROP_SSL_REQUIRED);
  if (defaulted) {
    if (SSLDisable)     URLs=DEFAULT_SEED_URL;
 else     URLs=DEFAULT_SSL_SEED_URL;
    StringTokenizer tok=new StringTokenizer(URLs," ,");
    while (tok.hasMoreTokens()) {
      String u=tok.nextToken().trim();
      if (!u.endsWith("/"))       u=u + '/';
      try {
        URLList.add(new URI(u));
      }
 catch (      URISyntaxException mue) {
      }
    }
    Collections.shuffle(URLList,_context.random());
    if (!SSLDisable && !SSLRequired) {
      List<URI> URLList2=new ArrayList<URI>();
      tok=new StringTokenizer(DEFAULT_SEED_URL," ,");
      while (tok.hasMoreTokens()) {
        String u=tok.nextToken().trim();
        if (!u.endsWith("/"))         u=u + '/';
        try {
          URLList2.add(new URI(u));
        }
 catch (        URISyntaxException mue) {
        }
      }
      Collections.shuffle(URLList2,_context.random());
      URLList.addAll(URLList2);
    }
  }
 else {
    List<URI> SSLList=new ArrayList<URI>();
    List<URI> nonSSLList=new ArrayList<URI>();
    StringTokenizer tok=new StringTokenizer(URLs," ,");
    while (tok.hasMoreTokens()) {
      String u=tok.nextToken().trim();
      if (!u.endsWith("/"))       u=u + '/';
      if (u.startsWith("https")) {
        try {
          SSLList.add(new URI(u));
        }
 catch (        URISyntaxException mue) {
        }
      }
 else {
        try {
          nonSSLList.add(new URI(u));
        }
 catch (        URISyntaxException mue) {
        }
      }
    }
    if (!SSLDisable) {
      Collections.shuffle(SSLList,_context.random());
      URLList.addAll(SSLList);
    }
    if (SSLDisable || !SSLRequired) {
      Collections.shuffle(nonSSLList,_context.random());
      URLList.addAll(nonSSLList);
    }
  }
  if (!isSNISupported()) {
    try {
      URLList.remove(new URI("https://i2p.manas.ca:8443/"));
      URLList.remove(new URI("https://i2p-0.manas.ca:8443/"));
      URLList.remove(new URI("https://download.xxlspeed.com/"));
      URLList.remove(new URI("https://netdb.i2p2.no/"));
    }
 catch (    URISyntaxException mue) {
    }
  }
  if (URLList.isEmpty()) {
    System.out.println("No valid reseed URLs");
    _checker.setError("No valid reseed URLs");
    return -1;
  }
  return reseed(URLList,echoStatus);
}
