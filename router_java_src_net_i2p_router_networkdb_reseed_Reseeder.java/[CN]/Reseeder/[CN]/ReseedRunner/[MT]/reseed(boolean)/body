{
  List<URL> URLList=new ArrayList<URL>();
  String URLs=_context.getProperty(PROP_RESEED_URL);
  boolean defaulted=URLs == null;
  boolean SSLDisable=_context.getBooleanProperty(PROP_SSL_DISABLE);
  boolean SSLRequired=_context.getBooleanPropertyDefaultTrue(PROP_SSL_REQUIRED);
  if (defaulted) {
    if (SSLDisable)     URLs=DEFAULT_SEED_URL;
 else     URLs=DEFAULT_SSL_SEED_URL;
  }
  StringTokenizer tok=new StringTokenizer(URLs," ,");
  while (tok.hasMoreTokens()) {
    String u=tok.nextToken().trim();
    if (!u.endsWith("/"))     u=u + '/';
    try {
      URLList.add(new URL(u));
    }
 catch (    MalformedURLException mue) {
    }
  }
  Collections.shuffle(URLList,_context.random());
  if (defaulted && !SSLDisable && !SSLRequired) {
    List<URL> URLList2=new ArrayList<URL>();
    tok=new StringTokenizer(DEFAULT_SEED_URL," ,");
    while (tok.hasMoreTokens()) {
      String u=tok.nextToken().trim();
      if (!u.endsWith("/"))       u=u + '/';
      try {
        URLList2.add(new URL(u));
      }
 catch (      MalformedURLException mue) {
      }
    }
    Collections.shuffle(URLList2,_context.random());
    URLList.addAll(URLList2);
  }
  return reseed(URLList,echoStatus);
}
