{
  try {
    final long timeLimit=System.currentTimeMillis() + MAX_TIME_PER_HOST;
    System.setProperty(PROP_STATUS,_("Reseeding: fetching seed URL."));
    System.err.println("Reseeding from " + seedURL);
    URL dir=new URL(seedURL);
    byte contentRaw[]=readURL(dir);
    if (contentRaw == null) {
      _log.warn("Failed reading seed URL: " + seedURL);
      System.err.println("Reseed got no router infos from " + seedURL);
      return 0;
    }
    String content=new String(contentRaw);
    Set<String> urls=new HashSet(1024);
    int cur=0;
    int total=0;
    while (total++ < 1000) {
      int start=content.indexOf("href=\"" + ROUTERINFO_PREFIX,cur);
      if (start < 0) {
        start=content.indexOf("HREF=\"" + ROUTERINFO_PREFIX,cur);
        if (start < 0)         break;
      }
      int end=content.indexOf(ROUTERINFO_SUFFIX + "\">",start);
      if (end < 0)       break;
      if (start - end > 200) {
        cur=end + 1;
        continue;
      }
      String name=content.substring(start + ("href=\"" + ROUTERINFO_PREFIX).length(),end);
      urls.add(name);
      cur=end + 1;
    }
    if (total <= 0) {
      _log.warn("Read " + contentRaw.length + " bytes from seed "+ seedURL+ ", but found no routerInfo URLs.");
      System.err.println("Reseed got no router infos from " + seedURL);
      return 0;
    }
    List<String> urlList=new ArrayList(urls);
    Collections.shuffle(urlList,_context.random());
    int fetched=0;
    int errors=0;
    for (Iterator<String> iter=urlList.iterator(); iter.hasNext() && fetched < 200 && System.currentTimeMillis() < timeLimit; ) {
      try {
        System.setProperty(PROP_STATUS,_("Reseeding: fetching router info from seed URL ({0} successful, {1} errors).",fetched,errors));
        fetchSeed(seedURL,iter.next());
        fetched++;
        if (echoStatus) {
          System.out.print(".");
          if (fetched % 60 == 0)           System.out.println();
        }
      }
 catch (      Exception e) {
        if (_log.shouldLog(Log.INFO))         _log.info("Failed fetch",e);
        errors++;
      }
      if (errors >= 50 || (errors >= 10 && fetched <= 1))       break;
    }
    System.err.println("Reseed got " + fetched + " router infos from "+ seedURL+ " with "+ errors+ " errors");
    if (fetched > 0)     _context.netDb().rescan();
    if (fetched >= 100)     _isRunning=false;
    return fetched;
  }
 catch (  Throwable t) {
    _log.warn("Error reseeding",t);
    System.err.println("Reseed got no router infos from " + seedURL);
    return 0;
  }
}
