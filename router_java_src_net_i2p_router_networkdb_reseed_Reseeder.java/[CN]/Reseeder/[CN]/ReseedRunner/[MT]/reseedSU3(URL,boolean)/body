{
  int fetched=0;
  int errors=0;
  File contentRaw=null;
  File zip=null;
  File tmpDir=null;
  try {
    _checker.setStatus(_("Reseeding: fetching seed URL."));
    System.err.println("Reseeding from " + seedURL);
    contentRaw=fetchURL(seedURL);
    if (contentRaw == null) {
      _log.warn("Failed reading seed URL: " + seedURL);
      System.err.println("Reseed got no router infos from " + seedURL);
      return 0;
    }
    SU3File su3=new SU3File(_context,contentRaw);
    zip=new File(_context.getTempDir(),"reseed-" + _context.random().nextInt() + ".zip");
    su3.verifyAndMigrate(zip);
    int type=su3.getContentType();
    if (type != SU3File.CONTENT_RESEED)     throw new IOException("Bad content type " + type);
    String version=su3.getVersionString();
    try {
      Long ver=Long.parseLong(version.trim());
      if (ver >= 1400000000L) {
        ver*=1000;
        if (ver < _context.clock().now() - MAX_FILE_AGE)         throw new IOException("su3 file too old");
      }
    }
 catch (    NumberFormatException nfe) {
    }
    tmpDir=new File(_context.getTempDir(),"reseeds-" + _context.random().nextInt());
    if (!FileUtil.extractZip(zip,tmpDir))     throw new IOException("Bad zip file");
    Hash ourHash=_context.routerHash();
    String ourB64=ourHash != null ? ROUTERINFO_PREFIX + ourHash.toBase64() + ROUTERINFO_SUFFIX : "";
    File[] files=tmpDir.listFiles();
    if (files == null || files.length == 0)     throw new IOException("No files in zip");
    List<File> fList=Arrays.asList(files);
    Collections.shuffle(fList,_context.random());
    long minTime=_context.clock().now() - MAX_FILE_AGE;
    File netDbDir=new SecureDirectory(_context.getRouterDir(),"netDb");
    if (!netDbDir.exists())     netDbDir.mkdirs();
    for (Iterator<File> iter=fList.iterator(); iter.hasNext() && fetched < 400; ) {
      File f=iter.next();
      String name=f.getName();
      if (name.length() != ROUTERINFO_PREFIX.length() + 44 + ROUTERINFO_SUFFIX.length() || name.equals(ourB64) || f.length() > 10 * 1024 || f.lastModified() < minTime || !name.startsWith(ROUTERINFO_PREFIX) || !name.endsWith(ROUTERINFO_SUFFIX) || !f.isFile()) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Skipping " + f);
        f.delete();
        errors++;
        continue;
      }
      File to=new File(netDbDir,name);
      if (FileUtil.rename(f,to)) {
        fetched++;
      }
 else {
        f.delete();
        errors++;
      }
      if (errors >= 5)       break;
    }
  }
 catch (  Throwable t) {
    _log.warn("Error reseeding",t);
    errors++;
  }
 finally {
    if (contentRaw != null)     contentRaw.delete();
    if (zip != null)     zip.delete();
    if (tmpDir != null)     FileUtil.rmdir(tmpDir,false);
  }
  _checker.setStatus(_("Reseeding: fetching router info from seed URL ({0} successful, {1} errors).",fetched,errors));
  System.err.println("Reseed got " + fetched + " router infos from "+ seedURL+ " with "+ errors+ " errors");
  if (fetched > 0)   _context.netDb().rescan();
  return fetched;
}
