{
  _successfulLookups=getLong(props,"dbHistory.successfulLookups");
  _failedLookups=getLong(props,"dbHistory.failedLookups");
  _lookupsReceived=getLong(props,"dbHistory.lookupsReceived");
  _lookupReplyDuplicate=getLong(props,"dbHistory.lookupReplyDuplicate");
  _lookupReplyInvalid=getLong(props,"dbHistory.lookupReplyInvalid");
  _lookupReplyNew=getLong(props,"dbHistory.lookupReplyNew");
  _lookupReplyOld=getLong(props,"dbHistory.lookupReplyOld");
  _unpromptedDbStoreNew=getLong(props,"dbHistory.unpromptedDbStoreNew");
  _unpromptedDbStoreOld=getLong(props,"dbHistory.unpromptedDbStoreOld");
  _lastLookupReceived=getLong(props,"dbHistory.lastLookupReceived");
  _avgDelayBetweenLookupsReceived=getLong(props,"dbHistory.avgDelayBetweenLookupsReceived");
  try {
    _failedLookupRate.load(props,"dbHistory.failedLookupRate",true);
    _log.debug("Loading dbHistory.failedLookupRate");
  }
 catch (  IllegalArgumentException iae) {
    _log.warn("DB History failed lookup rate is corrupt, resetting",iae);
  }
  try {
    _invalidReplyRate.load(props,"dbHistory.invalidReplyRate",true);
  }
 catch (  IllegalArgumentException iae) {
    _log.warn("DB History invalid reply rate is corrupt, resetting",iae);
    createRates(_statGroup);
  }
}
