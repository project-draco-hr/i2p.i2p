{
  _unpromptedDbStoreNew=getLong(props,"dbHistory.unpromptedDbStoreNew");
  _unpromptedDbStoreOld=getLong(props,"dbHistory.unpromptedDbStoreOld");
  _lastLookupSuccessful=getLong(props,"dbHistory.lastLookupSuccessful");
  _lastLookupFailed=getLong(props,"dbHistory.lastLookupFailed");
  _lastStoreSuccessful=getLong(props,"dbHistory.lastStoreSuccessful");
  _lastStoreFailed=getLong(props,"dbHistory.lastStoreFailed");
  try {
    _failedLookupRate.load(props,"dbHistory.failedLookupRate",true);
    _log.debug("Loading dbHistory.failedLookupRate");
  }
 catch (  IllegalArgumentException iae) {
    _log.warn("DB History failed lookup rate is corrupt, resetting",iae);
  }
  try {
    _invalidReplyRate.load(props,"dbHistory.invalidReplyRate",true);
  }
 catch (  IllegalArgumentException iae) {
    _log.warn("DB History invalid reply rate is corrupt, resetting",iae);
    createRates(_statGroup);
  }
}
