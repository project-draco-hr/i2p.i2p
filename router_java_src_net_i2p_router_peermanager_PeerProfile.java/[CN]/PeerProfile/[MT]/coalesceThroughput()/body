{
  long now=System.currentTimeMillis();
  long measuredPeriod=now - _lastCoalesceDate;
  if (measuredPeriod >= 60 * 1000) {
    long tot=_peakThroughputCurrentTotal;
    double lowPeak=_peakThroughput[THROUGHPUT_COUNT - 1];
    if (tot > lowPeak) {
      for (int i=0; i < THROUGHPUT_COUNT; i++) {
        if (tot > _peakThroughput[i]) {
          for (int j=THROUGHPUT_COUNT - 1; j > i; j--)           _peakThroughput[j]=_peakThroughput[j - 1];
          _peakThroughput[i]=tot;
          break;
        }
      }
      if (false && _log.shouldLog(Log.WARN)) {
        StringBuffer buf=new StringBuffer(128);
        buf.append("Updating throughput after ").append(tot).append(" to ");
        for (int i=0; i < THROUGHPUT_COUNT; i++)         buf.append(_peakThroughput[i]).append(',');
        buf.append(" for ").append(_peer.toBase64());
        _log.warn(buf.toString());
      }
    }
 else {
      if (_context.random().nextLong(DROP_PERIOD_MINUTES * 2) <= 0) {
        for (int i=0; i < THROUGHPUT_COUNT; i++)         _peakThroughput[i]/=2;
        if (false && _log.shouldLog(Log.WARN)) {
          StringBuffer buf=new StringBuffer(128);
          buf.append("Degrading the throughput measurements to ");
          for (int i=0; i < THROUGHPUT_COUNT; i++)           buf.append(_peakThroughput[i]).append(',');
          buf.append(" for ").append(_peer.toBase64());
          _log.warn(buf.toString());
        }
      }
    }
    if (_context.random().nextLong(DROP_PERIOD_MINUTES * 2) <= 0) {
      for (int i=0; i < THROUGHPUT_COUNT; i++) {
        _peakTunnelThroughput[i]/=2;
        _peakTunnel1mThroughput[i]/=2;
      }
      if (_log.shouldLog(Log.WARN)) {
        StringBuffer buf=new StringBuffer(128);
        buf.append("Degrading the tunnel throughput measurements to ");
        for (int i=0; i < THROUGHPUT_COUNT; i++)         buf.append(_peakTunnel1mThroughput[i]).append(',');
        buf.append(" for ").append(_peer.toBase64());
        _log.warn(buf.toString());
      }
    }
    _peakThroughputCurrentTotal=0;
    _lastCoalesceDate=now;
  }
}
