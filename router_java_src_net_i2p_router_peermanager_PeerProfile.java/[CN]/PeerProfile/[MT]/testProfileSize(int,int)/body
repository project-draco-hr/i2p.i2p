{
  Runtime.getRuntime().gc();
  PeerProfile profs[]=new PeerProfile[numExpanded];
  PeerProfile profsCompact[]=new PeerProfile[numCompact];
  long used=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
  long usedPer=used / (numExpanded + numCompact);
  System.out.println(numExpanded + "/" + numCompact+ ": create array - Used: "+ used+ " bytes (or "+ usedPer+ " bytes per array entry)");
  int i=0;
  int j=0;
  try {
    for (; i < numExpanded; i++)     profs[i]=new PeerProfile(new Hash(new byte[Hash.HASH_LENGTH]));
  }
 catch (  OutOfMemoryError oom) {
    profs=null;
    profsCompact=null;
    Runtime.getRuntime().gc();
    System.out.println("Ran out of memory when creating profile " + i);
    return;
  }
  try {
    for (; i < numCompact; i++)     profsCompact[i]=new PeerProfile(new Hash(new byte[Hash.HASH_LENGTH]),false);
  }
 catch (  OutOfMemoryError oom) {
    profs=null;
    profsCompact=null;
    Runtime.getRuntime().gc();
    System.out.println("Ran out of memory when creating compacted profile " + i);
    return;
  }
  Runtime.getRuntime().gc();
  long usedObjects=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
  usedPer=usedObjects / (numExpanded + numCompact);
  System.out.println(numExpanded + "/" + numCompact+ ": create objects - Used: "+ usedObjects+ " bytes (or "+ usedPer+ " bytes per profile)");
  profs=null;
  profsCompact=null;
  Runtime.getRuntime().gc();
}
