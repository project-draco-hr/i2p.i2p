{
  _context=context;
  _log=context.logManager().getLog(ProfileOrganizer.class);
  _comp=new InverseCapacityComparator();
  _fastPeers=new HashMap<Hash,PeerProfile>(32);
  _highCapacityPeers=new HashMap<Hash,PeerProfile>(64);
  _wellIntegratedPeers=new HashMap<Hash,PeerProfile>(128);
  _notFailingPeers=new HashMap<Hash,PeerProfile>(256);
  _notFailingPeersList=new ArrayList<Hash>(256);
  _failingPeers=new HashMap<Hash,PeerProfile>(16);
  _strictCapacityOrder=new TreeSet<PeerProfile>(_comp);
  _persistenceHelper=new ProfilePersistenceHelper(_context);
  _context.statManager().createRateStat("peer.profileSortTime","How long the reorg takes sorting peers","Peers",new long[]{60 * 60 * 1000});
  _context.statManager().createRateStat("peer.profileCoalesceTime","How long the reorg takes coalescing peer stats","Peers",new long[]{60 * 60 * 1000});
  _context.statManager().createRateStat("peer.profileThresholdTime","How long the reorg takes determining the tier thresholds","Peers",new long[]{60 * 60 * 1000});
  _context.statManager().createRateStat("peer.profilePlaceTime","How long the reorg takes placing peers in the tiers","Peers",new long[]{60 * 60 * 1000});
  _context.statManager().createRateStat("peer.profileReorgTime","How long the reorg takes overall","Peers",new long[]{60 * 60 * 1000});
  _context.statManager().createRequiredRateStat("peer.failedLookupRate","Net DB Lookup fail rate","Peers",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
}
