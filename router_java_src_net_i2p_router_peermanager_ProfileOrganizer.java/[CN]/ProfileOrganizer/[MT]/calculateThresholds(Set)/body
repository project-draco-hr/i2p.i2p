{
  Set reordered=new TreeSet(_calc);
  for (Iterator iter=allPeers.iterator(); iter.hasNext(); ) {
    PeerProfile profile=(PeerProfile)iter.next();
    if (_us.equals(profile.getPeer()))     continue;
    if (profile.getIsFailing() || (!profile.getIsActive()))     continue;
    reordered.add(profile);
  }
  int numNotFailing=reordered.size();
  int topCount=0;
  if (numNotFailing != 0)   topCount=(int)(numNotFailing / 2);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("top count is " + topCount + " out of "+ numNotFailing);
  int numActive=0;
  double totalIntegration=0;
  double totalSpeed=0;
  int i=0;
  for (Iterator iter=reordered.iterator(); iter.hasNext(); i++) {
    PeerProfile profile=(PeerProfile)iter.next();
    if (i < topCount) {
      if (profile.getIsActive()) {
        numActive++;
        if (profile.getIntegrationValue() > 0)         totalIntegration+=profile.getIntegrationValue();
        if (profile.getSpeedValue() > 0)         totalSpeed+=profile.getSpeedValue();
      }
    }
 else     if (i == topCount) {
      if (profile.getReliabilityValue() < 0)       _thresholdReliabilityValue=0;
 else       _thresholdReliabilityValue=profile.getReliabilityValue();
      break;
    }
 else {
      break;
    }
  }
  _thresholdIntegrationValue=1.0d * avg(totalIntegration,numActive);
  _thresholdSpeedValue=1.0d * avg(totalSpeed,numActive);
}
