{
  Set reordered=new TreeSet(_comp);
  for (Iterator iter=allPeers.iterator(); iter.hasNext(); ) {
    PeerProfile profile=(PeerProfile)iter.next();
    if (_us.equals(profile.getPeer()))     continue;
    if (profile.getIsFailing() || (!profile.getIsActive()))     continue;
    reordered.add(profile);
  }
  int numNotFailing=reordered.size();
  int i=0;
  int threshold=0;
  if (numNotFailing > 0)   threshold=numNotFailing / 2;
  for (Iterator iter=reordered.iterator(); iter.hasNext(); i++) {
    PeerProfile profile=(PeerProfile)iter.next();
    if (i >= threshold) {
      _thresholdCapacityValue=profile.getCapacityValue();
      break;
    }
  }
  Set speeds=new TreeSet();
  int numActive=0;
  double totalIntegration=0;
  double totalSpeed=0;
  for (Iterator iter=reordered.iterator(); iter.hasNext(); i++) {
    PeerProfile profile=(PeerProfile)iter.next();
    if (profile.getCapacityValue() >= _thresholdCapacityValue) {
      if (profile.getIsActive()) {
        numActive++;
        if (profile.getIntegrationValue() > 0)         totalIntegration+=profile.getIntegrationValue();
        speeds.add(new Double(0 - profile.getSpeedValue()));
      }
    }
 else {
      break;
    }
  }
  i=0;
  for (Iterator iter=speeds.iterator(); iter.hasNext(); i++) {
    Double speed=(Double)iter.next();
    if (i >= (speeds.size() / 2)) {
      _thresholdSpeedValue=0 - speed.doubleValue();
      break;
    }
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Threshold value for speed: " + _thresholdSpeedValue + " with speeds: "+ speeds);
  _thresholdIntegrationValue=1.0d * avg(totalIntegration,numActive);
}
