{
  Set peers=selectAllPeers();
  long hideBefore=_context.clock().now() - 6 * 60 * 60* 1000;
  TreeMap order=new TreeMap();
  for (Iterator iter=peers.iterator(); iter.hasNext(); ) {
    Hash peer=(Hash)iter.next();
    if (_us.equals(peer))     continue;
    PeerProfile prof=getProfile(peer);
    if (prof.getLastSendSuccessful() <= hideBefore)     continue;
    order.put(peer.toBase64(),prof);
  }
  int fast=0;
  int reliable=0;
  int integrated=0;
  int failing=0;
  StringBuffer buf=new StringBuffer(16 * 1024);
  buf.append("<h2>Peer Profiles</h2>\n");
  buf.append("<table border=\"1\">");
  buf.append("<tr>");
  buf.append("<td><b>Peer</b> (").append(order.size()).append(", hiding ").append(peers.size() - order.size()).append(" inactive ones)</td>");
  buf.append("<td><b>Groups</b></td>");
  buf.append("<td><b>Speed</b></td>");
  buf.append("<td><b>Reliability</b></td>");
  buf.append("<td><b>Integration</b></td>");
  buf.append("<td><b>Failing?</b></td>");
  buf.append("<td><b>Profile data</b></td>");
  buf.append("</tr>");
  for (Iterator iter=order.keySet().iterator(); iter.hasNext(); ) {
    String name=(String)iter.next();
    PeerProfile prof=(PeerProfile)order.get(name);
    Hash peer=prof.getPeer();
    buf.append("<tr>");
    buf.append("<td><code>");
    if (prof.getIsFailing()) {
      buf.append("<font color=\"red\">--").append(peer.toBase64()).append("</font>");
    }
 else {
      if (prof.getIsActive()) {
        buf.append("<font color=\"blue\">++").append(peer.toBase64()).append("</font>");
      }
 else {
        buf.append("__").append(peer.toBase64());
      }
    }
    buf.append("</code></td>");
    buf.append("<td>");
    int tier=0;
    boolean isIntegrated=false;
synchronized (_reorganizeLock) {
      if (_fastAndReliablePeers.containsKey(peer)) {
        tier=1;
        fast++;
        reliable++;
      }
 else       if (_reliablePeers.containsKey(peer)) {
        tier=2;
        reliable++;
      }
 else       if (_notFailingPeers.containsKey(peer)) {
        tier=3;
      }
 else {
        failing++;
      }
      if (_wellIntegratedPeers.containsKey(peer)) {
        isIntegrated=true;
        integrated++;
      }
    }
switch (tier) {
case 1:
      buf.append("Fast+Reliable");
    break;
case 2:
  buf.append("Reliable");
break;
case 3:
buf.append("Not Failing");
break;
default :
buf.append("Failing");
break;
}
if (isIntegrated) buf.append(", Well integrated");
buf.append("<td align=\"right\">").append(num(prof.getSpeedValue())).append("</td>");
buf.append("<td align=\"right\">").append(num(prof.getReliabilityValue())).append("</td>");
buf.append("<td align=\"right\">").append(num(prof.getIntegrationValue())).append("</td>");
buf.append("<td align=\"right\">").append(prof.getIsFailing()).append("</td>");
buf.append("<td><a href=\"/profile/").append(prof.getPeer().toBase64().substring(0,32)).append("\">profile.txt</a> ");
buf.append("    <a href=\"#").append(prof.getPeer().toBase64().substring(0,32)).append("\">netDb</a></td>");
buf.append("</tr>");
}
buf.append("</table>");
buf.append("<i>Note that the speed, reliability, and integration values are relative");
buf.append(" - they do NOT correspond with any particular throughput, latency, uptime, ");
buf.append("or other metric.  Higher numbers are better.  ");
buf.append("Red peers prefixed with '--' means the peer is failing, and blue peers prefixed ");
buf.append("with '++' means we've sent or received a message from them ");
buf.append("in the last five minutes</i><br />");
buf.append("<b>Thresholds:</b><br />");
buf.append("<b>Speed:</b> ").append(num(_thresholdSpeedValue)).append(" (").append(fast).append(" fast peers)<br />");
buf.append("<b>Reliability:</b> ").append(num(_thresholdReliabilityValue)).append(" (").append(reliable).append(" reliable peers)<br />");
buf.append("<b>Integration:</b> ").append(num(_thresholdIntegrationValue)).append(" (").append(integrated).append(" well integrated peers)<br />");
out.write(buf.toString().getBytes());
}
