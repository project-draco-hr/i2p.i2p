{
  long sortTime=0;
  int coalesceTime=0;
  long thresholdTime=0;
  long placeTime=0;
  int profileCount=0;
  long uptime=_context.router().getUptime();
  long expireOlderThan=-1;
  if (uptime > 60 * 60 * 1000) {
    if (countNotFailingPeers() > ENOUGH_PROFILES)     _currentExpireTime=Math.max(_currentExpireTime - ADJUST_EXPIRE_TIME,MIN_EXPIRE_TIME);
 else     _currentExpireTime=Math.min(_currentExpireTime + ADJUST_EXPIRE_TIME,MAX_EXPIRE_TIME);
    expireOlderThan=_context.clock().now() - _currentExpireTime;
  }
  if (!getWriteLock())   return;
  long start=System.currentTimeMillis();
  try {
    Set<PeerProfile> allPeers=_strictCapacityOrder;
    Set<PeerProfile> reordered=new TreeSet(_comp);
    long sortStart=System.currentTimeMillis();
    for (Iterator<PeerProfile> iter=_strictCapacityOrder.iterator(); iter.hasNext(); ) {
      PeerProfile prof=iter.next();
      if ((expireOlderThan > 0) && (prof.getLastSendSuccessful() <= expireOlderThan))       continue;
      if (shouldCoalesce) {
        long coalesceStart=System.currentTimeMillis();
        prof.coalesceStats();
        coalesceTime+=(int)(System.currentTimeMillis() - coalesceStart);
      }
      reordered.add(prof);
      profileCount++;
    }
    sortTime=System.currentTimeMillis() - sortStart;
    _strictCapacityOrder=reordered;
    long thresholdStart=System.currentTimeMillis();
    locked_calculateThresholds(allPeers);
    thresholdTime=System.currentTimeMillis() - thresholdStart;
    _failingPeers.clear();
    _fastPeers.clear();
    _highCapacityPeers.clear();
    _notFailingPeers.clear();
    _notFailingPeersList.clear();
    _wellIntegratedPeers.clear();
    long placeStart=System.currentTimeMillis();
    for (Iterator<PeerProfile> iter=allPeers.iterator(); iter.hasNext(); ) {
      PeerProfile profile=iter.next();
      locked_placeProfile(profile);
    }
    locked_unfailAsNecessary();
    locked_demoteHighCapAsNecessary();
    locked_promoteFastAsNecessary();
    locked_demoteFastAsNecessary();
    Collections.shuffle(_notFailingPeersList,_context.random());
    placeTime=System.currentTimeMillis() - placeStart;
  }
  finally {
    releaseWriteLock();
  }
  if (_log.shouldLog(Log.INFO))   _log.info("Profiles reorganized.  averages: [integration: " + _thresholdIntegrationValue + ", capacity: "+ _thresholdCapacityValue+ ", speed: "+ _thresholdSpeedValue+ "]");
  long total=System.currentTimeMillis() - start;
  _context.statManager().addRateData("peer.profileSortTime",sortTime,profileCount);
  _context.statManager().addRateData("peer.profileCoalesceTime",coalesceTime,profileCount);
  _context.statManager().addRateData("peer.profileThresholdTime",thresholdTime,profileCount);
  _context.statManager().addRateData("peer.profilePlaceTime",placeTime,profileCount);
  _context.statManager().addRateData("peer.profileReorgTime",total,profileCount);
}
