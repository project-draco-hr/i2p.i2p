{
synchronized (_reorganizeLock) {
    Set allPeers=_strictCapacityOrder;
    Set reordered=new TreeSet(_comp);
    for (Iterator iter=_strictCapacityOrder.iterator(); iter.hasNext(); ) {
      PeerProfile prof=(PeerProfile)iter.next();
      if (shouldCoalesce)       prof.coalesceStats();
      reordered.add(prof);
    }
    _strictCapacityOrder=reordered;
    locked_calculateThresholds(allPeers);
    _failingPeers.clear();
    _fastPeers.clear();
    _highCapacityPeers.clear();
    _notFailingPeers.clear();
    _notFailingPeersList.clear();
    _wellIntegratedPeers.clear();
    for (Iterator iter=allPeers.iterator(); iter.hasNext(); ) {
      PeerProfile profile=(PeerProfile)iter.next();
      locked_placeProfile(profile);
    }
    locked_unfailAsNecessary();
    locked_promoteFastAsNecessary();
    Collections.shuffle(_notFailingPeersList,_context.random());
    if (_log.shouldLog(Log.DEBUG)) {
      _log.debug("Profiles reorganized.  averages: [integration: " + _thresholdIntegrationValue + ", capacity: "+ _thresholdCapacityValue+ ", speed: "+ _thresholdSpeedValue+ "]");
      StringBuffer buf=new StringBuffer(512);
      for (Iterator iter=_strictCapacityOrder.iterator(); iter.hasNext(); ) {
        PeerProfile prof=(PeerProfile)iter.next();
        buf.append('[').append(prof.toString()).append('=').append(prof.getCapacityValue()).append("] ");
      }
      _log.debug("Strictly organized (highest capacity first): " + buf.toString());
      _log.debug("fast: " + _fastPeers.values());
    }
  }
}
