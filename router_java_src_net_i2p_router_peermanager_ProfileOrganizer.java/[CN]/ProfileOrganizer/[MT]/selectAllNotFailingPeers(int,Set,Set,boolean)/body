{
  if (matches.size() < howMany) {
    int orig=matches.size();
    int needed=howMany - orig;
    int start=0;
    List selected=new ArrayList(needed);
synchronized (_reorganizeLock) {
      start=_context.random().nextInt(_notFailingPeersList.size());
      for (int i=0; i < _notFailingPeersList.size() && selected.size() < needed; i++) {
        int curIndex=(i + start) % _notFailingPeersList.size();
        Hash cur=(Hash)_notFailingPeersList.get(curIndex);
        if (matches.contains(cur) || (exclude != null && exclude.contains(cur))) {
          continue;
        }
 else         if (onlyNotFailing && _highCapacityPeers.containsKey(cur)) {
          continue;
        }
 else {
          if (isSelectable(cur))           selected.add(cur);
        }
      }
    }
    if (_log.shouldLog(Log.INFO))     _log.info("Selecting all not failing (strict? " + onlyNotFailing + " start="+ start+ ") found "+ selected.size()+ " new peers: "+ selected);
    matches.addAll(selected);
  }
  if (matches.size() < howMany) {
    if (_log.shouldLog(Log.INFO))     _log.info("selectAllNotFailing(" + howMany + "), not enough ("+ matches.size()+ ") going on to failing");
    selectFailingPeers(howMany,exclude,matches);
  }
 else {
    if (_log.shouldLog(Log.INFO))     _log.info("selectAllNotFailing(" + howMany + "), enough ("+ matches.size()+ ")");
  }
  return;
}
