{
  if (matches.size() < howMany) {
    int orig=matches.size();
    int needed=howMany - orig;
    List<Hash> selected=new ArrayList<Hash>(needed);
    getReadLock();
    try {
      for (Iterator<Hash> iter=new RandomIterator<Hash>(_notFailingPeersList); (selected.size() < needed) && iter.hasNext(); ) {
        Hash cur=iter.next();
        if (matches.contains(cur) || (exclude != null && exclude.contains(cur))) {
          if (_log.shouldLog(Log.DEBUG))           _log.debug("matched? " + matches.contains(cur) + " exclude: "+ exclude+ " cur="+ cur.toBase64());
          continue;
        }
 else         if (onlyNotFailing && _highCapacityPeers.containsKey(cur)) {
          continue;
        }
 else {
          if (isSelectable(cur))           selected.add(cur);
 else           if (_log.shouldLog(Log.DEBUG))           _log.debug("Not selectable: " + cur.toBase64());
        }
      }
    }
  finally {
      releaseReadLock();
    }
    if (_log.shouldLog(Log.INFO))     _log.info("Selecting all not failing (strict? " + onlyNotFailing + ") found "+ selected.size()+ " new peers: "+ selected+ " all="+ _notFailingPeersList.size()+ " strict="+ _strictCapacityOrder.size());
    matches.addAll(selected);
  }
  if (matches.size() < howMany) {
    if (_log.shouldLog(Log.INFO))     _log.info("selectAllNotFailing(" + howMany + "), not enough ("+ matches.size()+ ") going on to failing");
    selectFailingPeers(howMany,exclude,matches);
  }
 else {
    if (_log.shouldLog(Log.INFO))     _log.info("selectAllNotFailing(" + howMany + "), enough ("+ matches.size()+ ")");
  }
  return;
}
