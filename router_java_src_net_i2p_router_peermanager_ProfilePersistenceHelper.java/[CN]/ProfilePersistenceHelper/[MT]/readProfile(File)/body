{
  Hash peer=getHash(file.getName());
  try {
    if (peer == null) {
      _log.error("The file " + file.getName() + " is not a valid hash");
      return null;
    }
    PeerProfile profile=new PeerProfile(_context,peer);
    Properties props=new Properties();
    loadProps(props,file);
    long lastSentToSuccessfully=getLong(props,"lastSentToSuccessfully");
    if (isExpired(lastSentToSuccessfully)) {
      if (_log.shouldLog(Log.INFO))       _log.info("Dropping old profile " + file.getName() + ", since we haven't heard from them in a long time");
      file.delete();
      return null;
    }
 else     if (file.getName().endsWith(OLD_SUFFIX)) {
      String newName=file.getAbsolutePath();
      newName=newName.substring(0,newName.length() - OLD_SUFFIX.length()) + SUFFIX;
      boolean success=file.renameTo(new File(newName));
      if (!success)       file.delete();
    }
    profile.setCapacityBonus((int)getLong(props,"capacityBonus"));
    profile.setIntegrationBonus((int)getLong(props,"integrationBonus"));
    profile.setSpeedBonus((int)getLong(props,"speedBonus"));
    profile.setLastHeardAbout(getLong(props,"lastHeardAbout"));
    profile.setFirstHeardAbout(getLong(props,"firstHeardAbout"));
    profile.setLastSendSuccessful(getLong(props,"lastSentToSuccessfully"));
    profile.setLastSendFailed(getLong(props,"lastFailedSend"));
    profile.setLastHeardFrom(getLong(props,"lastHeardFrom"));
    profile.setTunnelTestTimeAverage(getDouble(props,"tunnelTestTimeAverage"));
    profile.setPeakThroughputKBps(getDouble(props,"tunnelPeakThroughput"));
    profile.setPeakTunnelThroughputKBps(getDouble(props,"tunnelPeakTunnelThroughput"));
    profile.setPeakTunnel1mThroughputKBps(getDouble(props,"tunnelPeakTunnel1mThroughput"));
    profile.getTunnelHistory().load(props);
    if (getLong(props,"dbHistory.lastLookupSuccessful") > 0 || getLong(props,"dbHistory.lastLookupFailed") > 0 || getLong(props,"dbHistory.lastStoreSuccessful") > 0 || getLong(props,"dbHistory.lastStoreFailed") > 0) {
      profile.expandDBProfile();
      profile.getDBHistory().load(props);
      profile.getDbIntroduction().load(props,"dbIntroduction",true);
      profile.getDbResponseTime().load(props,"dbResponseTime",true);
    }
    profile.getTunnelCreateResponseTime().load(props,"tunnelCreateResponseTime",true);
    profile.getTunnelTestResponseTime().load(props,"tunnelTestResponseTime",true);
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Loaded the profile for " + peer.toBase64() + " from "+ file.getName());
    fixupFirstHeardAbout(profile);
    return profile;
  }
 catch (  IOException e) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Error loading properties from " + file.getAbsolutePath(),e);
    file.delete();
    return null;
  }
}
