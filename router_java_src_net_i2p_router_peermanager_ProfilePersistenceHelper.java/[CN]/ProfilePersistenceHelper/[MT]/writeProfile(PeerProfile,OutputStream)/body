{
  String groups=null;
  if (_context.profileOrganizer().isFailing(profile.getPeer())) {
    groups="failing";
  }
 else   if (!_context.profileOrganizer().isHighCapacity(profile.getPeer())) {
    groups="not failing";
  }
 else {
    if (_context.profileOrganizer().isFast(profile.getPeer()))     groups="fast and high capacity";
 else     groups="high capacity";
    if (_context.profileOrganizer().isWellIntegrated(profile.getPeer()))     groups=groups + ", well integrated";
  }
  StringBuffer buf=new StringBuffer(512);
  buf.append("########################################################################").append(NL);
  buf.append("# profile for ").append(profile.getPeer().toBase64()).append(NL);
  if (_us != null)   buf.append("# as calculated by ").append(_us.toBase64()).append(NL);
  buf.append("#").append(NL);
  buf.append("# reliability: ").append(profile.getReliabilityValue()).append(NL);
  buf.append("# capacity: ").append(profile.getCapacityValue()).append(NL);
  buf.append("# integration: ").append(profile.getIntegrationValue()).append(NL);
  buf.append("# speedValue: ").append(profile.getSpeedValue()).append(NL);
  buf.append("#").append(NL);
  buf.append("# Groups: ").append(groups).append(NL);
  buf.append("########################################################################").append(NL);
  buf.append("##").append(NL);
  buf.append("# Reliability bonus: used to affect the reliability score after all other calculations are done").append(NL);
  buf.append("reliabilityBonus=").append(profile.getReliabilityBonus()).append(NL);
  buf.append("# Integration bonus: used to affect the integration score after all other calculations are done").append(NL);
  buf.append("integrationBonus=").append(profile.getIntegrationBonus()).append(NL);
  buf.append("# Speed bonus: used to affect the speed score after all other calculations are done").append(NL);
  buf.append("speedBonus=").append(profile.getSpeedBonus()).append(NL);
  buf.append(NL).append(NL);
  buf.append("# Last heard about: when did we last get a reference to this peer?  (milliseconds since the epoch)").append(NL);
  buf.append("lastHeardAbout=").append(profile.getLastHeardAbout()).append(NL);
  buf.append("# First heard about: when did we first get a reference to this peer?  (milliseconds since the epoch)").append(NL);
  buf.append("firstHeardAbout=").append(profile.getFirstHeardAbout()).append(NL);
  buf.append("# Last sent to successfully: when did we last send the peer a message successfully?  (milliseconds from the epoch)").append(NL);
  buf.append("lastSentToSuccessfully=").append(profile.getLastSendSuccessful()).append(NL);
  buf.append("# Last failed send: when did we last fail to send a message to the peer?  (milliseconds from the epoch)").append(NL);
  buf.append("lastFailedSend=").append(profile.getLastSendFailed()).append(NL);
  buf.append("# Last heard from: when did we last get a message from the peer?  (milliseconds from the epoch)").append(NL);
  buf.append("lastHeardFrom=").append(profile.getLastHeardFrom()).append(NL);
  buf.append("# moving average as to how fast the peer replies").append(NL);
  buf.append("tunnelTestTimeAverage=").append(profile.getTunnelTestTimeAverage()).append(NL);
  buf.append("tunnelPeakThroughput=").append(profile.getPeakThroughputKBps()).append(NL);
  buf.append("tunnelPeakTunnelThroughput=").append(profile.getPeakTunnelThroughputKBps()).append(NL);
  buf.append("tunnelPeakTunnel1mThroughput=").append(profile.getPeakTunnel1mThroughputKBps()).append(NL);
  buf.append(NL);
  out.write(buf.toString().getBytes());
  profile.getTunnelHistory().store(out);
  profile.getDBHistory().store(out);
  if (profile.getIsExpanded()) {
    profile.getCommError().store(out,"commError");
    profile.getDbIntroduction().store(out,"dbIntroduction");
    profile.getDbResponseTime().store(out,"dbResponseTime");
    profile.getReceiveSize().store(out,"receiveSize");
    profile.getSendFailureSize().store(out,"sendFailureSize");
    profile.getSendSuccessSize().store(out,"sendSuccessSize");
    profile.getTunnelCreateResponseTime().store(out,"tunnelCreateResponseTime");
    profile.getTunnelTestResponseTime().store(out,"tunnelTestResponseTime");
    profile.getTunnelTestResponseTimeSlow().store(out,"tunnelTestResponseTimeSlow");
  }
}
