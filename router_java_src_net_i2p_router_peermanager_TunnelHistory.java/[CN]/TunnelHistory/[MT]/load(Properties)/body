{
  _lastAgreedTo=getLong(props,"tunnels.lastAgreedTo");
  _lastFailed=getLong(props,"tunnels.lastFailed");
  _lastRejected=getLong(props,"tunnels.lastRejected");
  _lifetimeAgreedTo=getLong(props,"tunnels.lifetimeAgreedTo");
  _lifetimeFailed=getLong(props,"tunnels.lifetimeFailed");
  _lifetimeRejected=getLong(props,"tunnels.lifetimeRejected");
  try {
    _rejectRate.load(props,"tunnelHistory.rejectRate",true);
    _log.debug("Loading tunnelHistory.rejectRate");
  }
 catch (  IllegalArgumentException iae) {
    _log.warn("TunnelHistory reject rate is corrupt, resetting",iae);
    createRates();
  }
}
