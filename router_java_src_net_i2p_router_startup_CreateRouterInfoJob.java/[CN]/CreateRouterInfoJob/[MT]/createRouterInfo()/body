{
  SigType type=getSigTypeConfig(getContext());
  RouterInfo info=new RouterInfo();
  OutputStream fos1=null;
  OutputStream fos2=null;
  try {
    info.setAddresses(getContext().commSystem().createAddresses());
    Properties stats=getContext().statPublisher().publishStatistics();
    stats.setProperty(RouterInfo.PROP_NETWORK_ID,Router.NETWORK_ID + "");
    getContext().router().addCapabilities(info);
    info.setOptions(stats);
    info.setPublished(getCurrentPublishDate(getContext()));
    Object keypair[]=getContext().keyGenerator().generatePKIKeypair();
    PublicKey pubkey=(PublicKey)keypair[0];
    PrivateKey privkey=(PrivateKey)keypair[1];
    SimpleDataStructure signingKeypair[]=getContext().keyGenerator().generateSigningKeys(type);
    SigningPublicKey signingPubKey=(SigningPublicKey)signingKeypair[0];
    SigningPrivateKey signingPrivKey=(SigningPrivateKey)signingKeypair[1];
    RouterIdentity ident=new RouterIdentity();
    Certificate cert=createCertificate(getContext(),signingPubKey);
    ident.setCertificate(cert);
    ident.setPublicKey(pubkey);
    ident.setSigningPublicKey(signingPubKey);
    byte[] padding;
    int padLen=SigningPublicKey.KEYSIZE_BYTES - signingPubKey.length();
    if (padLen > 0) {
      padding=new byte[padLen];
      getContext().random().nextBytes(padding);
      ident.setPadding(padding);
    }
 else {
      padding=null;
    }
    info.setIdentity(ident);
    info.sign(signingPrivKey);
    if (!info.isValid())     throw new DataFormatException("RouterInfo we just built is invalid: " + info);
    (new File(getContext().getRouterDir(),KEYS_FILENAME)).delete();
    File ifile=new File(getContext().getRouterDir(),INFO_FILENAME);
    fos1=new BufferedOutputStream(new SecureFileOutputStream(ifile));
    info.writeBytes(fos1);
    File kfile=new File(getContext().getRouterDir(),KEYS2_FILENAME);
    fos2=new BufferedOutputStream(new SecureFileOutputStream(kfile));
    fos2.write(KEYS2_MAGIC);
    DataHelper.writeLong(fos2,2,0);
    DataHelper.writeLong(fos2,2,type.getCode());
    fos2.write(new byte[KEYS2_UNUSED_BYTES]);
    privkey.writeBytes(fos2);
    signingPrivKey.writeBytes(fos2);
    pubkey.writeBytes(fos2);
    if (padding != null)     fos2.write(padding);
    signingPubKey.writeBytes(fos2);
    getContext().keyManager().setKeys(pubkey,privkey,signingPubKey,signingPrivKey);
    if (_log.shouldLog(Log.INFO))     _log.info("Router info created and stored at " + ifile.getAbsolutePath() + " with private keys stored at "+ kfile.getAbsolutePath()+ " ["+ info+ "]");
    getContext().router().eventLog().addEvent(EventLog.REKEYED,ident.calculateHash().toBase64());
  }
 catch (  GeneralSecurityException gse) {
    _log.log(Log.CRIT,"Error building the new router information",gse);
  }
catch (  DataFormatException dfe) {
    _log.log(Log.CRIT,"Error building the new router information",dfe);
  }
catch (  IOException ioe) {
    _log.log(Log.CRIT,"Error writing out the new router information",ioe);
  }
 finally {
    if (fos1 != null)     try {
      fos1.close();
    }
 catch (    IOException ioe) {
    }
    if (fos2 != null)     try {
      fos2.close();
    }
 catch (    IOException ioe) {
    }
  }
  return info;
}
