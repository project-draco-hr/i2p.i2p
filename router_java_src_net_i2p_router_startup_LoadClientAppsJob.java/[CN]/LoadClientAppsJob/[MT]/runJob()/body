{
synchronized (LoadClientAppsJob.class) {
    if (_loaded)     return;
    _loaded=true;
  }
  Properties clientApps=getClientApps();
  int i=0;
  while (true) {
    String className=clientApps.getProperty("clientApp." + i + ".main");
    if (className == null)     break;
    String clientName=clientApps.getProperty("clientApp." + i + ".name");
    String args=clientApps.getProperty("clientApp." + i + ".args");
    String delayStr=clientApps.getProperty("clientApp." + i + ".delay");
    String onBoot=clientApps.getProperty("clientApp." + i + ".onBoot");
    String disabled=clientApps.getProperty("clientApp." + i + ".startOnLoad");
    i++;
    if (disabled != null && "false".equals(disabled))     continue;
    boolean onStartup=false;
    if (onBoot != null)     onStartup="true".equals(onBoot) || "yes".equals(onBoot);
    long delay=(onStartup ? 0 : STARTUP_DELAY);
    if (delayStr != null)     try {
      delay=1000 * Integer.parseInt(delayStr);
    }
 catch (    NumberFormatException nfe) {
    }
    String argVal[]=parseArgs(args);
    if (onStartup) {
      runClient(className,clientName,argVal);
    }
 else {
      getContext().jobQueue().addJob(new DelayedRunClient(getContext(),className,clientName,argVal,delay));
    }
  }
}
