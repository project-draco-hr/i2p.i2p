{
  RouterInfo info=null;
  File rif=new File(getContext().getRouterDir(),CreateRouterInfoJob.INFO_FILENAME);
  boolean infoExists=rif.exists();
  File rkf=new File(getContext().getRouterDir(),CreateRouterInfoJob.KEYS_FILENAME);
  boolean keysExist=rkf.exists();
  File rkf2=new File(getContext().getRouterDir(),CreateRouterInfoJob.KEYS2_FILENAME);
  boolean keys2Exist=rkf2.exists();
  InputStream fis1=null;
  try {
    if (infoExists && (keys2Exist || keysExist)) {
      fis1=new BufferedInputStream(new FileInputStream(rif));
      info=new RouterInfo();
      info.readBytes(fis1);
      if (!info.isValid())       throw new DataFormatException("Our RouterInfo has a bad signature");
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Reading in routerInfo from " + rif.getAbsolutePath() + " and it has "+ info.getAddresses().size()+ " addresses");
      _us=info;
    }
    if (keys2Exist || keysExist) {
      KeyData kd=readKeyData(rkf,rkf2);
      PublicKey pubkey=kd.routerIdentity.getPublicKey();
      SigningPublicKey signingPubKey=kd.routerIdentity.getSigningPublicKey();
      PrivateKey privkey=kd.privateKey;
      SigningPrivateKey signingPrivKey=kd.signingPrivateKey;
      SigType stype=signingPubKey.getType();
      SigType cstype=CreateRouterInfoJob.getSigTypeConfig(getContext());
      boolean sigTypeChanged=stype != cstype;
      if (sigTypeChanged && getContext().getProperty(CreateRouterInfoJob.PROP_ROUTER_SIGTYPE) == null) {
        if (getContext().random().nextInt(20) > 0) {
          sigTypeChanged=false;
          if (_log.shouldWarn())           _log.warn("Deferring RI rekey from " + stype + " to "+ cstype);
        }
      }
      if (sigTypeChanged || shouldRebuild(privkey)) {
        if (sigTypeChanged)         _log.logAlways(Log.WARN,"Rebuilding RouterInfo with new signature type " + cstype);
        _us=null;
        if (fis1 != null) {
          try {
            fis1.close();
          }
 catch (          IOException ioe) {
          }
          fis1=null;
        }
        rif.delete();
        rkf.delete();
        rkf2.delete();
        return;
      }
      getContext().keyManager().setKeys(pubkey,privkey,signingPubKey,signingPrivKey);
    }
  }
 catch (  IOException ioe) {
    _log.log(Log.CRIT,"Error reading the router info from " + rif.getAbsolutePath() + " and the keys from "+ rkf.getAbsolutePath(),ioe);
    _us=null;
    if (fis1 != null) {
      try {
        fis1.close();
      }
 catch (      IOException ioe2) {
      }
      fis1=null;
    }
    rif.delete();
    rkf.delete();
    rkf2.delete();
  }
catch (  DataFormatException dfe) {
    _log.log(Log.CRIT,"Corrupt router info or keys at " + rif.getAbsolutePath() + " / "+ rkf.getAbsolutePath(),dfe);
    _us=null;
    if (fis1 != null) {
      try {
        fis1.close();
      }
 catch (      IOException ioe) {
      }
      fis1=null;
    }
    rif.delete();
    rkf.delete();
    rkf2.delete();
  }
 finally {
    if (fis1 != null)     try {
      fis1.close();
    }
 catch (    IOException ioe) {
    }
  }
}
