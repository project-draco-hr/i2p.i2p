{
  String routerInfoFile=getContext().router().getConfigSetting(Router.PROP_INFO_FILENAME);
  if (routerInfoFile == null)   routerInfoFile=Router.PROP_INFO_FILENAME_DEFAULT;
  RouterInfo info=null;
  boolean failedRead=false;
  String keyFilename=getContext().router().getConfigSetting(Router.PROP_KEYS_FILENAME);
  if (keyFilename == null)   keyFilename=Router.PROP_KEYS_FILENAME_DEFAULT;
  File rif=new I2PFile(routerInfoFile);
  if (rif.exists())   _infoExists=true;
  File rkf=new I2PFile(keyFilename);
  if (rkf.exists())   _keysExist=true;
  FileInputStream fis1=null;
  FileInputStream fis2=null;
  try {
    if (_infoExists) {
      fis1=FileStreamFactory.getFileInputStream(rif);
      info=new RouterInfo();
      info.readBytes(fis1);
      _log.debug("Reading in routerInfo from " + rif.getAbsolutePath() + " and it has "+ info.getAddresses().size()+ " addresses");
    }
    if (_keysExist) {
      fis2=FileStreamFactory.getFileInputStream(rkf);
      PrivateKey privkey=new PrivateKey();
      privkey.readBytes(fis2);
      SigningPrivateKey signingPrivKey=new SigningPrivateKey();
      signingPrivKey.readBytes(fis2);
      PublicKey pubkey=new PublicKey();
      pubkey.readBytes(fis2);
      SigningPublicKey signingPubKey=new SigningPublicKey();
      signingPubKey.readBytes(fis2);
      getContext().keyManager().setPrivateKey(privkey);
      getContext().keyManager().setSigningPrivateKey(signingPrivKey);
      getContext().keyManager().setPublicKey(pubkey);
      getContext().keyManager().setSigningPublicKey(signingPubKey);
    }
    _us=info;
  }
 catch (  IOException ioe) {
    _log.error("Error reading the router info from " + routerInfoFile + " and the keys from "+ keyFilename,ioe);
    _us=null;
    rif.delete();
    rkf.delete();
    _infoExists=false;
    _keysExist=false;
  }
catch (  DataFormatException dfe) {
    _log.error("Corrupt router info or keys at " + routerInfoFile + " / "+ keyFilename,dfe);
    _us=null;
    rif.delete();
    rkf.delete();
    _infoExists=false;
    _keysExist=false;
  }
 finally {
    if (fis1 != null)     try {
      fis1.close();
    }
 catch (    IOException ioe) {
    }
    if (fis2 != null)     try {
      fis2.close();
    }
 catch (    IOException ioe) {
    }
  }
}
