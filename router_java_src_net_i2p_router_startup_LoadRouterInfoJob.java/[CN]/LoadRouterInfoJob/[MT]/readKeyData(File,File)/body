{
  RouterIdentity ri;
  PrivateKey privkey;
  SigningPrivateKey signingPrivKey;
  if (rkf2.exists()) {
    RouterPrivateKeyFile pkf=new RouterPrivateKeyFile(rkf2);
    ri=pkf.getRouterIdentity();
    if (!pkf.validateKeyPairs())     throw new DataFormatException("Key pairs invalid");
    privkey=pkf.getPrivKey();
    signingPrivKey=pkf.getSigningPrivKey();
  }
 else {
    InputStream fis=null;
    try {
      fis=new BufferedInputStream(new FileInputStream(rkf1));
      privkey=new PrivateKey();
      privkey.readBytes(fis);
      signingPrivKey=new SigningPrivateKey();
      signingPrivKey.readBytes(fis);
      PublicKey pubkey=new PublicKey();
      pubkey.readBytes(fis);
      SigningPublicKey signingPubKey=new SigningPublicKey();
      signingPubKey.readBytes(fis);
      try {
        if (!pubkey.equals(KeyGenerator.getPublicKey(privkey)))         throw new DataFormatException("Key pairs invalid");
        if (!signingPubKey.equals(KeyGenerator.getSigningPublicKey(signingPrivKey)))         throw new DataFormatException("Key pairs invalid");
      }
 catch (      IllegalArgumentException iae) {
        throw new DataFormatException("Key pairs invalid",iae);
      }
      ri=new RouterIdentity();
      ri.setPublicKey(pubkey);
      ri.setSigningPublicKey(signingPubKey);
      ri.setCertificate(Certificate.NULL_CERT);
    }
  finally {
      if (fis != null)       try {
        fis.close();
      }
 catch (      IOException ioe) {
      }
    }
  }
  return new KeyData(ri,privkey,signingPrivKey);
}
