{
  _log.debug("Rebuilding the new router info");
  boolean fullRebuild=false;
  RouterInfo info=null;
  String infoFilename=getContext().getProperty(Router.PROP_INFO_FILENAME,Router.PROP_INFO_FILENAME_DEFAULT);
  File infoFile=new File(getContext().getRouterDir(),infoFilename);
  String keyFilename=getContext().getProperty(Router.PROP_KEYS_FILENAME,Router.PROP_KEYS_FILENAME_DEFAULT);
  File keyFile=new File(getContext().getRouterDir(),keyFilename);
  if (keyFile.exists()) {
    info=getContext().router().getRouterInfo();
    if (info == null) {
      info=new RouterInfo();
      FileInputStream fis=null;
      try {
        fis=new FileInputStream(keyFile);
        PrivateKey privkey=new PrivateKey();
        privkey.readBytes(fis);
        SigningPrivateKey signingPrivKey=new SigningPrivateKey();
        signingPrivKey.readBytes(fis);
        PublicKey pubkey=new PublicKey();
        pubkey.readBytes(fis);
        SigningPublicKey signingPubKey=new SigningPublicKey();
        signingPubKey.readBytes(fis);
        RouterIdentity ident=new RouterIdentity();
        Certificate cert=getContext().router().createCertificate();
        ident.setCertificate(cert);
        ident.setPublicKey(pubkey);
        ident.setSigningPublicKey(signingPubKey);
        info.setIdentity(ident);
      }
 catch (      Exception e) {
        _log.log(Log.CRIT,"Error reading in the key data from " + keyFile.getAbsolutePath(),e);
        if (fis != null)         try {
          fis.close();
        }
 catch (        IOException ioe) {
        }
        fis=null;
        keyFile.delete();
        rebuildRouterInfo(alreadyRunning);
        return;
      }
 finally {
        if (fis != null)         try {
          fis.close();
        }
 catch (        IOException ioe) {
        }
      }
    }
    try {
      info.setAddresses(getContext().commSystem().createAddresses());
      Properties stats=getContext().statPublisher().publishStatistics();
      stats.setProperty(RouterInfo.PROP_NETWORK_ID,"" + Router.NETWORK_ID);
      info.setOptions(stats);
      getContext().router().addCapabilities(info);
      info.setPublished(CreateRouterInfoJob.getCurrentPublishDate(getContext()));
      info.sign(getContext().keyManager().getSigningPrivateKey());
    }
 catch (    DataFormatException dfe) {
      _log.log(Log.CRIT,"Error rebuilding the new router info",dfe);
      return;
    }
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream(infoFile);
      info.writeBytes(fos);
    }
 catch (    DataFormatException dfe) {
      _log.log(Log.CRIT,"Error rebuilding the router information",dfe);
    }
catch (    IOException ioe) {
      _log.log(Log.CRIT,"Error writing out the rebuilt router information",ioe);
    }
 finally {
      if (fos != null)       try {
        fos.close();
      }
 catch (      IOException ioe) {
      }
    }
  }
 else {
    _log.warn("Private key file " + keyFile.getAbsolutePath() + " deleted!  Rebuilding a brand new router identity!");
    CreateRouterInfoJob j=new CreateRouterInfoJob(getContext(),null);
    info=j.createRouterInfo();
    fullRebuild=true;
  }
  getContext().router().setRouterInfo(info);
  _log.info("Router info rebuilt and stored at " + infoFilename + " ["+ info+ "]");
}
