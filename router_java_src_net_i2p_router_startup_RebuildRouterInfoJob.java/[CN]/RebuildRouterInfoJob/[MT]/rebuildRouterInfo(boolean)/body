{
  _log.debug("Rebuilding the new router info");
  RouterInfo info=null;
  File infoFile=new File(getContext().getRouterDir(),CreateRouterInfoJob.INFO_FILENAME);
  File keyFile=new File(getContext().getRouterDir(),CreateRouterInfoJob.KEYS_FILENAME);
  File keyFile2=new File(getContext().getRouterDir(),CreateRouterInfoJob.KEYS2_FILENAME);
  if (keyFile2.exists() || keyFile.exists()) {
    RouterInfo oldinfo=getContext().router().getRouterInfo();
    if (oldinfo == null) {
      info=new RouterInfo();
      InputStream fis=null;
      try {
        SigType stype;
        if (keyFile2.exists()) {
          fis=new BufferedInputStream(new FileInputStream(keyFile2));
          byte[] magic=new byte[CreateRouterInfoJob.KEYS2_MAGIC.length];
          DataHelper.read(fis,magic);
          if (!DataHelper.eq(magic,CreateRouterInfoJob.KEYS2_MAGIC))           throw new IOException("Bad magic");
          int ctype=(int)DataHelper.readLong(fis,2);
          if (ctype != 0)           throw new IOException("Unsupported RI crypto type " + ctype);
          int sstype=(int)DataHelper.readLong(fis,2);
          stype=SigType.getByCode(sstype);
          if (stype == null || !stype.isAvailable())           throw new IOException("Unsupported RI sig type " + stype);
          DataHelper.skip(fis,CreateRouterInfoJob.KEYS2_UNUSED_BYTES);
        }
 else {
          fis=new BufferedInputStream(new FileInputStream(keyFile));
          stype=SigType.DSA_SHA1;
        }
        PrivateKey privkey=new PrivateKey();
        privkey.readBytes(fis);
        SigningPrivateKey signingPrivKey=new SigningPrivateKey(stype);
        signingPrivKey.readBytes(fis);
        PublicKey pubkey=new PublicKey();
        pubkey.readBytes(fis);
        SigningPublicKey signingPubKey=new SigningPublicKey(stype);
        byte[] padding;
        int padLen=SigningPublicKey.KEYSIZE_BYTES - signingPubKey.length();
        if (padLen > 0) {
          padding=new byte[padLen];
          DataHelper.read(fis,padding);
        }
 else {
          padding=null;
        }
        signingPubKey.readBytes(fis);
        RouterIdentity ident=new RouterIdentity();
        Certificate cert=CreateRouterInfoJob.createCertificate(getContext(),signingPubKey);
        ident.setCertificate(cert);
        ident.setPublicKey(pubkey);
        ident.setSigningPublicKey(signingPubKey);
        if (padding != null)         ident.setPadding(padding);
        info.setIdentity(ident);
      }
 catch (      Exception e) {
        _log.log(Log.CRIT,"Error reading in the key data from " + keyFile.getAbsolutePath(),e);
        if (fis != null)         try {
          fis.close();
        }
 catch (        IOException ioe) {
        }
        fis=null;
        keyFile.delete();
        rebuildRouterInfo(alreadyRunning);
        return;
      }
 finally {
        if (fis != null)         try {
          fis.close();
        }
 catch (        IOException ioe) {
        }
      }
    }
 else {
      info=new RouterInfo(oldinfo);
    }
    try {
      info.setAddresses(getContext().commSystem().createAddresses());
      Properties stats=getContext().statPublisher().publishStatistics();
      stats.setProperty(RouterInfo.PROP_NETWORK_ID,"" + Router.NETWORK_ID);
      info.setOptions(stats);
      getContext().router().addCapabilities(info);
      info.setPublished(CreateRouterInfoJob.getCurrentPublishDate(getContext()));
      info.sign(getContext().keyManager().getSigningPrivateKey());
    }
 catch (    DataFormatException dfe) {
      _log.log(Log.CRIT,"Error rebuilding the new router info",dfe);
      return;
    }
    if (!info.isValid()) {
      _log.log(Log.CRIT,"RouterInfo we just built is invalid: " + info,new Exception());
      return;
    }
    FileOutputStream fos=null;
synchronized (getContext().router().routerInfoFileLock) {
      try {
        fos=new SecureFileOutputStream(infoFile);
        info.writeBytes(fos);
      }
 catch (      DataFormatException dfe) {
        _log.log(Log.CRIT,"Error rebuilding the router information",dfe);
      }
catch (      IOException ioe) {
        _log.log(Log.CRIT,"Error writing out the rebuilt router information",ioe);
      }
 finally {
        if (fos != null)         try {
          fos.close();
        }
 catch (        IOException ioe) {
        }
      }
    }
  }
 else {
    _log.warn("Private key file " + keyFile.getAbsolutePath() + " deleted!  Rebuilding a brand new router identity!");
    CreateRouterInfoJob j=new CreateRouterInfoJob(getContext(),null);
synchronized (getContext().router().routerInfoFileLock) {
      info=j.createRouterInfo();
    }
  }
  getContext().router().setRouterInfo(info);
  _log.info("Router info rebuilt and stored at " + infoFile + " ["+ info+ "]");
}
