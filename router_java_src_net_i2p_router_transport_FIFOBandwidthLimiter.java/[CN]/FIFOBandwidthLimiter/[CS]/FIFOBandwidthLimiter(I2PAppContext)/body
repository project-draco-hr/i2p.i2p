{
  _context=context;
  _log=context.logManager().getLog(FIFOBandwidthLimiter.class);
  _context.statManager().createRateStat("bwLimiter.pendingOutboundRequests","How many outbound requests are ahead of the current one (ignoring ones with 0)?","BandwidthLimiter",new long[]{5 * 60 * 1000l,60 * 60 * 1000l});
  _context.statManager().createRateStat("bwLimiter.pendingInboundRequests","How many inbound requests are ahead of the current one (ignoring ones with 0)?","BandwidthLimiter",new long[]{5 * 60 * 1000l,60 * 60 * 1000l});
  _context.statManager().createRateStat("bwLimiter.outboundDelayedTime","How long it takes to honor an outbound request (ignoring ones with that go instantly)?","BandwidthLimiter",new long[]{5 * 60 * 1000l,60 * 60 * 1000l});
  _context.statManager().createRateStat("bwLimiter.inboundDelayedTime","How long it takes to honor an inbound request (ignoring ones with that go instantly)?","BandwidthLimiter",new long[]{5 * 60 * 1000l,60 * 60 * 1000l});
  _pendingInboundRequests=new ArrayList<SimpleRequest>(16);
  _pendingOutboundRequests=new ArrayList<SimpleRequest>(16);
  _lastTotalSent=_totalAllocatedOutboundBytes.get();
  _lastTotalReceived=_totalAllocatedInboundBytes.get();
  _lastStatsUpdated=now();
  _refiller=new FIFOBandwidthRefiller(_context,this);
  _refillerThread=new I2PThread(_refiller,"BWRefiller",true);
  _refillerThread.setPriority(I2PThread.NORM_PRIORITY - 1);
  _refillerThread.start();
}
