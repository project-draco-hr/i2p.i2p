{
  List satisfied=null;
  for (int i=0; i < _pendingInboundRequests.size(); i++) {
    if (_availableInboundBytes <= 0)     break;
    SimpleRequest req=(SimpleRequest)_pendingInboundRequests.get(i);
    long waited=_context.clock().now() - req.getRequestTime();
    if (req.getAborted()) {
      if (_log.shouldLog(Log.INFO))       _log.info("Aborting inbound request to " + req.getRequestName() + " (total "+ req.getTotalInboundRequested()+ " bytes, waited "+ waited+ "ms) pending "+ _pendingInboundRequests.size());
      _pendingInboundRequests.remove(i);
      i--;
      continue;
    }
    if (req.getAllocationsSinceWait() > 0) {
      continue;
    }
    int requested=req.getPendingInboundRequested();
    int allocated=0;
    if (_availableInboundBytes > requested)     allocated=requested;
 else     allocated=_availableInboundBytes;
    _availableInboundBytes-=allocated;
    _totalAllocatedInboundBytes+=allocated;
    req.allocateBytes(allocated,0);
    if (satisfied == null)     satisfied=new ArrayList(2);
    satisfied.add(req);
    if (req.getPendingInboundRequested() > 0) {
      if (_log.shouldLog(Log.INFO))       _log.info("Allocating " + allocated + " bytes inbound as a partial grant to "+ req.getRequestName()+ " (wanted "+ req.getTotalInboundRequested()+ " bytes, waited "+ waited+ "ms) pending "+ _pendingInboundRequests.size()+ ", longest waited "+ locked_getLongestInboundWait()+ " in");
    }
 else {
      if (_log.shouldLog(Log.INFO))       _log.info("Allocating " + allocated + " bytes inbound to finish the partial grant to "+ req.getRequestName()+ " (total "+ req.getTotalInboundRequested()+ " bytes, waited "+ waited+ "ms) pending "+ _pendingInboundRequests.size()+ ", longest waited "+ locked_getLongestInboundWait()+ " out");
      _pendingInboundRequests.remove(i);
      i--;
      if (waited > 10)       _context.statManager().addRateData("bwLimiter.inboundDelayedTime",waited,waited);
    }
  }
  return satisfied;
}
