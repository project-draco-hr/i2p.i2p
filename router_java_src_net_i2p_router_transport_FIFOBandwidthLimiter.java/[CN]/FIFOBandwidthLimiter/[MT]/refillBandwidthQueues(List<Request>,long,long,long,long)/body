{
  int avi=_availableInbound.addAndGet((int)bytesInbound);
  if (avi > _maxInbound) {
    int uib=_unavailableInboundBurst.addAndGet(avi - _maxInbound);
    _availableInbound.set(_maxInbound);
    if (uib > _maxInboundBurst) {
      _unavailableInboundBurst.set(_maxInboundBurst);
    }
  }
 else {
    int want=(int)maxBurstIn;
    if (want > (_maxInbound - avi))     want=_maxInbound - avi;
    if (want > 0) {
      int uib=_unavailableInboundBurst.get();
      if (want <= uib) {
        _availableInbound.addAndGet(want);
        _unavailableInboundBurst.addAndGet(0 - want);
      }
 else {
        _availableInbound.addAndGet(uib);
        _unavailableInboundBurst.set(0);
      }
    }
  }
  int avo=_availableOutbound.addAndGet((int)bytesOutbound);
  if (avo > _maxOutbound) {
    int uob=_unavailableOutboundBurst.getAndAdd(avo - _maxOutbound);
    _availableOutbound.set(_maxOutbound);
    if (uob > _maxOutboundBurst) {
      _unavailableOutboundBurst.set(_maxOutboundBurst);
    }
  }
 else {
    int want=(int)maxBurstOut;
    if (want > (_maxOutbound - avo))     want=_maxOutbound - avo;
    if (want > 0) {
      int uob=_unavailableOutboundBurst.get();
      if (want <= uob) {
        _availableOutbound.addAndGet(want);
        _unavailableOutboundBurst.addAndGet(0 - want);
      }
 else {
        _availableOutbound.addAndGet(uob);
        _unavailableOutboundBurst.set(0);
      }
    }
  }
  satisfyRequests(buf);
  updateStats();
}
