{
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Refilling the queues with " + bytesInbound + "/"+ bytesOutbound+ ": "+ getStatus().toString());
  int avi=_availableInbound.addAndGet((int)bytesInbound);
  if (avi > _maxInbound) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("available inbound (" + avi + ") exceeds our inbound burst ("+ _maxInbound+ "), so no supplement");
    int uib=_unavailableInboundBurst.addAndGet(avi - _maxInbound);
    _availableInbound.set(_maxInbound);
    if (uib > _maxInboundBurst) {
      _unavailableInboundBurst.set(_maxInboundBurst);
    }
  }
 else {
    int want=(int)maxBurstIn;
    if (want > (_maxInbound - avi))     want=_maxInbound - avi;
    if (_log.shouldLog(Log.DEBUG))     _log.debug("want to pull " + want + " from the inbound burst ("+ _unavailableInboundBurst+ ") to supplement "+ avi+ " (max: "+ _maxInbound+ ")");
    if (want > 0) {
      int uib=_unavailableInboundBurst.get();
      if (want <= uib) {
        _availableInbound.addAndGet(want);
        _unavailableInboundBurst.addAndGet(0 - want);
      }
 else {
        _availableInbound.addAndGet(uib);
        _unavailableInboundBurst.set(0);
      }
    }
  }
  int avo=_availableOutbound.addAndGet((int)bytesOutbound);
  if (avo > _maxOutbound) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("available outbound (" + avo + ") exceeds our outbound burst ("+ _maxOutbound+ "), so no supplement");
    int uob=_unavailableOutboundBurst.getAndAdd(avo - _maxOutbound);
    _availableOutbound.set(_maxOutbound);
    if (uob > _maxOutboundBurst) {
      _unavailableOutboundBurst.set(_maxOutboundBurst);
    }
  }
 else {
    int want=(int)maxBurstOut;
    if (want > (_maxOutbound - avo))     want=_maxOutbound - avo;
    if (_log.shouldLog(Log.DEBUG))     _log.debug("want to pull " + want + " from the outbound burst ("+ _unavailableOutboundBurst+ ") to supplement "+ avo+ " (max: "+ _maxOutbound+ ")");
    if (want > 0) {
      int uob=_unavailableOutboundBurst.get();
      if (want <= uob) {
        _availableOutbound.addAndGet(want);
        _unavailableOutboundBurst.addAndGet(0 - want);
      }
 else {
        _availableOutbound.addAndGet(uob);
        _unavailableOutboundBurst.set(0);
      }
    }
  }
  satisfyRequests(buf);
  updateStats();
}
