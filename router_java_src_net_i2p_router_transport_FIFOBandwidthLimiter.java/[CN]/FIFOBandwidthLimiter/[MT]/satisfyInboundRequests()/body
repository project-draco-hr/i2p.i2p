{
  List satisfied=null;
synchronized (_pendingInboundRequests) {
    while (_pendingInboundRequests.size() > 0) {
      SimpleRequest req=(SimpleRequest)_pendingInboundRequests.get(0);
      if (_inboundUnlimited) {
        int allocated=req.getPendingInboundRequested();
        _totalAllocatedInboundBytes+=allocated;
        req.allocateBytes(allocated,0);
        if (satisfied == null)         satisfied=new ArrayList(2);
        satisfied.add(req);
        if (_log.shouldLog(Log.INFO))         _log.info("Granting inbound request " + req.getRequestName() + " fully for "+ req.getTotalInboundRequested()+ " bytes (waited "+ (_context.clock().now() - req.getRequestTime())+ "ms) pending "+ _pendingInboundRequests.size());
        _pendingInboundRequests.remove(0);
      }
 else       if (_availableInboundBytes > 0) {
        int requested=req.getPendingInboundRequested();
        int allocated=0;
        if (_availableInboundBytes > requested)         allocated=requested;
 else         allocated=_availableInboundBytes;
        _availableInboundBytes-=allocated;
        req.allocateBytes(allocated,0);
        if (satisfied == null)         satisfied=new ArrayList(2);
        satisfied.add(req);
        if (req.getPendingInboundRequested() > 0) {
          if (_log.shouldLog(Log.INFO))           _log.info("Allocating " + allocated + " bytes inbound as a partial grant to "+ req.getRequestName()+ " (wanted "+ req.getTotalInboundRequested()+ " bytes, waited "+ (_context.clock().now() - req.getRequestTime())+ "ms) pending "+ _pendingInboundRequests.size());
        }
 else {
          if (_log.shouldLog(Log.INFO))           _log.info("Allocating " + allocated + " bytes inbound to finish the partial grant to "+ req.getRequestName()+ " (total "+ req.getTotalInboundRequested()+ " bytes, waited "+ (_context.clock().now() - req.getRequestTime())+ "ms) pending "+ _pendingInboundRequests.size());
          _pendingInboundRequests.remove(0);
        }
      }
 else {
        if (_log.shouldLog(Log.WARN))         _log.warn("Still denying the first inbound request (" + req.getRequestName() + " for "+ req.getTotalInboundRequested()+ " bytes (available "+ _availableInboundBytes+ "/"+ _availableOutboundBytes+ " in/out) (waited "+ (_context.clock().now() - req.getRequestTime())+ "ms so far) pending "+ (_pendingInboundRequests.size()));
        break;
      }
    }
  }
  if (satisfied != null) {
    for (int i=0; i < satisfied.size(); i++) {
      SimpleRequest req=(SimpleRequest)satisfied.get(i);
      req.notifyAllocation();
    }
  }
}
