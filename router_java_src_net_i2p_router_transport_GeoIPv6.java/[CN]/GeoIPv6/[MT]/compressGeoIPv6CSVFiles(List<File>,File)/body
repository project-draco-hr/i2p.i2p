{
  boolean DEBUG=false;
  List<V6Entry> entries=new ArrayList(20000);
  for (  File geoFile : inFiles) {
    int count=0;
    InputStream in=null;
    try {
      in=new BufferedInputStream(new FileInputStream(geoFile));
      if (geoFile.getName().endsWith(".gz"))       in=new GZIPInputStream(in);
      String buf=null;
      BufferedReader br=new BufferedReader(new InputStreamReader(in,"ISO-8859-1"));
      while ((buf=br.readLine()) != null) {
        try {
          if (buf.charAt(0) == '#') {
            continue;
          }
          String[] s=buf.split(",");
          String ips1=s[0].replace("\"","").trim();
          String ips2=s[1].replace("\"","").trim();
          byte[] ip1=InetAddress.getByName(ips1).getAddress();
          byte[] ip2=InetAddress.getByName(ips2).getAddress();
          String country=s[4].replace("\"","").trim().toLowerCase(Locale.US);
          entries.add(new V6Entry(ip1,ip2,country));
          count++;
        }
 catch (        UnknownHostException uhe) {
          uhe.printStackTrace();
        }
catch (        RuntimeException re) {
          re.printStackTrace();
        }
      }
      System.err.println("Read " + count + " entries from "+ geoFile);
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
      return false;
    }
 finally {
      if (in != null)       try {
        in.close();
      }
 catch (      IOException ioe) {
      }
    }
  }
  Collections.sort(entries);
  V6Entry old=null;
  for (int i=0; i < entries.size(); i++) {
    V6Entry e=entries.get(i);
    if (DEBUG)     System.out.println("proc " + e.toString());
    if (old != null) {
      if (e.from == old.from && e.to == old.to) {
        if (DEBUG)         System.out.println("remove dup " + e);
        entries.remove(i);
        i--;
        continue;
      }
      if (e.from <= old.to) {
        if (e.from < old.to) {
          V6Entry rewrite=new V6Entry(old.from,e.from - 1,old.cc);
          if (DEBUG)           System.out.println("rewrite old to " + rewrite);
          entries.set(i - 1,rewrite);
        }
        if (e.to < old.to) {
          V6Entry insert=new V6Entry(e.to + 1,old.to,old.cc);
          if (DEBUG)           System.out.println("insert " + insert);
          int j=i + 1;
          while (j < entries.size() && insert.compareTo(entries.get(j)) > 0) {
            j++;
          }
          entries.add(j,insert);
        }
      }
    }
    old=e;
  }
  OutputStream out=null;
  try {
    out=new GZIPOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
    out.write(DataHelper.getASCII(MAGIC));
    writeLong(out,System.currentTimeMillis());
    byte[] comment=DataHelper.getUTF8(COMMENT);
    out.write(comment);
    out.write(new byte[256 - (16 + 8 + comment.length)]);
    for (    V6Entry e : entries) {
      writeLong(out,e.from);
      writeLong(out,e.to);
      out.write(DataHelper.getASCII(e.cc));
    }
    System.err.println("Wrote " + entries.size() + " entries to "+ outFile);
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
    return false;
  }
 finally {
    if (out != null)     try {
      out.close();
    }
 catch (    IOException ioe) {
    }
  }
  return true;
}
