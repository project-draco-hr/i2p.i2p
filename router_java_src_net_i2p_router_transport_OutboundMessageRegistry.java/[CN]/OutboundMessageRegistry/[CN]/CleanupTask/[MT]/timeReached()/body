{
  long now=_context.clock().now();
  List<MessageSelector> removing=new ArrayList<MessageSelector>(8);
synchronized (_selectors) {
    for (int i=0; i < _selectors.size(); i++) {
      MessageSelector sel=_selectors.get(i);
      long expiration=sel.getExpiration();
      if (expiration <= now) {
        removing.add(sel);
        _selectors.remove(i);
        i--;
      }
 else       if (expiration < _nextExpire || _nextExpire < now) {
        _nextExpire=expiration;
      }
    }
  }
  boolean log=_log.shouldLog(Log.DEBUG);
  if (!removing.isEmpty()) {
    for (    MessageSelector sel : removing) {
      OutNetMessage msg=null;
      List<OutNetMessage> msgs=null;
synchronized (_selectorToMessage) {
        Object o=_selectorToMessage.remove(sel);
        if (o instanceof OutNetMessage) {
          msg=(OutNetMessage)o;
        }
 else         if (o instanceof List) {
          msgs=(List<OutNetMessage>)o;
        }
      }
      if (msg != null) {
        _activeMessages.remove(msg);
        Job fail=msg.getOnFailedReplyJob();
        if (fail != null)         _context.jobQueue().addJob(fail);
        if (log)         _log.debug("Expired: " + sel + " with timeout job "+ fail);
      }
 else       if (msgs != null) {
        _activeMessages.removeAll(msgs);
        for (        OutNetMessage m : msgs) {
          Job fail=m.getOnFailedReplyJob();
          if (fail != null)           _context.jobQueue().addJob(fail);
          if (log)           _log.debug("Expired: " + sel + " with timeout job(s) "+ fail);
        }
      }
 else {
        if (log)         _log.debug("Expired: " + sel + " with no known messages");
      }
    }
  }
  if (log) {
    int e=removing.size();
    int r=_selectors.size();
    int a=_activeMessages.size();
    if (r > 0 || e > 0 || a > 0)     _log.debug("Expired: " + e + " remaining: "+ r+ " active: "+ a);
  }
synchronized (this) {
    if (_nextExpire <= now)     _nextExpire=now + 10 * 1000;
    schedule(_nextExpire - now);
  }
}
