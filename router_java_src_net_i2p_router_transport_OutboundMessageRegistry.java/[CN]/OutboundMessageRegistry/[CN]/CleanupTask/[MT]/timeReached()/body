{
  long now=_context.clock().now();
synchronized (_selectors) {
    for (int i=0; i < _selectors.size(); i++) {
      MessageSelector sel=(MessageSelector)_selectors.get(i);
      if (sel == null)       continue;
      long expiration=sel.getExpiration();
      if (expiration <= now) {
        _removing.add(sel);
        _selectors.remove(i);
        i--;
      }
 else       if (expiration < _nextExpire || _nextExpire < now) {
        _nextExpire=expiration;
      }
    }
  }
  if (_removing.size() > 0) {
    for (int i=0; i < _removing.size(); i++) {
      MessageSelector sel=(MessageSelector)_removing.get(i);
      OutNetMessage msg=null;
      List msgs=null;
synchronized (_selectorToMessage) {
        Object o=_selectorToMessage.remove(sel);
        if (o instanceof OutNetMessage)         msg=(OutNetMessage)o;
 else         if (o instanceof List)         msgs=(List)o;
      }
      if (msg != null) {
synchronized (_activeMessages) {
          _activeMessages.remove(msg);
        }
        Job fail=msg.getOnFailedReplyJob();
        if (fail != null)         _context.jobQueue().addJob(fail);
      }
 else       if (msgs != null) {
synchronized (_activeMessages) {
          _activeMessages.removeAll(msgs);
        }
        for (int j=0; j < msgs.size(); j++) {
          msg=(OutNetMessage)msgs.get(i);
          Job fail=msg.getOnFailedReplyJob();
          if (fail != null)           _context.jobQueue().addJob(fail);
        }
      }
    }
    _removing.clear();
  }
  if (_nextExpire <= now)   _nextExpire=now + 10 * 1000;
  SimpleTimer.getInstance().addEvent(CleanupTask.this,_nextExpire - now);
}
