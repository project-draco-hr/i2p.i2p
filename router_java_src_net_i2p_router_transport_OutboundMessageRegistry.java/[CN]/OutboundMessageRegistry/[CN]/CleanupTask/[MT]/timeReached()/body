{
  long now=_context.clock().now();
  List<MessageSelector> removing=new ArrayList(8);
synchronized (_selectors) {
    for (int i=0; i < _selectors.size(); i++) {
      MessageSelector sel=(MessageSelector)_selectors.get(i);
      long expiration=sel.getExpiration();
      if (expiration <= now) {
        removing.add(sel);
        _selectors.remove(i);
        i--;
      }
 else       if (expiration < _nextExpire || _nextExpire < now) {
        _nextExpire=expiration;
      }
    }
  }
  if (!removing.isEmpty()) {
    for (    MessageSelector sel : removing) {
      OutNetMessage msg=null;
      List<OutNetMessage> msgs=null;
synchronized (_selectorToMessage) {
        Object o=_selectorToMessage.remove(sel);
        if (o instanceof OutNetMessage) {
          msg=(OutNetMessage)o;
        }
 else         if (o instanceof List) {
          msgs=(List<OutNetMessage>)o;
        }
      }
      if (msg != null) {
        _activeMessages.remove(msg);
        Job fail=msg.getOnFailedReplyJob();
        if (fail != null)         _context.jobQueue().addJob(fail);
      }
 else       if (msgs != null) {
        _activeMessages.removeAll(msgs);
        for (        OutNetMessage m : msgs) {
          Job fail=m.getOnFailedReplyJob();
          if (fail != null)           _context.jobQueue().addJob(fail);
        }
      }
    }
  }
  if (_nextExpire <= now)   _nextExpire=now + 10 * 1000;
  SimpleTimer.getInstance().addEvent(CleanupTask.this,_nextExpire - now);
}
