{
  ArrayList matches=new ArrayList(2);
  long beforeSync=_context.clock().now();
  Map messages=null;
synchronized (_pendingMessages) {
    messages=(Map)_pendingMessages.clone();
  }
  long matchTime=0;
  long continueTime=0;
  int numMessages=messages.size();
  StringBuffer slow=null;
  long afterSync1=_context.clock().now();
  ArrayList matchedRemove=null;
  for (Iterator iter=messages.keySet().iterator(); iter.hasNext(); ) {
    Long exp=(Long)iter.next();
    OutNetMessage msg=(OutNetMessage)messages.get(exp);
    MessageSelector selector=msg.getReplySelector();
    if (selector != null) {
      long before=_context.clock().now();
      boolean isMatch=selector.isMatch(message);
      long after=_context.clock().now();
      long diff=after - before;
      if (diff > 100) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Matching with selector took too long (" + diff + "ms) : "+ selector.getClass().getName());
        if (slow == null)         slow=new StringBuffer(256);
        slow.append(selector.getClass().getName()).append(": ");
        slow.append(diff).append(" ");
      }
      matchTime+=diff;
      if (isMatch) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Selector matches [" + selector);
        if (!matches.contains(msg))         matches.add(msg);
        long beforeCon=_context.clock().now();
        boolean continueMatching=selector.continueMatching();
        long afterCon=_context.clock().now();
        long diffCon=afterCon - beforeCon;
        if (diffCon > 100) {
          if (_log.shouldLog(Log.WARN))           _log.warn("Error continueMatching on a match took too long (" + diffCon + "ms) : "+ selector.getClass().getName());
        }
        continueTime+=diffCon;
        if (continueMatching) {
          if (_log.shouldLog(Log.DEBUG))           _log.debug("Continue matching");
        }
 else {
          if (_log.shouldLog(Log.DEBUG))           _log.debug("Stop matching selector " + selector + " for message "+ msg.getMessageType());
          if (matchedRemove == null)           matchedRemove=new ArrayList(4);
          matchedRemove.add(exp);
        }
      }
 else {
      }
    }
  }
  long afterSearch=_context.clock().now();
  doRemove(matchedRemove);
  long delay=_context.clock().now() - beforeSync;
  long search=afterSearch - afterSync1;
  long sync=afterSync1 - beforeSync;
  int level=Log.DEBUG;
  if (delay > 1000)   level=Log.ERROR;
  if (_log.shouldLog(level)) {
    StringBuffer buf=new StringBuffer(1024);
    buf.append("getMessages took ").append(delay).append("ms with search time of");
    buf.append(search).append("ms (match: ").append(matchTime).append("ms, continue: ");
    buf.append(continueTime).append("ms, #: ").append(numMessages).append(") and sync time of ");
    buf.append(sync).append("ms for ");
    if (matchedRemove == null)     buf.append(0);
 else     buf.append(matchedRemove.size());
    buf.append(" removed, ").append(matches.size()).append(" matches: slow = ");
    if (slow != null)     buf.append(slow.toString());
    _log.log(level,buf.toString());
  }
  return matches;
}
