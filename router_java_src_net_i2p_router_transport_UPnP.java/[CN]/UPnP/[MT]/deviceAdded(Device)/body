{
  String udn=dev.getUDN();
  if (udn == null)   udn="???";
  String name=dev.getFriendlyName();
  if (name == null)   name="???";
  boolean isIGD=ROUTER_DEVICE.equals(dev.getDeviceType()) && dev.isRootDevice();
  name+=isIGD ? " IGD" : (" " + dev.getDeviceType());
synchronized (lock) {
    if (isDisabled) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Plugin has been disabled previously, ignoring " + name + " UDN: "+ udn);
      _otherUDNs.put(udn,name);
      return;
    }
  }
  if (!ROUTER_DEVICE.equals(dev.getDeviceType()) || !dev.isRootDevice()) {
    if (_log.shouldLog(Log.WARN))     _log.warn("UP&P non-IGD device found, ignoring " + name + ' '+ dev.getDeviceType());
synchronized (lock) {
      _otherUDNs.put(udn,name);
    }
    return;
  }
 else   if (isNATPresent()) {
    _log.logAlways(Log.WARN,"UP&P ignoring additional device " + name + " UDN: "+ udn);
synchronized (lock) {
      _otherUDNs.put(udn,name);
    }
    return;
  }
  boolean ignore=false;
  String toIgnore=_context.getProperty(PROP_IGNORE);
  if (toIgnore != null) {
    String[] ignores=DataHelper.split(toIgnore,"[,; \r\n\t]");
    for (int i=0; i < ignores.length; i++) {
      if (ignores[i].equals(udn)) {
        ignore=true;
        _log.logAlways(Log.WARN,"Ignoring by config: " + name + " UDN: "+ udn);
        break;
      }
    }
  }
synchronized (lock) {
    if (ignore) {
      _otherUDNs.put(udn,name);
      return;
    }
 else {
      _router=dev;
    }
  }
  if (_log.shouldLog(Log.WARN))   _log.warn("UP&P IGD found : " + name + " UDN: "+ udn+ " lease time: "+ dev.getLeaseTime());
  discoverService();
synchronized (lock) {
    if (_service == null) {
      _log.error("The IGD device we got isn't suiting our needs, let's disable the plugin");
      _router=null;
      return;
    }
    subscribe(_service);
  }
  registerPortMappings();
}
