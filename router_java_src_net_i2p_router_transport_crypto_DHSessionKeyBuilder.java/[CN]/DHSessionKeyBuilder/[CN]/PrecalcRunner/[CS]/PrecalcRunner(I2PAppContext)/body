{
  super("DH Precalc");
  _context=ctx;
  _log=ctx.logManager().getLog(DHSessionKeyBuilder.class);
  ctx.statManager().createRateStat("crypto.dhGeneratePublicTime","How long it takes to create x and X","Encryption",new long[]{60 * 60 * 1000});
  ctx.statManager().createRateStat("crypto.dhCalculateSessionTime","How long it takes to create the session key","Encryption",new long[]{60 * 60 * 1000});
  ctx.statManager().createRateStat("crypto.DHUsed","Need a DH from the queue","Encryption",new long[]{60 * 60 * 1000});
  ctx.statManager().createRateStat("crypto.DHReused","Unused DH requeued","Encryption",new long[]{60 * 60 * 1000});
  ctx.statManager().createRateStat("crypto.DHEmpty","DH queue empty","Encryption",new long[]{60 * 60 * 1000});
  long maxMemory=SystemVersion.getMaxMemory();
  int factor=(int)Math.max(1l,Math.min(4l,1 + (maxMemory / (128 * 1024 * 1024l))));
  int defaultMin=DEFAULT_DH_PRECALC_MIN * factor;
  int defaultMax=DEFAULT_DH_PRECALC_MAX * factor;
  _minSize=ctx.getProperty(PROP_DH_PRECALC_MIN,defaultMin);
  _maxSize=ctx.getProperty(PROP_DH_PRECALC_MAX,defaultMax);
  _calcDelay=ctx.getProperty(PROP_DH_PRECALC_DELAY,DEFAULT_DH_PRECALC_DELAY);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("DH Precalc (minimum: " + _minSize + " max: "+ _maxSize+ ", delay: "+ _calcDelay+ ")");
  _builders=new LinkedBlockingQueue<DHSessionKeyBuilder>(_maxSize);
  if (!SystemVersion.isWindows())   setPriority(Thread.NORM_PRIORITY - 1);
}
