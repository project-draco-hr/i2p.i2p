{
  while (_state == State.OB_SENT_X && src.hasRemaining()) {
    byte c=src.get();
    _Y[_received++]=c;
    if (_received >= XY_SIZE) {
      try {
        _dh.setPeerPublicValue(_Y);
        _dh.getSessionKey();
        if (_log.shouldLog(Log.DEBUG))         _log.debug(prefix() + "DH session key calculated (" + _dh.getSessionKey().toBase64()+ ")");
        _state=State.OB_GOT_Y;
      }
 catch (      DHSessionKeyBuilder.InvalidPublicParameterException e) {
        _context.statManager().addRateData("ntcp.invalidDH",1);
        fail("Invalid X",e);
        return;
      }
    }
  }
  while (_state == State.OB_GOT_Y && src.hasRemaining()) {
    int i=_received - XY_SIZE;
    _received++;
    byte c=src.get();
    _e_hXY_tsB[i]=c;
    if (i + 1 >= HXY_TSB_PAD_SIZE) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug(prefix() + "received _e_hXY_tsB fully");
      byte hXY_tsB[]=new byte[HXY_TSB_PAD_SIZE];
      _context.aes().decrypt(_e_hXY_tsB,0,hXY_tsB,0,_dh.getSessionKey(),_Y,XY_SIZE - AES_SIZE,HXY_TSB_PAD_SIZE);
      byte XY[]=new byte[XY_SIZE + XY_SIZE];
      System.arraycopy(_X,0,XY,0,XY_SIZE);
      System.arraycopy(_Y,0,XY,XY_SIZE,XY_SIZE);
      byte[] h=SimpleByteCache.acquire(HXY_SIZE);
      _context.sha().calculateHash(XY,0,XY_SIZE + XY_SIZE,h,0);
      if (!DataHelper.eq(h,0,hXY_tsB,0,HXY_SIZE)) {
        SimpleByteCache.release(h);
        _context.statManager().addRateData("ntcp.invalidHXY",1);
        fail("Invalid H(X+Y) - mitm attack attempted?");
        return;
      }
      SimpleByteCache.release(h);
      _state=State.OB_GOT_HXY;
      _tsB=DataHelper.fromLong(hXY_tsB,HXY_SIZE,4);
      _tsA=(_context.clock().now() + 500) / 1000;
      if (_log.shouldLog(Log.DEBUG))       _log.debug(prefix() + "h(X+Y) is correct, tsA-tsB=" + (_tsA - _tsB));
      long diff=1000 * Math.abs(_tsA - _tsB);
      if (!_context.clock().getUpdatedSuccessfully()) {
        _context.clock().setOffset(1000 * (_tsB - _tsA),true);
        _tsA=_tsB;
        if (diff != 0)         _log.logAlways(Log.WARN,"NTP failure, NTCP adjusting clock by " + DataHelper.formatDuration(diff));
      }
 else       if (diff >= Router.CLOCK_FUDGE_FACTOR) {
        _context.statManager().addRateData("ntcp.invalidOutboundSkew",diff);
        _transport.markReachable(_con.getRemotePeer().calculateHash(),false);
        _context.banlist().banlistRouter(DataHelper.formatDuration(diff),_con.getRemotePeer().calculateHash(),_x("Excessive clock skew: {0}"));
        _transport.setLastBadSkew(_tsA - _tsB);
        fail("Clocks too skewed (" + diff + " ms)",null,true);
        return;
      }
 else       if (_log.shouldLog(Log.DEBUG)) {
        _log.debug(prefix() + "Clock skew: " + diff+ " ms");
      }
      int sigSize=XY_SIZE + XY_SIZE + HXY_SIZE+ 4+ 4;
      byte preSign[]=new byte[sigSize];
      System.arraycopy(_X,0,preSign,0,XY_SIZE);
      System.arraycopy(_Y,0,preSign,XY_SIZE,XY_SIZE);
      System.arraycopy(_con.getRemotePeer().calculateHash().getData(),0,preSign,XY_SIZE + XY_SIZE,HXY_SIZE);
      DataHelper.toLong(preSign,XY_SIZE + XY_SIZE + HXY_SIZE,4,_tsA);
      DataHelper.toLong(preSign,XY_SIZE + XY_SIZE + HXY_SIZE+ 4,4,_tsB);
      Signature sig=_context.dsa().sign(preSign,_context.keyManager().getSigningPrivateKey());
      byte ident[]=_context.router().getRouterInfo().getIdentity().toByteArray();
      int min=2 + ident.length + 4+ sig.length();
      int rem=min % AES_SIZE;
      int padding=0;
      if (rem > 0)       padding=AES_SIZE - rem;
      byte preEncrypt[]=new byte[min + padding];
      DataHelper.toLong(preEncrypt,0,2,ident.length);
      System.arraycopy(ident,0,preEncrypt,2,ident.length);
      DataHelper.toLong(preEncrypt,2 + ident.length,4,_tsA);
      if (padding > 0)       _context.random().nextBytes(preEncrypt,2 + ident.length + 4,padding);
      System.arraycopy(sig.getData(),0,preEncrypt,2 + ident.length + 4+ padding,sig.length());
      _prevEncrypted=new byte[preEncrypt.length];
      _context.aes().encrypt(preEncrypt,0,_prevEncrypted,0,_dh.getSessionKey(),_hX_xor_bobIdentHash,_hX_xor_bobIdentHash.length - AES_SIZE,preEncrypt.length);
      _state=State.OB_SENT_RI;
      _transport.getPumper().wantsWrite(_con,_prevEncrypted);
    }
  }
  if (_state == State.OB_SENT_RI && src.hasRemaining()) {
    int off=0;
    if (_e_bobSig == null) {
      int siglen=_con.getRemotePeer().getSigningPublicKey().getType().getSigLen();
      int rem=siglen % AES_SIZE;
      int padding;
      if (rem > 0)       padding=AES_SIZE - rem;
 else       padding=0;
      _e_bobSig=new byte[siglen + padding];
      if (_log.shouldLog(Log.DEBUG))       _log.debug(prefix() + "receiving E(S(X+Y+Alice.identHash+tsA+tsB)+padding, sk, prev) (remaining? " + src.hasRemaining()+ ")");
    }
 else {
      off=_received - XY_SIZE - HXY_TSB_PAD_SIZE;
      if (_log.shouldLog(Log.DEBUG))       _log.debug(prefix() + "continuing to receive E(S(X+Y+Alice.identHash+tsA+tsB)+padding, sk, prev) (remaining? " + src.hasRemaining()+ " off="+ off+ " recv="+ _received+ ")");
    }
    while (_state == State.OB_SENT_RI && src.hasRemaining()) {
      _e_bobSig[off++]=src.get();
      _received++;
      if (off >= _e_bobSig.length) {
        _state=State.OB_GOT_SIG;
        byte bobSig[]=new byte[_e_bobSig.length];
        _context.aes().decrypt(_e_bobSig,0,bobSig,0,_dh.getSessionKey(),_e_hXY_tsB,HXY_TSB_PAD_SIZE - AES_SIZE,_e_bobSig.length);
        SigType type=_con.getRemotePeer().getSigningPublicKey().getType();
        int siglen=type.getSigLen();
        byte bobSigData[]=new byte[siglen];
        System.arraycopy(bobSig,0,bobSigData,0,siglen);
        Signature sig=new Signature(type,bobSigData);
        byte toVerify[]=new byte[XY_SIZE + XY_SIZE + HXY_SIZE+ 4+ 4];
        int voff=0;
        System.arraycopy(_X,0,toVerify,voff,XY_SIZE);
        voff+=XY_SIZE;
        System.arraycopy(_Y,0,toVerify,voff,XY_SIZE);
        voff+=XY_SIZE;
        System.arraycopy(_context.routerHash().getData(),0,toVerify,voff,HXY_SIZE);
        voff+=HXY_SIZE;
        DataHelper.toLong(toVerify,voff,4,_tsA);
        voff+=4;
        DataHelper.toLong(toVerify,voff,4,_tsB);
        voff+=4;
        boolean ok=_context.dsa().verifySignature(sig,toVerify,_con.getRemotePeer().getSigningPublicKey());
        if (!ok) {
          _context.statManager().addRateData("ntcp.invalidSignature",1);
          fail("Signature was invalid - attempt to spoof " + _con.getRemotePeer().calculateHash().toBase64() + "?");
        }
 else {
          _state=State.VERIFIED;
          if (_log.shouldLog(Log.DEBUG))           _log.debug(prefix() + "signature verified from Bob.  done!");
          prepareExtra(src);
          byte nextWriteIV[]=_curEncrypted;
          System.arraycopy(_prevEncrypted,_prevEncrypted.length - AES_SIZE,nextWriteIV,0,AES_SIZE);
          _con.finishOutboundEstablishment(_dh.getSessionKey(),(_tsA - _tsB),nextWriteIV,_e_bobSig);
          releaseBufs();
          InetAddress ia=_con.getChannel().socket().getInetAddress();
          if (ia != null)           _transport.setIP(_con.getRemotePeer().calculateHash(),ia.getAddress());
        }
        return;
      }
    }
  }
}
