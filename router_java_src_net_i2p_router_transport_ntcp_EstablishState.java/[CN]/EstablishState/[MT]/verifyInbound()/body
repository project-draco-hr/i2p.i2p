{
  byte b[]=_sz_aliceIdent_tsA_padding_aliceSig.toByteArray();
  try {
    int sz=_aliceIdentSize;
    long tsA=DataHelper.fromLong(b,2 + sz,4);
    ByteArrayOutputStream baos=new ByteArrayOutputStream(768);
    baos.write(_X);
    baos.write(_Y);
    baos.write(_context.routerHash().getData());
    baos.write(DataHelper.toLong(4,tsA));
    baos.write(DataHelper.toLong(4,_tsB));
    byte toVerify[]=baos.toByteArray();
    SigType type=_aliceIdent.getSigningPublicKey().getType();
    if (type == null) {
      fail("unsupported sig type");
      return;
    }
    byte s[]=new byte[type.getSigLen()];
    System.arraycopy(b,b.length - s.length,s,0,s.length);
    Signature sig=new Signature(type,s);
    boolean ok=_context.dsa().verifySignature(sig,toVerify,_aliceIdent.getSigningPublicKey());
    if (ok) {
      InetAddress addr=this._con.getChannel().socket().getInetAddress();
      byte[] ip=(addr == null) ? null : addr.getAddress();
      if (_context.banlist().isBanlistedForever(_aliceIdent.calculateHash())) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Dropping inbound connection from permanently banlisted peer: " + _aliceIdent.calculateHash());
        if (ip != null)         _context.blocklist().add(ip);
        fail("Peer is banlisted forever: " + _aliceIdent.calculateHash());
        return;
      }
      if (ip != null)       _transport.setIP(_aliceIdent.calculateHash(),ip);
      if (_log.shouldLog(Log.DEBUG))       _log.debug(prefix() + "verification successful for " + _con);
      long diff=1000 * Math.abs(tsA - _tsB);
      if (!_context.clock().getUpdatedSuccessfully()) {
        _context.clock().setOffset(1000 * (_tsB - tsA),true);
        tsA=_tsB;
        if (diff != 0)         _log.logAlways(Log.WARN,"NTP failure, NTCP adjusting clock by " + DataHelper.formatDuration(diff));
      }
 else       if (diff >= Router.CLOCK_FUDGE_FACTOR) {
        _context.statManager().addRateData("ntcp.invalidInboundSkew",diff);
        _transport.markReachable(_aliceIdent.calculateHash(),true);
        _context.banlist().banlistRouter(DataHelper.formatDuration(diff),_aliceIdent.calculateHash(),_x("Excessive clock skew: {0}"));
        _transport.setLastBadSkew(tsA - _tsB);
        fail("Clocks too skewed (" + diff + " ms)",null,true);
        return;
      }
 else       if (_log.shouldLog(Log.DEBUG)) {
        _log.debug(prefix() + "Clock skew: " + diff+ " ms");
      }
      sendInboundConfirm(_aliceIdent,tsA);
      _con.setRemotePeer(_aliceIdent);
      if (_log.shouldLog(Log.DEBUG))       _log.debug(prefix() + "e_bobSig is " + _e_bobSig.length+ " bytes long");
      byte iv[]=_curEncrypted;
      System.arraycopy(_e_bobSig,_e_bobSig.length - AES_SIZE,iv,0,AES_SIZE);
      _con.finishInboundEstablishment(_dh.getSessionKey(),(tsA - _tsB),iv,_prevEncrypted);
      releaseBufs(true);
      if (_log.shouldLog(Log.INFO))       _log.info(prefix() + "Verified remote peer as " + _aliceIdent.calculateHash());
      changeState(State.VERIFIED);
    }
 else {
      _context.statManager().addRateData("ntcp.invalidInboundSignature",1);
      fail("Peer verification failed - spoof of " + _aliceIdent.calculateHash() + "?");
    }
  }
 catch (  IOException ioe) {
    _context.statManager().addRateData("ntcp.invalidInboundIOE",1);
    fail("Error verifying peer",ioe);
  }
}
