{
  ServerSocketChannel servChan=(ServerSocketChannel)key.attachment();
  try {
    SocketChannel chan=servChan.accept();
    if (chan == null)     return;
    chan.configureBlocking(false);
    if (!_transport.allowConnection()) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Receive session request but at connection limit: " + chan.socket().getInetAddress());
      try {
        chan.close();
      }
 catch (      IOException ioe) {
      }
      return;
    }
    byte[] ip=chan.socket().getInetAddress().getAddress();
    if (_context.blocklist().isBlocklisted(ip)) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Receive session request from blocklisted IP: " + chan.socket().getInetAddress());
      try {
        chan.close();
      }
 catch (      IOException ioe) {
      }
      return;
    }
    ByteArray ba=new ByteArray(ip);
    int count=_blockedIPs.count(ba);
    if (count > 0) {
      count=_blockedIPs.increment(ba);
      if (_log.shouldLog(Log.WARN))       _log.warn("Blocking accept of IP with count " + count + ": "+ Addresses.toString(ip));
      _context.statManager().addRateData("ntcp.dropInboundNoMessage",count);
      try {
        chan.close();
      }
 catch (      IOException ioe) {
      }
      return;
    }
    if (_context.commSystem().getReachabilityStatus() != CommSystemFacade.STATUS_OK)     chan.socket().setKeepAlive(true);
    SelectionKey ckey=chan.register(_selector,SelectionKey.OP_READ);
    new NTCPConnection(_context,_transport,chan,ckey);
  }
 catch (  IOException ioe) {
    _log.error("Error accepting",ioe);
  }
}
