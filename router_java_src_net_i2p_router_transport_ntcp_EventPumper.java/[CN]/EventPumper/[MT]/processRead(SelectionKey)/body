{
  NTCPConnection con=(NTCPConnection)key.attachment();
  ByteBuffer buf=acquireBuf();
  try {
    int read=con.getChannel().read(buf);
    if (read < 0) {
      if (con.isInbound() && con.getMessagesReceived() <= 0) {
        InetAddress addr=con.getChannel().socket().getInetAddress();
        int count;
        if (addr != null) {
          byte[] ip=addr.getAddress();
          ByteArray ba=new ByteArray(ip);
          count=_blockedIPs.increment(ba);
          if (_log.shouldLog(Log.WARN))           _log.warn("Blocking IP " + Addresses.toString(ip) + " with count "+ count+ ": "+ con);
        }
 else {
          count=1;
          if (_log.shouldLog(Log.WARN))           _log.warn("EOF on inbound before receiving any: " + con);
        }
        _context.statManager().addRateData("ntcp.dropInboundNoMessage",count);
      }
 else {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("EOF on " + con);
      }
      con.close();
      releaseBuf(buf);
    }
 else     if (read == 0) {
      releaseBuf(buf);
      int consec=con.gotZeroRead();
      if (consec >= 5) {
        _context.statManager().addRateData("ntcp.zeroReadDrop",1);
        if (_log.shouldLog(Log.WARN))         _log.warn("Fail safe zero read close " + con);
        con.close();
      }
 else {
        _context.statManager().addRateData("ntcp.zeroRead",consec);
        if (_log.shouldLog(Log.INFO))         _log.info("nothing to read for " + con + ", but stay interested");
      }
    }
 else {
      con.clearZeroRead();
      buf.flip();
      FIFOBandwidthLimiter.Request req=_context.bandwidthLimiter().requestInbound(read,"NTCP read");
      if (req.getPendingRequested() > 0) {
        key.interestOps(key.interestOps() & ~SelectionKey.OP_READ);
        _context.statManager().addRateData("ntcp.queuedRecv",read);
        con.queuedRecv(buf,req);
      }
 else {
        con.recv(buf);
        _context.statManager().addRateData("ntcp.read",read);
      }
    }
  }
 catch (  CancelledKeyException cke) {
    releaseBuf(buf);
    if (_log.shouldLog(Log.WARN))     _log.warn("error reading on " + con,cke);
    con.close();
    _context.statManager().addRateData("ntcp.readError",1);
  }
catch (  IOException ioe) {
    releaseBuf(buf);
    if (con.isInbound() && con.getMessagesReceived() <= 0) {
      InetAddress addr=con.getChannel().socket().getInetAddress();
      int count;
      if (addr != null) {
        byte[] ip=addr.getAddress();
        ByteArray ba=new ByteArray(ip);
        count=_blockedIPs.increment(ba);
        if (_log.shouldLog(Log.WARN))         _log.warn("Blocking IP " + Addresses.toString(ip) + " with count "+ count+ ": "+ con);
      }
 else {
        count=1;
        if (_log.shouldLog(Log.WARN))         _log.warn("IOE on inbound before receiving any: " + con);
      }
      _context.statManager().addRateData("ntcp.dropInboundNoMessage",count);
    }
 else {
      if (_log.shouldLog(Log.INFO))       _log.info("error reading on " + con,ioe);
    }
    if (con.isEstablished()) {
      _context.statManager().addRateData("ntcp.readError",1);
    }
 else {
      _context.statManager().addRateData("ntcp.connectFailedTimeoutIOE",1);
      RouterIdentity rem=con.getRemotePeer();
      if (rem != null && !con.isInbound())       _transport.markUnreachable(rem.calculateHash());
    }
    con.close();
  }
catch (  NotYetConnectedException nyce) {
    releaseBuf(buf);
    key.interestOps(key.interestOps() & ~SelectionKey.OP_READ);
    if (_log.shouldLog(Log.WARN))     _log.warn("error reading on " + con,nyce);
  }
}
