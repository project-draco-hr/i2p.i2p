{
  int loopCount=0;
  long lastFailsafeIteration=System.currentTimeMillis();
  while (_alive && _selector.isOpen()) {
    try {
      loopCount++;
      runDelayedEvents();
      try {
        int count=_selector.select(SELECTOR_LOOP_DELAY);
        if (count > 0) {
          Set<SelectionKey> selected=_selector.selectedKeys();
          processKeys(selected);
          selected.clear();
        }
      }
 catch (      ClosedSelectorException cse) {
        continue;
      }
catch (      IOException ioe) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Error selecting",ioe);
      }
      if (lastFailsafeIteration + FAILSAFE_ITERATION_FREQ < System.currentTimeMillis()) {
        lastFailsafeIteration=System.currentTimeMillis();
        try {
          Set<SelectionKey> all=_selector.keys();
          _context.statManager().addRateData("ntcp.pumperKeySetSize",all.size());
          _context.statManager().addRateData("ntcp.pumperLoopsPerSecond",loopCount / (FAILSAFE_ITERATION_FREQ / 1000));
          loopCount=0;
          int failsafeWrites=0;
          int failsafeCloses=0;
          int failsafeInvalid=0;
          if (_transport.haveCapacity())           _expireIdleWriteTime=Math.min(_expireIdleWriteTime + 1000,MAX_EXPIRE_IDLE_TIME);
 else           _expireIdleWriteTime=Math.max(_expireIdleWriteTime - 3000,MIN_EXPIRE_IDLE_TIME);
          for (          SelectionKey key : all) {
            try {
              Object att=key.attachment();
              if (!(att instanceof NTCPConnection))               continue;
              NTCPConnection con=(NTCPConnection)att;
              if ((!key.isValid()) && (!((SocketChannel)key.channel()).isConnectionPending()) && con.getTimeSinceCreated() > 2 * NTCPTransport.ESTABLISH_TIMEOUT) {
                if (_log.shouldLog(Log.INFO))                 _log.info("Removing invalid key for " + con);
                con.close();
                failsafeInvalid++;
                continue;
              }
              if ((!con.isWriteBufEmpty()) && ((key.interestOps() & SelectionKey.OP_WRITE) == 0)) {
                key.interestOps(SelectionKey.OP_WRITE | key.interestOps());
                failsafeWrites++;
              }
              if (con.getTimeSinceSend() > _expireIdleWriteTime && con.getTimeSinceReceive() > _expireIdleWriteTime) {
                con.close();
                failsafeCloses++;
              }
            }
 catch (            CancelledKeyException cke) {
            }
          }
          if (failsafeWrites > 0)           _context.statManager().addRateData("ntcp.failsafeWrites",failsafeWrites);
          if (failsafeCloses > 0)           _context.statManager().addRateData("ntcp.failsafeCloses",failsafeCloses);
          if (failsafeInvalid > 0)           _context.statManager().addRateData("ntcp.failsafeInvalid",failsafeInvalid);
        }
 catch (        ClosedSelectorException cse) {
          continue;
        }
      }
      boolean newUseDirect=_context.getBooleanProperty(PROP_DIRECT);
      if (_useDirect != newUseDirect) {
        _useDirect=newUseDirect;
        _bufCache.clear();
      }
    }
 catch (    RuntimeException re) {
      _log.error("Error in the event pumper",re);
    }
  }
  try {
    if (_selector.isOpen()) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Closing down the event pumper with selection keys remaining");
      Set<SelectionKey> keys=_selector.keys();
      for (      SelectionKey key : keys) {
        try {
          Object att=key.attachment();
          if (att instanceof ServerSocketChannel) {
            ServerSocketChannel chan=(ServerSocketChannel)att;
            chan.close();
            key.cancel();
          }
 else           if (att instanceof NTCPConnection) {
            NTCPConnection con=(NTCPConnection)att;
            con.close();
            key.cancel();
          }
        }
 catch (        Exception ke) {
          _log.error("Error closing key " + key + " on pumper shutdown",ke);
        }
      }
      _selector.close();
    }
 else {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Closing down the event pumper with no selection keys remaining");
    }
  }
 catch (  Exception e) {
    _log.error("Error closing keys on pumper shutdown",e);
  }
  _wantsConRegister.clear();
  _wantsRead.clear();
  _wantsRegister.clear();
  _wantsWrite.clear();
  _bufCache.clear();
}
