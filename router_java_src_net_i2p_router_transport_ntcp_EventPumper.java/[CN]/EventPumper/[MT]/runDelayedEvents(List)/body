{
synchronized (_wantsRead) {
    if (_wantsRead.size() > 0) {
      buf.addAll(_wantsRead);
      _wantsRead.clear();
    }
  }
  while (buf.size() > 0) {
    NTCPConnection con=(NTCPConnection)buf.remove(0);
    SelectionKey key=con.getKey();
    key.interestOps(key.interestOps() | SelectionKey.OP_READ);
  }
synchronized (_wantsWrite) {
    if (_wantsWrite.size() > 0) {
      buf.addAll(_wantsWrite);
      _wantsWrite.clear();
    }
  }
  while (buf.size() > 0) {
    NTCPConnection con=(NTCPConnection)buf.remove(0);
    SelectionKey key=con.getKey();
    try {
      key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);
    }
 catch (    CancelledKeyException cke) {
    }
  }
synchronized (_wantsRegister) {
    if (_wantsRegister.size() > 0) {
      buf.addAll(_wantsRegister);
      _wantsRegister.clear();
    }
  }
  while (buf.size() > 0) {
    ServerSocketChannel chan=(ServerSocketChannel)buf.remove(0);
    try {
      SelectionKey key=chan.register(_selector,SelectionKey.OP_ACCEPT);
      key.attach(chan);
    }
 catch (    ClosedChannelException cce) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Error registering",cce);
    }
  }
synchronized (_wantsConRegister) {
    if (_wantsConRegister.size() > 0) {
      buf.addAll(_wantsConRegister);
      _wantsConRegister.clear();
    }
  }
  while (buf.size() > 0) {
    NTCPConnection con=(NTCPConnection)buf.remove(0);
    try {
      SelectionKey key=con.getChannel().register(_selector,SelectionKey.OP_CONNECT);
      key.attach(con);
      con.setKey(key);
      try {
        NTCPAddress naddr=con.getRemoteAddress();
        if (naddr.getPort() <= 0)         throw new IOException("Invalid NTCP address: " + naddr);
        InetSocketAddress saddr=new InetSocketAddress(naddr.getHost(),naddr.getPort());
        boolean connected=con.getChannel().connect(saddr);
        if (connected) {
          _context.statManager().addRateData("ntcp.connectImmediate",1,0);
          key.interestOps(SelectionKey.OP_READ);
          processConnect(key);
        }
      }
 catch (      IOException ioe) {
        if (_log.shouldLog(Log.WARN))         _log.warn("error connecting",ioe);
        _context.statManager().addRateData("ntcp.connectFailedIOE",1,0);
        _transport.markUnreachable(con.getRemotePeer().calculateHash());
        con.close(true);
      }
catch (      UnresolvedAddressException uae) {
        if (_log.shouldLog(Log.WARN))         _log.warn("unresolved address connecting",uae);
        _context.statManager().addRateData("ntcp.connectFailedUnresolved",1,0);
        _transport.markUnreachable(con.getRemotePeer().calculateHash());
        con.close(true);
      }
    }
 catch (    ClosedChannelException cce) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Error registering",cce);
    }
  }
  long now=System.currentTimeMillis();
  if (_lastExpired + 1000 <= now) {
    expireTimedOut();
    _lastExpired=now;
  }
}
