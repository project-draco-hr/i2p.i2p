{
  _blocks++;
  int remaining=_dataRemaining.length - _dataRemainingIndex;
  int blockUsed=Math.min(buf.length,remaining);
  if (remaining > 0) {
    System.arraycopy(buf,0,_dataRemaining,_dataRemainingIndex,blockUsed);
    _dataRemainingIndex+=blockUsed;
    remaining-=blockUsed;
  }
  if ((remaining <= 0) && (buf.length - blockUsed < 4)) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("crc wraparound required on block " + _blocks + " in message "+ _messagesRead);
    _crc.update(buf);
    return;
  }
 else   if (remaining <= 0) {
    _expectedCrc=DataHelper.fromLong(buf,buf.length - 4,4);
    _crc.update(buf,0,buf.length - 4);
    long val=_crc.getValue();
    if (_log.shouldLog(Log.DEBUG))     _log.debug("CRC value computed: " + val + " expected: "+ _expectedCrc+ " size: "+ _size+ " remaining="+ remaining);
    if (val == _expectedCrc) {
      try {
        I2NPMessageHandler h=acquireHandler(_context);
        I2NPMessage read=null;
        if (false) {
          byte msg[]=new byte[_size];
          System.arraycopy(_dataBegin,0,msg,0,_dataBegin.length);
          System.arraycopy(_dataRemaining,0,msg,_dataBegin.length,_dataRemaining.length);
          read=h.readMessage(msg);
        }
 else {
          read=h.readMessage(new SequenceInputStream(new ByteArrayInputStream(_dataBegin),new ByteArrayInputStream(_dataRemaining)));
        }
        long timeToRecv=System.currentTimeMillis() - _stateBegin;
        releaseHandler(h);
        if (_log.shouldLog(Log.DEBUG))         _log.debug("I2NP message " + _messagesRead + "/"+ (read != null ? read.getUniqueId() : 0)+ " received after "+ timeToRecv+ " with "+ _size+ "/"+ (_blocks * 16)+ " bytes");
        _context.statManager().addRateData("ntcp.receiveTime",timeToRecv,timeToRecv);
        _context.statManager().addRateData("ntcp.receiveSize",_size,timeToRecv);
        if (read != null) {
          _transport.messageReceived(read,_remotePeer,null,timeToRecv,_size);
          if (_messagesRead <= 0)           enqueueInfoMessage();
          _lastReceiveTime=System.currentTimeMillis();
          _messagesRead++;
        }
      }
 catch (      IOException ioe) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Error parsing I2NP message",ioe);
        close();
        return;
      }
catch (      I2NPMessageException ime) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Error parsing I2NP message",ime);
        close();
        return;
      }
    }
 else {
      if (_log.shouldLog(Log.ERROR))       _log.error("CRC incorrect for message " + _messagesRead + " (calc="+ val+ " expected="+ _expectedCrc+ ") size="+ _size+ " remaining="+ remaining+ " blocks "+ _blocks);
      close();
      return;
    }
    _curReadState=null;
  }
 else {
    _crc.update(buf);
  }
}
