{
  if (_log.shouldLog(Log.DEBUG))   _log.debug("prepare next write w/ isInbound? " + _isInbound + " established? "+ _established);
  if (!_isInbound && !_established) {
    if (_establishState == null) {
      _establishState=new EstablishState(_context,_transport,this);
      _establishState.prepareOutbound();
    }
 else {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("prepare next write, but we have already prepared the first outbound and we are not yet established..." + toString());
    }
    return;
  }
  if (_nextMetaTime <= System.currentTimeMillis()) {
    sendMeta();
    _nextMetaTime=System.currentTimeMillis() + _context.random().nextInt(META_FREQUENCY);
  }
  OutNetMessage msg=null;
synchronized (_outbound) {
    if (_currentOutbound != null) {
      if (_log.shouldLog(Log.WARN))       _log.warn("attempt for multiple outbound messages with " + System.identityHashCode(_currentOutbound) + " already waiting and "+ _outbound.size()+ " queued");
      return;
    }
    if (_outbound.size() > 0) {
      msg=(OutNetMessage)_outbound.remove(0);
      _currentOutbound=msg;
    }
 else {
      return;
    }
  }
  msg.beginTransmission();
  msg.beginPrepare();
  long begin=System.currentTimeMillis();
  I2NPMessage m=msg.getMessage();
  int sz=m.getMessageSize();
  int min=2 + sz + 4;
  int rem=min % 16;
  int padding=0;
  if (rem > 0)   padding=16 - rem;
  byte unencrypted[]=new byte[min + padding];
  byte base[]=m.toByteArray();
  DataHelper.toLong(unencrypted,0,2,sz);
  System.arraycopy(base,0,unencrypted,2,base.length);
  if (padding > 0) {
    byte pad[]=new byte[padding];
    _context.random().nextBytes(pad);
    System.arraycopy(pad,0,unencrypted,2 + sz,padding);
  }
  long serialized=System.currentTimeMillis();
  Adler32 crc=new Adler32();
  crc.reset();
  crc.update(unencrypted,0,unencrypted.length - 4);
  long val=crc.getValue();
  DataHelper.toLong(unencrypted,unencrypted.length - 4,4,val);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Outbound message " + _messagesWritten + " has crc "+ val);
  long crced=System.currentTimeMillis();
  byte encrypted[]=new byte[unencrypted.length];
  _context.aes().encrypt(unencrypted,0,encrypted,0,_sessionKey,_prevWriteEnd,0,unencrypted.length);
  System.arraycopy(encrypted,encrypted.length - 16,_prevWriteEnd,0,_prevWriteEnd.length);
  long encryptedTime=System.currentTimeMillis();
  msg.prepared();
  if (_log.shouldLog(Log.DEBUG)) {
    _log.debug("prepared outbound " + System.identityHashCode(msg) + " serialize="+ (serialized - begin)+ " crc="+ (crced - serialized)+ " encrypted="+ (encryptedTime - crced)+ " prepared="+ (encryptedTime - begin));
  }
  _transport.getPumper().wantsWrite(this,encrypted);
}
