{
  if (_curReadBlockIndex == 0 && buf.hasArray()) {
    int tot=buf.remaining();
    if (tot >= 32 && tot % 16 == 0) {
      recvEncryptedFast(buf);
      return;
    }
  }
  while (buf.hasRemaining() && !_closed.get()) {
    int want=Math.min(buf.remaining(),BLOCK_SIZE - _curReadBlockIndex);
    if (want > 0) {
      buf.get(_curReadBlock,_curReadBlockIndex,want);
      _curReadBlockIndex+=want;
    }
    if (_curReadBlockIndex >= BLOCK_SIZE) {
      _context.aes().decryptBlock(_curReadBlock,0,_sessionKey,_decryptBlockBuf,0);
      for (int i=0; i < BLOCK_SIZE; i++) {
        _decryptBlockBuf[i]^=_prevReadBlock[i];
      }
      boolean ok=recvUnencryptedI2NP();
      if (!ok) {
        _log.error("Read buffer " + System.identityHashCode(buf) + " contained corrupt data");
        _context.statManager().addRateData("ntcp.corruptDecryptedI2NP",1);
        return;
      }
      byte swap[]=_prevReadBlock;
      _prevReadBlock=_curReadBlock;
      _curReadBlock=swap;
      _curReadBlockIndex=0;
    }
  }
}
