{
  super(ctx);
  _log=ctx.logManager().getLog(getClass());
  _context.statManager().createRateStat("ntcp.sendTime","Total message lifetime when sent completely","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.transmitTime","How long after message preparation before the message was fully sent","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.sendQueueSize","How many messages were ahead of the current one on the connection's queue when it was first added","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.receiveTime","How long it takes to receive an inbound message","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.receiveSize","How large the received message was","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.sendBacklogTime","How long the head of the send queue has been waiting when we fail to add a new one to the queue (period is the number of messages queued)","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.failsafeWrites","How many times do we need to proactively add in an extra nio write to a peer at any given failsafe pass?","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.failsafeCloses","How many times do we need to proactively close an idle connection to a peer at any given failsafe pass?","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.accept","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.attemptShitlistedPeer","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.attemptUnreachablePeer","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.closeOnBacklog","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.connectFailedIOE","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.connectFailedInvalidPort","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.bidRejectedNoNTCPAddress","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.connectFailedTimeout","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.connectFailedTimeoutIOE","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.connectFailedUnresolved","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.connectImmediate","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.connectSuccessful","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.corruptDecryptedI2NP","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.corruptI2NPCRC","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.corruptI2NPIME","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.corruptI2NPIOE","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.corruptMetaCRC","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.corruptSkew","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.corruptTooLargeI2NP","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.dontSendOnBacklog","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.inboundCheckConnection","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.inboundEstablished","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.inboundEstablishedDuplicate","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.infoMessageEnqueued","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.invalidDH","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.invalidHXY","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.invalidHXxorBIH","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.invalidInboundDFE","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.invalidInboundIOE","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.invalidInboundSignature","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.invalidInboundSize","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.invalidInboundSkew","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.invalidSignature","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.liveReadBufs","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.multipleCloseOnRemove","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.outboundEstablishFailed","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.outboundFailedIOEImmediate","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.invalidOutboundSkew","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.prepBufCache","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.queuedRecv","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.read","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.readEOF","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.readError","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.receiveCorruptEstablishment","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.receiveMeta","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.registerConnect","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.throttledReadComplete","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.throttledWriteComplete","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.wantsQueuedWrite","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.write","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("ntcp.writeError","","ntcp",new long[]{60 * 1000,10 * 60 * 1000});
  _establishing=new ArrayList(4);
  _conLock=new Object();
  _conByIdent=new HashMap(64);
  _sent=new ArrayList(4);
  _finisher=new SendFinisher();
  _pumper=new EventPumper(ctx,this);
  _reader=new Reader(ctx);
  _writer=new net.i2p.router.transport.ntcp.Writer(ctx);
  _fastBid=new SharedBid(25);
  _slowBid=new SharedBid(70);
}
