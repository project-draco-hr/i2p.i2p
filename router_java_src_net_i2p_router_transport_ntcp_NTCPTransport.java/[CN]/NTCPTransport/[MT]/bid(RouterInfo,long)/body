{
  if (!isAlive())   return null;
  if (dataSize > NTCPConnection.MAX_MSG_SIZE) {
    _context.statManager().addRateData("ntcp.noBidTooLargeI2NP",dataSize);
    return null;
  }
  Hash peer=toAddress.getIdentity().calculateHash();
  if (_context.banlist().isBanlisted(peer,STYLE)) {
    _context.statManager().addRateData("ntcp.attemptBanlistedPeer",1);
    return null;
  }
 else   if (isUnreachable(peer)) {
    _context.statManager().addRateData("ntcp.attemptUnreachablePeer",1);
    return null;
  }
  boolean established=isEstablished(toAddress.getIdentity());
  if (established) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("fast bid when trying to send to " + peer + " as its already established");
    return _fastBid;
  }
  RouterAddress addr=getTargetAddress(toAddress);
  if (addr == null) {
    markUnreachable(peer);
    return null;
  }
  if (!allowConnection()) {
    if (_log.shouldLog(Log.WARN))     _log.warn("no bid when trying to send to " + peer + ", max connection limit reached");
    return _transientFail;
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("slow bid when trying to send to " + peer);
  if (haveCapacity()) {
    if (addr.getCost() > NTCPAddress.DEFAULT_COST)     return _slowCostBid;
 else     return _slowBid;
  }
 else {
    if (addr.getCost() > NTCPAddress.DEFAULT_COST)     return _nearCapacityCostBid;
 else     return _nearCapacityBid;
  }
}
