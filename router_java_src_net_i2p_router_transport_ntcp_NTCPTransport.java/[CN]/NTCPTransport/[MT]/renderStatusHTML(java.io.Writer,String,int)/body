{
  TreeSet peers=new TreeSet(getComparator(sortFlags));
synchronized (_conLock) {
    peers.addAll(_conByIdent.values());
  }
  long offsetTotal=0;
  int bpsIn=0;
  int bpsOut=0;
  long uptimeMsTotal=0;
  long sendTotal=0;
  long recvTotal=0;
  int numPeers=0;
  float bpsSend=0;
  float bpsRecv=0;
  long totalUptime=0;
  long totalSend=0;
  long totalRecv=0;
  StringBuffer buf=new StringBuffer(512);
  buf.append("<p><b id=\"ntcpcon\">NTCP connections: ").append(peers.size());
  buf.append(" limit: ").append(getMaxConnections());
  buf.append(" timeout: ").append(DataHelper.formatDuration(_pumper.getIdleTimeout()));
  buf.append("</b><br />\n");
  buf.append("<table border=\"1\">\n");
  buf.append(" <tr><td><b><a href=\"#def.peer\">peer</a></b></td>");
  buf.append("     <td><b>dir</b></td>");
  buf.append("     <td align=\"right\"><b><a href=\"#def.idle\">idle</a></b></td>");
  buf.append("     <td align=\"right\"><b><a href=\"#def.rate\">in/out</a></b></td>");
  buf.append("     <td align=\"right\"><b><a href=\"#def.up\">up</a></b></td>");
  buf.append("     <td align=\"right\"><b><a href=\"#def.skew\">skew</a></b></td>");
  buf.append("     <td align=\"right\"><b><a href=\"#def.send\">send</a></b></td>");
  buf.append("     <td align=\"right\"><b><a href=\"#def.recv\">recv</a></b></td>");
  buf.append("     <td><b>out queue</b></td>");
  buf.append("     <td><b>backlogged?</b></td>");
  buf.append("     <td><b>reading?</b></td>");
  buf.append(" </tr>\n");
  out.write(buf.toString());
  buf.setLength(0);
  for (Iterator iter=peers.iterator(); iter.hasNext(); ) {
    NTCPConnection con=(NTCPConnection)iter.next();
    buf.append("<tr><td>");
    buf.append(_context.commSystem().renderPeerHTML(con.getRemotePeer().calculateHash()));
    buf.append("</code></td><td align=\"center\"><code>");
    if (con.isInbound())     buf.append("in");
 else     buf.append("out");
    buf.append("</code></td><td align=\"right\"><code>");
    buf.append(con.getTimeSinceReceive() / 1000);
    buf.append("s/").append(con.getTimeSinceSend() / 1000);
    buf.append("s</code></td><td align=\"right\"><code>");
    if (con.getTimeSinceReceive() < 10 * 1000) {
      buf.append(formatRate(con.getRecvRate() / 1024));
      bpsRecv+=con.getRecvRate();
    }
 else {
      buf.append(formatRate(0));
    }
    buf.append("/");
    if (con.getTimeSinceSend() < 10 * 1000) {
      buf.append(formatRate(con.getSendRate() / 1024));
      bpsSend+=con.getSendRate();
    }
 else {
      buf.append(formatRate(0));
    }
    buf.append("KBps");
    buf.append("</code></td><td align=\"right\"><code>").append(DataHelper.formatDuration(con.getUptime()));
    totalUptime+=con.getUptime();
    offsetTotal=offsetTotal + con.getClockSkew();
    buf.append("</code></td><td align=\"right\"><code>").append(con.getClockSkew());
    buf.append("s</code></td><td align=\"right\"><code>").append(con.getMessagesSent());
    totalSend+=con.getMessagesSent();
    buf.append("</code></td><td align=\"right\"><code>").append(con.getMessagesReceived());
    totalRecv+=con.getMessagesReceived();
    long outQueue=con.getOutboundQueueSize();
    if (outQueue <= 0) {
      buf.append("</code></td><td align=\"right\"><code>No messages");
    }
 else {
      buf.append("</code></td><td align=\"right\"><code>").append(outQueue).append(" message");
      if (outQueue > 1)       buf.append("s");
    }
    buf.append("</code></td><td align=\"center\"><code>").append(con.getConsecutiveBacklog() > 0 ? "true" : "false");
    long readTime=con.getReadTime();
    if (readTime <= 0) {
      buf.append("</code></td><td align=\"center\"><code>No");
    }
 else {
      buf.append("</code></td><td><code>For ").append(DataHelper.formatDuration(readTime));
    }
    buf.append("</code></td></tr>\n");
    out.write(buf.toString());
    buf.setLength(0);
  }
  if (peers.size() > 0) {
    buf.append("<tr><td colspan=\"11\"><hr /></td></tr>\n");
    buf.append("<tr><td>").append(peers.size()).append(" peers</td><td>&nbsp;</td><td>&nbsp;");
    buf.append("</td><td align=\"right\">").append(formatRate(bpsRecv / 1024)).append("/").append(formatRate(bpsSend / 1024)).append("KBps");
    buf.append("</td><td align=\"right\">").append(DataHelper.formatDuration(totalUptime / peers.size()));
    buf.append("</td><td align=\"right\">").append(peers.size() > 0 ? DataHelper.formatDuration(offsetTotal * 1000 / peers.size()) : "0ms");
    buf.append("</td><td align=\"right\">").append(totalSend).append("</td><td align=\"right\">").append(totalRecv);
    buf.append("</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;");
    buf.append("</td></tr>\n");
  }
  buf.append("</table></p>\n");
  out.write(buf.toString());
  buf.setLength(0);
}
