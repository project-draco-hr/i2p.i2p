{
  TreeSet peers=new TreeSet(getComparator(sortFlags));
synchronized (_conLock) {
    peers.addAll(_conByIdent.values());
  }
  long offsetTotal=0;
  int bpsIn=0;
  int bpsOut=0;
  long uptimeMsTotal=0;
  long sendTotal=0;
  long recvTotal=0;
  int numPeers=0;
  float bpsSend=0;
  float bpsRecv=0;
  long totalUptime=0;
  long totalSend=0;
  long totalRecv=0;
  StringBuilder buf=new StringBuilder(512);
  buf.append("<h3 id=\"ntcpcon\">NTCP connections: ").append(peers.size());
  buf.append(". Limit: ").append(getMaxConnections());
  buf.append(". Timeout: ").append(DataHelper.formatDuration(_pumper.getIdleTimeout()));
  buf.append(".</h3>\n" + "<div class=\"wideload\"><table>\n" + "<tr><th><a href=\"#def.peer\">Peer</a></th>"+ "<th>Dir</th>"+ "<th align=\"right\"><a href=\"#def.idle\">Idle</a></th>"+ "<th align=\"right\"><a href=\"#def.rate\">In/Out</a></th>"+ "<th align=\"right\"><a href=\"#def.up\">Up</a></th>"+ "<th align=\"right\"><a href=\"#def.skew\">Skew</a></th>"+ "<th align=\"right\"><a href=\"#def.send\">TX</a></th>"+ "<th align=\"right\"><a href=\"#def.recv\">RX</a></th>"+ "<th>Out queue</th>"+ "<th>Backlogged?</th>"+ "<th>Reading?</th>"+ " </tr>\n");
  out.write(buf.toString());
  buf.setLength(0);
  for (Iterator iter=peers.iterator(); iter.hasNext(); ) {
    NTCPConnection con=(NTCPConnection)iter.next();
    buf.append("<tr> <td class=\"cells\" align=\"left\" nowrap>");
    buf.append(_context.commSystem().renderPeerHTML(con.getRemotePeer().calculateHash()));
    buf.append("</td> <td class=\"cells\" align=\"center\">");
    if (con.isInbound())     buf.append("<img src=\"/themes/console/images/inbound.png\" alt=\"Inbound\" title=\"Inbound\"/>");
 else     buf.append("<img src=\"/themes/console/images/outbound.png\" alt=\"Outbound\" title=\"Outbound\"/>");
    buf.append("</td> <td class=\"cells\" align=\"right\">");
    buf.append(con.getTimeSinceReceive() / 1000);
    buf.append("s/").append(con.getTimeSinceSend() / 1000);
    buf.append("s</td> <td class=\"cells\" align=\"center\">");
    if (con.getTimeSinceReceive() < 10 * 1000) {
      buf.append(formatRate(con.getRecvRate() / 1024));
      bpsRecv+=con.getRecvRate();
    }
 else {
      buf.append(formatRate(0));
    }
    buf.append("/");
    if (con.getTimeSinceSend() < 10 * 1000) {
      buf.append(formatRate(con.getSendRate() / 1024));
      bpsSend+=con.getSendRate();
    }
 else {
      buf.append(formatRate(0));
    }
    buf.append("K/s");
    buf.append("</td> <td class=\"cells\" align=\"center\">").append(DataHelper.formatDuration(con.getUptime()));
    totalUptime+=con.getUptime();
    offsetTotal=offsetTotal + con.getClockSkew();
    buf.append("</td> <td class=\"cells\" align=\"center\">").append(con.getClockSkew());
    buf.append("s</td> <td class=\"cells\" align=\"center\">").append(con.getMessagesSent());
    totalSend+=con.getMessagesSent();
    buf.append("</td> <td class=\"cells\" align=\"center\">").append(con.getMessagesReceived());
    totalRecv+=con.getMessagesReceived();
    long outQueue=con.getOutboundQueueSize();
    if (outQueue <= 0) {
      buf.append("</td> <td class=\"cells\" align=\"center\">No messages");
    }
 else {
      buf.append("</td> <td class=\"cells\" align=\"center\">").append(outQueue).append(" message");
      if (outQueue > 1)       buf.append("s");
    }
    buf.append("</td> <td class=\"cells\" align=\"center\">").append(con.getConsecutiveBacklog() > 0 ? "true" : "false");
    long readTime=con.getReadTime();
    if (readTime <= 0) {
      buf.append("</td> <td class=\"cells\" align=\"center\">No");
    }
 else {
      buf.append("</td> <td class=\"cells\">For ").append(DataHelper.formatDuration(readTime));
    }
    buf.append("</td></tr>\n");
    out.write(buf.toString());
    buf.setLength(0);
  }
  if (peers.size() > 0) {
    buf.append("<tr class=\"tablefooter\"> <td align=\"center\"><b>").append(peers.size()).append(" peers</b></td> <td>&nbsp;</td> <td>&nbsp;");
    buf.append("</td> <td align=\"center\"><b>").append(formatRate(bpsRecv / 1024)).append("/").append(formatRate(bpsSend / 1024)).append("K/s</b>");
    buf.append("</td> <td align=\"center\"><b>").append(DataHelper.formatDuration(totalUptime / peers.size()));
    buf.append("</b></td> <td align=\"center\"><b>").append(peers.size() > 0 ? DataHelper.formatDuration(offsetTotal * 1000 / peers.size()) : "0ms");
    buf.append("</b></td> <td align=\"center\"><b>").append(totalSend).append("</b></td> <td align=\"center\"><b>").append(totalRecv);
    buf.append("</b></td> <td>&nbsp;</td> <td>&nbsp;</td> <td>&nbsp;" + "</td></tr>\n");
  }
  buf.append("</table></div>\n");
  out.write(buf.toString());
  buf.setLength(0);
}
