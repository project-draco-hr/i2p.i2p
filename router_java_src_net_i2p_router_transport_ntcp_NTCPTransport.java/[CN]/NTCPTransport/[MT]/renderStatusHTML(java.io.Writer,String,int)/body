{
  TreeSet peers=new TreeSet(getComparator(sortFlags));
synchronized (_conLock) {
    peers.addAll(_conByIdent.values());
  }
  long offsetTotal=0;
  int bpsIn=0;
  int bpsOut=0;
  long uptimeMsTotal=0;
  long sendTotal=0;
  long recvTotal=0;
  int numPeers=0;
  float bpsSend=0;
  float bpsRecv=0;
  long totalUptime=0;
  long totalSend=0;
  long totalRecv=0;
  StringBuilder buf=new StringBuilder(512);
  buf.append("<div class=\"wideload\"><h3 id=\"ntcpcon\">").append(_("NTCP connections")).append(": ").append(peers.size());
  buf.append(". ").append(_("Limit")).append(": ").append(getMaxConnections());
  buf.append(". ").append(_("Timeout")).append(": ").append(DataHelper.formatDuration(_pumper.getIdleTimeout()));
  buf.append(".</h3>\n" + "<table>\n" + "<tr><th><a href=\"#def.peer\">").append(_("Peer")).append("</a></th>" + "<th>").append(_("Dir")).append("</th>" + "<th align=\"right\"><a href=\"#def.idle\">").append(_("Idle")).append("</a></th>" + "<th align=\"right\"><a href=\"#def.rate\">").append(_("In/Out")).append("</a></th>" + "<th align=\"right\"><a href=\"#def.up\">").append(_("Up")).append("</a></th>" + "<th align=\"right\"><a href=\"#def.skew\">").append(_("Skew")).append("</a></th>" + "<th align=\"right\"><a href=\"#def.send\">").append(_("TX")).append("</a></th>" + "<th align=\"right\"><a href=\"#def.recv\">").append(_("RX")).append("</a></th>" + "<th>").append(_("Out Queue")).append("</th>" + "<th>").append(_("Backlogged?")).append("</th>" + " </tr>\n");
  out.write(buf.toString());
  buf.setLength(0);
  for (Iterator iter=peers.iterator(); iter.hasNext(); ) {
    NTCPConnection con=(NTCPConnection)iter.next();
    buf.append("<tr><td class=\"cells\" align=\"left\" nowrap>");
    buf.append(_context.commSystem().renderPeerHTML(con.getRemotePeer().calculateHash()));
    buf.append("</td><td class=\"cells\" align=\"center\">");
    if (con.isInbound())     buf.append("<img src=\"/themes/console/images/inbound.png\" alt=\"Inbound\" title=\"").append(_("Inbound")).append("\"/>");
 else     buf.append("<img src=\"/themes/console/images/outbound.png\" alt=\"Outbound\" title=\"").append(_("Outbound")).append("\"/>");
    buf.append("</td><td class=\"cells\" align=\"right\">");
    buf.append(con.getTimeSinceReceive() / 1000);
    buf.append("s / ").append(con.getTimeSinceSend() / 1000);
    buf.append("s</td><td class=\"cells\" align=\"right\">");
    if (con.getTimeSinceReceive() < 10 * 1000) {
      buf.append(formatRate(con.getRecvRate() / 1024));
      bpsRecv+=con.getRecvRate();
    }
 else {
      buf.append(formatRate(0));
    }
    buf.append(" / ");
    if (con.getTimeSinceSend() < 10 * 1000) {
      buf.append(formatRate(con.getSendRate() / 1024));
      bpsSend+=con.getSendRate();
    }
 else {
      buf.append(formatRate(0));
    }
    buf.append("</td><td class=\"cells\" align=\"right\">").append(DataHelper.formatDuration(con.getUptime()));
    totalUptime+=con.getUptime();
    offsetTotal=offsetTotal + con.getClockSkew();
    buf.append("</td><td class=\"cells\" align=\"right\">").append(con.getClockSkew());
    buf.append("s</td><td class=\"cells\" align=\"right\">").append(con.getMessagesSent());
    totalSend+=con.getMessagesSent();
    buf.append("</td><td class=\"cells\" align=\"right\">").append(con.getMessagesReceived());
    totalRecv+=con.getMessagesReceived();
    long outQueue=con.getOutboundQueueSize();
    buf.append("</td><td class=\"cells\" align=\"center\">").append(outQueue);
    buf.append("</td><td class=\"cells\" align=\"center\">");
    if (con.getConsecutiveBacklog() > 0)     buf.append("&#x2713;");
 else     buf.append("&nbsp;");
    buf.append("</td></tr>\n");
    out.write(buf.toString());
    buf.setLength(0);
  }
  if (peers.size() > 0) {
    buf.append("<tr class=\"tablefooter\"><td align=\"center\"><b>").append(peers.size()).append(' ').append(_("peers")).append("</b></td><td>&nbsp;</td><td>&nbsp;");
    buf.append("</td><td align=\"center\"><b>").append(formatRate(bpsRecv / 1024)).append("/").append(formatRate(bpsSend / 1024)).append("</b>");
    buf.append("</td><td align=\"center\"><b>").append(DataHelper.formatDuration(totalUptime / peers.size()));
    buf.append("</b></td><td align=\"center\"><b>").append(peers.size() > 0 ? DataHelper.formatDuration(offsetTotal * 1000 / peers.size()) : "0ms");
    buf.append("</b></td><td align=\"center\"><b>").append(totalSend).append("</b></td><td align=\"center\"><b>").append(totalRecv);
    buf.append("</b></td><td>&nbsp;</td><td>&nbsp;</td></tr>\n");
  }
  buf.append("</table>\n");
  out.write(buf.toString());
  buf.setLength(0);
}
