{
  _log.debug("Beginning registration");
  ByteArrayOutputStream baos=new ByteArrayOutputStream(512);
  try {
    DataHelper.writeDate(baos,new Date(_context.clock().now()));
    _context.router().getRouterInfo().getIdentity().writeBytes(baos);
    int postLength=baos.size();
    _context.bandwidthLimiter().delayOutbound(null,postLength + 512,false);
    _context.bandwidthLimiter().delayInbound(null,2048 + 512);
    long now=_context.clock().now();
    _log.debug("Before opening " + _myRegisterURL);
    URL url=new URL(_myRegisterURL);
    HttpURLConnection con=(HttpURLConnection)url.openConnection();
    con.setRequestMethod("POST");
    con.setUseCaches(false);
    con.setDoOutput(true);
    con.setDoInput(true);
    con.setRequestProperty("Content-length","" + postLength);
    baos.writeTo(con.getOutputStream());
    _log.debug("Data sent, before reading");
    con.connect();
    BufferedReader reader=new BufferedReader(new InputStreamReader(con.getInputStream()));
    String line=null;
    String stat=null;
    boolean ok=false;
    while ((line=reader.readLine()) != null) {
      if (line.startsWith(PROP_SEND_URL)) {
        _mySendURL=line.substring(PROP_SEND_URL.length() + 1).trim();
      }
 else       if (line.startsWith(PROP_POLL_URL)) {
        _myPollURL=line.substring(PROP_POLL_URL.length() + 1).trim();
      }
 else       if (line.startsWith(PROP_STATUS)) {
        stat=line.substring(PROP_STATUS.length() + 1).trim();
        if (STATUS_REGISTERED.equals(stat.toLowerCase()))         ok=true;
      }
 else       if (line.startsWith(PROP_TIME_OFFSET)) {
        String offset=line.substring(PROP_TIME_OFFSET.length() + 1).trim();
        try {
          _timeOffset=Long.parseLong(offset);
        }
 catch (        Throwable t) {
          _log.warn("Unable to parse time offset [" + offset + "] - treating as MAX");
          _timeOffset=Long.MAX_VALUE;
        }
      }
      if ((_myPollURL != null) && (_mySendURL != null) && (stat != null))       break;
    }
    if (_trustTime) {
      _log.info("Setting time offset to " + _timeOffset + " (old offset: "+ _context.clock().getOffset()+ ")");
      _context.clock().setOffset(_timeOffset);
    }
    if (ok) {
      _log.info("Registered with the PHTTP relay [" + _myRegisterURL + "]");
      _log.info("Registered sending url: [" + _mySendURL + "]");
      _log.info("Registered polling url: [" + _myPollURL + "]");
      return true;
    }
 else {
      _log.warn("PHTTP relay [" + _myRegisterURL + "] rejected registration");
    }
  }
 catch (  Throwable t) {
    _log.warn("Error registering",t);
  }
  return false;
}
