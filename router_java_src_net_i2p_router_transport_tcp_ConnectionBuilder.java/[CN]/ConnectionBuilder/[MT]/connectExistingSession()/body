{
  byte data[]=new byte[36];
  System.arraycopy(_connectionTag.getData(),0,data,0,32);
  System.arraycopy(_nonce.getData(),0,data,32,4);
  Hash h=_context.sha().calculateHash(data);
  _iv=new byte[16];
  System.arraycopy(h.getData(),0,_iv,0,16);
  updateNextTagExisting();
  _rawOut=new BufferedOutputStream(_rawOut,ConnectionBuilder.WRITE_BUFFER_SIZE);
  _rawOut=new AESOutputStream(_context,_rawOut,_key,_iv);
  _rawIn=new AESInputStream(_context,_rawIn,_key,_iv);
  try {
    h=_context.sha().calculateHash(_nonce.getData());
    h.writeBytes(_rawOut);
    _rawOut.flush();
  }
 catch (  IOException ioe) {
    fail("Error writing the encrypted nonce to " + _target.getIdentity().calculateHash().toBase64().substring(0,6) + ": "+ ioe.getMessage());
    return false;
  }
catch (  DataFormatException dfe) {
    fail("Error writing the encrypted nonce to " + _target.getIdentity().calculateHash().toBase64().substring(0,6) + ": "+ dfe.getMessage());
    return false;
  }
  try {
    Hash readHash=new Hash();
    readHash.readBytes(_rawIn);
    Hash expectedHash=_context.sha().calculateHash(_connectionTag.getData());
    if (!readHash.equals(expectedHash)) {
      fail("Key verification failed with " + _target.getIdentity().calculateHash().toBase64().substring(0,6));
      return false;
    }
  }
 catch (  IOException ioe) {
    fail("Error reading the initial key verification from " + _target.getIdentity().calculateHash().toBase64().substring(0,6) + ": "+ ioe.getMessage());
    return false;
  }
catch (  DataFormatException dfe) {
    fail("Error reading the initial key verification from " + _target.getIdentity().calculateHash().toBase64().substring(0,6) + ": "+ dfe.getMessage());
    return false;
  }
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream(512);
    _context.router().getRouterInfo().writeBytes(baos);
    DataHelper.writeDate(baos,new Date(_context.clock().now()));
    _rawOut.write(baos.toByteArray());
    baos.write(_nonce.getData());
    baos.write(_connectionTag.getData());
    Hash verification=_context.sha().calculateHash(baos.toByteArray());
    verification.writeBytes(_rawOut);
    _rawOut.flush();
  }
 catch (  IOException ioe) {
    fail("Error writing the verified info to " + _target.getIdentity().calculateHash().toBase64().substring(0,6) + ": "+ ioe.getMessage());
    return false;
  }
catch (  DataFormatException dfe) {
    fail("Error writing the verified info to " + _target.getIdentity().calculateHash().toBase64().substring(0,6) + ": "+ dfe.getMessage());
    return false;
  }
  try {
    RouterInfo peer=new RouterInfo();
    peer.readBytes(_rawIn);
    int status=(int)_rawIn.read() & 0xFF;
    Properties props=DataHelper.readProperties(_rawIn);
    boolean ok=validateStatus(status,props);
    if (!ok)     return false;
    Hash readHash=new Hash();
    readHash.readBytes(_rawIn);
    ByteArrayOutputStream baos=new ByteArrayOutputStream(512);
    peer.writeBytes(baos);
    baos.write(status);
    DataHelper.writeProperties(baos,props);
    baos.write(_nonce.getData());
    baos.write(_connectionTag.getData());
    Hash expectedHash=_context.sha().calculateHash(baos.toByteArray());
    if (!expectedHash.equals(readHash)) {
      fail("Error verifying info from " + _target.getIdentity().calculateHash().toBase64().substring(0,6) + " (claiming to be "+ peer.getIdentity().calculateHash().toBase64().substring(0,6)+ ")");
      return false;
    }
    _actualPeer=peer;
    try {
      _context.netDb().store(peer.getIdentity().getHash(),peer);
      return true;
    }
 catch (    IllegalArgumentException iae) {
      fail("Peer sent us bad info - " + _target.getIdentity().getHash().toBase64().substring(0,6) + ": "+ iae.getMessage());
      return false;
    }
  }
 catch (  IOException ioe) {
    fail("Error reading the verified info from " + _target.getIdentity().calculateHash().toBase64().substring(0,6) + ": "+ ioe.getMessage());
    return false;
  }
catch (  DataFormatException dfe) {
    fail("Error reading the verified info from " + _target.getIdentity().calculateHash().toBase64().substring(0,6) + ": "+ dfe.getMessage());
    return false;
  }
}
