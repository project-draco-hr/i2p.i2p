{
  try {
    int numBytes=(int)DataHelper.readLong(_rawIn,2);
    if ((numBytes <= 0) || (numBytes >= 0xFFFF))     throw new IOException("Invalid number of bytes in response");
    byte line[]=new byte[numBytes];
    int read=DataHelper.read(_rawIn,line);
    if (read != numBytes) {
      fail("Handshake too short with " + _target.getIdentity().calculateHash().toBase64().substring(0,6));
      return false;
    }
    if (_log.shouldLog(Log.DEBUG))     _log.debug("ReadProtocol1[X]: " + "\nLine: " + Base64.encode(line));
    ByteArrayInputStream bais=new ByteArrayInputStream(line);
    int version=(int)DataHelper.readLong(bais,1);
    for (int i=0; i < TCPTransport.SUPPORTED_PROTOCOLS.length; i++) {
      if (version == TCPTransport.SUPPORTED_PROTOCOLS[i]) {
        _agreedProtocol=version;
        break;
      }
    }
    if (_agreedProtocol == -1) {
      fail("No valid protocol versions to contact " + _target.getIdentity().calculateHash().toBase64().substring(0,6));
      return false;
    }
    int bytesInIP=(int)DataHelper.readLong(bais,1);
    byte ip[]=new byte[bytesInIP];
    DataHelper.read(bais,ip);
    _localIP=new String(ip);
    _transport.ourAddressReceived(_localIP);
    int tagOk=(int)DataHelper.readLong(bais,1);
    if ((tagOk == 0x01) && (_connectionTag != null)) {
    }
 else {
      _connectionTag=null;
      _key=null;
    }
    byte nonce[]=new byte[4];
    read=DataHelper.read(bais,nonce);
    if (read != 4) {
      fail("No nonce specified by " + _target.getIdentity().calculateHash().toBase64().substring(0,6));
      return false;
    }
    _nonce=new ByteArray(nonce);
    Properties opts=DataHelper.readProperties(bais);
    if (_log.shouldLog(Log.DEBUG))     _log.debug("ReadProtocol[X]: agreed=" + _agreedProtocol + " nonce: "+ Base64.encode(nonce)+ " tag: "+ (_connectionTag != null ? Base64.encode(_connectionTag.getData()) : "none")+ " props: "+ opts+ " socket: "+ _socket+ "\nLine: "+ Base64.encode(line));
    return true;
  }
 catch (  IOException ioe) {
    fail("Error reading the handshake from " + _target.getIdentity().calculateHash().toBase64().substring(0,6) + ": "+ ioe.getMessage(),ioe);
    return false;
  }
catch (  DataFormatException dfe) {
    fail("Error reading the handshake from " + _target.getIdentity().calculateHash().toBase64().substring(0,6) + ": "+ dfe.getMessage(),dfe);
    return false;
  }
}
