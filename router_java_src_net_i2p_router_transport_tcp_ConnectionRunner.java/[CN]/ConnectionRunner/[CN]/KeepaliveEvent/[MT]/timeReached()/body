{
  if (!_keepRunning)   return;
  if (_con.getIsClosed())   return;
  long now=_context.clock().now();
  long timeSinceWrite=now - _lastWriteEnd;
  long timeSinceWriteBegin=now - _lastWriteBegin;
  long timeSinceWriteReal=now - _lastRealActivity;
  if (timeSinceWrite > 5 * TIME_SEND_FREQUENCY) {
    TCPTransport t=_con.getTransport();
    String msg="Connection closed with " + _con.getRemoteRouterIdentity().getHash().toBase64().substring(0,6) + " due to "+ DataHelper.formatDuration(timeSinceWrite)+ " of inactivity after "+ DataHelper.formatDuration(_con.getLifetime());
    if (_lastWriteBegin > _lastWriteEnd)     msg=msg + " with a message being written for " + DataHelper.formatDuration(timeSinceWriteBegin);
    t.addConnectionErrorMessage(msg);
    if (_log.shouldLog(Log.INFO))     _log.info(msg);
    _con.closeConnection(false);
    return;
  }
  if (timeSinceWriteReal > DISCONNECT_INACTIVITY_PERIOD) {
    TCPTransport t=_con.getTransport();
    String msg="Connection closed with " + _con.getRemoteRouterIdentity().getHash().toBase64().substring(0,6) + " due to "+ DataHelper.formatDuration(timeSinceWriteReal)+ " of inactivity after "+ DataHelper.formatDuration(_con.getLifetime());
    if (_lastWriteBegin > _lastWriteEnd)     msg=msg + " with a message being written for " + DataHelper.formatDuration(timeSinceWriteBegin);
    t.addConnectionErrorMessage(msg);
    if (_log.shouldLog(Log.INFO))     _log.info(msg);
    _con.closeConnection(false);
    return;
  }
  if (_lastTimeSend < _context.clock().now() - 2 * TIME_SEND_FREQUENCY)   enqueueTimeMessage();
  long delay=2 * TIME_SEND_FREQUENCY + _context.random().nextInt((int)TIME_SEND_FREQUENCY);
  SimpleTimer.getInstance().addEvent(KeepaliveEvent.this,delay);
}
