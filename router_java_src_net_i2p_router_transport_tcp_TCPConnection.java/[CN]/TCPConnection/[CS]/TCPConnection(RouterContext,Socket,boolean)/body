{
  _context=context;
  _log=context.logManager().getLog(TCPConnection.class);
  _context.statManager().createRateStat("tcp.queueSize","How many messages were already in the queue when a new message was added (only when it wasnt empty)?","TCP Transport",new long[]{60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  _context.statManager().createRateStat("tcp.writeTimeLarge","How long it takes to write a message that is over 2K?","TCP Transport",new long[]{60 * 1000l,10 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  _context.statManager().createRateStat("tcp.writeTimeSmall","How long it takes to write a message that is under 2K?","TCP Transport",new long[]{60 * 1000l,10 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  _context.statManager().createRateStat("tcp.writeTimeSlow","How long it takes to write a message (ignoring messages transferring in under a second)?","TCP Transport",new long[]{60 * 1000l,10 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  _id=++_idCounter;
  _weInitiated=locallyInitiated;
  _closed=false;
  _socket=s;
  _created=-1;
  _toBeSent=new ArrayList();
  try {
    _in=_socket.getInputStream();
    _out=_socket.getOutputStream();
  }
 catch (  IOException ioe) {
    _log.error("Error getting streams for the connection",ioe);
  }
  _builder=new DHSessionKeyBuilder();
  _extraBytes=null;
  try {
    InetAddress addr=s.getInetAddress();
    if (addr != null) {
      _remoteHost=addr.getHostAddress();
    }
    _remotePort=s.getPort();
    if (locallyInitiated)     _remoteAddress=new TCPAddress(_remoteHost,_remotePort);
  }
 catch (  NullPointerException npe) {
    throw new IOException("kaffe is being picky since the socket closed too fast...");
  }
  if (_log.shouldLog(Log.INFO))   _log.info("Connected with peer: " + _remoteHost + ":"+ _remotePort);
}
