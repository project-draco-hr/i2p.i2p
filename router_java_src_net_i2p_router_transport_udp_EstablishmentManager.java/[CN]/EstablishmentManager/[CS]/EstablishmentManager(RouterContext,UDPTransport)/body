{
  _context=ctx;
  _log=ctx.logManager().getLog(EstablishmentManager.class);
  _transport=transport;
  _builder=new PacketBuilder(ctx,transport);
  _inboundStates=new ConcurrentHashMap();
  _outboundStates=new ConcurrentHashMap();
  _queuedOutbound=new ConcurrentHashMap();
  _liveIntroductions=new ConcurrentHashMap();
  _activityLock=new Object();
  _context.statManager().createRateStat("udp.inboundEstablishTime","How long it takes for a new inbound session to be established","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.outboundEstablishTime","How long it takes for a new outbound session to be established","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.inboundEstablishFailedState","What state a failed inbound establishment request fails in","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.outboundEstablishFailedState","What state a failed outbound establishment request fails in","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendIntroRelayRequest","How often we send a relay request to reach a peer","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendIntroRelayTimeout","How often a relay request times out before getting a response (due to the target or intro peer being offline)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.receiveIntroRelayResponse","How long it took to receive a relay response","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.establishDropped","Dropped an inbound establish message","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.establishRejected","How many pending outbound connections are there when we refuse to add any more?","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.establishOverflow","How many messages were queued up on a pending connection when it was too much?","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.congestionOccurred","How large the cwin was when congestion occurred (duration == sendBps)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.congestedRTO","retransmission timeout after congestion (duration == rtt dev)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendACKPartial","Number of partial ACKs sent (duration == number of full ACKs in that ack packet)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendBps","How fast we are transmitting when a packet is acked","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.receiveBps","How fast we are receiving when a packet is fully received (at most one per second)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.mtuIncrease","How many retransmissions have there been to the peer when the MTU was increased (period is total packets transmitted)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.mtuDecrease","How many retransmissions have there been to the peer when the MTU was decreased (period is total packets transmitted)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.rejectConcurrentActive","How many messages are currently being sent to the peer when we reject it (period is how many concurrent packets we allow)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.allowConcurrentActive","How many messages are currently being sent to the peer when we accept it (period is how many concurrent packets we allow)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.rejectConcurrentSequence","How many consecutive concurrency rejections have we had when we stop rejecting (period is how many concurrent packets we are on)","udp",UDPTransport.RATES);
}
