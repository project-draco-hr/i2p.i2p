{
  if (state.complete()) {
    RouterIdentity rem=state.getRemoteIdentity();
    if (rem != null)     return _transport.getPeerState(rem.getHash());
  }
  long now=_context.clock().now();
  RouterIdentity remote=state.getRemoteIdentity();
  RemoteHostId claimed=state.getClaimedAddress();
  if (claimed != null)   _outboundByClaimedAddress.remove(claimed,state);
  _outboundByHash.remove(remote.calculateHash(),state);
  PeerState peer=new PeerState(_context,_transport,state.getSentIP(),state.getSentPort(),remote.calculateHash(),false);
  peer.setCurrentCipherKey(state.getCipherKey());
  peer.setCurrentMACKey(state.getMACKey());
  peer.setTheyRelayToUsAs(state.getReceivedRelayTag());
  int mtu=state.getRemoteAddress().getMTU();
  if (mtu > 0)   peer.setHisMTU(mtu);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Handle completely established (outbound): " + state + " - "+ peer.getRemotePeer());
  _transport.addRemotePeerState(peer);
  _transport.setIP(remote.calculateHash(),state.getSentIP());
  _context.statManager().addRateData("udp.outboundEstablishTime",state.getLifetime(),0);
  DatabaseStoreMessage dbsm=null;
  if (!state.isFirstMessageOurDSM()) {
    dbsm=getOurInfo();
  }
 else   if (_log.shouldLog(Log.INFO)) {
    _log.info("Skipping publish: " + state);
  }
  List<OutNetMessage> msgs=new ArrayList<OutNetMessage>(8);
  OutNetMessage msg;
  while ((msg=state.getNextQueuedMessage()) != null) {
    if (now - Router.CLOCK_FUDGE_FACTOR > msg.getExpiration()) {
      msg.timestamp("took too long but established...");
      _transport.failed(msg,"Took too long to establish, but it was established");
    }
 else {
      msg.timestamp("session fully established and sent");
      msgs.add(msg);
    }
  }
  _transport.send(dbsm,msgs,peer);
  return peer;
}
