{
  _context=ctx;
  _log=ctx.logManager().getLog(InboundMessageFragments.class);
  _inboundMessages=new HashMap(64);
  _unsentACKs=new ArrayList(64);
  _completeMessages=new ArrayList(64);
  _outbound=outbound;
  _transport=transport;
  _context.statManager().createRateStat("udp.receivedCompleteTime","How long it takes to receive a full message","udp",new long[]{60 * 1000,10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("udp.receivedCompleteFragments","How many fragments go in a fully received message","udp",new long[]{60 * 1000,10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("udp.receivedACKs","How many messages were ACKed at a time","udp",new long[]{60 * 1000,10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("udp.ignoreRecentDuplicate","Take note that we received a packet for a recently completed message","udp",new long[]{60 * 1000,10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("udp.receiveMessagePeriod","How long it takes to pull the message fragments out of a packet","udp",new long[]{60 * 1000,10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("udp.receiveACKPeriod","How long it takes to pull the ACKs out of a packet","udp",new long[]{60 * 1000,10 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _stateLock=this;
}
