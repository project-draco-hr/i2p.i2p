{
  int rv=0;
  boolean newAck=false;
  if (data.readACKsIncluded()) {
    int ackCount=data.readACKCount();
    if (ackCount > 0) {
      rv+=ackCount;
      _context.statManager().addRateData("udp.receivedACKs",ackCount);
      for (int i=0; i < ackCount; i++) {
        long id=data.readACK(i);
        if (from.acked(id)) {
          if (_log.shouldLog(Log.DEBUG))           _log.debug("First full ACK of message " + id + " received from "+ from.getRemotePeer());
          newAck=true;
        }
      }
    }
 else {
      _log.error("Received ACKs with no acks?! " + data);
    }
  }
  if (data.readACKBitfieldsIncluded()) {
    ACKBitfield bitfields[]=data.readACKBitfields();
    if (bitfields != null) {
      rv+=bitfields.length;
      for (int i=0; i < bitfields.length; i++) {
        if (from.acked(bitfields[i])) {
          if (_log.shouldLog(Log.DEBUG))           _log.debug("Final partial ACK received: " + bitfields[i] + " from "+ from.getRemotePeer());
          newAck=true;
        }
 else         if (_log.shouldLog(Log.DEBUG)) {
          _log.debug("Partial ACK received: " + bitfields[i] + " from "+ from.getRemotePeer());
        }
      }
    }
  }
  if (data.readECN())   from.ECNReceived();
 else   from.dataReceived();
  if (newAck && from.getOutboundMessageCount() > 0)   _outbound.add(from);
  return rv;
}
