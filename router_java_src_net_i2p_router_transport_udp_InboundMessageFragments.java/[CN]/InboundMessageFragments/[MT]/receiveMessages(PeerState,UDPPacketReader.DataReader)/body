{
  int fragments=data.readFragmentCount();
  if (fragments <= 0)   return fragments;
  Hash fromPeer=from.getRemotePeer();
  Map<Long,InboundMessageState> messages=from.getInboundMessages();
  for (int i=0; i < fragments; i++) {
    long mid=data.readMessageId(i);
    Long messageId=Long.valueOf(mid);
    if (_recentlyCompletedMessages.isKnown(mid)) {
      if (data.readMessageFragmentNum(i) == 0) {
        _context.statManager().addRateData("udp.ignoreRecentDuplicate",1);
        from.messageFullyReceived(messageId,-1);
        _ackSender.ackPeer(from);
        if (_log.shouldLog(Log.INFO))         _log.info("Message received is a dup: " + mid + " dups: "+ _recentlyCompletedMessages.getCurrentDuplicateCount()+ " out of "+ _recentlyCompletedMessages.getInsertedCount());
        _context.messageHistory().droppedInboundMessage(mid,from.getRemotePeer(),"dup");
      }
      continue;
    }
    int size=data.readMessageFragmentSize(i);
    InboundMessageState state=null;
    boolean messageComplete=false;
    boolean messageExpired=false;
    boolean fragmentOK=false;
    boolean partialACK=false;
synchronized (messages) {
      boolean isNew=false;
      state=messages.get(messageId);
      if (state == null) {
        state=new InboundMessageState(_context,mid,fromPeer);
        isNew=true;
      }
      fragmentOK=state.receiveFragment(data,i);
      if (state.isComplete()) {
        messageComplete=true;
        if (!isNew)         messages.remove(messageId);
      }
 else       if (state.isExpired()) {
        messageExpired=true;
        if (!isNew)         messages.remove(messageId);
      }
 else {
        partialACK=true;
        if (isNew)         messages.put(messageId,state);
      }
    }
    if (messageComplete) {
      _recentlyCompletedMessages.add(mid);
      from.messageFullyReceived(messageId,state.getCompleteSize());
      _ackSender.ackPeer(from);
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Message received completely!  " + state);
      _context.statManager().addRateData("udp.receivedCompleteTime",state.getLifetime(),state.getLifetime());
      if (state.getFragmentCount() > 0)       _context.statManager().addRateData("udp.receivedCompleteFragments",state.getFragmentCount(),state.getLifetime());
      _messageReceiver.receiveMessage(state);
    }
 else     if (messageExpired) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Message expired while only being partially read: " + state);
      _context.messageHistory().droppedInboundMessage(state.getMessageId(),state.getFrom(),"expired while partially read: " + state.toString());
      state.releaseResources();
    }
 else     if (partialACK) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Queueing up a partial ACK for peer: " + from + " for "+ state);
      from.messagePartiallyReceived();
      _ackSender.ackPeer(from);
    }
    if (!fragmentOK)     break;
  }
  from.expireInboundMessages();
  return fragments;
}
