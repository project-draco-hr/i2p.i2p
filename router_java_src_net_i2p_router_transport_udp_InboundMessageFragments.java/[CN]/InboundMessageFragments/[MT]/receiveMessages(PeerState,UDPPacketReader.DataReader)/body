{
  int fragments=data.readFragmentCount();
  if (fragments <= 0)   return;
synchronized (_inboundMessages) {
    Map messages=(Map)_inboundMessages.get(from.getRemotePeer());
    if (messages == null) {
      messages=new HashMap(fragments);
      _inboundMessages.put(from.getRemotePeer(),messages);
    }
    for (int i=0; i < fragments; i++) {
      Long messageId=new Long(data.readMessageId(i));
      if (_recentlyCompletedMessages.isKnown(messageId.longValue())) {
        _context.statManager().addRateData("udp.ignoreRecentDuplicate",1,0);
        from.messageFullyReceived(messageId,-1);
        _ackSender.ackPeer(from);
        if (_log.shouldLog(Log.WARN))         _log.warn("Message received is a dup: " + messageId + " dups: "+ _recentlyCompletedMessages.getCurrentDuplicateCount()+ " out of "+ _recentlyCompletedMessages.getInsertedCount());
        continue;
      }
      int size=data.readMessageFragmentSize(i);
      InboundMessageState state=null;
      boolean messageComplete=false;
      boolean messageExpired=false;
      boolean fragmentOK=false;
      state=(InboundMessageState)messages.get(messageId);
      if (state == null) {
        state=new InboundMessageState(_context,messageId.longValue(),from.getRemotePeer());
        messages.put(messageId,state);
      }
      fragmentOK=state.receiveFragment(data,i);
      if (state.isComplete()) {
        messageComplete=true;
        messages.remove(messageId);
        if (messages.size() <= 0)         _inboundMessages.remove(from.getRemotePeer());
        _recentlyCompletedMessages.add(messageId.longValue());
        _messageReceiver.receiveMessage(state);
        from.messageFullyReceived(messageId,state.getCompleteSize());
        _ackSender.ackPeer(from);
        if (_log.shouldLog(Log.INFO))         _log.info("Message received completely!  " + state);
        _context.statManager().addRateData("udp.receivedCompleteTime",state.getLifetime(),state.getLifetime());
        _context.statManager().addRateData("udp.receivedCompleteFragments",state.getFragmentCount(),state.getLifetime());
      }
 else       if (state.isExpired()) {
        messageExpired=true;
        messages.remove(messageId);
        if (messages.size() <= 0)         _inboundMessages.remove(from.getRemotePeer());
        if (_log.shouldLog(Log.WARN))         _log.warn("Message expired while only being partially read: " + state);
        state.releaseResources();
      }
      if (!fragmentOK)       break;
    }
  }
}
