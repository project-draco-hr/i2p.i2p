{
  int start=_context.random().nextInt(Integer.MAX_VALUE);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Picking inbound out of " + _inbound.size());
  if (_inbound.isEmpty())   return 0;
  List<PeerState> peers=new ArrayList<PeerState>(_inbound);
  int sz=peers.size();
  start=start % sz;
  int found=0;
  long inactivityCutoff=_context.clock().now() - (UDPTransport.EXPIRE_TIMEOUT / 2);
  if (sz <= howMany + 2)   inactivityCutoff-=UDPTransport.EXPIRE_TIMEOUT / 4;
  for (int i=0; i < sz && found < howMany; i++) {
    PeerState cur=peers.get((start + i) % sz);
    RouterInfo ri=_context.netDb().lookupRouterInfoLocally(cur.getRemotePeer());
    if (ri == null) {
      if (_log.shouldLog(Log.INFO))       _log.info("Picked peer has no local routerInfo: " + cur);
      continue;
    }
    RouterAddress ra=_transport.getTargetAddress(ri);
    if (ra == null) {
      if (_log.shouldLog(Log.INFO))       _log.info("Picked peer has no SSU address: " + ri);
      continue;
    }
    if (_context.banlist().isBanlisted(cur.getRemotePeer()) || _transport.wasUnreachable(cur.getRemotePeer())) {
      if (_log.shouldLog(Log.INFO))       _log.info("Peer is failing, shistlisted or was unreachable: " + cur);
      continue;
    }
    if (cur.getLastReceiveTime() < inactivityCutoff && cur.getLastSendTime() < inactivityCutoff) {
      if (_log.shouldLog(Log.INFO))       _log.info("Peer is idle too long: " + cur);
      continue;
    }
    byte[] ip=cur.getRemoteIP();
    int port=cur.getRemotePort();
    if (!isValid(ip,port))     continue;
    if (_log.shouldLog(Log.INFO))     _log.info("Picking introducer: " + cur);
    cur.setIntroducerTime();
    UDPAddress ura=new UDPAddress(ra);
    byte[] ikey=ura.getIntroKey();
    if (ikey == null)     continue;
    ssuOptions.setProperty(UDPAddress.PROP_INTRO_HOST_PREFIX + found,Addresses.toString(ip));
    ssuOptions.setProperty(UDPAddress.PROP_INTRO_PORT_PREFIX + found,String.valueOf(port));
    ssuOptions.setProperty(UDPAddress.PROP_INTRO_KEY_PREFIX + found,Base64.encode(ikey));
    ssuOptions.setProperty(UDPAddress.PROP_INTRO_TAG_PREFIX + found,String.valueOf(cur.getTheyRelayToUsAs()));
    found++;
  }
  pingIntroducers();
  return found;
}
