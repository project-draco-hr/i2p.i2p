{
  List peers=null;
  int start=_context.random().nextInt(Integer.MAX_VALUE);
synchronized (_inbound) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Picking inbound out of " + _inbound);
    if (_inbound.size() <= 0)     return 0;
    peers=new ArrayList(_inbound);
  }
  int sz=peers.size();
  start=start % sz;
  int found=0;
  for (int i=0; i < sz && found < howMany; i++) {
    PeerState cur=(PeerState)peers.get((start + i) % sz);
    RouterInfo ri=_context.netDb().lookupRouterInfoLocally(cur.getRemotePeer());
    if (ri == null) {
      if (_log.shouldLog(Log.INFO))       _log.info("Picked peer has no local routerInfo: " + cur);
      continue;
    }
    RouterAddress ra=ri.getTargetAddress(UDPTransport.STYLE);
    if (ra == null) {
      if (_log.shouldLog(Log.INFO))       _log.info("Picked peer has no SSU address: " + ri);
      continue;
    }
    UDPAddress ura=new UDPAddress(ra);
    ssuOptions.setProperty(UDPAddress.PROP_INTRO_HOST_PREFIX + found,cur.getRemoteHostId().toHostString());
    ssuOptions.setProperty(UDPAddress.PROP_INTRO_PORT_PREFIX + found,String.valueOf(cur.getRemotePort()));
    ssuOptions.setProperty(UDPAddress.PROP_INTRO_KEY_PREFIX + found,Base64.encode(ura.getIntroKey()));
    ssuOptions.setProperty(UDPAddress.PROP_INTRO_TAG_PREFIX + found,String.valueOf(cur.getTheyRelayToUsAs()));
    found++;
  }
  return found;
}
