{
  if (_context.router().isHidden())   return;
  _context.statManager().addRateData("udp.receiveRelayIntro",1,0);
  if (!_transport.allowConnection()) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Dropping RelayIntro, over conn limit");
    return;
  }
  int ipSize=reader.getRelayIntroReader().readIPSize();
  byte ip[]=new byte[ipSize];
  reader.getRelayIntroReader().readIP(ip,0);
  int port=reader.getRelayIntroReader().readPort();
  if (_log.shouldLog(Log.INFO))   _log.info("Receive relay intro from " + bob + " for "+ Addresses.toString(ip,port));
  InetAddress to=null;
  try {
    if (!_transport.isValid(ip))     throw new UnknownHostException("non-public IP");
    if (port <= 0 || port > 65535)     throw new UnknownHostException("bad port " + port);
    to=InetAddress.getByAddress(ip);
  }
 catch (  UnknownHostException uhe) {
    if (_log.shouldLog(Log.WARN))     _log.warn("IP for alice to hole punch to is invalid",uhe);
    return;
  }
  RemoteHostId alice=new RemoteHostId(ip,port);
  if (_transport.getPeerState(alice) != null) {
    if (_log.shouldLog(Log.INFO))     _log.info("Ignoring RelayIntro, already have a session to " + to);
    return;
  }
  EstablishmentManager establisher=_transport.getEstablisher();
  if (establisher != null) {
    if (establisher.getInboundState(alice) != null) {
      if (_log.shouldLog(Log.INFO))       _log.info("Ignoring RelayIntro, establishment in progress to " + to);
      return;
    }
    if (!establisher.shouldAllowInboundEstablishment()) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Dropping RelayIntro, too many establishments in progress - for " + to);
      return;
    }
  }
  boolean tooMany=false;
  boolean already=false;
synchronized (_recentHolePunches) {
    long now=_context.clock().now();
    if (now > _lastHolePunchClean + PUNCH_CLEAN_TIME) {
      _recentHolePunches.clear();
      _lastHolePunchClean=now;
      _recentHolePunches.add(to);
    }
 else {
      tooMany=_recentHolePunches.size() >= MAX_PUNCHES;
      if (!tooMany)       already=!_recentHolePunches.add(to);
    }
  }
  if (tooMany) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Dropping - too many - RelayIntro for " + to);
    return;
  }
  if (already) {
    if (_log.shouldLog(Log.INFO))     _log.info("Ignoring dup RelayIntro for " + to);
    return;
  }
  _transport.send(_builder.buildHolePunch(to,port));
}
