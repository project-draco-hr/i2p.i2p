{
  InboundMessageState message=null;
  ByteArray buf=_cache.acquire();
  while (_alive) {
    int expired=0;
    long expiredLifetime=0;
    int remaining=0;
    try {
synchronized (_completeMessages) {
        while (message == null) {
          if (_completeMessages.size() > 0)           message=(InboundMessageState)_completeMessages.remove(_completeMessages.size() - 1);
 else           _completeMessages.wait(5000);
          if ((message != null) && (message.isExpired())) {
            expiredLifetime+=message.getLifetime();
            message=null;
            expired++;
          }
          remaining=_completeMessages.size();
        }
      }
    }
 catch (    InterruptedException ie) {
    }
    if (expired > 0)     _context.statManager().addRateData("udp.inboundExpired",expired,expiredLifetime);
    if (message != null) {
      long before=System.currentTimeMillis();
      if (remaining > 0)       _context.statManager().addRateData("udp.inboundRemaining",remaining,0);
      int size=message.getCompleteSize();
      if (_log.shouldLog(Log.INFO))       _log.info("Full message received (" + message.getMessageId() + ") after "+ message.getLifetime());
      I2NPMessage msg=readMessage(buf,message,handler);
      long afterRead=System.currentTimeMillis();
      if (msg != null)       _transport.messageReceived(msg,null,message.getFrom(),message.getLifetime(),size);
      message=null;
      long after=System.currentTimeMillis();
      if (afterRead - before > 100)       _context.statManager().addRateData("udp.inboundReadTime",afterRead - before,remaining);
      if (after - afterRead > 100)       _context.statManager().addRateData("udp.inboundReceiveProcessTime",after - afterRead,remaining);
    }
  }
  _cache.release(buf,false);
}
