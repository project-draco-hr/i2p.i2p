{
  _context=ctx;
  _log=ctx.logManager().getLog(OutboundMessageFragments.class);
  _transport=transport;
  _activePeers=new ConcurrentHashSet(256);
  _builder=new PacketBuilder(ctx,transport);
  _alive=true;
  _context.statManager().createRateStat("udp.sendVolleyTime","Long it takes to send a full volley","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendConfirmTime","How long it takes to send a message and get the ACK","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendConfirmFragments","How many fragments are included in a fully ACKed message","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendConfirmVolley","How many times did fragments need to be sent before ACK","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendFailed","How many sends a failed message was pushed","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendAggressiveFailed","How many volleys was a packet sent before we gave up","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.outboundActiveCount","How many messages are in the peer's active pool","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.outboundActivePeers","How many peers we are actively sending to","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendRejected","What volley are we on when the peer was throttled","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.partialACKReceived","How many fragments were partially ACKed","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendSparse","How many fragments were partially ACKed and hence not resent (time == message lifetime)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendPiggyback","How many acks were piggybacked on a data packet (time == message lifetime)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendPiggybackPartial","How many partial acks were piggybacked on a data packet (time == message lifetime)","udp",UDPTransport.RATES);
  _context.statManager().createRequiredRateStat("udp.packetsRetransmitted","Lifetime of packets during retransmission (ms)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.peerPacketsRetransmitted","How many packets have been retransmitted to the peer (lifetime) when a burst of packets are retransmitted (period == packets transmitted, lifetime)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.blockedRetransmissions","How packets have been transmitted to the peer when we blocked a retransmission to them?","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendCycleTime","How long it takes to cycle through all of the active messages?","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendCycleTimeSlow","How long it takes to cycle through all of the active messages, when its going slowly?","udp",UDPTransport.RATES);
}
