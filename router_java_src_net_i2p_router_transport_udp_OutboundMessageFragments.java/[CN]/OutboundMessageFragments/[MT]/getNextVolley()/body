{
  PeerState peer=null;
  OutboundMessageState state=null;
  int peersProcessed=0;
  while (_alive && (state == null)) {
    int nextSendDelay=-1;
    if (_iterator == null || ((!_activePeers.isEmpty()) && (!_iterator.hasNext()))) {
      _iterator=_activePeers.iterator();
    }
    while (_iterator.hasNext()) {
      peer=_iterator.next();
      int remaining=peer.finishMessages();
      if (remaining <= 0) {
        _iterator.remove();
        if (_log.shouldLog(Log.DEBUG))         _log.debug("No more pending messages for " + peer.getRemotePeer().toBase64());
        continue;
      }
      peersProcessed++;
      state=peer.allocateSend();
      if (state != null) {
        break;
      }
 else       if (peersProcessed >= _activePeers.size()) {
        break;
      }
 else {
        int delay=peer.getNextDelay();
        if ((nextSendDelay <= 0) || (delay < nextSendDelay))         nextSendDelay=delay;
        peer=null;
      }
    }
    if (peer != null && _log.shouldLog(Log.DEBUG))     _log.debug("Done looping, next peer we are sending for: " + peer.getRemotePeer().toBase64());
    if (state == null && peersProcessed >= _activePeers.size()) {
      peersProcessed=0;
      if (_log.shouldLog(Log.DEBUG))       _log.debug("wait for " + nextSendDelay);
      _isWaiting=true;
synchronized (_activePeers) {
        try {
          if (nextSendDelay > 0)           _activePeers.wait(Math.min(Math.max(nextSendDelay,10),MAX_WAIT));
 else           _activePeers.wait(MAX_WAIT);
        }
 catch (        InterruptedException ie) {
          if (_log.shouldLog(Log.DEBUG))           _log.debug("Woken up while waiting");
        }
      }
      _isWaiting=false;
    }
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Sending " + state);
  UDPPacket packets[]=preparePackets(state,peer);
  return packets;
}
