{
  PeerState peer=null;
  OutboundMessageState state=null;
  while (_alive && (state == null)) {
    long now=_context.clock().now();
    int nextSendDelay=-1;
    try {
synchronized (_activePeers) {
        for (int i=0; i < _activePeers.size(); i++) {
          int cur=(i + _nextPeer) % _activePeers.size();
          if (cur == 0) {
            long ts=System.currentTimeMillis();
            long cycleTime=ts - _lastCycleTime;
            _context.statManager().addRateData("udp.sendCycleTime",cycleTime,_activePeers.size());
            if (cycleTime > 1000)             _context.statManager().addRateData("udp.sendCycleTimeSlow",cycleTime,_activePeers.size());
          }
          peer=(PeerState)_activePeers.get(i);
          state=peer.allocateSend();
          if (state != null) {
            _nextPeer=i + 1;
            break;
          }
 else {
            int delay=peer.getNextDelay();
            if ((nextSendDelay <= 0) || (delay < nextSendDelay))             nextSendDelay=delay;
            peer=null;
            state=null;
          }
        }
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Done looping, next peer we are sending for: " + (peer != null ? peer.getRemotePeer().toBase64() : "none"));
        if (state == null) {
          if (_log.shouldLog(Log.DEBUG))           _log.debug("wait for " + nextSendDelay);
          if (nextSendDelay > 0)           _activePeers.wait(nextSendDelay);
 else           _activePeers.wait(1000);
        }
 else {
          if (_log.shouldLog(Log.DEBUG))           _log.debug("dont wait: alive=" + _alive + " state = "+ state);
        }
      }
    }
 catch (    InterruptedException ie) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Woken up while waiting");
    }
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Sending " + state);
  UDPPacket packets[]=preparePackets(state,peer);
  if ((state != null) && (state.getMessage() != null)) {
    int valid=0;
    for (int i=0; packets != null && i < packets.length; i++)     if (packets[i] != null)     valid++;
    state.getMessage().timestamp("sending a volley of " + valid + " lastReceived: "+ (_context.clock().now() - peer.getLastReceiveTime())+ " lastSentFully: "+ (_context.clock().now() - peer.getLastSendFullyTime()));
  }
  return packets;
}
