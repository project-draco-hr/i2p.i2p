{
  long before=System.currentTimeMillis();
  int encryptOffset=packet.getPacket().getOffset() + UDPPacket.IV_SIZE + UDPPacket.MAC_SIZE;
  int encryptSize=packet.getPacket().getLength() - UDPPacket.IV_SIZE - UDPPacket.MAC_SIZE- packet.getPacket().getOffset();
  byte data[]=packet.getPacket().getData();
  _context.aes().encrypt(data,encryptOffset,data,encryptOffset,cipherKey,iv,encryptSize);
  int off=packet.getPacket().getOffset();
  System.arraycopy(data,encryptOffset,data,off,encryptSize);
  off+=encryptSize;
  System.arraycopy(iv,0,data,off,UDPPacket.IV_SIZE);
  off+=UDPPacket.IV_SIZE;
  DataHelper.toLong(data,off,2,encryptSize);
  int hmacOff=packet.getPacket().getOffset();
  int hmacLen=encryptSize + UDPPacket.IV_SIZE + 2;
  byte[] ba=SimpleByteCache.acquire(Hash.HASH_LENGTH);
  _context.hmac().calculate(macKey,data,hmacOff,hmacLen,ba,0);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Authenticating " + packet.getPacket().getLength() + "\nIV: "+ Base64.encode(iv)+ "\nraw mac: "+ Base64.encode(ba)+ "\nMAC key: "+ macKey);
  System.arraycopy(data,hmacOff,data,encryptOffset,encryptSize);
  System.arraycopy(ba,0,data,hmacOff,UDPPacket.MAC_SIZE);
  System.arraycopy(iv,0,data,hmacOff + UDPPacket.MAC_SIZE,UDPPacket.IV_SIZE);
  SimpleByteCache.release(ba);
  long timeToAuth=System.currentTimeMillis() - before;
  _context.statManager().addRateData("udp.packetAuthTime",timeToAuth,timeToAuth);
  if (timeToAuth > 100)   _context.statManager().addRateData("udp.packetAuthTimeSlow",timeToAuth,timeToAuth);
}
