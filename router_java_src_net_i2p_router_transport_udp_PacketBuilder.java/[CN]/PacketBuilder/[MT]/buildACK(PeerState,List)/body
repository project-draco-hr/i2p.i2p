{
  UDPPacket packet=UDPPacket.acquire(_context);
  byte data[]=packet.getPacket().getData();
  Arrays.fill(data,0,data.length,(byte)0x0);
  int off=UDPPacket.MAC_SIZE + UDPPacket.IV_SIZE;
  data[off]|=(UDPPacket.PAYLOAD_TYPE_DATA << 4);
  off++;
  long now=_context.clock().now() / 1000;
  DataHelper.toLong(data,off,4,now);
  off+=4;
  data[off]|=UDPPacket.DATA_FLAG_EXPLICIT_ACK;
  off++;
  DataHelper.toLong(data,off,1,ackedMessageIds.size());
  off++;
  for (int i=0; i < ackedMessageIds.size(); i++) {
    Long id=(Long)ackedMessageIds.get(i);
    DataHelper.toLong(data,off,4,id.longValue());
    off+=4;
  }
  DataHelper.toLong(data,off,1,0);
  off++;
  if ((off % 16) != 0)   off+=16 - (off % 16);
  packet.getPacket().setLength(off);
  authenticate(packet,peer.getCurrentCipherKey(),peer.getCurrentMACKey());
  setTo(packet,peer.getRemoteIP(),peer.getRemotePort());
  return packet;
}
