{
  UDPPacket packet=UDPPacket.acquire(_context);
  byte data[]=packet.getPacket().getData();
  Arrays.fill(data,0,data.length,(byte)0x0);
  int off=UDPPacket.MAC_SIZE + UDPPacket.IV_SIZE;
  data[off]|=(UDPPacket.PAYLOAD_TYPE_DATA << 4);
  off++;
  long now=_context.clock().now() / 1000;
  DataHelper.toLong(data,off,4,now);
  off+=4;
  data[off]|=UDPPacket.DATA_FLAG_WANT_REPLY;
  off++;
  DataHelper.toLong(data,off,1,1);
  off++;
  DataHelper.toLong(data,off,4,state.getMessageId());
  off+=4;
  data[off]|=fragment << 1;
  if (fragment == state.getFragmentCount() - 1)   data[off]|=1;
  off++;
  int size=state.fragmentSize(fragment);
  if (size < 0)   return null;
  DataHelper.toLong(data,off,2,size);
  data[off]&=(byte)0x3F;
  off+=2;
  int sizeWritten=state.writeFragment(data,off,fragment);
  if (sizeWritten != size)   _log.error("Size written: " + sizeWritten + " but size: "+ size+ " for fragment "+ fragment+ " of "+ state.getMessageId());
 else   if (_log.shouldLog(Log.DEBUG))   _log.debug("Size written: " + sizeWritten + " for fragment "+ fragment+ " of "+ state.getMessageId());
  size=sizeWritten;
  if (size < 0)   return null;
  off+=size;
  int padSize=16 - (off % 16);
  if (padSize > 0) {
    ByteArray block=_blockCache.acquire();
    _context.random().nextBytes(block.getData());
    System.arraycopy(block.getData(),0,data,off,padSize);
    _blockCache.release(block);
    off+=padSize;
  }
  packet.getPacket().setLength(off);
  authenticate(packet,peer.getCurrentCipherKey(),peer.getCurrentMACKey());
  setTo(packet,peer.getRemoteIPAddress(),peer.getRemotePort());
  return packet;
}
