{
  UDPPacket packet=buildPacketHeader((byte)(UDPPacket.PAYLOAD_TYPE_DATA << 4));
  byte data[]=packet.getPacket().getData();
  int off=HEADER_SIZE;
  StringBuilder msg=null;
  boolean acksIncluded=false;
  if (_log.shouldLog(Log.INFO)) {
    msg=new StringBuilder(128);
    msg.append("Data pkt to ").append(peer.getRemotePeer().toBase64());
    msg.append(" msg ").append(state.getMessageId()).append(" frag:").append(fragment);
    msg.append('/').append(state.getFragmentCount());
  }
  int dataSize=state.fragmentSize(fragment);
  if (dataSize < 0) {
    packet.release();
    return null;
  }
  int currentMTU=peer.getMTU();
  int availableForAcks=currentMTU - MIN_DATA_PACKET_OVERHEAD - dataSize;
  int availableForExplicitAcks=availableForAcks;
  data[off]|=UDPPacket.DATA_FLAG_WANT_REPLY;
  int partialAcksToSend=0;
  if (availableForExplicitAcks >= 6 && !partialACKsRemaining.isEmpty()) {
    for (    ACKBitfield bf : partialACKsRemaining) {
      if (partialAcksToSend >= ABSOLUTE_MAX_ACKS)       break;
      if (bf.receivedComplete())       continue;
      int acksz=4 + (bf.fragmentCount() / 7) + 1;
      if (partialAcksToSend == 0)       acksz++;
      if (availableForExplicitAcks >= acksz) {
        availableForExplicitAcks-=acksz;
        partialAcksToSend++;
      }
 else {
        break;
      }
    }
    if (partialAcksToSend > 0)     data[off]|=UDPPacket.DATA_FLAG_ACK_BITFIELDS;
  }
  if (availableForExplicitAcks >= 5 && !ackIdsRemaining.isEmpty()) {
    data[off]|=UDPPacket.DATA_FLAG_EXPLICIT_ACK;
  }
  off++;
  if (msg != null) {
    msg.append(" data: ").append(dataSize).append(" bytes, mtu: ").append(currentMTU).append(", ").append(newAckCount).append(" new full acks requested, ").append(ackIdsRemaining.size() - newAckCount).append(" resend acks requested, ").append(partialACKsRemaining.size()).append(" partial acks requested, ").append(availableForAcks).append(" avail. for all acks, ").append(availableForExplicitAcks).append(" for full acks, ");
  }
  int explicitToSend=Math.min(ABSOLUTE_MAX_ACKS,Math.min(newAckCount + (currentMTU > PeerState.MIN_MTU ? MAX_RESEND_ACKS_LARGE : MAX_RESEND_ACKS_SMALL),Math.min((availableForExplicitAcks - 1) / 4,ackIdsRemaining.size())));
  if (explicitToSend > 0) {
    if (msg != null)     msg.append(explicitToSend).append(" full acks included:");
    DataHelper.toLong(data,off,1,explicitToSend);
    off++;
    Iterator<Long> iter=ackIdsRemaining.iterator();
    for (int i=0; i < explicitToSend && iter.hasNext(); i++) {
      Long ackId=iter.next();
      iter.remove();
      DataHelper.toLong(data,off,4,ackId.longValue());
      off+=4;
      if (msg != null)       msg.append(" full ack: ").append(ackId.longValue());
    }
  }
  if (partialAcksToSend > 0) {
    if (msg != null)     msg.append(partialAcksToSend).append(" partial acks included:");
    int origNumRemaining=partialACKsRemaining.size();
    int numPartialOffset=off;
    off++;
    Iterator<ACKBitfield> iter=partialACKsRemaining.iterator();
    for (int i=0; i < partialAcksToSend && iter.hasNext(); i++) {
      ACKBitfield bitfield=iter.next();
      if (bitfield.receivedComplete())       continue;
      DataHelper.toLong(data,off,4,bitfield.getMessageId());
      off+=4;
      int bits=bitfield.fragmentCount();
      int size=(bits / 7) + 1;
      for (int curByte=0; curByte < size; curByte++) {
        if (curByte + 1 < size)         data[off]|=(byte)(1 << 7);
        for (int curBit=0; curBit < 7; curBit++) {
          if (bitfield.received(curBit + 7 * curByte))           data[off]|=(byte)(1 << curBit);
        }
        off++;
      }
      iter.remove();
      if (msg != null)       msg.append(" partial ack: ").append(bitfield);
    }
    DataHelper.toLong(data,numPartialOffset,1,origNumRemaining - partialACKsRemaining.size());
  }
  DataHelper.toLong(data,off,1,1);
  off++;
  DataHelper.toLong(data,off,4,state.getMessageId());
  off+=4;
  data[off]|=fragment << 1;
  if (fragment == state.getFragmentCount() - 1)   data[off]|=1;
  off++;
  DataHelper.toLong(data,off,2,dataSize);
  data[off]&=(byte)0x3F;
  off+=2;
  int sizeWritten=state.writeFragment(data,off,fragment);
  if (sizeWritten != dataSize) {
    if (sizeWritten < 0) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Write failed for fragment " + fragment + " of "+ state.getMessageId());
    }
 else {
      _log.error("Size written: " + sizeWritten + " but size: "+ dataSize+ " for fragment "+ fragment+ " of "+ state.getMessageId());
    }
    packet.release();
    return null;
  }
  if (dataSize == 0) {
    _log.error("Sending zero-size fragment " + fragment + " of "+ state+ " for "+ peer);
  }
  off+=dataSize;
  int mod=off % 16;
  if (mod > 0) {
    int padSize=16 - mod;
    _context.random().nextBytes(data,off,padSize);
    off+=padSize;
  }
  packet.getPacket().setLength(off);
  authenticate(packet,peer.getCurrentCipherKey(),peer.getCurrentMACKey());
  setTo(packet,peer.getRemoteIPAddress(),peer.getRemotePort());
  if (_log.shouldLog(Log.INFO)) {
    msg.append(" pkt size ").append(off + (IP_HEADER_SIZE + UDP_HEADER_SIZE));
    _log.info(msg.toString());
  }
  if (off + (IP_HEADER_SIZE + UDP_HEADER_SIZE) > PeerState.LARGE_MTU) {
    _log.error("Size is " + off + " for "+ packet+ " fragment "+ fragment+ " data size "+ dataSize+ " pkt size "+ (off + (IP_HEADER_SIZE + UDP_HEADER_SIZE))+ " MTU "+ currentMTU+ ' '+ availableForAcks+ " for all acks "+ availableForExplicitAcks+ " for full acks "+ explicitToSend+ " full acks included "+ partialAcksToSend+ " partial acks included "+ " OMS "+ state,new Exception());
  }
  return packet;
}
