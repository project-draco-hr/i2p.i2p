{
  UDPPacket packet=buildPacketHeader(SESSION_CREATED_FLAG_BYTE);
  DatagramPacket pkt=packet.getPacket();
  byte data[]=pkt.getData();
  int off=HEADER_SIZE;
  InetAddress to=null;
  try {
    to=InetAddress.getByAddress(state.getSentIP());
  }
 catch (  UnknownHostException uhe) {
    if (_log.shouldLog(Log.ERROR))     _log.error("How did we think this was a valid IP?  " + state.getRemoteHostId().toString());
    packet.release();
    return null;
  }
  state.prepareSessionCreated();
  byte sentIP[]=state.getSentIP();
  if ((sentIP == null) || (sentIP.length <= 0) || (!_transport.isValid(sentIP))) {
    if (_log.shouldLog(Log.ERROR))     _log.error("How did our sent IP become invalid? " + state);
    state.fail();
    packet.release();
    return null;
  }
  System.arraycopy(state.getSentY(),0,data,off,state.getSentY().length);
  off+=state.getSentY().length;
  DataHelper.toLong(data,off,1,sentIP.length);
  off+=1;
  System.arraycopy(sentIP,0,data,off,sentIP.length);
  off+=sentIP.length;
  DataHelper.toLong(data,off,2,state.getSentPort());
  off+=2;
  DataHelper.toLong(data,off,4,state.getSentRelayTag());
  off+=4;
  DataHelper.toLong(data,off,4,state.getSentSignedOnTime());
  off+=4;
  System.arraycopy(state.getSentSignature().getData(),0,data,off,Signature.SIGNATURE_BYTES);
  off+=Signature.SIGNATURE_BYTES;
  long l=_context.random().nextLong();
  if (l < 0)   l=0 - l;
  DataHelper.toLong(data,off,8,l);
  off+=8;
  if (_log.shouldLog(Log.DEBUG)) {
    StringBuilder buf=new StringBuilder(128);
    buf.append("Sending sessionCreated:");
    buf.append(" Alice: ").append(Addresses.toString(sentIP,state.getSentPort()));
    buf.append(" Bob: ").append(Addresses.toString(state.getReceivedOurIP(),externalPort));
    buf.append(" RelayTag: ").append(state.getSentRelayTag());
    buf.append(" SignedOn: ").append(state.getSentSignedOnTime());
    buf.append(" signature: ").append(Base64.encode(state.getSentSignature().getData()));
    buf.append("\nRawCreated: ").append(Base64.encode(data,0,off));
    buf.append("\nsignedTime: ").append(Base64.encode(data,off - 8 - Signature.SIGNATURE_BYTES- 4,4));
    _log.debug(buf.toString());
  }
  byte[] iv=SimpleByteCache.acquire(UDPPacket.IV_SIZE);
  _context.random().nextBytes(iv);
  int encrWrite=Signature.SIGNATURE_BYTES + 8;
  int sigBegin=off - encrWrite;
  _context.aes().encrypt(data,sigBegin,data,sigBegin,state.getCipherKey(),iv,encrWrite);
  off=pad1(data,off);
  off=pad2(data,off);
  pkt.setLength(off);
  authenticate(packet,ourIntroKey,ourIntroKey,iv);
  setTo(packet,to,state.getSentPort());
  SimpleByteCache.release(iv);
  packet.setMessageType(TYPE_CREAT);
  return packet;
}
