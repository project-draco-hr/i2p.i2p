{
  _state=43;
  reader.initialize(packet);
  _state=44;
  long recvOn=packet.getBegin();
  long sendOn=reader.readTimestamp() * 1000;
  long skew=recvOn - sendOn;
  int type=reader.readPayloadType();
  boolean typeOK=type <= UDPPacket.MAX_PAYLOAD_TYPE;
  boolean skewOK=skew < MAX_SKEW && skew > (0 - MAX_SKEW) && typeOK;
  if (state != null) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Received packet from " + state.getRemoteHostId().toString() + " with skew "+ skew);
    if (auth == AuthType.SESSION && typeOK && (skewOK || state.getMessagesReceived() <= 0))     state.adjustClockSkew(skew);
  }
  _context.statManager().addRateData("udp.receivePacketSkew",skew);
  if (skewOK && !_context.clock().getUpdatedSuccessfully()) {
    _context.clock().setOffset(0 - skew,true);
    if (skew != 0)     _log.logAlways(Log.WARN,"NTP failure, UDP adjusting clock by " + DataHelper.formatDuration(Math.abs(skew)));
  }
  if (skew > GRACE_PERIOD) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Packet too far in the past: " + new Date(sendOn) + ": "+ packet);
    _context.statManager().addRateData("udp.droppedInvalidSkew",skew);
    return;
  }
 else   if (skew < 0 - GRACE_PERIOD) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Packet too far in the future: " + new Date(sendOn) + ": "+ packet);
    _context.statManager().addRateData("udp.droppedInvalidSkew",0 - skew);
    return;
  }
  _state=45;
  RemoteHostId from=packet.getRemoteHost();
  _state=46;
switch (type) {
case UDPPacket.PAYLOAD_TYPE_SESSION_REQUEST:
    _state=47;
  if (auth == AuthType.BOBINTRO) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Dropping type " + type + " auth "+ auth+ ": "+ packet);
    break;
  }
_establisher.receiveSessionRequest(from,reader);
break;
case UDPPacket.PAYLOAD_TYPE_SESSION_CONFIRMED:
_state=48;
if (auth != AuthType.SESSION) {
if (_log.shouldLog(Log.WARN)) _log.warn("Dropping type " + type + " auth "+ auth+ ": "+ packet);
break;
}
_establisher.receiveSessionConfirmed(from,reader);
break;
case UDPPacket.PAYLOAD_TYPE_SESSION_CREATED:
_state=49;
if (auth != AuthType.BOBINTRO && auth != AuthType.SESSION) {
if (_log.shouldLog(Log.WARN)) _log.warn("Dropping type " + type + " auth "+ auth+ ": "+ packet);
break;
}
_establisher.receiveSessionCreated(from,reader);
break;
case UDPPacket.PAYLOAD_TYPE_DATA:
_state=50;
if (auth != AuthType.SESSION) {
if (_log.shouldLog(Log.WARN)) _log.warn("Dropping type " + type + " auth "+ auth+ ": "+ packet);
break;
}
if (outState != null) state=_establisher.receiveData(outState);
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received new DATA packet from " + state + ": "+ packet);
UDPPacketReader.DataReader dr=reader.getDataReader();
if (state != null) {
if (_log.shouldLog(Log.DEBUG)) {
StringBuilder msg=new StringBuilder(512);
msg.append("Receive ").append(System.identityHashCode(packet));
msg.append(" from ").append(state.getRemotePeer().toBase64()).append(" ").append(state.getRemoteHostId());
try {
int count=dr.readFragmentCount();
for (int i=0; i < count; i++) {
msg.append(" msg ").append(dr.readMessageId(i));
msg.append(":").append(dr.readMessageFragmentNum(i));
if (dr.readMessageIsLast(i)) msg.append("*");
}
}
 catch (DataFormatException dfe) {
}
msg.append(": ").append(dr.toString());
_log.debug(msg.toString());
}
_inbound.receiveData(state,dr);
_context.statManager().addRateData("udp.receivePacketSize.dataKnown",packet.getPacket().getLength(),packet.getLifetime());
}
 else {
_context.statManager().addRateData("udp.receivePacketSize.dataUnknown",packet.getPacket().getLength(),packet.getLifetime());
}
try {
if (dr.readFragmentCount() <= 0) _context.statManager().addRateData("udp.receivePacketSize.dataUnknownAck",packet.getPacket().getLength(),packet.getLifetime());
}
 catch (DataFormatException dfe) {
}
break;
case UDPPacket.PAYLOAD_TYPE_TEST:
_state=51;
if (auth == AuthType.BOBINTRO) {
if (_log.shouldLog(Log.WARN)) _log.warn("Dropping type " + type + " auth "+ auth+ ": "+ packet);
break;
}
if (_log.shouldLog(Log.DEBUG)) _log.debug("Received test packet: " + reader + " from "+ from);
_testManager.receiveTest(from,reader);
break;
case UDPPacket.PAYLOAD_TYPE_RELAY_REQUEST:
if (auth == AuthType.BOBINTRO) {
if (_log.shouldLog(Log.WARN)) _log.warn("Dropping type " + type + " auth "+ auth+ ": "+ packet);
break;
}
if (_log.shouldLog(Log.INFO)) _log.info("Received relay request packet: " + reader + " from "+ from);
_introManager.receiveRelayRequest(from,reader);
break;
case UDPPacket.PAYLOAD_TYPE_RELAY_INTRO:
if (auth != AuthType.SESSION) {
if (_log.shouldLog(Log.WARN)) _log.warn("Dropping type " + type + " auth "+ auth+ ": "+ packet);
break;
}
if (_log.shouldLog(Log.INFO)) _log.info("Received relay intro packet: " + reader + " from "+ from);
_introManager.receiveRelayIntro(from,reader);
break;
case UDPPacket.PAYLOAD_TYPE_RELAY_RESPONSE:
if (auth == AuthType.BOBINTRO) {
if (_log.shouldLog(Log.WARN)) _log.warn("Dropping type " + type + " auth "+ auth+ ": "+ packet);
break;
}
if (_log.shouldLog(Log.INFO)) _log.info("Received relay response packet: " + reader + " from "+ from);
_establisher.receiveRelayResponse(from,reader);
break;
case UDPPacket.PAYLOAD_TYPE_SESSION_DESTROY:
_state=53;
if (auth == AuthType.BOBINTRO) {
if (_log.shouldLog(Log.WARN)) _log.warn("Dropping type " + type + " auth "+ auth+ ": "+ packet);
}
 else if (auth != AuthType.SESSION) _establisher.receiveSessionDestroy(from);
 else if (outState != null) _establisher.receiveSessionDestroy(from,outState);
 else if (state != null) _establisher.receiveSessionDestroy(from,state);
 else _establisher.receiveSessionDestroy(from);
break;
default :
_state=52;
if (_log.shouldLog(Log.WARN)) _log.warn("Dropping type " + type + " auth "+ auth+ ": "+ packet);
_context.statManager().addRateData("udp.droppedInvalidUnknown",packet.getLifetime());
return;
}
}
