{
  _state=1;
  while (_keepReading) {
    _state=2;
    UDPPacket packet=_endpoint.receive();
    _state=3;
    if (packet == null)     continue;
    packet.received();
    if (_log.shouldLog(Log.INFO))     _log.info("Received the packet " + packet);
    _state=4;
    long queueTime=packet.getLifetime();
    long handleStart=_context.clock().now();
    try {
      _state=5;
      handlePacket(_reader,packet);
      _state=6;
    }
 catch (    Exception e) {
      _state=7;
      if (_log.shouldLog(Log.ERROR))       _log.error("Crazy error handling a packet: " + packet,e);
    }
    long handleTime=_context.clock().now() - handleStart;
    packet.afterHandling();
    _context.statManager().addRateData("udp.handleTime",handleTime,packet.getLifetime());
    _context.statManager().addRateData("udp.queueTime",queueTime,packet.getLifetime());
    _state=8;
    if (_log.shouldLog(Log.INFO))     _log.info("Done receiving the packet " + packet);
    if (handleTime > 1000) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Took " + handleTime + " to process the packet "+ packet+ ": "+ _reader);
    }
    long enqueueTime=packet.getEnqueueTime();
    long recvTime=packet.getReceivedTime();
    long beforeValidateTime=packet.getBeforeValidate();
    long afterValidateTime=packet.getAfterValidate();
    long timeToDequeue=recvTime - enqueueTime;
    long timeToValidate=0;
    long authTime=0;
    if (afterValidateTime > 0) {
      timeToValidate=afterValidateTime - enqueueTime;
      authTime=afterValidateTime - beforeValidateTime;
    }
    if (timeToDequeue > 50)     _context.statManager().addRateData("udp.packetDequeueTime",timeToDequeue,timeToDequeue);
    if (authTime > 50)     _context.statManager().addRateData("udp.packetAuthRecvTime",authTime,beforeValidateTime - recvTime);
    if (timeToValidate > 0) {
      _context.statManager().addRateData("udp.packetVerifyTime",timeToValidate,authTime);
      if (timeToValidate > 50)       _context.statManager().addRateData("udp.packetVerifyTimeSlow",timeToValidate,authTime);
    }
    packet.release();
    _state=9;
  }
}
