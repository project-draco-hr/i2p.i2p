{
  _context=ctx;
  _log=ctx.logManager().getLog(PacketHandler.class);
  _transport=transport;
  _endpoint=endpoint;
  _establisher=establisher;
  _inbound=inbound;
  _testManager=testManager;
  _introManager=introManager;
  _handlers=new Handler[NUM_HANDLERS];
  for (int i=0; i < NUM_HANDLERS; i++) {
    _handlers[i]=new Handler();
  }
  _context.statManager().createRateStat("udp.handleTime","How long it takes to handle a received packet after its been pulled off the queue","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.queueTime","How long after a packet is received can we begin handling it","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.receivePacketSkew","How long ago after the packet was sent did we receive it","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.droppedInvalidUnkown","How old the packet we dropped due to invalidity (unkown type) was","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.droppedInvalidReestablish","How old the packet we dropped due to invalidity (doesn't use existing key, not an establishment) was","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.droppedInvalidEstablish","How old the packet we dropped due to invalidity (establishment, bad key) was","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.droppedInvalidEstablish.inbound","How old the packet we dropped due to invalidity (even though we have an active inbound establishment with the peer) was","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.droppedInvalidEstablish.outbound","How old the packet we dropped due to invalidity (even though we have an active outbound establishment with the peer) was","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.droppedInvalidEstablish.new","How old the packet we dropped due to invalidity (even though we do not have any active establishment with the peer) was","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.droppedInvalidInboundEstablish","How old the packet we dropped due to invalidity (inbound establishment, bad key) was","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.droppedInvalidSkew","How skewed the packet we dropped due to invalidity (valid except bad skew) was","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.packetDequeueTime","How long it takes the UDPReader to pull a packet off the inbound packet queue (when its slow)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.packetVerifyTime","How long it takes the PacketHandler to verify a data packet after dequeueing (period is dequeue time)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.packetVerifyTimeSlow","How long it takes the PacketHandler to verify a data packet after dequeueing when its slow (period is dequeue time)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.packetValidateMultipleCount","How many times we validate a packet, if done more than once (period = afterValidate-enqueue)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.packetNoValidationLifetime","How long packets that are never validated are around for","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.receivePacketSize.sessionRequest","Packet size of the given inbound packet type (period is the packet's lifetime)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.receivePacketSize.sessionConfirmed","Packet size of the given inbound packet type (period is the packet's lifetime)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.receivePacketSize.sessionCreated","Packet size of the given inbound packet type (period is the packet's lifetime)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.receivePacketSize.dataKnown","Packet size of the given inbound packet type (period is the packet's lifetime)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.receivePacketSize.dataKnownAck","Packet size of the given inbound packet type (period is the packet's lifetime)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.receivePacketSize.dataUnknown","Packet size of the given inbound packet type (period is the packet's lifetime)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.receivePacketSize.dataUnknownAck","Packet size of the given inbound packet type (period is the packet's lifetime)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.receivePacketSize.test","Packet size of the given inbound packet type (period is the packet's lifetime)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.receivePacketSize.relayRequest","Packet size of the given inbound packet type (period is the packet's lifetime)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.receivePacketSize.relayIntro","Packet size of the given inbound packet type (period is the packet's lifetime)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.receivePacketSize.relayResponse","Packet size of the given inbound packet type (period is the packet's lifetime)","udp",UDPTransport.RATES);
}
