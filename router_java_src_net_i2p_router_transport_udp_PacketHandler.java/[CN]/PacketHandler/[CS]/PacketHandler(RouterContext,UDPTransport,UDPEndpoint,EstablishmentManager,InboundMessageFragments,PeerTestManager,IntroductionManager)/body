{
  _context=ctx;
  _log=ctx.logManager().getLog(PacketHandler.class);
  _transport=transport;
  _endpoint=endpoint;
  _establisher=establisher;
  _inbound=inbound;
  _testManager=testManager;
  _introManager=introManager;
  _handlers=new ArrayList(NUM_HANDLERS);
  for (int i=0; i < NUM_HANDLERS; i++) {
    _handlers.add(new Handler());
  }
  _context.statManager().createRateStat("udp.handleTime","How long it takes to handle a received packet after its been pulled off the queue","udp",new long[]{10 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRateStat("udp.queueTime","How long after a packet is received can we begin handling it","udp",new long[]{10 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRateStat("udp.receivePacketSkew","How long ago after the packet was sent did we receive it","udp",new long[]{10 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRateStat("udp.droppedInvalidUnkown","How old the packet we dropped due to invalidity (unkown type) was","udp",new long[]{10 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRateStat("udp.droppedInvalidReestablish","How old the packet we dropped due to invalidity (doesn't use existing key, not an establishment) was","udp",new long[]{10 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRateStat("udp.droppedInvalidEstablish","How old the packet we dropped due to invalidity (establishment, bad key) was","udp",new long[]{10 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRateStat("udp.droppedInvalidInboundEstablish","How old the packet we dropped due to invalidity (inbound establishment, bad key) was","udp",new long[]{10 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRateStat("udp.droppedInvalidSkew","How skewed the packet we dropped due to invalidity (valid except bad skew) was","udp",new long[]{10 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRateStat("udp.packetDequeueTime","How long it takes the UDPReader to pull a packet off the inbound packet queue (when its slow)","udp",new long[]{10 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRateStat("udp.packetVerifyTime","How long it takes the PacketHandler to verify a data packet after dequeueing (when its slow)","udp",new long[]{10 * 60 * 1000,60 * 60 * 1000});
}
