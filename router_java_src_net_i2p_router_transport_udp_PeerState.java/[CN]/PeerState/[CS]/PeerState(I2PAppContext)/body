{
  _context=ctx;
  _log=ctx.logManager().getLog(PeerState.class);
  _remotePeer=null;
  _currentMACKey=null;
  _currentCipherKey=null;
  _nextMACKey=null;
  _nextCipherKey=null;
  _nextKeyingMaterial=null;
  _rekeyBeganLocally=false;
  _keyEstablishedTime=-1;
  _clockSkew=0;
  _currentReceiveSecond=-1;
  _lastSendTime=-1;
  _lastReceiveTime=-1;
  _currentACKs=new ArrayList(8);
  _currentSecondECNReceived=false;
  _remoteWantsPreviousACKs=false;
  _sendWindowBytes=DEFAULT_SEND_WINDOW_BYTES;
  _sendWindowBytesRemaining=DEFAULT_SEND_WINDOW_BYTES;
  _slowStartThreshold=MAX_SEND_WINDOW_BYTES / 2;
  _lastSendRefill=_context.clock().now();
  _receivePeriodBegin=_lastSendRefill;
  _sendBps=0;
  _sendBytes=0;
  _receiveBps=0;
  _lastCongestionOccurred=-1;
  _remoteIP=null;
  _remotePort=-1;
  _remoteRequiresIntroduction=false;
  _weRelayToThemAs=0;
  _theyRelayToUsAs=0;
  _mtu=DEFAULT_MTU;
  _mtuLastChecked=-1;
  _lastACKSend=-1;
  _rtt=1000;
  _rttDeviation=_rtt;
  _rto=6000;
  _messagesReceived=0;
  _messagesSent=0;
  _context.statManager().createRateStat("udp.congestionOccurred","How large the cwin was when congestion occurred (duration == sendBps)","udp",new long[]{60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("udp.congestedRTO","retransmission timeout after congestion (duration == rtt dev)","udp",new long[]{60 * 60 * 1000,24 * 60 * 60* 1000});
}
