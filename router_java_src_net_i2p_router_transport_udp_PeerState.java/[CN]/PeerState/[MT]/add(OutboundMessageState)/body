{
  if (_dead) {
    _transport.failed(state,false);
    return 0;
  }
  state.setPeer(this);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Adding to " + _remotePeer.toBase64() + ": "+ state.getMessageId());
  List<OutboundMessageState> msgs=_outboundMessages;
  if (msgs == null)   return 0;
  int rv=0;
  boolean fail=false;
synchronized (msgs) {
    rv=msgs.size() + 1;
    if (rv > 32) {
      fail=true;
      rv--;
    }
 else     if (_retransmitter != null) {
      long lifetime=_retransmitter.getLifetime();
      long totalLifetime=lifetime;
      for (int i=1; i < msgs.size(); i++) {
        OutboundMessageState cur=(OutboundMessageState)msgs.get(i);
        totalLifetime+=cur.getLifetime();
      }
      long remaining=-1;
      OutNetMessage omsg=state.getMessage();
      if (omsg != null)       remaining=omsg.getExpiration() - _context.clock().now();
 else       remaining=10 * 1000 - state.getLifetime();
      if (remaining <= 0)       remaining=1;
      float pDrop=totalLifetime / (float)remaining;
      pDrop=pDrop * pDrop * pDrop;
      if (false && (pDrop >= _context.random().nextFloat())) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Proactively tail dropping for " + _remotePeer.toBase64() + " (messages="+ msgs.size()+ " headLifetime="+ lifetime+ " totalLifetime="+ totalLifetime+ " curLifetime="+ state.getLifetime()+ " remaining="+ remaining+ " pDrop="+ pDrop+ ")");
        _context.statManager().addRateData("udp.queueDropSize",msgs.size(),totalLifetime);
        fail=true;
      }
 else {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Probabalistically allowing for " + _remotePeer.toBase64() + " (messages="+ msgs.size()+ " headLifetime="+ lifetime+ " totalLifetime="+ totalLifetime+ " curLifetime="+ state.getLifetime()+ " remaining="+ remaining+ " pDrop="+ pDrop+ ")");
        _context.statManager().addRateData("udp.queueAllowTotalLifetime",totalLifetime,lifetime);
        msgs.add(state);
      }
    }
 else {
      msgs.add(state);
    }
  }
  if (fail)   _transport.failed(state,false);
  return rv;
}
