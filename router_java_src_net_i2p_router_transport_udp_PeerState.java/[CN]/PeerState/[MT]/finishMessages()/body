{
  int rv=0;
  List<OutboundMessageState> msgs=_outboundMessages;
  if (_dead) {
    dropOutbound();
    return 0;
  }
  List<OutboundMessageState> succeeded=null;
  List<OutboundMessageState> failed=null;
synchronized (msgs) {
    int size=msgs.size();
    for (int i=0; i < size; i++) {
      OutboundMessageState state=msgs.get(i);
      if (state.isComplete()) {
        msgs.remove(i);
        i--;
        size--;
        if (_retransmitter == state)         _retransmitter=null;
        if (succeeded == null)         succeeded=new ArrayList(4);
        succeeded.add(state);
      }
 else       if (state.isExpired()) {
        msgs.remove(i);
        i--;
        size--;
        if (_retransmitter == state)         _retransmitter=null;
        _context.statManager().addRateData("udp.sendFailed",state.getPushCount(),state.getLifetime());
        if (failed == null)         failed=new ArrayList(4);
        failed.add(state);
      }
 else       if (state.getPushCount() > OutboundMessageFragments.MAX_VOLLEYS) {
        msgs.remove(i);
        i--;
        size--;
        if (state == _retransmitter)         _retransmitter=null;
        _context.statManager().addRateData("udp.sendAggressiveFailed",state.getPushCount(),state.getLifetime());
        if (failed == null)         failed=new ArrayList(4);
        failed.add(state);
      }
    }
    rv=msgs.size();
  }
  for (int i=0; succeeded != null && i < succeeded.size(); i++) {
    OutboundMessageState state=succeeded.get(i);
    _transport.succeeded(state);
    state.releaseResources();
    OutNetMessage msg=state.getMessage();
    if (msg != null)     msg.timestamp("sending complete");
  }
  for (int i=0; failed != null && i < failed.size(); i++) {
    OutboundMessageState state=failed.get(i);
    OutNetMessage msg=state.getMessage();
    if (msg != null) {
      msg.timestamp("expired in the active pool");
      _transport.failed(state);
    }
 else {
      if (_log.shouldLog(Log.WARN))       _log.warn("Unable to send a direct message: " + state);
    }
    state.releaseResources();
  }
  return rv;
}
