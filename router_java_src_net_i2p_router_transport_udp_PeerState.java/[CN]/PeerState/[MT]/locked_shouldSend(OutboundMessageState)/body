{
  long now=_context.clock().now();
  if (state.getNextSendTime() <= now) {
    OutboundMessageState retrans=_retransmitter;
    if ((retrans != null) && ((retrans.isExpired() || retrans.isComplete()))) {
      _retransmitter=null;
      retrans=null;
    }
    if ((retrans != null) && (retrans != state)) {
      _context.statManager().addRateData("udp.blockedRetransmissions",_packetsRetransmitted);
      int max=state.getMaxSends();
      if ((max <= 0) && (!THROTTLE_INITIAL_SEND)) {
      }
 else       if ((max <= 0) || (THROTTLE_RESENDS)) {
        return ShouldSend.NO;
      }
 else {
      }
    }
    int size=state.getUnackedSize();
    if (allocateSendingBytes(size,state.getPushCount())) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Allocation of " + size + " allowed with "+ getSendWindowBytesRemaining()+ "/"+ getSendWindowBytes()+ " remaining"+ " for message "+ state.getMessageId()+ ": "+ state);
      if (state.getPushCount() > 0)       _retransmitter=state;
      state.push();
      int rto=getRTO();
      state.setNextSendTime(now + rto);
      return ShouldSend.YES;
    }
 else {
      _context.statManager().addRateData("udp.sendRejected",state.getPushCount());
      if (_log.shouldLog(Log.INFO))       _log.info("Allocation of " + size + " rejected w/ wsize="+ getSendWindowBytes()+ " available="+ getSendWindowBytesRemaining()+ " for message "+ state.getMessageId()+ ": "+ state);
      state.setNextSendTime(now + (ACKSender.ACK_FREQUENCY / 2) + _context.random().nextInt(ACKSender.ACK_FREQUENCY));
      if (_log.shouldLog(Log.INFO))       _log.info("Retransmit after choke for next send time in " + (state.getNextSendTime() - now) + "ms");
      return ShouldSend.NO_BW;
    }
  }
  return ShouldSend.NO;
}
