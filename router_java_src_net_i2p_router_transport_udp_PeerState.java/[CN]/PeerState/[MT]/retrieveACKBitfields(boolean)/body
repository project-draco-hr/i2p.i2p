{
  int bytesRemaining=countMaxACKData();
  int resendSize=_currentACKsResend.size();
  int maxResendAcks;
  if (bytesRemaining < MIN_MTU)   maxResendAcks=MAX_RESEND_ACKS_SMALL;
 else   maxResendAcks=MAX_RESEND_ACKS_LARGE;
  List<ACKBitfield> rv=new ArrayList<ACKBitfield>(maxResendAcks);
  List<Long> currentACKsRemoved=new ArrayList<Long>(_currentACKs.size());
  Iterator<Long> iter=_currentACKs.iterator();
  while (bytesRemaining >= 4 && iter.hasNext()) {
    Long val=iter.next();
    iter.remove();
    long id=val.longValue();
    rv.add(new FullACKBitfield(id));
    currentACKsRemoved.add(val);
    bytesRemaining-=4;
  }
  if (_currentACKs.isEmpty())   _wantACKSendSince=-1;
  if (alwaysIncludeRetransmissions || !rv.isEmpty()) {
    List<Long> randomResends=getCurrentResendACKs();
    int oldIndex=Math.min(resendSize,maxResendAcks);
    iter=randomResends.iterator();
    while (bytesRemaining >= 4 && oldIndex-- > 0 && iter.hasNext()) {
      Long cur=iter.next();
      long c=cur.longValue();
      FullACKBitfield bf=new FullACKBitfield(c);
      rv.add(bf);
      bytesRemaining-=4;
    }
    if (!currentACKsRemoved.isEmpty()) {
      long now=_context.clock().now();
      for (      Long val : currentACKsRemoved) {
        _currentACKsResend.offer(new ResendACK(val,now));
      }
    }
  }
  int partialIncluded=0;
  if (bytesRemaining > 4) {
    List<ACKBitfield> partial=new ArrayList<ACKBitfield>();
    fetchPartialACKs(partial);
    for (int i=0; (bytesRemaining > 4) && (i < partial.size()); i++) {
      ACKBitfield bitfield=partial.get(i);
      int bytes=(bitfield.fragmentCount() / 7) + 1;
      if (bytesRemaining > bytes + 4) {
        rv.add(bitfield);
        bytesRemaining-=bytes + 4;
        partialIncluded++;
      }
 else {
      }
    }
  }
  if (!rv.isEmpty())   _lastACKSend=_context.clock().now();
  if (partialIncluded > 0)   _context.statManager().addRateData("udp.sendACKPartial",partialIncluded,rv.size() - partialIncluded);
  return rv;
}
