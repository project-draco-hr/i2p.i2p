{
  PeerState charlie=null;
  for (int i=0; i < 5; i++) {
    charlie=_transport.getPeerState(UDPAddress.CAPACITY_TESTING);
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Picking charlie as " + charlie + " for alice of "+ from);
    if ((charlie != null) && (!charlie.getRemoteHostId().equals(from))) {
      break;
    }
    charlie=null;
  }
  if (charlie == null) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Unable to pick a charlie");
    return;
  }
  InetAddress aliceIP=null;
  SessionKey aliceIntroKey=null;
  try {
    aliceIP=InetAddress.getByAddress(from.getIP());
    aliceIntroKey=new SessionKey(new byte[SessionKey.KEYSIZE_BYTES]);
    testInfo.readIntroKey(aliceIntroKey.getData(),0);
    RouterInfo info=_context.netDb().lookupRouterInfoLocally(charlie.getRemotePeer());
    if (info == null) {
      if (_log.shouldLog(Log.WARN))       _log.warn("No info for charlie: " + charlie);
      return;
    }
    UDPAddress addr=new UDPAddress(info.getTargetAddress(UDPTransport.STYLE));
    SessionKey charlieIntroKey=new SessionKey(addr.getIntroKey());
    UDPPacket packet=_packetBuilder.buildPeerTestToAlice(aliceIP,from.getPort(),aliceIntroKey,charlieIntroKey,nonce);
    _transport.send(packet);
    packet=_packetBuilder.buildPeerTestToCharlie(aliceIP,from.getPort(),aliceIntroKey,nonce,charlie.getRemoteIPAddress(),charlie.getRemotePort(),charlie.getCurrentCipherKey(),charlie.getCurrentMACKey());
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Receive from alice as bob, picking charlie @ " + charlie.getRemoteIPAddress() + ":"+ charlie.getRemotePort()+ " for alice @ "+ aliceIP+ ":"+ from.getPort());
    _transport.send(packet);
  }
 catch (  UnknownHostException uhe) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Unable to build the aliceIP from " + from,uhe);
  }
}
