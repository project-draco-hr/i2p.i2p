{
  PeerState charlie;
  RouterInfo charlieInfo=null;
  if (state == null) {
    if (from.getIP().length != 4) {
      if (_log.shouldLog(Log.WARN))       _log.warn("PeerTest over IPv6 from Alice as Bob? " + from);
      return;
    }
    charlie=_transport.pickTestPeer(CHARLIE,from);
  }
 else {
    charlie=_transport.getPeerState(new RemoteHostId(state.getCharlieIP().getAddress(),state.getCharliePort()));
  }
  if (charlie != null)   charlieInfo=_context.netDb().lookupRouterInfoLocally(charlie.getRemotePeer());
  if ((charlie == null) || (charlieInfo == null)) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Unable to pick a charlie");
    return;
  }
  InetAddress aliceIP=null;
  SessionKey aliceIntroKey=null;
  try {
    aliceIP=InetAddress.getByAddress(from.getIP());
    aliceIntroKey=new SessionKey(new byte[SessionKey.KEYSIZE_BYTES]);
    testInfo.readIntroKey(aliceIntroKey.getData(),0);
    RouterAddress raddr=_transport.getTargetAddress(charlieInfo);
    if (raddr == null) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Unable to pick a charlie");
      return;
    }
    UDPAddress addr=new UDPAddress(raddr);
    byte[] ikey=addr.getIntroKey();
    if (ikey == null) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Unable to pick a charlie");
      return;
    }
    SessionKey charlieIntroKey=new SessionKey(ikey);
    long now=_context.clock().now();
    boolean isNew=false;
    if (state == null) {
      isNew=true;
      state=new PeerTestState(BOB,nonce,now);
    }
 else {
      if (state.getReceiveAliceTime() > now - (RESEND_TIMEOUT / 2)) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Too soon, not retransmitting: " + state);
        return;
      }
    }
    state.setAliceIP(aliceIP);
    state.setAlicePort(from.getPort());
    state.setAliceIntroKey(aliceIntroKey);
    state.setCharlieIP(charlie.getRemoteIPAddress());
    state.setCharliePort(charlie.getRemotePort());
    state.setCharlieIntroKey(charlieIntroKey);
    state.setLastSendTime(now);
    state.setReceiveAliceTime(now);
    if (state.incrementPacketsRelayed() > MAX_RELAYED_PER_TEST_BOB) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Too many, not retransmitting: " + state);
      return;
    }
    if (isNew) {
      _activeTests.put(Long.valueOf(nonce),state);
      _context.simpleScheduler().addEvent(new RemoveTest(nonce),MAX_CHARLIE_LIFETIME);
    }
    UDPPacket packet=_packetBuilder.buildPeerTestToCharlie(aliceIP,from.getPort(),aliceIntroKey,nonce,charlie.getRemoteIPAddress(),charlie.getRemotePort(),charlie.getCurrentCipherKey(),charlie.getCurrentMACKey());
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Receive from Alice: " + state);
    _transport.send(packet);
  }
 catch (  UnknownHostException uhe) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Unable to build the aliceIP from " + from,uhe);
    _context.statManager().addRateData("udp.testBadIP",1);
  }
}
