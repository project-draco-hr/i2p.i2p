{
  long now=_context.clock().now();
  boolean isNew=false;
  if (state == null) {
    isNew=true;
    state=new PeerTestState(CHARLIE,nonce,now);
  }
 else {
    if (state.getReceiveBobTime() > now - (RESEND_TIMEOUT / 2)) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Too soon, not retransmitting: " + state);
      return;
    }
  }
  int sz=testInfo.readIPSize();
  byte aliceIPData[]=new byte[sz];
  try {
    testInfo.readIP(aliceIPData,0);
    int alicePort=testInfo.readPort();
    if (alicePort == 0)     throw new UnknownHostException("port 0");
    InetAddress aliceIP=InetAddress.getByAddress(aliceIPData);
    InetAddress bobIP=InetAddress.getByAddress(from.getIP());
    SessionKey aliceIntroKey=new SessionKey(new byte[SessionKey.KEYSIZE_BYTES]);
    testInfo.readIntroKey(aliceIntroKey.getData(),0);
    state.setAliceIP(aliceIP);
    state.setAlicePort(alicePort);
    state.setAliceIntroKey(aliceIntroKey);
    state.setBobIP(bobIP);
    state.setBobPort(from.getPort());
    state.setLastSendTime(now);
    state.setReceiveBobTime(now);
    PeerState bob=_transport.getPeerState(from);
    if (bob == null) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Received from bob (" + from + ") who hasn't established a session with us, refusing to help him test "+ aliceIP+ ":"+ alicePort);
      return;
    }
 else {
      state.setBobCipherKey(bob.getCurrentCipherKey());
      state.setBobMACKey(bob.getCurrentMACKey());
    }
    if (state.incrementPacketsRelayed() > MAX_RELAYED_PER_TEST_CHARLIE) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Too many, not retransmitting: " + state);
      return;
    }
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Receive from Bob: " + state);
    if (isNew) {
      _activeTests.put(Long.valueOf(nonce),state);
      _context.simpleScheduler().addEvent(new RemoveTest(nonce),MAX_CHARLIE_LIFETIME);
    }
    UDPPacket packet=_packetBuilder.buildPeerTestToBob(bobIP,from.getPort(),aliceIP,alicePort,aliceIntroKey,nonce,state.getBobCipherKey(),state.getBobMACKey());
    _transport.send(packet);
    packet=_packetBuilder.buildPeerTestToAlice(aliceIP,alicePort,aliceIntroKey,_transport.getIntroKey(),nonce);
    _transport.send(packet);
  }
 catch (  UnknownHostException uhe) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Unable to build the aliceIP from " + from + ", ip size: "+ sz+ " ip val: "+ Base64.encode(aliceIPData),uhe);
    _context.statManager().addRateData("udp.testBadIP",1);
  }
}
