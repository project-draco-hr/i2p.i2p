{
  if (fromIP == null) {
    if (_log.shouldLog(Log.WARN))     _log.warn("From address received from Bob (we are Charlie) is invalid: " + from + ": "+ testInfo);
    return;
  }
  if (fromPort <= 0) {
    if (_log.shouldLog(Log.WARN))     _log.warn("From port received from Bob (we are Charlie) is invalid: " + fromPort + ": "+ testInfo);
    return;
  }
  boolean isNew=true;
  int index=-1;
synchronized (_receiveAsCharlie) {
    for (int i=0; i < _receiveAsCharlie.length; i++) {
      if (_receiveAsCharlie[i] == nonce) {
        index=i;
        isNew=false;
        break;
      }
    }
    if (index == -1) {
      index=(_receiveAsCharlieIndex + 1) % _receiveAsCharlie.length;
      _receiveAsCharlie[index]=nonce;
      _receiveAsCharlieIndex=index;
    }
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Receive test as charlie nonce " + nonce + ", stored at index "+ index);
  if (isNew)   SimpleTimer.getInstance().addEvent(new RemoveCharlie(nonce,index),MAX_CHARLIE_LIFETIME);
  try {
    InetAddress aliceIP=InetAddress.getByAddress(fromIP);
    SessionKey aliceIntroKey=new SessionKey(new byte[SessionKey.KEYSIZE_BYTES]);
    testInfo.readIntroKey(aliceIntroKey.getData(),0);
    UDPPacket packet=_packetBuilder.buildPeerTestToAlice(aliceIP,fromPort,aliceIntroKey,_transport.getIntroKey(),nonce);
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Receive from bob as charlie and send to alice @ " + aliceIP + " on "+ fromPort);
    _transport.send(packet);
  }
 catch (  UnknownHostException uhe) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Unable to build the aliceIP from " + from,uhe);
  }
}
