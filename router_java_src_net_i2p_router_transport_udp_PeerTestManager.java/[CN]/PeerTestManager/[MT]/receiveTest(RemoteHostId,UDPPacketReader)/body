{
  _context.statManager().addRateData("udp.receiveTest",1);
  byte[] fromIP=from.getIP();
  int fromPort=from.getPort();
  if (fromPort < 1024 || fromPort > 65535 || (!_transport.isValid(fromIP)) || _context.blocklist().isBlocklisted(fromIP)) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Invalid PeerTest address: " + Addresses.toString(fromIP,fromPort));
    _context.statManager().addRateData("udp.testBadIP",1);
    return;
  }
  UDPPacketReader.PeerTestReader testInfo=reader.getPeerTestReader();
  byte testIP[]=null;
  int testPort=testInfo.readPort();
  if (testInfo.readIPSize() > 0) {
    testIP=new byte[testInfo.readIPSize()];
    testInfo.readIP(testIP,0);
  }
  if ((testPort > 0 && (testPort < 1024 || testPort > 65535)) || (testIP != null && ((!_transport.isValid(testIP)) || _context.blocklist().isBlocklisted(testIP)))) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Invalid address in PeerTest: " + Addresses.toString(testIP,testPort));
    _context.statManager().addRateData("udp.testBadIP",1);
    return;
  }
  long nonce=testInfo.readNonce();
  PeerTestState test=_currentTest;
  if ((test != null) && (test.getNonce() == nonce)) {
    receiveTestReply(from,testInfo);
    return;
  }
  if (testIP != null && Arrays.equals(testIP,_transport.getExternalIP())) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Invalid address in PeerTest: " + Addresses.toString(testIP,testPort));
    _context.statManager().addRateData("udp.testBadIP",1);
    return;
  }
  PeerTestState state=_activeTests.get(Long.valueOf(nonce));
  if (state == null) {
    if ((testIP == null) || (testPort <= 0)) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("test IP/port are blank coming from " + from + ", assuming we are Bob and they are alice");
      receiveFromAliceAsBob(from,testInfo,nonce,null);
    }
 else {
      if (_recentTests.contains(Long.valueOf(nonce))) {
      }
 else {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("We are charlie, as the testIP/port is " + Addresses.toString(testIP,testPort) + " and the state is unknown for "+ nonce);
        receiveFromBobAsCharlie(from,testInfo,nonce,null);
      }
    }
  }
 else {
    if (state.getOurRole() == PeerTestState.BOB) {
      if (DataHelper.eq(fromIP,state.getAliceIP().getAddress()) && (fromPort == state.getAlicePort())) {
        receiveFromAliceAsBob(from,testInfo,nonce,state);
      }
 else       if (DataHelper.eq(fromIP,state.getCharlieIP().getAddress()) && (fromPort == state.getCharliePort())) {
        receiveFromCharlieAsBob(from,state);
      }
 else {
        if (_log.shouldLog(Log.WARN))         _log.warn("Received from a fourth party as bob!  alice: " + state.getAliceIP() + ", charlie: "+ state.getCharlieIP()+ ", dave: "+ from);
      }
    }
 else     if (state.getOurRole() == PeerTestState.CHARLIE) {
      if ((testIP == null) || (testPort <= 0)) {
        receiveFromAliceAsCharlie(from,testInfo,nonce);
      }
 else {
        receiveFromBobAsCharlie(from,testInfo,nonce,state);
      }
    }
  }
}
