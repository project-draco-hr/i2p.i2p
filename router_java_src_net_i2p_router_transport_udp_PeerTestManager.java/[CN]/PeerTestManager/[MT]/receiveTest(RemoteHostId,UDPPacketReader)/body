{
  UDPPacketReader.PeerTestReader testInfo=reader.getPeerTestReader();
  byte fromIP[]=null;
  int fromPort=testInfo.readPort();
  long nonce=testInfo.readNonce();
  if (nonce == _currentTestNonce) {
    receiveTestReply(from,testInfo);
    return;
  }
  if ((testInfo.readIPSize() > 0) && (fromPort > 0)) {
    fromIP=new byte[testInfo.readIPSize()];
    testInfo.readIP(fromIP,0);
  }
  if (((fromIP == null) && (fromPort <= 0)) || (DataHelper.eq(fromIP,from.getIP()) && (fromPort == from.getPort()))) {
    int knownIndex=-1;
    boolean weAreCharlie=false;
synchronized (_receiveAsCharlie) {
      for (int i=0; (i < _receiveAsCharlie.length) && (knownIndex == -1); i++)       if (_receiveAsCharlie[i] == nonce)       knownIndex=i;
    }
    weAreCharlie=(knownIndex != -1);
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Receive test with nonce " + nonce + ", known as charlie @ "+ knownIndex);
    if (weAreCharlie) {
      receiveFromAliceAsCharlie(from,testInfo,nonce);
    }
 else {
      receiveFromAliceAsBob(from,testInfo,nonce);
    }
  }
 else {
    receiveFromBobAsCharlie(from,fromIP,fromPort,nonce,testInfo);
  }
}
