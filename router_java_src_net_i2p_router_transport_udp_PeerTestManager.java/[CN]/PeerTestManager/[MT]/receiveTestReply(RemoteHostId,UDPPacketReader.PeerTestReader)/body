{
  _context.statManager().addRateData("udp.receiveTestReply",1);
  PeerTestState test=_currentTest;
  if (expired())   return;
  if (_currentTestComplete)   return;
  if ((DataHelper.eq(from.getIP(),test.getBobIP().getAddress())) && (from.getPort() == test.getBobPort())) {
    int ipSize=testInfo.readIPSize();
    boolean expectV6=test.isIPv6();
    if ((!expectV6 && ipSize != 4) || (expectV6 && ipSize != 16)) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Bad IP length " + ipSize + " from bob's reply: "+ from+ ", "+ testInfo);
      return;
    }
    byte ip[]=new byte[ipSize];
    testInfo.readIP(ip,0);
    try {
      InetAddress addr=InetAddress.getByAddress(ip);
      test.setAliceIP(addr);
      test.setReceiveBobTime(_context.clock().now());
      int testPort=testInfo.readPort();
      if (testPort == 0)       throw new UnknownHostException("port 0");
      test.setAlicePort(testPort);
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Receive test reply from Bob: " + test);
      if (test.getAlicePortFromCharlie() > 0)       testComplete(true);
    }
 catch (    UnknownHostException uhe) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Unable to get our IP (length " + ipSize + ") from bob's reply: "+ from+ ", "+ testInfo,uhe);
      _context.statManager().addRateData("udp.testBadIP",1);
    }
  }
 else {
    PeerState charlieSession=_transport.getPeerState(from);
    long recentBegin=_context.clock().now() - CHARLIE_RECENT_PERIOD;
    if ((charlieSession != null) && ((charlieSession.getLastACKSend() > recentBegin) || (charlieSession.getLastSendTime() > recentBegin))) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Bob chose a charlie we already have a session to, cancelling the test and rerunning (bob: " + _currentTest + ", charlie: "+ from+ ")");
      _currentTestComplete=true;
      _context.statManager().addRateData("udp.statusKnownCharlie",1);
      honorStatus(Status.UNKNOWN,test.isIPv6());
      _currentTest=null;
      return;
    }
    if (test.getReceiveCharlieTime() > 0) {
      try {
        int testPort=testInfo.readPort();
        if (testPort == 0)         throw new UnknownHostException("port 0");
        test.setAlicePortFromCharlie(testPort);
        byte ip[]=new byte[testInfo.readIPSize()];
        int ipSize=ip.length;
        boolean expectV6=test.isIPv6();
        if ((!expectV6 && ipSize != 4) || (expectV6 && ipSize != 16))         throw new UnknownHostException("bad sz - expect v6? " + expectV6 + " act sz: "+ ipSize);
        testInfo.readIP(ip,0);
        InetAddress addr=InetAddress.getByAddress(ip);
        test.setAliceIPFromCharlie(addr);
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Receive test reply from Charlie: " + test);
        if (test.getReceiveBobTime() > 0)         testComplete(true);
      }
 catch (      UnknownHostException uhe) {
        if (_log.shouldLog(Log.ERROR))         _log.error("Charlie @ " + from + " said we were an invalid IP address: "+ uhe.getMessage(),uhe);
        _context.statManager().addRateData("udp.testBadIP",1);
      }
    }
 else {
      if (test.incrementPacketsRelayed() > MAX_RELAYED_PER_TEST_ALICE) {
        testComplete(false);
        if (_log.shouldLog(Log.WARN))         _log.warn("Sent too many packets on the test: " + test);
        return;
      }
      if (_log.shouldLog(Log.INFO) && charlieSession != null)       _log.info("Bob chose a charlie we last acked " + DataHelper.formatDuration(_context.clock().now() - charlieSession.getLastACKSend()) + " last sent "+ DataHelper.formatDuration(_context.clock().now() - charlieSession.getLastSendTime())+ " (bob: "+ _currentTest+ ", charlie: "+ from+ ")");
      test.setReceiveCharlieTime(_context.clock().now());
      SessionKey charlieIntroKey=new SessionKey(new byte[SessionKey.KEYSIZE_BYTES]);
      testInfo.readIntroKey(charlieIntroKey.getData(),0);
      test.setCharlieIntroKey(charlieIntroKey);
      try {
        test.setCharlieIP(InetAddress.getByAddress(from.getIP()));
        test.setCharliePort(from.getPort());
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Receive test from Charlie: " + test);
        sendTestToCharlie();
      }
 catch (      UnknownHostException uhe) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Charlie's IP is b0rked: " + from + ": "+ testInfo);
        _context.statManager().addRateData("udp.testBadIP",1);
      }
    }
  }
}
