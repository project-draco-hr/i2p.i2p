{
  Comparator<PeerState> rv;
switch (Math.abs(sortFlags)) {
case FLAG_IDLE_IN:
    rv=new IdleInComparator();
  break;
case FLAG_IDLE_OUT:
rv=new IdleOutComparator();
break;
case FLAG_RATE_IN:
rv=new RateInComparator();
break;
case FLAG_RATE_OUT:
rv=new RateOutComparator();
break;
case FLAG_UPTIME:
rv=new UptimeComparator();
break;
case FLAG_SKEW:
rv=new SkewComparator();
break;
case FLAG_CWND:
rv=new CwndComparator();
break;
case FLAG_SSTHRESH:
rv=new SsthreshComparator();
break;
case FLAG_RTT:
rv=new RTTComparator();
break;
case FLAG_RTO:
rv=new RTOComparator();
break;
case FLAG_MTU:
rv=new MTUComparator();
break;
case FLAG_SEND:
rv=new SendCountComparator();
break;
case FLAG_RECV:
rv=new RecvCountComparator();
break;
case FLAG_RESEND:
rv=new ResendComparator();
break;
case FLAG_DUP:
rv=new DupComparator();
break;
case FLAG_ALPHA:
default :
rv=new AlphaComparator();
break;
}
if (sortFlags < 0) rv=Collections.reverseOrder(rv);
return rv;
}
