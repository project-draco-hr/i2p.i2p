{
  _context=ctx;
  _log=ctx.logManager().getLog(TimedWeightedPriorityMessageQueue.class);
  _queue=new List[weighting.length];
  _priorityLimits=new int[weighting.length];
  _weighting=new int[weighting.length];
  _bytesQueued=new long[weighting.length];
  _bytesTransferred=new long[weighting.length];
  _messagesFlushed=new int[weighting.length];
  for (int i=0; i < weighting.length; i++) {
    _queue[i]=new ArrayList(8);
    _weighting[i]=weighting[i];
    _priorityLimits[i]=priorityLimits[i];
    _messagesFlushed[i]=0;
    _bytesQueued[i]=0;
    _bytesTransferred[i]=0;
  }
  _alive=true;
  _nextLock=this;
  _nextQueue=0;
  _chokedPeers=Collections.synchronizedSet(new HashSet(16));
  _listener=lsnr;
  _context.statManager().createRateStat("udp.timeToEntrance","Message lifetime until it reaches the UDP system","udp",new long[]{60 * 1000,10 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRateStat("udp.messageQueueSize","How many messages are on the current class queue at removal","udp",new long[]{60 * 1000,10 * 60 * 1000,60 * 60 * 1000});
  _expirer=new Expirer();
  I2PThread t=new I2PThread(_expirer,"UDP outbound expirer");
  t.setDaemon(true);
  t.start();
}
