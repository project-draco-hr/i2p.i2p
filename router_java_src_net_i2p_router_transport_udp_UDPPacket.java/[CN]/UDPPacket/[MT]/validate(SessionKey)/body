{
  verifyNotReleased();
  boolean eq=false;
  Arrays.fill(_validateBuf,(byte)0);
  int payloadLength=_packet.getLength() - MAC_SIZE - IV_SIZE;
  if (payloadLength > 0) {
    int off=0;
    System.arraycopy(_data,_packet.getOffset() + MAC_SIZE + IV_SIZE,_validateBuf,off,payloadLength);
    off+=payloadLength;
    System.arraycopy(_data,_packet.getOffset() + MAC_SIZE,_validateBuf,off,IV_SIZE);
    off+=IV_SIZE;
    DataHelper.toLong(_validateBuf,off,2,payloadLength);
    off+=2;
    eq=_context.hmac().verify(macKey,_validateBuf,0,off,_data,_packet.getOffset(),MAC_SIZE);
    if (!eq) {
      Log log=_context.logManager().getLog(UDPPacket.class);
      if (log.shouldLog(Log.INFO)) {
        byte[] calc=new byte[32];
        _context.hmac().calculate(macKey,_validateBuf,0,off,calc,0);
        StringBuilder str=new StringBuilder(512);
        str.append("Bad HMAC:\n\t");
        str.append(_packet.getLength()).append(" byte pkt, ");
        str.append(payloadLength).append(" byte payload");
        str.append("\n\tFrom: ").append(getRemoteHost().toString());
        str.append("\n\tIV:   ").append(Base64.encode(_validateBuf,payloadLength,IV_SIZE));
        str.append("\n\tIV2:  ").append(Base64.encode(_data,MAC_SIZE,IV_SIZE));
        str.append("\n\tGiven Len: ").append(DataHelper.fromLong(_validateBuf,payloadLength + IV_SIZE,2));
        str.append("\n\tCalc HMAC: ").append(Base64.encode(calc,0,MAC_SIZE));
        str.append("\n\tRead HMAC: ").append(Base64.encode(_data,_packet.getOffset(),MAC_SIZE));
        str.append("\n\tUsing key: ").append(macKey.toBase64());
        if (DataHelper.eq(macKey.getData(),0,_context.routerHash().getData(),0,32))         str.append(" (Intro)");
 else         str.append(" (Session)");
        str.append("\n\tRaw:       ").append(Base64.encode(_data,_packet.getOffset(),_packet.getLength()));
        log.info(str.toString(),new Exception());
      }
    }
  }
 else {
    Log log=_context.logManager().getLog(UDPPacket.class);
    if (log.shouldLog(Log.WARN))     log.warn("Payload length is " + payloadLength + ", too short! From: "+ getRemoteHost()+ '\n'+ net.i2p.util.HexDump.dump(_data,_packet.getOffset(),_packet.getLength()));
  }
  _validateCount++;
  return eq;
}
