{
  while (_keepRunning) {
    UDPPacket packet=UDPPacket.acquire(_context,true);
    DatagramPacket dpacket=packet.getPacket();
    if (_isAndroid)     dpacket.setLength(UDPPacket.MAX_PACKET_SIZE);
    while (!_context.throttle().acceptNetworkMessage())     try {
      Thread.sleep(10);
    }
 catch (    InterruptedException ie) {
    }
    try {
      _socket.receive(dpacket);
      int size=dpacket.getLength();
      if (_log.shouldLog(Log.INFO))       _log.info("After blocking socket.receive: packet is " + size + " bytes on "+ System.identityHashCode(packet));
      packet.resetBegin();
      if (size >= UDPPacket.MAX_PACKET_SIZE) {
        throw new IOException("packet too large! truncated and dropped from: " + packet.getRemoteHost());
      }
      if (_context.commSystem().isDummy()) {
        packet.release();
      }
 else       if (size > 0) {
        FIFOBandwidthLimiter.Request req=_context.bandwidthLimiter().requestInbound(size,"UDP receiver");
        while (req.getPendingRequested() > 0)         req.waitForNextAllocation();
        receive(packet);
      }
 else {
        _context.statManager().addRateData("udp.receiveHolePunch",1);
        if (_log.shouldLog(Log.INFO))         _log.info("Received a 0 byte udp packet from " + dpacket.getAddress() + ":"+ dpacket.getPort());
        _transport.getEstablisher().receiveHolePunch(dpacket.getAddress(),dpacket.getPort());
        packet.release();
      }
    }
 catch (    IOException ioe) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Error receiving",ioe);
      packet.release();
      if (_socket.isClosed()) {
        if (_keepRunning) {
          _keepRunning=false;
          _endpoint.fail();
        }
      }
 else       if (_keepRunning) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException ie) {
        }
      }
    }
  }
  if (_log.shouldLog(Log.WARN))   _log.warn("Stop receiving on " + _endpoint);
}
