{
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Running the UDP sender");
  _socketChanged=false;
  while (_keepRunning) {
    if (_socketChanged) {
      Thread.currentThread().setName(_name);
      _socketChanged=false;
    }
    UDPPacket packet=getNextPacket();
    if (packet != null) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Packet to send known: " + packet);
      long acquireTime=_context.clock().now();
      int size=packet.getPacket().getLength();
      int size2=packet.getPacket().getLength();
      if (size > 0) {
        FIFOBandwidthLimiter.Request req=_context.bandwidthLimiter().requestOutbound(size,"UDP sender");
        while (req.getPendingOutboundRequested() > 0)         req.waitForNextAllocation();
      }
      long afterBW=_context.clock().now();
      if (_log.shouldLog(Log.DEBUG)) {
      }
      try {
        long before=_context.clock().now();
synchronized (Runner.this) {
          DatagramPacket dp=packet.getPacket();
          if (_log.shouldLog(Log.DEBUG))           _log.debug("Just before socket.send of " + packet);
          _socket.send(dp);
          if (_log.shouldLog(Log.DEBUG))           _log.debug("Just after socket.send of " + packet);
        }
        long sendTime=_context.clock().now() - before;
        _context.statManager().addRateData("udp.socketSendTime",sendTime,packet.getLifetime());
        _context.statManager().addRateData("udp.sendBWThrottleTime",afterBW - acquireTime,acquireTime - packet.getBegin());
        if (packet.getMarkedType() == 1)         _context.statManager().addRateData("udp.sendACKTime",afterBW - acquireTime,packet.getLifetime());
        _context.statManager().addRateData("udp.pushTime",packet.getLifetime(),packet.getLifetime());
        _context.statManager().addRateData("udp.sendPacketSize",size,packet.getLifetime());
      }
 catch (      IOException ioe) {
        if (_log.shouldLog(Log.ERROR))         _log.error("Error sending",ioe);
      }
      packet.release();
    }
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Stop sending...");
}
