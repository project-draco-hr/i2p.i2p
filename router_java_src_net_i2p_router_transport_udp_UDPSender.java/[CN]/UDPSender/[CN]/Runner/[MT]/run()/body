{
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Running the UDP sender");
  while (_keepRunning) {
    UDPPacket packet=getNextPacket();
    if (packet != null) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Packet to send known: " + packet);
      long acquireTime=_context.clock().now();
      int size=packet.getPacket().getLength();
      if (size > 0) {
        FIFOBandwidthLimiter.Request req=_context.bandwidthLimiter().requestOutbound(size,0,"UDP sender");
        while (req.getPendingRequested() > 0)         req.waitForNextAllocation();
      }
      long afterBW=_context.clock().now();
      if (packet.getMessageType() >= PacketBuilder.TYPE_FIRST)       _context.statManager().addRateData("udp.sendPacketSize." + packet.getMessageType(),size,packet.getFragmentCount());
      try {
        DatagramPacket dp=packet.getPacket();
        _socket.send(dp);
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Sent the packet " + packet);
        long throttleTime=afterBW - acquireTime;
        if (throttleTime > 10)         _context.statManager().addRateData("udp.sendBWThrottleTime",throttleTime,acquireTime - packet.getBegin());
        if (packet.getMarkedType() == 1)         _context.statManager().addRateData("udp.sendACKTime",throttleTime,packet.getLifetime());
        _context.statManager().addRateData("udp.pushTime",packet.getLifetime(),packet.getLifetime());
        _context.statManager().addRateData("udp.sendPacketSize",size,packet.getLifetime());
      }
 catch (      IOException ioe) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Error sending to " + packet.getPacket().getAddress(),ioe);
        _context.statManager().addRateData("udp.sendException",1,packet.getLifetime());
        if (_socket.isClosed()) {
          if (_keepRunning) {
            _keepRunning=false;
            _endpoint.fail();
          }
        }
      }
      packet.release();
    }
  }
  if (_log.shouldLog(Log.WARN))   _log.warn("Stop sending on " + _endpoint);
  _outboundQueue.clear();
}
