{
  _context=ctx;
  _dummy=false;
  _log=ctx.logManager().getLog(UDPSender.class);
  long maxMemory=SystemVersion.getMaxMemory();
  int qsize=(int)Math.max(MIN_QUEUE_SIZE,Math.min(MAX_QUEUE_SIZE,maxMemory / (1024 * 1024)));
  _outboundQueue=new CoDelBlockingQueue<UDPPacket>(ctx,"UDP-Sender",qsize);
  _socket=socket;
  _runner=new Runner();
  _name=name;
  _context.statManager().createRateStat("udp.pushTime","How long a UDP packet takes to get pushed out","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendQueueSize","How many packets are queued on the UDP sender","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendQueueFailed","How often it was unable to add a new packet to the queue","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendQueueTrimmed","How many packets were removed from the queue for being too old (duration == remaining)","udp",UDPTransport.RATES);
  _context.statManager().createRequiredRateStat("udp.sendPacketSize","Size of sent packets (bytes)","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendBWThrottleTime","How long the send is blocked by the bandwidth throttle","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendACKTime","How long an ACK packet is blocked for (duration == lifetime)","udp",UDPTransport.RATES);
  _context.statManager().createRequiredRateStat("udp.sendException","Send fails (Windows exception?)","udp",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("udp.sendPacketSize." + PacketBuilder.TYPE_ACK,"ack-only packet size","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendPacketSize." + PacketBuilder.TYPE_PUNCH,"hole punch packet size","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendPacketSize." + PacketBuilder.TYPE_RESP,"relay response packet size","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendPacketSize." + PacketBuilder.TYPE_INTRO,"relay intro packet size","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendPacketSize." + PacketBuilder.TYPE_RREQ,"relay request packet size","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendPacketSize." + PacketBuilder.TYPE_TCB,"peer test charlie to bob packet size","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendPacketSize." + PacketBuilder.TYPE_TBC,"peer test bob to charlie packet size","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendPacketSize." + PacketBuilder.TYPE_TTA,"peer test to alice packet size","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendPacketSize." + PacketBuilder.TYPE_TFA,"peer test from alice packet size","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendPacketSize." + PacketBuilder.TYPE_CONF,"session confirmed packet size","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendPacketSize." + PacketBuilder.TYPE_SREQ,"session request packet size","udp",UDPTransport.RATES);
  _context.statManager().createRateStat("udp.sendPacketSize." + PacketBuilder.TYPE_CREAT,"session created packet size","udp",UDPTransport.RATES);
}
