{
  if (haveCapacity(45)) {
    long inc;
    if (_lastLoopShort)     inc=EXPIRE_INCREMENT * SHORT_LOOP_TIME / LONG_LOOP_TIME;
 else     inc=EXPIRE_INCREMENT;
    _expireTimeout=Math.min(_expireTimeout + inc,EXPIRE_TIMEOUT);
  }
 else {
    long dec;
    if (_lastLoopShort)     dec=EXPIRE_DECREMENT * SHORT_LOOP_TIME / LONG_LOOP_TIME;
 else     dec=EXPIRE_DECREMENT;
    _expireTimeout=Math.max(_expireTimeout - dec,MIN_EXPIRE_TIMEOUT);
  }
  long now=_context.clock().now();
  long shortInactivityCutoff=now - _expireTimeout;
  long longInactivityCutoff=now - EXPIRE_TIMEOUT;
  long pingCutoff=now - (2 * 60 * 60* 1000);
  long pingFirewallCutoff=now - PING_FIREWALL_CUTOFF;
  boolean shouldPingFirewall=_reachabilityStatus != CommSystemFacade.STATUS_OK;
  int currentListenPort=getListenPort(false);
  boolean pingOneOnly=shouldPingFirewall && getExternalPort(false) == currentListenPort;
  boolean shortLoop=shouldPingFirewall;
  _lastLoopShort=shortLoop;
  _expireBuffer.clear();
  _runCount++;
  for (Iterator<PeerState> iter=_expirePeers.iterator(); iter.hasNext(); ) {
    PeerState peer=iter.next();
    long inactivityCutoff;
    if (peer.getWeRelayToThemAs() > 0 || peer.getIntroducerTime() > pingCutoff)     inactivityCutoff=longInactivityCutoff;
 else     inactivityCutoff=shortInactivityCutoff;
    if ((peer.getLastReceiveTime() < inactivityCutoff) && (peer.getLastSendTime() < inactivityCutoff)) {
      _expireBuffer.add(peer);
      iter.remove();
    }
 else     if (shouldPingFirewall && ((_runCount ^ peer.hashCode()) & (SLICES - 1)) == 0 && peer.getLastSendOrPingTime() < pingFirewallCutoff && peer.getLastReceiveTime() < pingFirewallCutoff) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Pinging for firewall: " + peer);
      send(_destroyBuilder.buildPing(peer));
      peer.setLastPingTime(now);
      if (pingOneOnly)       shouldPingFirewall=false;
    }
  }
  if (!_expireBuffer.isEmpty()) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Expiring " + _expireBuffer.size() + " peers");
    for (    PeerState peer : _expireBuffer) {
      sendDestroy(peer);
      dropPeer(peer,false,"idle too long");
    }
    _expireBuffer.clear();
  }
  if (_alive)   schedule(shortLoop ? SHORT_LOOP_TIME : LONG_LOOP_TIME);
}
