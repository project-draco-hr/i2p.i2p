{
  if (shouldTest()) {
    long now=_context.clock().now();
    long sinceRunV4=now - _lastTested.get();
    long sinceRunV6=now - _lastTestedV6.get();
    if (_forceRun == FORCE_IPV4 && sinceRunV4 >= MIN_TEST_FREQUENCY) {
      locked_runTest(false);
    }
 else     if (_haveIPv6Address && _forceRun == FORCE_IPV6 && sinceRunV6 >= MIN_TEST_FREQUENCY) {
      locked_runTest(true);
    }
 else     if (sinceRunV4 >= TEST_FREQUENCY && getIPv6Config() != IPV6_ONLY) {
      locked_runTest(false);
    }
 else     if (_haveIPv6Address && sinceRunV6 >= TEST_FREQUENCY) {
      locked_runTest(true);
    }
 else {
      if (_log.shouldLog(Log.INFO))       _log.info("PTE timeReached(), no test run, last v4 test: " + new java.util.Date(_lastTested.get()) + " last v6 test: "+ new java.util.Date(_lastTestedV6.get()));
    }
  }
  if (_alive) {
    long delay=(TEST_FREQUENCY / 2) + _context.random().nextInt(TEST_FREQUENCY);
    if (_haveIPv6Address && getIPv6Config() != IPV6_ONLY)     delay/=2;
    schedule(delay);
  }
}
