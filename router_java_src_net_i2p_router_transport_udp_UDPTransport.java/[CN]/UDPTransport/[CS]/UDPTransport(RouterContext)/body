{
  super(ctx);
  _context=ctx;
  _log=ctx.logManager().getLog(UDPTransport.class);
  _peersByIdent=new HashMap(128);
  _peersByRemoteHost=new HashMap(128);
  _peersByRelayTag=new HashMap(128);
  _peersByCapacity=new ArrayList['Z' - 'A' + 1];
  for (int i=0; i < _peersByCapacity.length; i++)   _peersByCapacity[i]=new ArrayList(16);
  _endpoint=null;
  TimedWeightedPriorityMessageQueue mq=new TimedWeightedPriorityMessageQueue(ctx,PRIORITY_LIMITS,PRIORITY_WEIGHT,this);
  _outboundMessages=mq;
  _activeThrottle=mq;
  _relayPeers=new ArrayList(1);
  _fastBid=new SharedBid(50);
  _slowBid=new SharedBid(1000);
  _slowPreferredBid=new SharedBid(75);
  _fragments=new OutboundMessageFragments(_context,this,_activeThrottle);
  _inboundFragments=new InboundMessageFragments(_context,_fragments,this);
  _flooder=new UDPFlooder(_context,this);
  _expireEvent=new ExpirePeerEvent();
  _testEvent=new PeerTestEvent();
  _reachabilityStatus=CommSystemFacade.STATUS_UNKNOWN;
  _context.statManager().createRateStat("udp.droppedPeer","How long ago did we receive from a dropped peer (duration == session lifetime","udp",new long[]{60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("udp.droppedPeerInactive","How long ago did we receive from a dropped peer (duration == session lifetime)","udp",new long[]{60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("udp.peersByCapacity","How many peers of the given capacity were available to pick between? (duration == (int)capacity)","udp",new long[]{1 * 60 * 1000,5 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRateStat("udp.statusOK","How many times the peer test returned OK","udp",new long[]{5 * 60 * 1000,20 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("udp.statusDifferent","How many times the peer test returned different IP/ports","udp",new long[]{5 * 60 * 1000,20 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("udp.statusReject","How many times the peer test returned reject unsolicited","udp",new long[]{5 * 60 * 1000,20 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("udp.statusUnknown","How many times the peer test returned an unknown result","udp",new long[]{5 * 60 * 1000,20 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("udp.addressTestInsteadOfUpdate","How many times we fire off a peer test of ourselves instead of adjusting our own reachable address?","udp",new long[]{1 * 60 * 1000,20 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
  _context.statManager().createRateStat("udp.addressUpdated","How many times we adjust our own reachable IP address","udp",new long[]{1 * 60 * 1000,20 * 60 * 1000,60 * 60 * 1000,24 * 60 * 60* 1000});
}
