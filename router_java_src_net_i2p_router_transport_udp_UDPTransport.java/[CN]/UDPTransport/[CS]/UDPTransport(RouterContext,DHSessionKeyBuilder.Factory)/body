{
  super(ctx);
  _dhFactory=dh;
  _log=ctx.logManager().getLog(UDPTransport.class);
  _peersByIdent=new ConcurrentHashMap<Hash,PeerState>(128);
  _peersByRemoteHost=new ConcurrentHashMap<RemoteHostId,PeerState>(128);
  _dropList=new ConcurrentHashSet<RemoteHostId>(2);
  _endpoints=new CopyOnWriteArrayList<UDPEndpoint>();
  if (USE_PRIORITY) {
    TimedWeightedPriorityMessageQueue mq=new TimedWeightedPriorityMessageQueue(ctx,PRIORITY_LIMITS,PRIORITY_WEIGHT,this);
    _outboundMessages=mq;
    _activeThrottle=mq;
  }
 else {
    DummyThrottle mq=new DummyThrottle();
    _outboundMessages=null;
    _activeThrottle=mq;
  }
  _cachedBid=new SharedBid[BID_VALUES.length];
  for (int i=0; i < BID_VALUES.length; i++) {
    _cachedBid[i]=new SharedBid(BID_VALUES[i]);
  }
  _destroyBuilder=new PacketBuilder(_context,this);
  _fragments=new OutboundMessageFragments(_context,this,_activeThrottle);
  _inboundFragments=new InboundMessageFragments(_context,_fragments,this);
  _expireTimeout=EXPIRE_TIMEOUT;
  _expireEvent=new ExpirePeerEvent();
  _testEvent=new PeerTestEvent();
  _reachabilityStatus=Status.UNKNOWN;
  _introManager=new IntroductionManager(_context,this);
  _introducersSelectedOn=-1;
  _lastInboundReceivedOn=-1;
  _mtu=PeerState.LARGE_MTU;
  _mtu_ipv6=PeerState.MIN_IPV6_MTU;
  setupPort();
  _needsRebuild=true;
  _context.statManager().createRateStat("udp.alreadyConnected","What is the lifetime of a reestablished session","udp",RATES);
  _context.statManager().createRateStat("udp.droppedPeer","How long ago did we receive from a dropped peer (duration == session lifetime","udp",RATES);
  _context.statManager().createRateStat("udp.droppedPeerInactive","How long ago did we receive from a dropped peer (duration == session lifetime)","udp",RATES);
  _context.statManager().createRateStat("udp.statusOK","How many times the peer test returned OK","udp",RATES);
  _context.statManager().createRateStat("udp.statusDifferent","How many times the peer test returned different IP/ports","udp",RATES);
  _context.statManager().createRateStat("udp.statusReject","How many times the peer test returned reject unsolicited","udp",RATES);
  _context.statManager().createRateStat("udp.statusUnknown","How many times the peer test returned an unknown result","udp",RATES);
  _context.statManager().createRateStat("udp.addressTestInsteadOfUpdate","How many times we fire off a peer test of ourselves instead of adjusting our own reachable address?","udp",RATES);
  _context.statManager().createRateStat("udp.addressUpdated","How many times we adjust our own reachable IP address","udp",RATES);
  _context.statManager().createRateStat("udp.proactiveReestablish","How long a session was idle for when we proactively reestablished it","udp",RATES);
  _context.statManager().createRateStat("udp.dropPeerDroplist","How many peers currently have their packets dropped outright when a new peer is added to the list?","udp",RATES);
  _context.statManager().createRateStat("udp.dropPeerConsecutiveFailures","How many consecutive failed sends to a peer did we attempt before giving up and reestablishing a new session (lifetime is inactivity perood)","udp",RATES);
  _context.simpleTimer2().addPeriodicEvent(new PingIntroducers(),MIN_EXPIRE_TIMEOUT * 3 / 4);
}
