{
  if (dataSize > OutboundMessageState.MAX_MSG_SIZE) {
    return null;
  }
  Hash to=toAddress.getIdentity().calculateHash();
  PeerState peer=getPeerState(to);
  if (peer != null) {
    if (_log.shouldLog(Log.DEBUG))     _log.debug("bidding on a message to an established peer: " + peer);
    if (preferUDP())     return _cachedBid[FAST_PREFERRED_BID];
 else     return _cachedBid[FAST_BID];
  }
 else {
    if (_reachabilityStatus == CommSystemFacade.STATUS_HOSED) {
      markUnreachable(to);
      return null;
    }
    RouterAddress addr=getTargetAddress(toAddress);
    if (addr == null) {
      markUnreachable(to);
      return null;
    }
    SigType type=toAddress.getIdentity().getSigType();
    if (type == null || !type.isAvailable()) {
      markUnreachable(to);
      return null;
    }
    RouterInfo us=_context.router().getRouterInfo();
    if (us != null) {
      RouterIdentity id=us.getIdentity();
      if (id.getSigType() != SigType.DSA_SHA1) {
        String v=toAddress.getVersion();
        if (VersionComparator.comp(v,MIN_SIGTYPE_VERSION) < 0) {
          markUnreachable(to);
          return null;
        }
      }
    }
    if (!allowConnection())     return _cachedBid[TRANSIENT_FAIL_BID];
    if (_log.shouldLog(Log.DEBUG))     _log.debug("bidding on a message to an unestablished peer: " + to);
    int count=_peersByIdent.size();
    if (alwaysPreferUDP() || count < MIN_PEERS || (introducersRequired() && _introManager.introducerCount() < MIN_INTRODUCER_POOL))     return _cachedBid[SLOW_PREFERRED_BID];
 else     if (preferUDP())     return _cachedBid[SLOW_BID];
 else     if (haveCapacity()) {
      if (addr.getCost() > DEFAULT_COST)       return _cachedBid[SLOWEST_COST_BID];
 else       return _cachedBid[SLOWEST_BID];
    }
 else {
      if (addr.getCost() > DEFAULT_COST)       return _cachedBid[NEAR_CAPACITY_COST_BID];
 else       return _cachedBid[NEAR_CAPACITY_BID];
    }
  }
}
