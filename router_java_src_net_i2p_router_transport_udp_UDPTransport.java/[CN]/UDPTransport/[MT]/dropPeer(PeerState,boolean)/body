{
  if (_log.shouldLog(Log.INFO)) {
    long now=_context.clock().now();
    StringBuffer buf=new StringBuffer(4096);
    long timeSinceSend=now - peer.getLastSendTime();
    long timeSinceRecv=now - peer.getLastReceiveTime();
    long timeSinceAck=now - peer.getLastACKSend();
    buf.append("Dropping remote peer: ").append(peer.toString()).append(" shitlist? ").append(shouldShitlist);
    buf.append(" lifetime: ").append(now - peer.getKeyEstablishedTime());
    buf.append(" time since send/recv/ack: ").append(timeSinceSend).append(" / ");
    buf.append(timeSinceRecv).append(" / ").append(timeSinceAck);
    buf.append("Existing peers: \n");
synchronized (_peersByIdent) {
      for (Iterator iter=_peersByIdent.keySet().iterator(); iter.hasNext(); ) {
        Hash c=(Hash)iter.next();
        PeerState p=(PeerState)_peersByIdent.get(c);
        if (c.equals(peer.getRemotePeer())) {
          if (p != peer) {
            buf.append(" SAME PEER, DIFFERENT STATE ");
          }
 else {
            buf.append(" same peer, same state ");
          }
        }
 else {
          buf.append("Peer ").append(p.toString()).append(" ");
        }
        buf.append(" lifetime: ").append(now - p.getKeyEstablishedTime());
        timeSinceSend=now - p.getLastSendTime();
        timeSinceRecv=now - p.getLastReceiveTime();
        timeSinceAck=now - p.getLastACKSend();
        buf.append(" time since send/recv/ack: ").append(timeSinceSend).append(" / ");
        buf.append(timeSinceRecv).append(" / ").append(timeSinceAck);
        buf.append("\n");
      }
    }
    _log.info(buf.toString(),new Exception("Dropped by"));
  }
  if (peer.getRemotePeer() != null) {
    dropPeerCapacities(peer);
    if (shouldShitlist) {
      long now=_context.clock().now();
      _context.statManager().addRateData("udp.droppedPeer",now - peer.getLastReceiveTime(),now - peer.getKeyEstablishedTime());
      _context.shitlist().shitlistRouter(peer.getRemotePeer(),"dropped after too many retries");
    }
 else {
      long now=_context.clock().now();
      _context.statManager().addRateData("udp.droppedPeerInactive",now - peer.getLastReceiveTime(),now - peer.getKeyEstablishedTime());
    }
synchronized (_peersByIdent) {
      _peersByIdent.remove(peer.getRemotePeer());
    }
  }
  RemoteHostId remoteId=peer.getRemoteHostId();
  if (remoteId != null) {
synchronized (_peersByRemoteHost) {
      _peersByRemoteHost.remove(remoteId);
    }
  }
  _activeThrottle.unchoke(peer.getRemotePeer());
  if (SHOULD_FLOOD_PEERS)   _flooder.removePeer(peer);
  _expireEvent.remove(peer);
}
