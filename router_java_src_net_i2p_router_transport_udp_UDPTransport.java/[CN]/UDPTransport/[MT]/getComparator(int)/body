{
  Comparator<PeerState> rv=null;
switch (Math.abs(sortFlags)) {
case FLAG_IDLE_IN:
    rv=IdleInComparator.instance();
  break;
case FLAG_IDLE_OUT:
rv=IdleOutComparator.instance();
break;
case FLAG_RATE_IN:
rv=RateInComparator.instance();
break;
case FLAG_RATE_OUT:
rv=RateOutComparator.instance();
break;
case FLAG_UPTIME:
rv=UptimeComparator.instance();
break;
case FLAG_SKEW:
rv=SkewComparator.instance();
break;
case FLAG_CWND:
rv=CwndComparator.instance();
break;
case FLAG_SSTHRESH:
rv=SsthreshComparator.instance();
break;
case FLAG_RTT:
rv=RTTComparator.instance();
break;
case FLAG_RTO:
rv=RTOComparator.instance();
break;
case FLAG_MTU:
rv=MTUComparator.instance();
break;
case FLAG_SEND:
rv=SendCountComparator.instance();
break;
case FLAG_RECV:
rv=RecvCountComparator.instance();
break;
case FLAG_RESEND:
rv=ResendComparator.instance();
break;
case FLAG_DUP:
rv=DupComparator.instance();
break;
case FLAG_ALPHA:
default :
rv=AlphaComparator.instance();
break;
}
if (sortFlags < 0) rv=Collections.reverseOrder(rv);
return rv;
}
