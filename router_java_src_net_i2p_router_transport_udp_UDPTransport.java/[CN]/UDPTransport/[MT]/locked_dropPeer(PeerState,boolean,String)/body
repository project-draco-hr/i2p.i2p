{
  peer.dropOutbound();
  peer.expireInboundMessages();
  _introManager.remove(peer);
  _fragments.dropPeer(peer);
  PeerState altByIdent=null;
  if (peer.getRemotePeer() != null) {
    dropPeerCapacities(peer);
    if (shouldShitlist) {
      markUnreachable(peer.getRemotePeer());
    }
    long now=_context.clock().now();
    _context.statManager().addRateData("udp.droppedPeer",now - peer.getLastReceiveTime(),now - peer.getKeyEstablishedTime());
    altByIdent=_peersByIdent.remove(peer.getRemotePeer());
  }
  RemoteHostId remoteId=peer.getRemoteHostId();
  PeerState altByHost=_peersByRemoteHost.remove(remoteId);
  if (altByIdent != altByHost && _log.shouldLog(Log.WARN))   _log.warn("Mismatch on remove, RHID = " + remoteId + " byID = "+ altByIdent+ " byHost = "+ altByHost+ " byIDsz = "+ _peersByIdent.size()+ " byHostsz = "+ _peersByRemoteHost.size());
  _activeThrottle.unchoke(peer.getRemotePeer());
  _expireEvent.remove(peer);
  if ((altByIdent != null) && (peer != altByIdent))   locked_dropPeer(altByIdent,shouldShitlist,"recurse");
  if ((altByHost != null) && (peer != altByHost))   locked_dropPeer(altByHost,shouldShitlist,"recurse");
}
