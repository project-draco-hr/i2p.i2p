{
  if (_log.shouldLog(Log.DEBUG))   _log.debug("REA4 " + host + ':'+ port);
  if (_context.router().isHidden())   return null;
  OrderedProperties options=new OrderedProperties();
  boolean directIncluded;
  boolean isIPv6=host != null && host.contains(":");
  boolean introducersRequired=(!isIPv6) && introducersRequired();
  if (!introducersRequired && allowDirectUDP() && port > 0 && host != null) {
    options.setProperty(UDPAddress.PROP_PORT,String.valueOf(port));
    options.setProperty(UDPAddress.PROP_HOST,host);
    directIncluded=true;
  }
 else {
    directIncluded=false;
  }
  boolean introducersIncluded=false;
  if (introducersRequired) {
    int found=_introManager.pickInbound(options,PUBLIC_RELAY_COUNT);
    if (found > 0) {
      if (_log.shouldLog(Log.INFO))       _log.info("Direct? " + directIncluded + " reqd? "+ introducersRequired+ " picked introducers: "+ found);
      _introducersSelectedOn=_context.clock().now();
      introducersIncluded=true;
    }
 else {
      if (_log.shouldLog(Log.WARN))       _log.warn("Direct? " + directIncluded + " reqd? "+ introducersRequired+ " no introducers");
    }
  }
  if (introducersRequired)   options.setProperty(UDPAddress.PROP_CAPACITY,CAP_TESTING);
 else   options.setProperty(UDPAddress.PROP_CAPACITY,CAP_TESTING_INTRO);
  int mtu;
  if (host == null) {
    mtu=_mtu;
  }
 else {
    try {
      InetAddress ia=InetAddress.getByName(host);
      mtu=setMTU(ia);
    }
 catch (    UnknownHostException uhe) {
      mtu=_mtu;
    }
  }
  if (mtu < PeerState.LARGE_MTU)   options.setProperty(UDPAddress.PROP_MTU,Integer.toString(mtu));
  if (directIncluded || introducersIncluded) {
    if (_introKey != null)     options.setProperty(UDPAddress.PROP_INTRO_KEY,_introKey.toBase64());
    int cost=DEFAULT_COST;
    if (ADJUST_COST && !haveCapacity(91))     cost+=CONGESTION_COST_ADJUSTMENT;
    if (introducersIncluded)     cost+=2;
    if (isIPv6) {
      TransportUtil.IPv6Config config=getIPv6Config();
      if (config == IPV6_PREFERRED)       cost--;
 else       if (config == IPV6_NOT_PREFERRED)       cost++;
    }
    RouterAddress addr=new RouterAddress(STYLE,options,cost);
    RouterAddress current=getCurrentAddress(isIPv6);
    boolean wantsRebuild=!addr.deepEquals(current);
    if (port > 0 && host != null) {
      RouterAddress local;
      if (directIncluded) {
        local=addr;
      }
 else {
        OrderedProperties localOpts=new OrderedProperties();
        localOpts.setProperty(UDPAddress.PROP_PORT,String.valueOf(port));
        localOpts.setProperty(UDPAddress.PROP_HOST,host);
        local=new RouterAddress(STYLE,localOpts,cost);
      }
      replaceCurrentExternalAddress(local,isIPv6);
    }
    if (wantsRebuild) {
      if (_log.shouldLog(Log.INFO))       _log.info("Address rebuilt: " + addr);
      replaceAddress(addr);
      if (allowRebuildRouterInfo)       _context.router().rebuildRouterInfo();
    }
 else {
      addr=null;
    }
    if (!isIPv6)     _needsRebuild=false;
    return addr;
  }
 else {
    if (_log.shouldLog(Log.WARN))     _log.warn("Wanted to rebuild my SSU address, but couldn't specify either the direct or indirect info (needs introducers? " + introducersRequired + ")",new Exception("source"));
    _needsRebuild=true;
    if (port > 0 && host != null) {
      OrderedProperties localOpts=new OrderedProperties();
      localOpts.setProperty(UDPAddress.PROP_PORT,String.valueOf(port));
      localOpts.setProperty(UDPAddress.PROP_HOST,host);
      RouterAddress local=new RouterAddress(STYLE,localOpts,DEFAULT_COST);
      replaceCurrentExternalAddress(local,isIPv6);
    }
    if (hasCurrentAddress()) {
      replaceAddress(null);
      if (allowRebuildRouterInfo)       _context.router().rebuildRouterInfo();
    }
    return null;
  }
}
