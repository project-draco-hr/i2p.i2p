{
  Status old=_reachabilityStatus;
  long now=_context.clock().now();
switch (status) {
case OK:
    _context.statManager().addRateData("udp.statusOK",1);
  _reachabilityStatus=status;
_reachabilityStatusLastUpdated=now;
break;
case DIFFERENT:
_context.statManager().addRateData("udp.statusDifferent",1);
_reachabilityStatus=status;
_reachabilityStatusLastUpdated=now;
break;
case REJECT_UNSOLICITED:
_context.statManager().addRateData("udp.statusReject",1);
case DISCONNECTED:
case HOSED:
_reachabilityStatus=status;
_reachabilityStatusLastUpdated=now;
break;
case UNKNOWN:
default :
_context.statManager().addRateData("udp.statusUnknown",1);
break;
}
_testEvent.setLastTested();
if (status != Status.UNKNOWN) {
if (status != old) _reachabilityStatusUnchanged=0;
 else _reachabilityStatusUnchanged++;
}
if ((status != old) && (status != Status.UNKNOWN)) {
if (_log.shouldLog(Log.WARN)) _log.warn("Old status: " + old + " New status: "+ status+ " from: ",new Exception("traceback"));
if (old != Status.UNKNOWN) _context.router().eventLog().addEvent(EventLog.REACHABILITY,status.toStatusString());
rebuildExternalAddress();
}
 else {
if (_log.shouldLog(Log.INFO)) _log.info("Status unchanged: " + _reachabilityStatus + " ("+ _reachabilityStatusUnchanged+ " consecutive times), last updated "+ DataHelper.formatDuration(_context.clock().now() - _reachabilityStatusLastUpdated)+ " ago");
}
}
