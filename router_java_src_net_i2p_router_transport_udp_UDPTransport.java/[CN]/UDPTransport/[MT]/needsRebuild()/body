{
  if (_needsRebuild)   return true;
  if (_context.router().isHidden())   return false;
  if (introducersRequired()) {
    RouterAddress addr=_externalAddress;
    UDPAddress ua=new UDPAddress(addr);
    int valid=0;
    Hash peerHash=new Hash();
    for (int i=0; i < ua.getIntroducerCount(); i++) {
      peerHash.setData(ua.getIntroducerKey(i));
      PeerState peer=getPeerState(peerHash);
      if (peer != null)       valid++;
    }
    if (valid >= PUBLIC_RELAY_COUNT) {
      if (_introducersSelectedOn < _context.clock().now() - 10 * 60 * 1000) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Our introducers are valid, but thy havent changed in a while, so lets rechoose");
        return true;
      }
 else {
        if (_log.shouldLog(Log.INFO))         _log.info("Our introducers are valid and haven't changed in a while");
        return false;
      }
    }
 else {
      if (_log.shouldLog(Log.INFO))       _log.info("Our introducers are not valid (" + valid + ")");
      return true;
    }
  }
 else {
    boolean rv=(_externalListenHost == null) || (_externalListenPort <= 0);
    if (_log.shouldLog(Log.INFO)) {
      if (rv) {
        _log.info("Need to initialize our direct SSU info");
      }
 else {
        RouterAddress addr=_externalAddress;
        UDPAddress ua=new UDPAddress(addr);
        if ((ua.getPort() <= 0) || (ua.getHost() == null)) {
          _log.info("Our direct SSU info is initialized, but not used in our address yet");
          rv=true;
        }
 else {
          _log.info("Our direct SSU info is initialized");
        }
      }
    }
    return rv;
  }
}
