{
  if (_log.shouldLog(Log.DEBUG))   _log.debug("REA4 " + host + ':'+ port);
  if (_context.router().isHidden())   return null;
  OrderedProperties options=new OrderedProperties();
  boolean directIncluded=false;
  boolean isIPv6=host != null && host.contains(":");
  if (allowDirectUDP() && port > 0 && host != null) {
    options.setProperty(UDPAddress.PROP_PORT,String.valueOf(port));
    options.setProperty(UDPAddress.PROP_HOST,host);
    directIncluded=true;
  }
  boolean introducersRequired=(!isIPv6) && introducersRequired();
  boolean introducersIncluded=false;
  if (introducersRequired || !directIncluded) {
    int found=_introManager.pickInbound(options,PUBLIC_RELAY_COUNT);
    if (found > 0) {
      if (_log.shouldLog(Log.INFO))       _log.info("Direct? " + directIncluded + " reqd? "+ introducersRequired+ " picked introducers: "+ found);
      _introducersSelectedOn=_context.clock().now();
      introducersIncluded=true;
    }
 else {
      if (_log.shouldLog(Log.WARN))       _log.warn("Direct? " + directIncluded + " reqd? "+ introducersRequired+ " no introducers");
    }
  }
  if (introducersRequired)   options.setProperty(UDPAddress.PROP_CAPACITY,"" + UDPAddress.CAPACITY_TESTING);
 else   options.setProperty(UDPAddress.PROP_CAPACITY,"" + UDPAddress.CAPACITY_TESTING + UDPAddress.CAPACITY_INTRODUCER);
  if (_mtu < PeerState.LARGE_MTU)   options.setProperty(UDPAddress.PROP_MTU,Integer.toString(_mtu));
  if (directIncluded || introducersIncluded) {
    if (_introKey != null)     options.setProperty(UDPAddress.PROP_INTRO_KEY,_introKey.toBase64());
    int cost=DEFAULT_COST;
    if (ADJUST_COST && !haveCapacity(91))     cost++;
    RouterAddress addr=new RouterAddress(STYLE,options,cost);
    RouterAddress current=getCurrentAddress(isIPv6);
    boolean wantsRebuild=!addr.deepEquals(current);
    if (wantsRebuild) {
      if (_log.shouldLog(Log.INFO))       _log.info("Address rebuilt: " + addr,new Exception());
      replaceAddress(addr);
      if (allowRebuildRouterInfo)       _context.router().rebuildRouterInfo();
    }
 else {
      addr=null;
    }
    if (!isIPv6)     _needsRebuild=false;
    return addr;
  }
 else {
    if (_log.shouldLog(Log.WARN))     _log.warn("Wanted to rebuild my SSU address, but couldn't specify either the direct or indirect info (needs introducers? " + introducersRequired + ")",new Exception("source"));
    _needsRebuild=true;
    return null;
  }
}
