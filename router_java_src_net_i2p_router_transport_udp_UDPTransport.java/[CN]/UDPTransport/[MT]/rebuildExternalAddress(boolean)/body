{
  String port=_context.getProperty(PROP_EXTERNAL_PORT);
  if (port != null) {
    try {
      _externalListenPort=Integer.parseInt(port);
    }
 catch (    NumberFormatException nfe) {
      _externalListenPort=-1;
    }
  }
  if (explicitAddressSpecified()) {
    try {
      String host=_context.getProperty(PROP_EXTERNAL_HOST);
      _externalListenHost=InetAddress.getByName(host);
    }
 catch (    UnknownHostException uhe) {
      _externalListenHost=null;
    }
  }
  if (_context.router().isHidden())   return;
  Properties options=new Properties();
  boolean directIncluded=false;
  if (allowDirectUDP() && (_externalListenPort > 0) && (_externalListenHost != null)&& (isValid(_externalListenHost.getAddress()))) {
    options.setProperty(UDPAddress.PROP_PORT,String.valueOf(_externalListenPort));
    options.setProperty(UDPAddress.PROP_HOST,_externalListenHost.getHostAddress());
    directIncluded=true;
  }
  boolean introducersRequired=introducersRequired();
  boolean introducersIncluded=false;
  if (introducersRequired || !directIncluded) {
    int found=_introManager.pickInbound(options,PUBLIC_RELAY_COUNT);
    if (found > 0) {
      if (_log.shouldLog(Log.INFO))       _log.info("Picked peers: " + found);
      _introducersSelectedOn=_context.clock().now();
      introducersIncluded=true;
    }
  }
  if (introducersRequired)   options.setProperty(UDPAddress.PROP_CAPACITY,"" + UDPAddress.CAPACITY_TESTING);
 else   options.setProperty(UDPAddress.PROP_CAPACITY,"" + UDPAddress.CAPACITY_TESTING + UDPAddress.CAPACITY_INTRODUCER);
  if (directIncluded || introducersIncluded) {
    options.setProperty(UDPAddress.PROP_INTRO_KEY,_introKey.toBase64());
    RouterAddress addr=new RouterAddress();
    addr.setCost(5);
    addr.setExpiration(null);
    addr.setTransportStyle(STYLE);
    addr.setOptions(options);
    boolean wantsRebuild=false;
    if ((_externalAddress == null) || !(_externalAddress.equals(addr)))     wantsRebuild=true;
    RouterAddress oldAddress=_externalAddress;
    _externalAddress=addr;
    if (_log.shouldLog(Log.INFO))     _log.info("Address rebuilt: " + addr);
    replaceAddress(addr,oldAddress);
    if (allowRebuildRouterInfo && wantsRebuild)     _context.router().rebuildRouterInfo();
    _needsRebuild=false;
  }
 else {
    if (_log.shouldLog(Log.WARN))     _log.warn("Wanted to rebuild my SSU address, but couldn't specify either the direct or indirect info (needs introducers? " + introducersRequired + ")",new Exception("source"));
    _needsRebuild=true;
  }
}
