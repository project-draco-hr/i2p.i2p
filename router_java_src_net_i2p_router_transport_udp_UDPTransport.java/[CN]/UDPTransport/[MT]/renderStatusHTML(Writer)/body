{
  List peers=null;
synchronized (_peersByIdent) {
    peers=new ArrayList(_peersByIdent.values());
  }
  long offsetTotal=0;
  StringBuffer buf=new StringBuffer(512);
  buf.append("<b>UDP connections: ").append(peers.size()).append("</b><br />\n");
  buf.append("<table border=\"1\">\n");
  buf.append(" <tr><td><b>peer</b></td><td><b>activity (in/out)</b></td>");
  buf.append("     <td><b>transfer (in/out)</b></td>\n");
  buf.append("     <td><b>uptime</b></td><td><b>skew</b></td>\n");
  buf.append("     <td><b>cwnd</b></td><td><b>ssthresh</b></td>\n");
  buf.append("     <td><b>rtt</b></td><td><b>dev</b></td><td><b>rto</b></td>\n");
  buf.append("     <td><b>send</b></td><td><b>recv</b></td>\n");
  buf.append("     <td><b>resent</b></td><td><b>dupRecv</b></td>\n");
  buf.append(" </tr>\n");
  out.write(buf.toString());
  buf.setLength(0);
  long now=_context.clock().now();
  for (int i=0; i < peers.size(); i++) {
    PeerState peer=(PeerState)peers.get(i);
    if (now - peer.getLastReceiveTime() > 60 * 60 * 1000)     continue;
    buf.append("<tr>");
    String name=peer.getRemotePeer().toBase64().substring(0,6);
    buf.append("<td nowrap>");
    buf.append("<a href=\"netdb.jsp#");
    buf.append(name);
    buf.append("\">");
    buf.append(name).append("@");
    byte ip[]=peer.getRemoteIP();
    for (int j=0; j < ip.length; j++) {
      buf.append(ip[j] & 0xFF);
      if (j + 1 < ip.length)       buf.append('.');
    }
    buf.append(':').append(peer.getRemotePort());
    buf.append("</a>");
    if (_activeThrottle.isChoked(peer.getRemotePeer()))     buf.append(" [choked]");
    if (peer.getConsecutiveFailedSends() > 0)     buf.append(" [").append(peer.getConsecutiveFailedSends()).append(" failures]");
    if (_context.shitlist().isShitlisted(peer.getRemotePeer()))     buf.append(" [shitlisted]");
    buf.append("</td>");
    buf.append("<td>");
    buf.append((now - peer.getLastReceiveTime()) / 1000);
    buf.append("s/");
    buf.append((now - peer.getLastSendTime()) / 1000);
    buf.append("s</td>");
    buf.append("<td>");
    buf.append(formatKBps(peer.getReceiveBps()));
    buf.append("KBps/");
    buf.append(formatKBps(peer.getSendBps()));
    buf.append("KBps</td>");
    buf.append("<td>");
    buf.append(DataHelper.formatDuration(now - peer.getKeyEstablishedTime()));
    buf.append("</td>");
    buf.append("<td>");
    buf.append(peer.getClockSkew() / 1000);
    buf.append("s</td>");
    offsetTotal=offsetTotal + peer.getClockSkew();
    buf.append("<td>");
    buf.append(peer.getSendWindowBytes() / 1024);
    buf.append("K</td>");
    buf.append("<td>");
    buf.append(peer.getSlowStartThreshold() / 1024);
    buf.append("K</td>");
    buf.append("<td>");
    buf.append(peer.getRTT());
    buf.append("</td>");
    buf.append("<td>");
    buf.append(peer.getRTTDeviation());
    buf.append("</td>");
    buf.append("<td>");
    buf.append(peer.getRTO());
    buf.append("</td>");
    buf.append("<td>");
    buf.append(peer.getPacketsTransmitted());
    buf.append("</td>");
    buf.append("<td>");
    buf.append(peer.getPacketsReceived());
    buf.append("</td>");
    double sendLostPct=(double)peer.getPacketsRetransmitted() / (double)PeerState.RETRANSMISSION_PERIOD_WIDTH;
    buf.append("<td>");
    buf.append(peer.getPacketRetransmissionRate());
    buf.append("</td>");
    double recvDupPct=(double)peer.getPacketsReceivedDuplicate() / (double)peer.getPacketsReceived();
    buf.append("<td>");
    buf.append(formatPct(recvDupPct));
    buf.append("</td>");
    buf.append("</tr>");
    out.write(buf.toString());
    buf.setLength(0);
  }
  out.write("</table>\n");
  buf.append("<b>Average clock skew, UDP peers:");
  if (peers.size() > 0)   buf.append(offsetTotal / peers.size()).append("ms</b><br><br>\n");
 else   buf.append("n/a</b><br><br>\n");
  out.write(buf.toString());
  buf.setLength(0);
}
