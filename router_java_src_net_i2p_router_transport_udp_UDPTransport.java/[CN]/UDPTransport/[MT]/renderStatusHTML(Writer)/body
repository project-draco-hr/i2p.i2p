{
  TreeSet peers=new TreeSet(AlphaComparator.instance());
synchronized (_peersByIdent) {
    peers.addAll(_peersByIdent.values());
  }
  long offsetTotal=0;
  StringBuffer buf=new StringBuffer(512);
  buf.append("<b>UDP connections: ").append(peers.size()).append("</b><br />\n");
  buf.append("<table border=\"1\">\n");
  buf.append(" <tr><td><b>peer</b></td><td><b>idle</b></td>");
  buf.append("     <td><b>in/out</b></td>\n");
  buf.append("     <td><b>up</b></td><td><b>skew</b></td>\n");
  buf.append("     <td><b>cwnd</b></td><td><b>ssthresh</b></td>\n");
  buf.append("     <td><b>rtt</b></td><td><b>dev</b></td><td><b>rto</b></td>\n");
  buf.append("     <td><b>send</b></td><td><b>recv</b></td>\n");
  buf.append("     <td><b>resent</b></td><td><b>dupRecv</b></td>\n");
  buf.append(" </tr>\n");
  out.write(buf.toString());
  buf.setLength(0);
  long now=_context.clock().now();
  for (Iterator iter=peers.iterator(); iter.hasNext(); ) {
    PeerState peer=(PeerState)iter.next();
    if (now - peer.getLastReceiveTime() > 60 * 60 * 1000)     continue;
    buf.append("<tr>");
    String name=peer.getRemotePeer().toBase64().substring(0,6);
    buf.append("<td valign=\"top\" nowrap=\"nowrap\"><code>");
    buf.append("<a href=\"netdb.jsp#");
    buf.append(name);
    buf.append("\">");
    buf.append(name).append("@");
    byte ip[]=peer.getRemoteIP();
    for (int j=0; j < ip.length; j++) {
      int num=ip[j] & 0xFF;
      if (num < 10)       buf.append("00");
 else       if (num < 100)       buf.append("0");
      buf.append(num);
      if (j + 1 < ip.length)       buf.append('.');
    }
    buf.append(':');
    int port=peer.getRemotePort();
    if (port < 10)     buf.append("0000");
 else     if (port < 100)     buf.append("000");
 else     if (port < 1000)     buf.append("00");
 else     if (port < 10000)     buf.append("0");
    buf.append(port);
    buf.append("</a>");
    if (peer.getWeRelayToThemAs() > 0)     buf.append("&gt;");
 else     buf.append("&nbsp;");
    if (peer.getTheyRelayToUsAs() > 0)     buf.append("&lt;");
 else     buf.append("&nbsp;");
    boolean appended=false;
    if (_activeThrottle.isChoked(peer.getRemotePeer())) {
      if (!appended)       buf.append("<br />");
      buf.append(" [choked]");
      appended=true;
    }
    if (peer.getConsecutiveFailedSends() > 0) {
      if (!appended)       buf.append("<br />");
      buf.append(" [").append(peer.getConsecutiveFailedSends()).append(" failures]");
      appended=true;
    }
    if (_context.shitlist().isShitlisted(peer.getRemotePeer())) {
      if (!appended)       buf.append("<br />");
      buf.append(" [shitlisted]");
      appended=true;
    }
    buf.append("</code></td>");
    buf.append("<td valign=\"top\" ><code>");
    buf.append((now - peer.getLastReceiveTime()) / 1000);
    buf.append("s/");
    buf.append((now - peer.getLastSendTime()) / 1000);
    buf.append("s</code></td>");
    buf.append("<td valign=\"top\" ><code>");
    buf.append(formatKBps(peer.getReceiveBps()));
    buf.append("KBps/");
    buf.append(formatKBps(peer.getSendBps()));
    buf.append("KBps ");
    buf.append("</code></td>");
    buf.append("<td valign=\"top\" ><code>");
    buf.append(DataHelper.formatDuration(now - peer.getKeyEstablishedTime()));
    buf.append("</code></td>");
    buf.append("<td valign=\"top\" ><code>");
    buf.append(peer.getClockSkew() / 1000);
    buf.append("s</code></td>");
    offsetTotal=offsetTotal + peer.getClockSkew();
    buf.append("<td valign=\"top\" ><code>");
    buf.append(peer.getSendWindowBytes() / 1024);
    buf.append("K</code></td>");
    buf.append("<td valign=\"top\" ><code>");
    buf.append(peer.getSlowStartThreshold() / 1024);
    buf.append("K</code></td>");
    buf.append("<td valign=\"top\" ><code>");
    buf.append(peer.getRTT());
    buf.append("</code></td>");
    buf.append("<td valign=\"top\" ><code>");
    buf.append(peer.getRTTDeviation());
    buf.append("</code></td>");
    buf.append("<td valign=\"top\" ><code>");
    buf.append(peer.getRTO());
    buf.append("</code></td>");
    buf.append("<td valign=\"top\" ><code>");
    buf.append(peer.getPacketsTransmitted());
    buf.append("</code></td>");
    buf.append("<td valign=\"top\" ><code>");
    buf.append(peer.getPacketsReceived());
    buf.append("</code></td>");
    double sent=(double)peer.getPacketsPeriodTransmitted();
    double sendLostPct=0;
    if (sent > 0)     sendLostPct=(double)peer.getPacketsRetransmitted() / (sent);
    buf.append("<td valign=\"top\" ><code>");
    buf.append(peer.getPacketsRetransmitted());
    buf.append("</code></td>");
    double recvDupPct=(double)peer.getPacketsReceivedDuplicate() / (double)peer.getPacketsReceived();
    buf.append("<td valign=\"top\" ><code>");
    buf.append(formatPct(recvDupPct));
    buf.append("</code></td>");
    buf.append("</tr>");
    out.write(buf.toString());
    buf.setLength(0);
  }
  out.write("</table>\n");
  buf.append("<b>Average clock skew, UDP peers:");
  if (peers.size() > 0)   buf.append(offsetTotal / peers.size()).append("ms</b><br><br>\n");
 else   buf.append("n/a</b><br><br>\n");
  out.write(buf.toString());
  buf.setLength(0);
}
