{
  TreeSet peers=new TreeSet(getComparator(sortFlags));
synchronized (_peersByIdent) {
    peers.addAll(_peersByIdent.values());
  }
  long offsetTotal=0;
  int bpsIn=0;
  int bpsOut=0;
  long uptimeMsTotal=0;
  long cwinTotal=0;
  long rttTotal=0;
  long rtoTotal=0;
  long sendTotal=0;
  long recvTotal=0;
  long resentTotal=0;
  long dupRecvTotal=0;
  int numPeers=0;
  StringBuffer buf=new StringBuffer(512);
  buf.append("<b id=\"udpcon\">UDP connections: ").append(peers.size()).append("</b><br />\n");
  buf.append("<table border=\"1\">\n");
  buf.append(" <tr><td><b><a href=\"#def.peer\">peer</a></b>");
  if (sortFlags == FLAG_ALPHA)   buf.append(" V ");
 else   buf.append(" <a href=\"").append(urlBase).append("?sort=0\">V</a> ");
  buf.append("</td><td><b><a href=\"#def.idle\">idle</a></b>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by idle inbound",FLAG_IDLE_IN);
  buf.append("/");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by idle outbound",FLAG_IDLE_OUT);
  buf.append("</td>");
  buf.append("     <td><b><a href=\"#def.rate\">in/out</a></b>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by inbound rate",FLAG_RATE_IN);
  buf.append("/");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by outbound rate",FLAG_RATE_OUT);
  buf.append("</td>\n");
  buf.append("     <td><b><a href=\"#def.up\">up</a></b>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by connection uptime",FLAG_UPTIME);
  buf.append("</td><td><b><a href=\"#def.skew\">skew</a></b>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by clock skew",FLAG_SKEW);
  buf.append("</td>\n");
  buf.append("     <td><b><a href=\"#def.cwnd\">cwnd</a></b>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by congestion window",FLAG_CWND);
  buf.append("</td><td><b><a href=\"#def.ssthresh\">ssthresh</a></b>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by slow start threshold",FLAG_SSTHRESH);
  buf.append("</td>\n");
  buf.append("     <td><b><a href=\"#def.rtt\">rtt</a></b>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by round trip time",FLAG_RTT);
  buf.append("</td><td><b><a href=\"#def.dev\">dev</a></b>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by round trip time deviation",FLAG_DEV);
  buf.append("</td><td><b><a href=\"#def.rto\">rto</a></b>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by retransmission timeout",FLAG_RTO);
  buf.append("</td>\n");
  buf.append("     <td><b><a href=\"#def.mtu\">mtu</a></b>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by maximum transmit unit",FLAG_MTU);
  buf.append("</td><td><b><a href=\"#def.send\">send</a></b>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by packets sent",FLAG_SEND);
  buf.append("</td><td><b><a href=\"#def.recv\">recv</a></b>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by packets received",FLAG_RECV);
  buf.append("</td>\n");
  buf.append("     <td><b><a href=\"#def.resent\">resent</a></b>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by packets retransmitted",FLAG_RESEND);
  buf.append("</td><td><b><a href=\"#def.dupRecv\">dupRecv</a></b>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by packets received more than once",FLAG_DUP);
  buf.append("</td>\n");
  buf.append(" </tr>\n");
  out.write(buf.toString());
  buf.setLength(0);
  long now=_context.clock().now();
  for (Iterator iter=peers.iterator(); iter.hasNext(); ) {
    PeerState peer=(PeerState)iter.next();
    if (now - peer.getLastReceiveTime() > 60 * 60 * 1000)     continue;
    buf.append("<tr>");
    String name=peer.getRemotePeer().toBase64().substring(0,6);
    buf.append("<td valign=\"top\" nowrap=\"nowrap\"><code>");
    buf.append("<a href=\"netdb.jsp#");
    buf.append(name);
    buf.append("\">");
    buf.append(name);
    buf.append("</a>&nbsp;");
    if (peer.isInbound())     buf.append("&gt; ");
 else     buf.append("&lt; ");
    if (peer.getWeRelayToThemAs() > 0)     buf.append("^");
 else     buf.append("&nbsp;");
    if (peer.getTheyRelayToUsAs() > 0)     buf.append("v");
    boolean appended=false;
    if (_activeThrottle.isChoked(peer.getRemotePeer())) {
      if (!appended)       buf.append("<br />");
      buf.append(" [choked]");
      appended=true;
    }
    if (peer.getConsecutiveFailedSends() > 0) {
      if (!appended)       buf.append("<br />");
      buf.append(" [").append(peer.getConsecutiveFailedSends()).append(" failures]");
      appended=true;
    }
    if (_context.shitlist().isShitlisted(peer.getRemotePeer(),STYLE)) {
      if (!appended)       buf.append("<br />");
      buf.append(" [shitlisted]");
      appended=true;
    }
    buf.append("</code></td>");
    long idleIn=(now - peer.getLastReceiveTime()) / 1000;
    long idleOut=(now - peer.getLastSendTime()) / 1000;
    if (idleIn < 0)     idleIn=0;
    if (idleOut < 0)     idleOut=0;
    buf.append("<td valign=\"top\" align=\"right\" ><code>");
    buf.append(idleIn);
    buf.append("s/");
    buf.append(idleOut);
    buf.append("s</code></td>");
    int recvBps=(idleIn > 2 ? 0 : peer.getReceiveBps());
    int sendBps=(idleOut > 2 ? 0 : peer.getSendBps());
    buf.append("<td valign=\"top\" align=\"right\" ><code>");
    buf.append(formatKBps(recvBps));
    buf.append("/");
    buf.append(formatKBps(sendBps));
    buf.append("KBps ");
    buf.append("</code></td>");
    long uptime=now - peer.getKeyEstablishedTime();
    buf.append("<td valign=\"top\" align=\"right\" ><code>");
    buf.append(DataHelper.formatDuration(uptime));
    buf.append("</code></td>");
    buf.append("<td valign=\"top\" align=\"right\" ><code>");
    buf.append(peer.getClockSkew());
    buf.append("s</code></td>");
    offsetTotal=offsetTotal + peer.getClockSkew();
    long sendWindow=peer.getSendWindowBytes();
    buf.append("<td valign=\"top\" align=\"right\" ><code>");
    buf.append(sendWindow / 1024);
    buf.append("K");
    buf.append("/").append(peer.getConcurrentSends());
    buf.append("/").append(peer.getConcurrentSendWindow());
    buf.append("/").append(peer.getConsecutiveSendRejections());
    buf.append("</code></td>");
    buf.append("<td valign=\"top\" align=\"right\" ><code>");
    buf.append(peer.getSlowStartThreshold() / 1024);
    buf.append("K</code></td>");
    int rtt=peer.getRTT();
    int rto=peer.getRTO();
    buf.append("<td valign=\"top\" align=\"right\" ><code>");
    buf.append(rtt);
    buf.append("</code></td>");
    buf.append("<td valign=\"top\" align=\"right\" ><code>");
    buf.append(peer.getRTTDeviation());
    buf.append("</code></td>");
    buf.append("<td valign=\"top\" align=\"right\" ><code>");
    buf.append(rto);
    buf.append("</code></td>");
    buf.append("<td valign=\"top\" align=\"right\" ><code>");
    buf.append(peer.getMTU()).append("/").append(peer.getReceiveMTU());
    buf.append("</code></td>");
    long sent=peer.getPacketsTransmitted();
    long recv=peer.getPacketsReceived();
    buf.append("<td valign=\"top\" align=\"right\" ><code>");
    buf.append(sent);
    buf.append("</code></td>");
    buf.append("<td valign=\"top\" align=\"right\" ><code>");
    buf.append(recv);
    buf.append("</code></td>");
    long resent=peer.getPacketsRetransmitted();
    long dupRecv=peer.getPacketsReceivedDuplicate();
    buf.append("<td valign=\"top\" align=\"right\" ><code>");
    buf.append(resent);
    buf.append("</code></td>");
    double recvDupPct=(double)peer.getPacketsReceivedDuplicate() / (double)peer.getPacketsReceived();
    buf.append("<td valign=\"top\" align=\"right\" ><code>");
    buf.append(dupRecv);
    buf.append("</code></td>");
    buf.append("</tr>\n");
    out.write(buf.toString());
    buf.setLength(0);
    bpsIn+=recvBps;
    bpsOut+=sendBps;
    uptimeMsTotal+=uptime;
    cwinTotal+=sendWindow;
    rttTotal+=rtt;
    rtoTotal+=rto;
    sendTotal+=sent;
    recvTotal+=recv;
    resentTotal+=resent;
    dupRecvTotal+=dupRecv;
    numPeers++;
  }
  buf.append("<tr><td colspan=\"15\"><hr /></td></tr>\n");
  buf.append(" <tr><td colspan=\"2\"><b>Total</b></td>");
  buf.append("     <td align=\"right\">");
  buf.append(formatKBps(bpsIn)).append("/").append(formatKBps(bpsOut));
  buf.append("KBps</td>");
  buf.append("     <td align=\"right\">").append(numPeers > 0 ? DataHelper.formatDuration(uptimeMsTotal / numPeers) : "0s");
  buf.append("</td><td align=\"right\">").append(numPeers > 0 ? DataHelper.formatDuration(offsetTotal * 1000 / numPeers) : "0ms").append("</td>\n");
  buf.append("     <td align=\"right\">");
  buf.append(numPeers > 0 ? cwinTotal / (numPeers * 1024) + "K" : "0K");
  buf.append("</td><td>&nbsp;</td>\n");
  buf.append("     <td align=\"right\">");
  buf.append(numPeers > 0 ? rttTotal / numPeers : 0);
  buf.append("</td><td align=\"right\">&nbsp;</td><td align=\"right\">");
  buf.append(numPeers > 0 ? rtoTotal / numPeers : 0);
  buf.append("</td>\n     <td>&nbsp;</td><td align=\"right\">");
  buf.append(sendTotal).append("</td><td align=\"right\">").append(recvTotal).append("</td>\n");
  buf.append("     <td align=\"right\">").append(resentTotal);
  buf.append("</td><td align=\"right\">").append(dupRecvTotal).append("</td>\n");
  buf.append(" </tr>\n");
  buf.append("<tr><td colspan=\"15\" valign=\"top\" align=\"left\">");
  long bytesTransmitted=_context.bandwidthLimiter().getTotalAllocatedOutboundBytes();
  double averagePacketSize=_context.statManager().getRate("udp.sendPacketSize").getLifetimeAverageValue();
  resentTotal=(long)_context.statManager().getRate("udp.packetsRetransmitted").getLifetimeEventCount();
  double nondupSent=((double)bytesTransmitted - ((double)resentTotal) * averagePacketSize);
  double bwResent=(nondupSent <= 0 ? 0d : ((((double)resentTotal) * averagePacketSize) / nondupSent));
  buf.append("Percentage of bytes retransmitted (lifetime): ").append(formatPct(bwResent));
  buf.append(" <i>(includes retransmission required by packet loss)</i><br />\n");
  buf.append("</td></tr>\n");
  out.write(buf.toString());
  buf.setLength(0);
  out.write(KEY);
  out.write("</table>\n");
}
