{
  TreeSet<PeerState> peers=new TreeSet(getComparator(sortFlags));
  peers.addAll(_peersByIdent.values());
  long offsetTotal=0;
  int bpsIn=0;
  int bpsOut=0;
  long uptimeMsTotal=0;
  long cwinTotal=0;
  long rttTotal=0;
  long rtoTotal=0;
  long sendTotal=0;
  long recvTotal=0;
  long resentTotal=0;
  long dupRecvTotal=0;
  int numPeers=0;
  StringBuilder buf=new StringBuilder(512);
  buf.append("<h3 id=\"udpcon\">").append(_("UDP connections")).append(": ").append(peers.size());
  buf.append(". ").append(_("Limit")).append(": ").append(getMaxConnections());
  buf.append(". ").append(_("Timeout")).append(": ").append(DataHelper.formatDuration(_expireTimeout));
  buf.append(".</h3>\n");
  buf.append("<table>\n");
  buf.append("<tr><th class=\"smallhead\" nowrap><a href=\"#def.peer\">").append(_("Peer")).append("</a><br>");
  if (sortFlags != FLAG_ALPHA)   appendSortLinks(buf,urlBase,sortFlags,_("Sort by peer hash"),FLAG_ALPHA);
  buf.append("</th><th class=\"smallhead\" nowrap><a href=\"#def.dir\" title=\"").append(_("Direction/Introduction")).append("\">").append(_("Dir")).append("</a></th><th class=\"smallhead\" nowrap><a href=\"#def.idle\">").append(_("Idle")).append("</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,_("Sort by idle inbound"),FLAG_IDLE_IN);
  buf.append(" / ");
  appendSortLinks(buf,urlBase,sortFlags,_("Sort by idle outbound"),FLAG_IDLE_OUT);
  buf.append("</th>");
  buf.append("<th class=\"smallhead\" nowrap><a href=\"#def.rate\">").append(_("In/Out")).append("</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,_("Sort by inbound rate"),FLAG_RATE_IN);
  buf.append(" / ");
  appendSortLinks(buf,urlBase,sortFlags,_("Sort by outbound rate"),FLAG_RATE_OUT);
  buf.append("</th>\n");
  buf.append("<th class=\"smallhead\" nowrap><a href=\"#def.up\">").append(_("Up")).append("</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,_("Sort by connection uptime"),FLAG_UPTIME);
  buf.append("</th><th class=\"smallhead\" nowrap><a href=\"#def.skew\">").append(_("Skew")).append("</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,_("Sort by clock skew"),FLAG_SKEW);
  buf.append("</th>\n");
  buf.append("<th class=\"smallhead\" nowrap><a href=\"#def.cwnd\">CWND</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,_("Sort by congestion window"),FLAG_CWND);
  buf.append("</th><th class=\"smallhead\" nowrap><a href=\"#def.ssthresh\">SST</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,_("Sort by slow start threshold"),FLAG_SSTHRESH);
  buf.append("</th>\n");
  buf.append("<th class=\"smallhead\" nowrap><a href=\"#def.rtt\">RTT</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,_("Sort by round trip time"),FLAG_RTT);
  buf.append("</th><th class=\"smallhead\" nowrap><a href=\"#def.dev\">").append(_("Dev")).append("</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,_("Sort by round trip time deviation"),FLAG_DEV);
  buf.append("</th><th class=\"smallhead\" nowrap><a href=\"#def.rto\">RTO</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,_("Sort by retransmission timeout"),FLAG_RTO);
  buf.append("</th>\n");
  buf.append("<th class=\"smallhead\" nowrap><a href=\"#def.mtu\">MTU</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,_("Sort by outbound maximum transmit unit"),FLAG_MTU);
  buf.append("</th><th class=\"smallhead\" nowrap><a href=\"#def.send\">").append(_("TX")).append("</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,_("Sort by packets sent"),FLAG_SEND);
  buf.append("</th><th class=\"smallhead\" nowrap><a href=\"#def.recv\">").append(_("RX")).append("</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,_("Sort by packets received"),FLAG_RECV);
  buf.append("</th>\n");
  buf.append("<th class=\"smallhead\" nowrap><a href=\"#def.resent\">").append(_("Dup TX")).append("</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,_("Sort by packets retransmitted"),FLAG_RESEND);
  buf.append("</th><th class=\"smallhead\" nowrap><a href=\"#def.dupRecv\">").append(_("Dup RX")).append("</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,_("Sort by packets received more than once"),FLAG_DUP);
  buf.append("</th></tr>\n");
  out.write(buf.toString());
  buf.setLength(0);
  long now=_context.clock().now();
  for (Iterator iter=peers.iterator(); iter.hasNext(); ) {
    PeerState peer=(PeerState)iter.next();
    if (now - peer.getLastReceiveTime() > 60 * 60 * 1000)     continue;
    buf.append("<tr><td class=\"cells\" align=\"left\" nowrap>");
    buf.append(_context.commSystem().renderPeerHTML(peer.getRemotePeer()));
    buf.append("</td><td class=\"cells\" nowrap align=\"left\">");
    if (peer.isInbound())     buf.append("<img src=\"/themes/console/images/inbound.png\" alt=\"Inbound\" title=\"").append(_("Inbound")).append("\">");
 else     buf.append("<img src=\"/themes/console/images/outbound.png\" alt=\"Outbound\" title=\"").append(_("Outbound")).append("\">");
    if (peer.getWeRelayToThemAs() > 0)     buf.append("&nbsp;&nbsp;<img src=\"/themes/console/images/outbound.png\" height=\"8\" width=\"12\" alt=\"^\" title=\"").append(_("We offered to introduce them")).append("\">");
    if (peer.getTheyRelayToUsAs() > 0)     buf.append("&nbsp;&nbsp;<img src=\"/themes/console/images/inbound.png\" height=\"8\" width=\"12\" alt=\"V\" title=\"").append(_("They offered to introduce us")).append("\">");
    boolean appended=false;
    if (_activeThrottle.isChoked(peer.getRemotePeer())) {
      buf.append("<br><i>").append(_("Choked")).append("</i>");
      appended=true;
    }
    if (peer.getConsecutiveFailedSends() > 0) {
      if (!appended)       buf.append("<br>");
      buf.append(" <i>").append(peer.getConsecutiveFailedSends()).append(' ').append(_("fail(s)")).append("</i>");
      appended=true;
    }
    if (_context.shitlist().isShitlisted(peer.getRemotePeer(),STYLE)) {
      if (!appended)       buf.append("<br>");
      buf.append(" <i>").append(_("Banned")).append("</i>");
      appended=true;
    }
    buf.append("</td>");
    long idleIn=(now - peer.getLastReceiveTime()) / 1000;
    long idleOut=(now - peer.getLastSendTime()) / 1000;
    if (idleIn < 0)     idleIn=0;
    if (idleOut < 0)     idleOut=0;
    buf.append("<td class=\"cells\" align=\"right\">");
    buf.append(idleIn);
    buf.append("s / ");
    buf.append(idleOut);
    buf.append("s</td>");
    int recvBps=(idleIn > 2 ? 0 : peer.getReceiveBps());
    int sendBps=(idleOut > 2 ? 0 : peer.getSendBps());
    buf.append("<td class=\"cells\" align=\"right\" nowrap>");
    buf.append(formatKBps(recvBps));
    buf.append(" / ");
    buf.append(formatKBps(sendBps));
    buf.append("</td>");
    long uptime=now - peer.getKeyEstablishedTime();
    buf.append("<td class=\"cells\" align=\"right\">");
    buf.append(DataHelper.formatDuration(uptime));
    buf.append("</td>");
    buf.append("<td class=\"cells\" align=\"right\">");
    buf.append(peer.getClockSkew() / 1000);
    buf.append("s</td>");
    offsetTotal=offsetTotal + peer.getClockSkew();
    long sendWindow=peer.getSendWindowBytes();
    buf.append("<td class=\"cells\" align=\"right\">");
    buf.append(sendWindow / 1024);
    buf.append("K");
    buf.append(" / ").append(peer.getConcurrentSends());
    buf.append(" / ").append(peer.getConcurrentSendWindow());
    buf.append(" / ").append(peer.getConsecutiveSendRejections());
    buf.append("</td>");
    buf.append("<td class=\"cells\" align=\"right\">");
    buf.append(peer.getSlowStartThreshold() / 1024);
    buf.append("K</td>");
    int rtt=peer.getRTT();
    int rto=peer.getRTO();
    buf.append("<td class=\"cells\" align=\"right\">");
    buf.append(rtt);
    buf.append("</td>");
    buf.append("<td class=\"cells\" align=\"right\">");
    buf.append(peer.getRTTDeviation());
    buf.append("</td>");
    buf.append("<td class=\"cells\" align=\"right\">");
    buf.append(rto);
    buf.append("</td>");
    buf.append("<td class=\"cells\" align=\"right\">");
    buf.append(peer.getMTU()).append(" / ").append(peer.getReceiveMTU());
    buf.append("</td>");
    long sent=peer.getPacketsTransmitted();
    long recv=peer.getPacketsReceived();
    buf.append("<td class=\"cells\" align=\"right\">");
    buf.append(sent);
    buf.append("</td>");
    buf.append("<td class=\"cells\" align=\"right\">");
    buf.append(recv);
    buf.append("</td>");
    long resent=peer.getPacketsRetransmitted();
    long dupRecv=peer.getPacketsReceivedDuplicate();
    buf.append("<td class=\"cells\" align=\"right\">");
    buf.append(resent);
    buf.append("</td>");
    double recvDupPct=(double)peer.getPacketsReceivedDuplicate() / (double)peer.getPacketsReceived();
    buf.append("<td class=\"cells\" align=\"right\">");
    buf.append(dupRecv);
    buf.append("</td>");
    buf.append("</tr>\n");
    out.write(buf.toString());
    buf.setLength(0);
    bpsIn+=recvBps;
    bpsOut+=sendBps;
    uptimeMsTotal+=uptime;
    cwinTotal+=sendWindow;
    rttTotal+=rtt;
    rtoTotal+=rto;
    sendTotal+=sent;
    recvTotal+=recv;
    resentTotal+=resent;
    dupRecvTotal+=dupRecv;
    numPeers++;
  }
  buf.append("<tr class=\"tablefooter\"> <td colspan=\"3\" align=\"left\"><b>").append(_("SUMMARY")).append("</b></td>" + "<td align=\"center\" nowrap><b>");
  buf.append(formatKBps(bpsIn)).append(" / ").append(formatKBps(bpsOut));
  buf.append("</b></td>" + "<td align=\"center\"><b>").append(numPeers > 0 ? DataHelper.formatDuration(uptimeMsTotal / numPeers) : "0s");
  buf.append("</b></td><td align=\"center\"><b>").append(numPeers > 0 ? DataHelper.formatDuration(offsetTotal / numPeers) : "0ms").append("</b></td>\n" + "<td align=\"center\"><b>");
  buf.append(numPeers > 0 ? cwinTotal / (numPeers * 1024) + "K" : "0K");
  buf.append("</b></td><td>&nbsp;</td>\n" + "<td align=\"center\"><b>");
  buf.append(numPeers > 0 ? rttTotal / numPeers : 0);
  buf.append("</b></td><td>&nbsp;</td> <td align=\"center\"><b>");
  buf.append(numPeers > 0 ? rtoTotal / numPeers : 0);
  buf.append("</b></td><td>&nbsp;</td> <td align=\"center\"><b>");
  buf.append(sendTotal).append("</b></td> <td align=\"center\"><b>").append(recvTotal).append("</b></td>\n" + "<td align=\"center\"><b>").append(resentTotal);
  buf.append("</b></td><td align=\"center\"><b>").append(dupRecvTotal).append("</b></td>\n" + "</tr></table></div>\n");
  out.write(buf.toString());
  buf.setLength(0);
  out.write(getKey());
}
