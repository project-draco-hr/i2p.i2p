{
  TreeSet peers=new TreeSet(getComparator(sortFlags));
synchronized (_peersByIdent) {
    peers.addAll(_peersByIdent.values());
  }
  long offsetTotal=0;
  int bpsIn=0;
  int bpsOut=0;
  long uptimeMsTotal=0;
  long cwinTotal=0;
  long rttTotal=0;
  long rtoTotal=0;
  long sendTotal=0;
  long recvTotal=0;
  long resentTotal=0;
  long dupRecvTotal=0;
  int numPeers=0;
  StringBuilder buf=new StringBuilder(512);
  buf.append("<p><b id=\"udpcon\"><h3>UDP connections: ").append(peers.size());
  buf.append(". Limit: ").append(getMaxConnections());
  buf.append(". Timeout: ").append(DataHelper.formatDuration(_expireTimeout));
  buf.append(".</b></h3>\n");
  buf.append("<div class=\"wideload\"><table>\n");
  buf.append("<tr><th class=\"smallhead\" nowrap><a href=\"#def.peer\">Peer</a>");
  if (sortFlags != FLAG_ALPHA)   buf.append(" <a href=\"").append(urlBase).append("?sort=0\">V</a> ");
  buf.append("</th><th class=\"smallhead\" nowrap><a href=\"#def.dir\" title=\"Direction/Introduction\">Dir</a></th><th class=\"smallhead\" nowrap><a href=\"#def.idle\">Idle</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by idle inbound",FLAG_IDLE_IN);
  buf.append("/");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by idle outbound",FLAG_IDLE_OUT);
  buf.append("</th>");
  buf.append("<th class=\"smallhead\" nowrap><a href=\"#def.rate\">In/Out</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by inbound rate",FLAG_RATE_IN);
  buf.append("/");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by outbound rate",FLAG_RATE_OUT);
  buf.append("</th>\n");
  buf.append("<th class=\"smallhead\" nowrap><a href=\"#def.up\">Up</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by connection uptime",FLAG_UPTIME);
  buf.append("</th><th class=\"smallhead\" nowrap><a href=\"#def.skew\">Skew</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by clock skew",FLAG_SKEW);
  buf.append("</th>\n");
  buf.append("<th class=\"smallhead\" nowrap><a href=\"#def.cwnd\">Cwnd</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by congestion window",FLAG_CWND);
  buf.append("</th><th class=\"smallhead\" nowrap><a href=\"#def.ssthresh\">Sst</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by slow start threshold",FLAG_SSTHRESH);
  buf.append("</th>\n");
  buf.append("<th class=\"smallhead\" nowrap><a href=\"#def.rtt\">Rtt</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by round trip time",FLAG_RTT);
  buf.append("</th><th class=\"smallhead\" nowrap><a href=\"#def.dev\">Dev</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by round trip time deviation",FLAG_DEV);
  buf.append("</th><th class=\"smallhead\" nowrap><a href=\"#def.rto\">Rto</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by retransmission timeout",FLAG_RTO);
  buf.append("</th>\n");
  buf.append("<th class=\"smallhead\" nowrap><a href=\"#def.mtu\">Mtu</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by maximum transmit unit",FLAG_MTU);
  buf.append("</th><th class=\"smallhead\" nowrap><a href=\"#def.send\">TX</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by packets sent",FLAG_SEND);
  buf.append("</th><th class=\"smallhead\" nowrap><a href=\"#def.recv\">RX</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by packets received",FLAG_RECV);
  buf.append("</th>\n");
  buf.append("<th class=\"smallhead\" nowrap><a href=\"#def.resent\">ReTX</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by packets retransmitted",FLAG_RESEND);
  buf.append("</th><th class=\"smallhead\" nowrap><a href=\"#def.dupRecv\">DupRX</a><br>");
  appendSortLinks(buf,urlBase,sortFlags,"Sort by packets received more than once",FLAG_DUP);
  buf.append("</th>\n");
  buf.append("</tr>\n");
  out.write(buf.toString());
  buf.setLength(0);
  long now=_context.clock().now();
  for (Iterator iter=peers.iterator(); iter.hasNext(); ) {
    PeerState peer=(PeerState)iter.next();
    if (now - peer.getLastReceiveTime() > 60 * 60 * 1000)     continue;
    buf.append("<tr> <td class=\"cells\" align=\"left\" nowrap>");
    buf.append(_context.commSystem().renderPeerHTML(peer.getRemotePeer()));
    buf.append("</td> <td class=\"cells\" nowrap align=\"left\">");
    if (peer.isInbound())     buf.append("<img src=\"/themes/console/images/inbound.png\" alt=\"Inbound\" title=\"Inbound\"/> ");
 else     buf.append("<img src=\"/themes/console/images/outbound.png\" alt=\"Outbound\" title=\"Outbound\"/> ");
    if (peer.getWeRelayToThemAs() > 0)     buf.append("^");
 else     buf.append("&nbsp;");
    if (peer.getTheyRelayToUsAs() > 0)     buf.append("v");
    boolean appended=false;
    if (_activeThrottle.isChoked(peer.getRemotePeer())) {
      if (!appended)       buf.append("<br>");
      buf.append(" <i>Choked</i>");
      appended=true;
    }
    if (peer.getConsecutiveFailedSends() > 0) {
      if (!appended)       buf.append("<br>");
      buf.append(" <i>").append(peer.getConsecutiveFailedSends()).append(" fail(s)</i>");
      appended=true;
    }
    if (_context.shitlist().isShitlisted(peer.getRemotePeer(),STYLE)) {
      if (!appended)       buf.append("<br>");
      buf.append(" <i>Banned</i>");
      appended=true;
    }
    buf.append("</td>");
    long idleIn=(now - peer.getLastReceiveTime()) / 1000;
    long idleOut=(now - peer.getLastSendTime()) / 1000;
    if (idleIn < 0)     idleIn=0;
    if (idleOut < 0)     idleOut=0;
    buf.append(" <td class=\"cells\" align=\"right\" >");
    buf.append(idleIn);
    buf.append("s/");
    buf.append(idleOut);
    buf.append("s</td>");
    int recvBps=(idleIn > 2 ? 0 : peer.getReceiveBps());
    int sendBps=(idleOut > 2 ? 0 : peer.getSendBps());
    buf.append(" <td class=\"cells\" align=\"right\" nowrap>");
    buf.append(formatKBps(recvBps));
    buf.append("/");
    buf.append(formatKBps(sendBps));
    buf.append("K/s ");
    buf.append("</td>");
    long uptime=now - peer.getKeyEstablishedTime();
    buf.append(" <td class=\"cells\" align=\"center\" >");
    buf.append(DataHelper.formatDuration(uptime));
    buf.append("</td>");
    buf.append(" <td class=\"cells\" align=\"center\" >");
    buf.append(peer.getClockSkew());
    buf.append("s</td>");
    offsetTotal=offsetTotal + peer.getClockSkew();
    long sendWindow=peer.getSendWindowBytes();
    buf.append(" <td class=\"cells\" align=\"right\" >");
    buf.append(sendWindow / 1024);
    buf.append("K");
    buf.append("/").append(peer.getConcurrentSends());
    buf.append("/").append(peer.getConcurrentSendWindow());
    buf.append("/").append(peer.getConsecutiveSendRejections());
    buf.append("</td>");
    buf.append(" <td class=\"cells\" align=\"center\" >");
    buf.append(peer.getSlowStartThreshold() / 1024);
    buf.append("K</td>");
    int rtt=peer.getRTT();
    int rto=peer.getRTO();
    buf.append(" <td class=\"cells\" align=\"right\" >");
    buf.append(rtt);
    buf.append("</td>");
    buf.append(" <td class=\"cells\" align=\"right\" >");
    buf.append(peer.getRTTDeviation());
    buf.append("</td>");
    buf.append(" <td class=\"cells\" align=\"right\" >");
    buf.append(rto);
    buf.append("</td>");
    buf.append(" <td class=\"cells\" align=\"right\" >");
    buf.append(peer.getMTU()).append("/").append(peer.getReceiveMTU());
    buf.append("</td>");
    long sent=peer.getPacketsTransmitted();
    long recv=peer.getPacketsReceived();
    buf.append(" <td class=\"cells\" align=\"center\" >");
    buf.append(sent);
    buf.append("</td>");
    buf.append(" <td class=\"cells\" align=\"center\" >");
    buf.append(recv);
    buf.append("</td>");
    long resent=peer.getPacketsRetransmitted();
    long dupRecv=peer.getPacketsReceivedDuplicate();
    buf.append(" <td class=\"cells\" align=\"center\" >");
    buf.append(resent);
    buf.append("</td>");
    double recvDupPct=(double)peer.getPacketsReceivedDuplicate() / (double)peer.getPacketsReceived();
    buf.append(" <td class=\"cells\" align=\"center\" >");
    buf.append(dupRecv);
    buf.append("</td>");
    buf.append("</tr>\n");
    out.write(buf.toString());
    buf.setLength(0);
    bpsIn+=recvBps;
    bpsOut+=sendBps;
    uptimeMsTotal+=uptime;
    cwinTotal+=sendWindow;
    rttTotal+=rtt;
    rtoTotal+=rto;
    sendTotal+=sent;
    recvTotal+=recv;
    resentTotal+=resent;
    dupRecvTotal+=dupRecv;
    numPeers++;
  }
  buf.append(" <tr class=\"tablefooter\"> <td colspan=\"3\" align=\"right\"><b>Total</b></td>");
  buf.append("      <td align=\"center\" nowrap><b>");
  buf.append(formatKBps(bpsIn)).append("/").append(formatKBps(bpsOut));
  buf.append("K/s</b></td>");
  buf.append("      <td align=\"center\"><b>").append(numPeers > 0 ? DataHelper.formatDuration(uptimeMsTotal / numPeers) : "0s");
  buf.append("</b></td> <td align=\"center\"><b>").append(numPeers > 0 ? DataHelper.formatDuration(offsetTotal * 1000 / numPeers) : "0ms").append("</b></td>\n");
  buf.append("      <td align=\"center\"><b>");
  buf.append(numPeers > 0 ? cwinTotal / (numPeers * 1024) + "K" : "0K");
  buf.append("</b></td> <td>&nbsp;</td>\n");
  buf.append("      <td align=\"center\"><b>");
  buf.append(numPeers > 0 ? rttTotal / numPeers : 0);
  buf.append("</b></td> <td>&nbsp;</td> <td align=\"center\"><b>");
  buf.append(numPeers > 0 ? rtoTotal / numPeers : 0);
  buf.append("</b></td>\n      <td>&nbsp;</td> <td align=\"center\"><b>");
  buf.append(sendTotal).append("</b></td> <td align=\"center\"><b>").append(recvTotal).append("</b></td>\n");
  buf.append("      <td align=\"center\"><b>").append(resentTotal);
  buf.append("</b></td> <td align=\"center\"><b>").append(dupRecvTotal).append("</b></td>\n");
  buf.append(" </tr></table></div></p><p>\n");
  long bytesTransmitted=_context.bandwidthLimiter().getTotalAllocatedOutboundBytes();
  double averagePacketSize=_context.statManager().getRate("udp.sendPacketSize").getLifetimeAverageValue();
  resentTotal=(long)_context.statManager().getRate("udp.packetsRetransmitted").getLifetimeEventCount();
  double nondupSent=((double)bytesTransmitted - ((double)resentTotal) * averagePacketSize);
  double bwResent=(nondupSent <= 0 ? 0d : ((((double)resentTotal) * averagePacketSize) / nondupSent));
  buf.append("<h3>Percentage of bytes retransmitted (lifetime): ").append(formatPct(bwResent));
  buf.append("</h3><i>(Includes retransmission required by packet loss)</i><br></p>\n");
  out.write(buf.toString());
  buf.setLength(0);
  out.write(KEY);
}
