{
  _fragments.shutdown();
  if (_pusher != null)   _pusher.shutdown();
  if (_handler != null)   _handler.shutdown();
  for (  UDPEndpoint endpoint : _endpoints) {
    endpoint.shutdown();
    _endpoints.remove(endpoint);
  }
  if (_establisher != null)   _establisher.shutdown();
  if (_refiller != null)   _refiller.shutdown();
  _inboundFragments.shutdown();
  _introManager.reset();
  UDPPacket.clearCache();
  if (_log.shouldLog(Log.WARN))   _log.warn("Starting SSU transport listening");
  _introKey=new SessionKey(new byte[SessionKey.KEYSIZE_BYTES]);
  System.arraycopy(_context.routerHash().getData(),0,_introKey.getData(),0,SessionKey.KEYSIZE_BYTES);
  String bindTo=_context.getProperty(PROP_BIND_INTERFACE);
  if (bindTo == null) {
    String fixedHost=_context.getProperty(PROP_EXTERNAL_HOST);
    if (fixedHost != null && fixedHost.length() > 0) {
      TransportUtil.IPv6Config cfg=getIPv6Config();
      Set<String> myAddrs;
      if (cfg == IPV6_DISABLED)       myAddrs=Addresses.getAddresses(false,false);
 else       myAddrs=Addresses.getAddresses(false,true);
      StringBuilder buf=new StringBuilder();
      String[] bta=DataHelper.split(fixedHost,"[,; \r\n\t]");
      for (int i=0; i < bta.length; i++) {
        String bt=bta[i];
        if (bt.length() <= 0)         continue;
        try {
          InetAddress[] all=InetAddress.getAllByName(bt);
          for (int j=0; j < all.length; j++) {
            InetAddress ia=all[j];
            if (cfg == IPV6_ONLY && (ia instanceof Inet4Address)) {
              if (_log.shouldWarn())               _log.warn("Configured for IPv6 only, not binding to configured IPv4 host " + bt);
              continue;
            }
            String testAddr=ia.getHostAddress();
            if (myAddrs.contains(testAddr)) {
              if (buf.length() > 0)               buf.append(',');
              buf.append(testAddr);
            }
 else {
              if (_log.shouldWarn())               _log.warn("Not a local address, not binding to configured IP " + testAddr);
            }
          }
        }
 catch (        UnknownHostException uhe) {
          if (_log.shouldWarn())           _log.warn("Not binding to configured host " + bt + " - "+ uhe);
        }
      }
      if (buf.length() > 0) {
        bindTo=buf.toString();
        if (_log.shouldWarn() && !fixedHost.equals(bindTo))         _log.warn("Expanded external host config \"" + fixedHost + "\" to \""+ bindTo+ '"');
      }
    }
  }
  Set<InetAddress> bindToAddrs=new HashSet<InetAddress>(4);
  if (bindTo != null) {
    String[] bta=DataHelper.split(bindTo,"[,; \r\n\t]");
    for (int i=0; i < bta.length; i++) {
      String bt=bta[i];
      if (bt.length() <= 0)       continue;
      try {
        bindToAddrs.add(InetAddress.getByName(bt));
      }
 catch (      UnknownHostException uhe) {
        _log.error("Invalid SSU bind interface specified [" + bt + "]",uhe);
      }
    }
  }
  int port;
  int oldIPort=_context.getProperty(PROP_INTERNAL_PORT,-1);
  int oldBindPort=getListenPort(false);
  int oldEPort=_context.getProperty(PROP_EXTERNAL_PORT,-1);
  if (oldIPort > 0)   port=oldIPort;
 else   if (oldBindPort > 0)   port=oldBindPort;
 else   port=oldEPort;
  if (!bindToAddrs.isEmpty() && _log.shouldLog(Log.WARN))   _log.warn("Binding only to " + bindToAddrs);
  if (_log.shouldLog(Log.INFO))   _log.info("Binding to the port: " + port);
  if (_endpoints.isEmpty()) {
    if (bindToAddrs.isEmpty()) {
      UDPEndpoint endpoint=new UDPEndpoint(_context,this,port,null);
      _endpoints.add(endpoint);
      setMTU(null);
    }
 else {
      for (      InetAddress bindToAddr : bindToAddrs) {
        UDPEndpoint endpoint=new UDPEndpoint(_context,this,port,bindToAddr);
        _endpoints.add(endpoint);
        setMTU(bindToAddr);
      }
    }
  }
 else {
    for (    UDPEndpoint endpoint : _endpoints) {
      if (endpoint.isIPv4()) {
        endpoint.setListenPort(port);
        break;
      }
    }
  }
  if (_establisher == null)   _establisher=new EstablishmentManager(_context,this);
  if (_testManager == null)   _testManager=new PeerTestManager(_context,this);
  if (_handler == null)   _handler=new PacketHandler(_context,this,_establisher,_inboundFragments,_testManager,_introManager);
  if (USE_PRIORITY && _refiller == null)   _refiller=new OutboundRefiller(_context,_fragments,_outboundMessages);
  int newPort=-1;
  for (  UDPEndpoint endpoint : _endpoints) {
    try {
      endpoint.startup();
      if (newPort < 0 && endpoint.isIPv4()) {
        newPort=endpoint.getListenPort();
      }
      if (_log.shouldLog(Log.WARN))       _log.warn("Started " + endpoint);
    }
 catch (    SocketException se) {
      _endpoints.remove(endpoint);
      _log.error("Failed to start " + endpoint,se);
    }
  }
  if (_endpoints.isEmpty()) {
    _log.log(Log.CRIT,"Unable to open UDP port");
    setReachabilityStatus(Status.HOSED);
    return;
  }
  if (newPort > 0 && (newPort != port || newPort != oldIPort || newPort != oldEPort)) {
    Map<String,String> changes=new HashMap<String,String>();
    changes.put(PROP_INTERNAL_PORT,Integer.toString(newPort));
    changes.put(PROP_EXTERNAL_PORT,Integer.toString(newPort));
    _context.router().saveConfig(changes,null);
  }
  _handler.startup();
  _fragments.startup();
  _inboundFragments.startup();
  _pusher=new PacketPusher(_context,_fragments,_endpoints);
  _pusher.startup();
  _establisher.startup();
  if (USE_PRIORITY)   _refiller.startup();
  _expireEvent.setIsAlive(true);
  _reachabilityStatus=Status.UNKNOWN;
  _testEvent.setIsAlive(true);
  _testEvent.reschedule(10 * 1000);
  if (newPort > 0 && bindToAddrs.isEmpty()) {
    for (    InetAddress ia : getSavedLocalAddresses()) {
      if (ia.getAddress().length == 16) {
        _lastInboundIPv6=_context.clock().now();
        setReachabilityStatus(Status.IPV4_UNKNOWN_IPV6_OK);
      }
 else {
        if (!isIPv4Firewalled())         setReachabilityStatus(Status.IPV4_OK_IPV6_UNKNOWN);
      }
      rebuildExternalAddress(ia.getHostAddress(),newPort,false);
    }
  }
 else   if (newPort > 0 && !bindToAddrs.isEmpty()) {
    for (    InetAddress ia : bindToAddrs) {
      if (ia.getAddress().length == 16) {
        _lastInboundIPv6=_context.clock().now();
        setReachabilityStatus(Status.IPV4_UNKNOWN_IPV6_OK);
      }
 else {
        if (!isIPv4Firewalled())         setReachabilityStatus(Status.IPV4_OK_IPV6_UNKNOWN);
      }
      rebuildExternalAddress(ia.getHostAddress(),newPort,false);
    }
  }
  if (isIPv4Firewalled()) {
    if (_lastInboundIPv6 > 0)     setReachabilityStatus(Status.IPV4_FIREWALLED_IPV6_UNKNOWN);
 else     setReachabilityStatus(Status.REJECT_UNSOLICITED);
  }
  rebuildExternalAddress(false);
}
