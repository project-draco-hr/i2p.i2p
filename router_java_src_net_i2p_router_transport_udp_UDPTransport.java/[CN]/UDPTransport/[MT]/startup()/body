{
  if (_fragments != null)   _fragments.shutdown();
  if (_pusher != null)   _pusher.shutdown();
  if (_handler != null)   _handler.shutdown();
  if (_endpoint != null)   _endpoint.shutdown();
  if (_establisher != null)   _establisher.shutdown();
  if (_refiller != null)   _refiller.shutdown();
  if (_inboundFragments != null)   _inboundFragments.shutdown();
  _introKey=new SessionKey(new byte[SessionKey.KEYSIZE_BYTES]);
  System.arraycopy(_context.routerHash().getData(),0,_introKey.getData(),0,SessionKey.KEYSIZE_BYTES);
  rebuildExternalAddress();
  if (_endpoint == null) {
    int port=-1;
    if (_externalListenPort <= 0) {
      String portStr=_context.getProperty(PROP_INTERNAL_PORT);
      if (portStr != null) {
        try {
          port=Integer.parseInt(portStr);
        }
 catch (        NumberFormatException nfe) {
          if (_log.shouldLog(Log.ERROR))           _log.error("Invalid port specified [" + portStr + "]");
        }
      }
      if (port <= 0) {
        port=1024 + _context.random().nextInt(31 * 1024);
        if (_log.shouldLog(Log.INFO))         _log.info("Selecting a random port to bind to: " + port);
      }
    }
 else {
      port=_externalListenPort;
      if (_log.shouldLog(Log.INFO))       _log.info("Binding to the explicitly specified external port: " + port);
    }
    try {
      _endpoint=new UDPEndpoint(_context,port);
    }
 catch (    SocketException se) {
      if (_log.shouldLog(Log.CRIT))       _log.log(Log.CRIT,"Unable to listen on the UDP port (" + port + ")",se);
      return;
    }
  }
  if (_establisher == null)   _establisher=new EstablishmentManager(_context,this);
  if (_handler == null)   _handler=new PacketHandler(_context,this,_endpoint,_establisher,_inboundFragments);
  if (_refiller == null)   _refiller=new OutboundRefiller(_context,_fragments,_outboundMessages);
  _endpoint.startup();
  _establisher.startup();
  _handler.startup();
  _fragments.startup();
  _inboundFragments.startup();
  _pusher=new PacketPusher(_context,_fragments,_endpoint.getSender());
  _pusher.startup();
  _refiller.startup();
}
