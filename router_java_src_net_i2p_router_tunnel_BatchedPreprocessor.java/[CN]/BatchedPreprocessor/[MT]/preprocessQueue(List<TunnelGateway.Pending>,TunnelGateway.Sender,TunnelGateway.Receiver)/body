{
  StringBuilder timingBuf=null;
  if (_log.shouldLog(Log.DEBUG)) {
    _log.debug("Preprocess queue with " + pending.size() + " to send");
    timingBuf=new StringBuilder(128);
    timingBuf.append("Preprocess with " + pending.size() + " to send. ");
  }
  long start=System.currentTimeMillis();
  int batchCount=0;
  int beforeLooping=pending.size();
  while (pending.size() > 0) {
    int allocated=0;
    long beforePendingLoop=System.currentTimeMillis();
    for (int i=0; i < pending.size(); i++) {
      long pendingStart=System.currentTimeMillis();
      TunnelGateway.Pending msg=pending.get(i);
      int instructionsSize=getInstructionsSize(msg);
      instructionsSize+=getInstructionAugmentationSize(msg,allocated,instructionsSize);
      int curWanted=msg.getData().length - msg.getOffset() + instructionsSize;
      if (_log.shouldLog(Log.DEBUG))       _log.debug("pending " + i + "/"+ pending.size()+ " ("+ msg.getMessageId()+ ") curWanted="+ curWanted+ " instructionSize="+ instructionsSize+ " allocated="+ allocated);
      allocated+=curWanted;
      if (allocated >= FULL_SIZE) {
        if (allocated - curWanted + instructionsSize >= FULL_SIZE) {
          i--;
          msg=pending.get(i);
          allocated-=curWanted;
          if (_log.shouldLog(Log.DEBUG))           _log.debug("Pushback of " + curWanted + " (message "+ (i + 1)+ " in "+ pending+ ")");
        }
        if (_pendingSince > 0) {
          long waited=_context.clock().now() - _pendingSince;
          _context.statManager().addRateData("tunnel.batchDelaySent",pending.size(),waited);
        }
        long beforeSend=System.currentTimeMillis();
        _pendingSince=0;
        send(pending,0,i,sender,rec);
        _context.statManager().addRateData("tunnel.batchFullFragments",1,0);
        long afterSend=System.currentTimeMillis();
        if (_log.shouldLog(Log.INFO))         _log.info("Allocated=" + allocated + " so we sent "+ (i + 1)+ " (last complete? "+ (msg.getOffset() >= msg.getData().length)+ ", off="+ msg.getOffset()+ ", count="+ pending.size()+ ")");
        for (int j=0; j < i; j++) {
          TunnelGateway.Pending cur=pending.remove(0);
          if (cur.getOffset() < cur.getData().length)           throw new IllegalArgumentException("i=" + i + " j="+ j+ " off="+ cur.getOffset()+ " len="+ cur.getData().length+ " alloc="+ allocated);
          if (timingBuf != null)           timingBuf.append(" sent " + cur);
          notePreprocessing(cur.getMessageId(),cur.getFragmentNumber(),cur.getData().length,cur.getMessageIds(),"flushed allocated");
          _context.statManager().addRateData("tunnel.batchFragmentation",cur.getFragmentNumber() + 1,0);
          _context.statManager().addRateData("tunnel.writeDelay",cur.getLifetime(),cur.getData().length);
        }
        if (msg.getOffset() >= msg.getData().length) {
          TunnelGateway.Pending cur=pending.remove(0);
          if (timingBuf != null)           timingBuf.append(" sent perfect fit " + cur).append(".");
          notePreprocessing(cur.getMessageId(),cur.getFragmentNumber(),msg.getData().length,msg.getMessageIds(),"flushed tail, remaining: " + pending);
          _context.statManager().addRateData("tunnel.batchFragmentation",cur.getFragmentNumber() + 1,0);
          _context.statManager().addRateData("tunnel.writeDelay",cur.getLifetime(),cur.getData().length);
        }
        if (i > 0)         _context.statManager().addRateData("tunnel.batchMultipleCount",i + 1,0);
        allocated=0;
        batchCount++;
        long pendingEnd=System.currentTimeMillis();
        if (timingBuf != null)         timingBuf.append(" After sending " + (i + 1) + "/"+ pending.size()+ " in "+ (afterSend - beforeSend)+ " after "+ (beforeSend - pendingStart)+ " since "+ (beforeSend - beforePendingLoop)+ "/"+ (beforeSend - start)+ " pending current "+ (pendingEnd - pendingStart)).append(".");
        break;
      }
      if (timingBuf != null)       timingBuf.append(" After pending loop " + (System.currentTimeMillis() - beforePendingLoop)).append(".");
    }
    long afterCleared=System.currentTimeMillis();
    if (_log.shouldLog(Log.INFO))     display(allocated,pending,"after looping to clear " + (beforeLooping - pending.size()));
    long afterDisplayed=System.currentTimeMillis();
    if (allocated > 0) {
      if ((pending.size() > FORCE_BATCH_FLUSH) || ((_pendingSince > 0) && (getDelayAmount() <= 0))) {
        if (pending.size() > 1)         _context.statManager().addRateData("tunnel.batchMultipleCount",pending.size(),0);
        _context.statManager().addRateData("tunnel.batchDelaySent",pending.size(),0);
        send(pending,0,pending.size() - 1,sender,rec);
        _context.statManager().addRateData("tunnel.batchSmallFragments",FULL_SIZE - allocated,0);
        int beforeSize=pending.size();
        for (int i=0; i < pending.size(); i++) {
          TunnelGateway.Pending cur=pending.get(i);
          if (cur.getOffset() >= cur.getData().length) {
            pending.remove(i);
            notePreprocessing(cur.getMessageId(),cur.getFragmentNumber(),cur.getData().length,cur.getMessageIds(),"flushed remaining");
            _context.statManager().addRateData("tunnel.batchFragmentation",cur.getFragmentNumber() + 1,0);
            _context.statManager().addRateData("tunnel.writeDelay",cur.getLifetime(),cur.getData().length);
            i--;
          }
        }
        if (pending.size() > 0) {
          _pendingSince=_context.clock().now();
          _context.statManager().addRateData("tunnel.batchFlushRemaining",pending.size(),beforeSize);
          display(allocated,pending,"flushed, some remain");
          if (timingBuf != null) {
            timingBuf.append(" flushed, some remain (displayed to now: " + (System.currentTimeMillis() - afterDisplayed) + ")");
            timingBuf.append(" total time: " + (System.currentTimeMillis() - start));
            _log.debug(timingBuf.toString());
          }
          return true;
        }
 else {
          long delayAmount=_context.clock().now() - _pendingSince;
          _pendingSince=0;
          if (batchCount > 1)           _context.statManager().addRateData("tunnel.batchCount",batchCount,0);
          if (_log.shouldLog(Log.INFO))           display(allocated,pending,"flushed " + (beforeSize) + ", no remaining after "+ delayAmount);
          if (timingBuf != null) {
            timingBuf.append(" flushed, none remain (displayed to now: " + (System.currentTimeMillis() - afterDisplayed) + ")");
            timingBuf.append(" total time: " + (System.currentTimeMillis() - start));
            _log.debug(timingBuf.toString());
          }
          return false;
        }
      }
 else {
        _context.statManager().addRateData("tunnel.batchDelay",pending.size(),0);
        if (_pendingSince <= 0)         _pendingSince=_context.clock().now();
        if (batchCount > 1)         _context.statManager().addRateData("tunnel.batchCount",batchCount,0);
        display(allocated,pending,"dont flush");
        if (timingBuf != null) {
          timingBuf.append(" dont flush (displayed to now: " + (System.currentTimeMillis() - afterDisplayed) + ")");
          timingBuf.append(" total time: " + (System.currentTimeMillis() - start));
          _log.debug(timingBuf.toString());
        }
        return true;
      }
    }
 else {
      if (timingBuf != null)       timingBuf.append(" Keep looping");
    }
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Sent everything on the list (pending=" + pending.size() + ")");
  if (timingBuf != null)   timingBuf.append(" total time: " + (System.currentTimeMillis() - start));
  if (timingBuf != null)   _log.debug(timingBuf.toString());
  return false;
}
