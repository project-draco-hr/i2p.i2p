{
  Log log=ctx.logManager().getLog(BuildMessageGenerator.class);
  for (int i=0; i < TunnelBuildMessage.RECORD_COUNT; i++) {
    ByteArray rec=msg.getRecord(i);
    Integer hopNum=(Integer)order.get(i);
    int hop=hopNum.intValue();
    if ((isBlank(cfg,hop)) || (!cfg.isInbound() && hop == 1)) {
      if (log.shouldLog(Log.DEBUG))       log.debug(msg.getUniqueId() + ": not pre-decrypting record " + i+ "/"+ hop+ " for "+ cfg);
      continue;
    }
    if (log.shouldLog(Log.DEBUG))     log.debug(msg.getUniqueId() + ": pre-decrypting record " + i+ "/"+ hop+ " for "+ cfg);
    int stop=(cfg.isInbound() ? 0 : 1);
    for (int j=hop - 1; j >= stop; j--) {
      HopConfig hopConfig=cfg.getConfig(j);
      SessionKey key=hopConfig.getReplyKey();
      byte iv[]=hopConfig.getReplyIV().getData();
      int off=rec.getOffset();
      if (log.shouldLog(Log.DEBUG))       log.debug(msg.getUniqueId() + ": pre-decrypting record " + i+ "/"+ hop+ " for "+ cfg+ " with "+ key.toBase64()+ "/"+ Base64.encode(iv));
      ctx.aes().decrypt(rec.getData(),off,rec.getData(),off,key,iv,TunnelBuildMessage.RECORD_SIZE);
    }
  }
  if (log.shouldLog(Log.DEBUG))   log.debug(msg.getUniqueId() + ": done pre-decrypting all records for " + cfg);
}
