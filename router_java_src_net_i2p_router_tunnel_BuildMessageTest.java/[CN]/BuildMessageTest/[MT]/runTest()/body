{
  I2PAppContext ctx=I2PAppContext.getGlobalContext();
  Log log=ctx.logManager().getLog(getClass());
  List order=pickOrder(ctx);
  TunnelCreatorConfig cfg=createConfig(ctx);
  _replyRouter=new Hash();
  byte h[]=new byte[Hash.HASH_LENGTH];
  Arrays.fill(h,(byte)0xFF);
  _replyRouter.setData(h);
  _replyTunnel=42;
  BuildMessageGenerator gen=new BuildMessageGenerator();
  TunnelBuildMessage msg=new TunnelBuildMessage(ctx);
  for (int i=0; i < BuildMessageGenerator.ORDER.length; i++) {
    int hop=((Integer)order.get(i)).intValue();
    PublicKey key=null;
    if (hop < _pubKeys.length)     key=_pubKeys[hop];
    gen.createRecord(i,hop,msg,cfg,_replyRouter,_replyTunnel,ctx,key);
  }
  gen.layeredEncrypt(ctx,msg,cfg,order);
  log.debug("\n================================================================" + "\nMessage fully encrypted" + "\n================================================================");
  for (int i=0; i < cfg.getLength(); i++) {
    BuildMessageProcessor proc=new BuildMessageProcessor();
    BuildRequestRecord req=proc.decrypt(ctx,msg,_peers[i],_privKeys[i]);
    if (req == null) {
      throw new RuntimeException("foo @ " + i);
    }
    long ourId=req.readReceiveTunnelId();
    byte replyIV[]=req.readReplyIV();
    long nextId=req.readNextTunnelId();
    Hash nextPeer=req.readNextIdentity();
    boolean isInGW=req.readIsInboundGateway();
    boolean isOutEnd=req.readIsOutboundEndpoint();
    long time=req.readRequestTime();
    long now=(ctx.clock().now() / (60l * 60l * 1000l)) * (60 * 60 * 1000);
    int ourSlot=-1;
    BuildResponseRecord resp=new BuildResponseRecord();
    byte reply[]=resp.create(ctx,0,req.readReplyKey(),req.readReplyIV());
    for (int j=0; j < TunnelBuildMessage.RECORD_COUNT; j++) {
      if (msg.getRecord(j) == null) {
        ourSlot=j;
        msg.setRecord(j,new ByteArray(reply));
        break;
      }
    }
    log.debug("Read slot " + ourSlot + " containing hop "+ i+ " @ "+ _peers[i].toBase64()+ " receives on "+ ourId+ " w/ replyIV "+ Base64.encode(replyIV)+ " sending to "+ nextId+ " on "+ nextPeer.toBase64()+ " inGW? "+ isInGW+ " outEnd? "+ isOutEnd+ " time difference "+ (now - time));
  }
  log.debug("\n================================================================" + "\nAll hops traversed and replies gathered" + "\n================================================================");
  TunnelBuildReplyMessage reply=new TunnelBuildReplyMessage(ctx);
  for (int i=0; i < TunnelBuildMessage.RECORD_COUNT; i++)   reply.setRecord(i,msg.getRecord(i));
  BuildReplyHandler handler=new BuildReplyHandler();
  int statuses[]=handler.decrypt(ctx,reply,cfg,order);
  if (statuses == null)   throw new RuntimeException("bar");
  boolean allAgree=true;
  for (int i=0; i < cfg.getLength(); i++) {
    Hash peer=cfg.getPeer(i);
    int record=((Integer)order.get(i)).intValue();
    if (statuses[record] != 0)     allAgree=false;
  }
  log.debug("\n================================================================" + "\nAll peers agree? " + allAgree + "\n================================================================");
}
