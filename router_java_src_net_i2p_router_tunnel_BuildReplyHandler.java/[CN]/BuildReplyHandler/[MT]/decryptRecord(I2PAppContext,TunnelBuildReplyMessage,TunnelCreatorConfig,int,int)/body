{
  Log log=ctx.logManager().getLog(BuildReplyHandler.class);
  if (BuildMessageGenerator.isBlank(cfg,hop)) {
    if (log.shouldLog(Log.DEBUG))     log.debug(reply.getUniqueId() + ": Record " + recordNum+ "/"+ hop+ " is fake, so consider it valid...");
    return 0;
  }
  ByteArray rec=reply.getRecord(recordNum);
  int off=rec.getOffset();
  int start=cfg.getLength() - 1;
  if (cfg.isInbound())   start--;
  for (int j=start; j >= hop; j--) {
    HopConfig hopConfig=cfg.getConfig(j);
    SessionKey replyKey=hopConfig.getReplyKey();
    byte replyIV[]=hopConfig.getReplyIV().getData();
    int replyIVOff=hopConfig.getReplyIV().getOffset();
    if (log.shouldLog(Log.DEBUG))     log.debug(reply.getUniqueId() + ": Decrypting record " + recordNum+ "/"+ hop+ "/"+ j+ " with replyKey "+ replyKey.toBase64()+ "/"+ Base64.encode(replyIV,replyIVOff,16)+ ": "+ cfg);
    if (log.shouldLog(Log.DEBUG))     log.debug(reply.getUniqueId() + ": before decrypt(" + off+ "-"+ (off + rec.getValid())+ "): "+ Base64.encode(rec.getData(),off,rec.getValid()));
    if (log.shouldLog(Log.DEBUG))     log.debug(reply.getUniqueId() + ": Full reply rec: offset=" + off+ ", sz="+ rec.getData().length+ "/"+ rec.getValid()+ ", data="+ Base64.encode(rec.getData(),off,TunnelBuildReplyMessage.RECORD_SIZE));
    ctx.aes().decrypt(rec.getData(),off,rec.getData(),off,replyKey,replyIV,replyIVOff,TunnelBuildReplyMessage.RECORD_SIZE);
    if (log.shouldLog(Log.DEBUG))     log.debug(reply.getUniqueId() + ": after decrypt: " + Base64.encode(rec.getData(),off,rec.getValid()));
  }
  Hash h=ctx.sha().calculateHash(rec.getData(),off + Hash.HASH_LENGTH,TunnelBuildReplyMessage.RECORD_SIZE - Hash.HASH_LENGTH);
  if (!DataHelper.eq(h.getData(),0,rec.getData(),off,Hash.HASH_LENGTH)) {
    if (log.shouldLog(Log.DEBUG))     log.debug(reply.getUniqueId() + ": Failed verification on " + recordNum+ "/"+ hop+ ": "+ h.toBase64()+ " calculated, "+ Base64.encode(rec.getData(),off,Hash.HASH_LENGTH)+ " expected\n"+ "Record: "+ Base64.encode(rec.getData(),off + Hash.HASH_LENGTH,TunnelBuildReplyMessage.RECORD_SIZE - Hash.HASH_LENGTH));
    return -1;
  }
 else {
    int rv=(int)DataHelper.fromLong(rec.getData(),off + TunnelBuildReplyMessage.RECORD_SIZE - 1,1);
    if (log.shouldLog(Log.DEBUG))     log.debug(reply.getUniqueId() + ": Verified: " + rv+ " for record "+ recordNum+ "/"+ hop);
    return rv;
  }
}
