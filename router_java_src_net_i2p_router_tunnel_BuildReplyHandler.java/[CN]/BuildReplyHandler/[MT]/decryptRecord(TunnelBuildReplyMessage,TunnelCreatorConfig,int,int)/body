{
  if (BuildMessageGenerator.isBlank(cfg,hop)) {
    if (log.shouldLog(Log.DEBUG))     log.debug(reply.getUniqueId() + ": Record " + recordNum+ "/"+ hop+ " is fake, so consider it valid...");
    return 0;
  }
  EncryptedBuildRecord rec=reply.getRecord(recordNum);
  byte[] data=rec.getData();
  int start=cfg.getLength() - 1;
  if (cfg.isInbound())   start--;
  for (int j=start; j >= hop; j--) {
    HopConfig hopConfig=cfg.getConfig(j);
    SessionKey replyKey=hopConfig.getReplyKey();
    byte replyIV[]=hopConfig.getReplyIV();
    if (log.shouldLog(Log.DEBUG)) {
      log.debug(reply.getUniqueId() + ": Decrypting record " + recordNum+ "/"+ hop+ "/"+ j+ " with replyKey "+ replyKey.toBase64()+ "/"+ Base64.encode(replyIV)+ ": "+ cfg);
      log.debug(reply.getUniqueId() + ": before decrypt: " + Base64.encode(data));
      log.debug(reply.getUniqueId() + ": Full reply rec: sz=" + data.length+ " data="+ Base64.encode(data,0,TunnelBuildReplyMessage.RECORD_SIZE));
    }
    ctx.aes().decrypt(data,0,data,0,replyKey,replyIV,0,TunnelBuildReplyMessage.RECORD_SIZE);
    if (log.shouldLog(Log.DEBUG))     log.debug(reply.getUniqueId() + ": after decrypt: " + Base64.encode(data));
  }
  byte[] h=SimpleByteCache.acquire(Hash.HASH_LENGTH);
  ctx.sha().calculateHash(data,Hash.HASH_LENGTH,TunnelBuildReplyMessage.RECORD_SIZE - Hash.HASH_LENGTH,h,0);
  boolean ok=DataHelper.eq(h,0,data,0,Hash.HASH_LENGTH);
  if (!ok) {
    if (log.shouldLog(Log.DEBUG))     log.debug(reply.getUniqueId() + ": Failed verification on " + recordNum+ "/"+ hop+ ": "+ Base64.encode(h)+ " calculated, "+ Base64.encode(data,0,Hash.HASH_LENGTH)+ " expected\n"+ "Record: "+ Base64.encode(data,Hash.HASH_LENGTH,TunnelBuildReplyMessage.RECORD_SIZE - Hash.HASH_LENGTH));
    SimpleByteCache.release(h);
    return -1;
  }
 else {
    SimpleByteCache.release(h);
    int rv=data[TunnelBuildReplyMessage.RECORD_SIZE - 1] & 0xff;
    if (log.shouldLog(Log.DEBUG))     log.debug(reply.getUniqueId() + ": Verified: " + rv+ " for record "+ recordNum+ "/"+ hop);
    return rv;
  }
}
