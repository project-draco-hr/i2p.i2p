{
  boolean ok=verifyPreprocessed(preprocessed,offset,length);
  if (!ok) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Unable to verify preprocessed data (pre.length=" + preprocessed.length + " off="+ offset+ " len="+ length);
    _cache.release(new ByteArray(preprocessed));
    _context.statManager().addRateData("tunnel.corruptMessage",1,1);
    return;
  }
  offset+=HopProcessor.IV_LENGTH;
  offset+=4;
  int padding=0;
  while (preprocessed[offset] != (byte)0x00) {
    offset++;
    padding++;
  }
  offset++;
  if (_log.shouldLog(Log.DEBUG)) {
    _log.debug("Fragments begin at offset=" + offset + " padding="+ padding);
  }
  try {
    while (offset < length) {
      int off=receiveFragment(preprocessed,offset,length);
      if (off < 0) {
        _context.statManager().addRateData("tunnel.corruptMessage",1,1);
        return;
      }
      offset=off;
    }
  }
 catch (  ArrayIndexOutOfBoundsException aioobe) {
    _context.statManager().addRateData("tunnel.corruptMessage",1,1);
  }
catch (  NullPointerException npe) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Corrupt fragment received: offset = " + offset,npe);
    _context.statManager().addRateData("tunnel.corruptMessage",1,1);
  }
catch (  RuntimeException e) {
    if (_log.shouldLog(Log.ERROR))     _log.error("Corrupt fragment received: offset = " + offset,e);
    _context.statManager().addRateData("tunnel.corruptMessage",1,1);
    throw e;
  }
 finally {
    _cache.release(new ByteArray(preprocessed));
  }
}
