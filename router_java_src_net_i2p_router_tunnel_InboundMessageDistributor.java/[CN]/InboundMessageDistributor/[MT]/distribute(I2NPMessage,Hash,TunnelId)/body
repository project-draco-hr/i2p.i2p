{
  if ((_client != null) && (msg.getType() != DeliveryStatusMessage.MESSAGE_TYPE) && (msg.getType() != GarlicMessage.MESSAGE_TYPE)) {
    _context.statManager().addRateData("tunnel.dropDangerousClientTunnelMessage",1,msg.getType());
    _log.error("Dropped dangerous message down a tunnel for " + _client.toBase64() + ": "+ msg,new Exception("cause"));
    return;
  }
  if ((target == null) || ((tunnel == null) && (_context.routerHash().equals(target)))) {
    if (msg.getType() == GarlicMessage.MESSAGE_TYPE) {
      _context.inNetMessagePool().handleReplies(msg);
      if (_log.shouldLog(Log.DEBUG))       _log.debug("received garlic message in the tunnel, parse it out");
      _receiver.receive((GarlicMessage)msg);
    }
 else {
      if (_log.shouldLog(Log.INFO))       _log.info("distributing inbound tunnel message into our inNetMessagePool: " + msg);
      _context.inNetMessagePool().add(msg,null,null);
    }
  }
 else   if (_context.routerHash().equals(target)) {
    if (_log.shouldLog(Log.INFO))     _log.info("distributing inbound tunnel message back out, except we are the gateway");
    TunnelGatewayMessage gw=new TunnelGatewayMessage(_context);
    gw.setMessage(msg);
    gw.setTunnelId(tunnel);
    gw.setMessageExpiration(_context.clock().now() + 10 * 1000);
    gw.setUniqueId(_context.random().nextLong(I2NPMessage.MAX_ID_VALUE));
    _context.tunnelDispatcher().dispatch(gw);
  }
 else {
    TunnelInfo out=_context.tunnelManager().selectOutboundTunnel(_client);
    if (out == null) {
      if (_log.shouldLog(Log.WARN))       _log.warn("no outbound tunnel to send the client message for " + _client + ": "+ msg);
      return;
    }
    if (_log.shouldLog(Log.INFO))     _log.info("distributing inbound tunnel message back out " + out + " targetting "+ target.toBase64().substring(0,4));
    TunnelId outId=out.getSendTunnelId(0);
    if (outId == null) {
      if (_log.shouldLog(Log.ERROR))       _log.error("wtf, outbound tunnel has no outboundId? " + out + " failing to distribute "+ msg);
      return;
    }
    if (msg.getMessageExpiration() < _context.clock().now() + 10 * 1000)     msg.setMessageExpiration(_context.clock().now() + 10 * 1000);
    _context.tunnelDispatcher().dispatchOutbound(msg,outId,tunnel,target);
  }
}
