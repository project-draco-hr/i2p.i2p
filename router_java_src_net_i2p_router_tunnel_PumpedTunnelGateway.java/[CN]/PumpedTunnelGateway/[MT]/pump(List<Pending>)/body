{
  _prequeue.drainTo(queueBuf);
  if (queueBuf.isEmpty())   return;
  long startAdd=System.currentTimeMillis();
  long beforeLock=startAdd;
  long afterAdded=-1;
  boolean delayedFlush=false;
  long delayAmount=-1;
  int remaining=0;
  long afterPreprocess=0;
  long afterExpire=0;
synchronized (_queue) {
    _queue.addAll(queueBuf);
    afterAdded=System.currentTimeMillis();
    if (_log.shouldLog(Log.DEBUG))     _log.debug("Added before direct flush preprocessing for " + toString() + ": "+ _queue);
    delayedFlush=_preprocessor.preprocessQueue(_queue,_sender,_receiver);
    afterPreprocess=System.currentTimeMillis();
    if (delayedFlush)     delayAmount=_preprocessor.getDelayAmount();
    _lastFlush=_context.clock().now();
    for (int i=0; i < _queue.size(); i++) {
      Pending m=_queue.get(i);
      if (m.getExpiration() + Router.CLOCK_FUDGE_FACTOR < _lastFlush) {
        if (_log.shouldLog(Log.DEBUG))         _log.debug("Expire on the queue (size=" + _queue.size() + "): "+ m);
        _queue.remove(i);
        i--;
      }
    }
    afterExpire=System.currentTimeMillis();
    remaining=_queue.size();
    if ((remaining > 0) && (_log.shouldLog(Log.DEBUG)))     _log.debug("Remaining after preprocessing: " + _queue);
  }
  if (delayedFlush) {
    FlushTimer.getInstance().addEvent(_delayedFlush,delayAmount);
  }
  _context.statManager().addRateData("tunnel.lockedGatewayAdd",afterAdded - beforeLock,remaining);
  long complete=System.currentTimeMillis();
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Time to add " + queueBuf.size() + " messages to "+ toString()+ ": "+ (complete - startAdd)+ " delayed? "+ delayedFlush+ " remaining: "+ remaining+ " add: "+ (afterAdded - beforeLock)+ " preprocess: "+ (afterPreprocess - afterAdded)+ " expire: "+ (afterExpire - afterPreprocess)+ " queue flush: "+ (complete - afterExpire));
  queueBuf.clear();
}
