{
  byte iv[]=SimpleByteCache.acquire(IV_SIZE);
  _context.random().nextBytes(iv);
  System.arraycopy(iv,0,fragments,fragmentLength,IV_SIZE);
  byte[] hashBuf=SimpleByteCache.acquire(Hash.HASH_LENGTH);
  _context.sha().calculateHash(fragments,0,fragmentLength + IV_SIZE,hashBuf,0);
  int distance=PREPROCESSED_SIZE - fragmentLength;
  System.arraycopy(fragments,0,fragments,distance,fragmentLength);
  java.util.Arrays.fill(fragments,0,distance,(byte)0x0);
  int offset=0;
  System.arraycopy(iv,0,fragments,offset,IV_SIZE);
  offset+=IV_SIZE;
  System.arraycopy(hashBuf,0,fragments,offset,4);
  offset+=4;
  SimpleByteCache.release(hashBuf);
  SimpleByteCache.release(iv);
  int numPadBytes=PREPROCESSED_SIZE - IV_SIZE - 4- 1- fragmentLength;
  if (numPadBytes > 0) {
    fillRandomNonZero(fragments,offset,numPadBytes);
    offset+=numPadBytes;
  }
  fragments[offset]=0x0;
  offset++;
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Preprocessing beginning of the fragment instructions at " + offset);
}
