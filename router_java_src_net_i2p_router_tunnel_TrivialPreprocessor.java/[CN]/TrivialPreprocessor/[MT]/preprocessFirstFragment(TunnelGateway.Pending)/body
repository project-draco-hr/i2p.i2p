{
  boolean fragmented=false;
  ByteArray ivBuf=_ivCache.acquire();
  byte iv[]=ivBuf.getData();
  _context.random().nextBytes(iv);
  byte target[]=_dataCache.acquire().getData();
  int instructionsLength=getInstructionsSize(msg);
  int payloadLength=msg.getData().length;
  if (payloadLength + instructionsLength + IV_SIZE+ 1+ 4 > PREPROCESSED_SIZE) {
    fragmented=true;
    instructionsLength+=4;
    payloadLength=PREPROCESSED_SIZE - IV_SIZE - 1- 4- instructionsLength;
  }
  int offset=0;
  target[offset]=0x0;
  if (msg.getToTunnel() != null)   target[offset]|=MASK_TUNNEL;
 else   if (msg.getToRouter() != null)   target[offset]|=MASK_ROUTER;
  if (fragmented)   target[offset]|=MASK_FRAGMENTED;
  if (_log.shouldLog(Log.DEBUG))   _log.debug("CONTROL: " + Integer.toHexString(target[offset]));
  offset++;
  if (msg.getToTunnel() != null) {
    DataHelper.toLong(target,offset,4,msg.getToTunnel().getTunnelId());
    offset+=4;
  }
  if (msg.getToRouter() != null) {
    System.arraycopy(msg.getToRouter().getData(),0,target,offset,Hash.HASH_LENGTH);
    offset+=Hash.HASH_LENGTH;
  }
  if (fragmented) {
    DataHelper.toLong(target,offset,4,msg.getMessageId());
    if (_log.shouldLog(Log.DEBUG))     _log.debug("writing messageId= " + msg.getMessageId() + " at offset "+ offset);
    offset+=4;
  }
  DataHelper.toLong(target,offset,2,payloadLength);
  offset+=2;
  System.arraycopy(msg.getData(),0,target,offset,payloadLength);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("initial fragment[" + msg.getMessageId() + "/"+ msg.getFragmentNumber()+ "/"+ (PREPROCESSED_SIZE - offset - payloadLength)+ "/"+ payloadLength+ "]: "+ Base64.encode(target,offset,payloadLength));
  offset+=payloadLength;
  SHA256EntryCache.CacheEntry cache=_context.sha().cache().acquire(PREPROCESSED_SIZE);
  System.arraycopy(iv,0,target,offset,IV_SIZE);
  Hash h=_context.sha().calculateHash(target,0,offset + IV_SIZE,cache);
  int distance=PREPROCESSED_SIZE - offset;
  System.arraycopy(target,0,target,distance,offset);
  if (_log.shouldLog(Log.DEBUG))   _log.debug(msg.getMessageId() + ": fragments begin at " + distance+ " (size="+ payloadLength+ " offset="+ offset+ ")");
  java.util.Arrays.fill(target,0,distance,(byte)0x0);
  offset=0;
  System.arraycopy(iv,0,target,offset,IV_SIZE);
  offset+=IV_SIZE;
  System.arraycopy(h.getData(),0,target,offset,4);
  offset+=4;
  _context.sha().cache().release(cache);
  _ivCache.release(ivBuf);
  if (!fragmented) {
    int numPadBytes=PREPROCESSED_SIZE - IV_SIZE - 4- 1- payloadLength- instructionsLength;
    int paddingRemaining=numPadBytes;
    while (paddingRemaining > 0) {
      byte b=(byte)(_context.random().nextInt() & 0xFF);
      if (b != 0x00) {
        target[offset]=b;
        offset++;
        paddingRemaining--;
      }
    }
  }
  target[offset]=0x0;
  offset++;
  msg.setOffset(payloadLength);
  msg.incrementFragmentNumber();
  return target;
}
