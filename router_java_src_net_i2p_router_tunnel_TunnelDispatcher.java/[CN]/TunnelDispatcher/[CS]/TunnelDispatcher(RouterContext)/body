{
  _context=ctx;
  _log=ctx.logManager().getLog(TunnelDispatcher.class);
  _outboundGateways=new HashMap();
  _outboundEndpoints=new HashMap();
  _participants=new HashMap();
  _inboundGateways=new HashMap();
  _participatingConfig=new HashMap();
  _lastParticipatingExpiration=0;
  _validator=null;
  _leaveJob=new LeaveTunnel(ctx);
  ctx.statManager().createRateStat("tunnel.participatingTunnels","How many tunnels are we participating in?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,3 * 60 * 60* 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.dispatchOutboundPeer","How many messages we send out a tunnel targetting a peer?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,3 * 60 * 60* 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.dispatchOutboundTunnel","How many messages we send out a tunnel targetting a tunnel?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,3 * 60 * 60* 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.dispatchInbound","How many messages we send through our tunnel gateway?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,3 * 60 * 60* 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.dispatchParticipant","How many messages we send through a tunnel we are participating in?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,3 * 60 * 60* 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.dispatchEndpoint","How many messages we receive as the outbound endpoint of a tunnel?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,3 * 60 * 60* 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.joinOutboundGateway","How many tunnels we join as the outbound gateway?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,3 * 60 * 60* 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.joinOutboundGatewayZeroHop","How many zero hop tunnels we join as the outbound gateway?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,3 * 60 * 60* 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.joinInboundEndpoint","How many tunnels we join as the inbound endpoint?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,3 * 60 * 60* 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.joinInboundEndpointZeroHop","How many zero hop tunnels we join as the inbound endpoint?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,3 * 60 * 60* 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.joinParticipant","How many tunnels we join as a participant?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,3 * 60 * 60* 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.joinOutboundEndpoint","How many tunnels we join as the outbound endpoint?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,3 * 60 * 60* 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.joinInboundGateway","How many tunnels we join as the inbound gateway?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,3 * 60 * 60* 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.dispatchGatewayTime","How long it takes to dispatch a TunnelGatewayMessage","Tunnels",new long[]{60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.dispatchDataTime","How long it takes to dispatch a TunnelDataMessage","Tunnels",new long[]{60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.dispatchOutboundTime","How long it takes to dispatch an outbound message","Tunnels",new long[]{60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.dispatchOutboundZeroHopTime","How long it takes to dispatch an outbound message through a zero hop tunnel","Tunnels",new long[]{60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.participatingMessageCount","How many messages are sent through a participating tunnel?","Tunnels",new long[]{60 * 10 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.ownedMessageCount","How many messages are sent through a tunnel we created (period == failures)?","Tunnels",new long[]{60 * 1000l,10 * 60 * 1000l,60 * 60 * 1000l});
  ctx.statManager().createRateStat("tunnel.failedCompletelyMessages","How many messages are sent through a tunnel that failed prematurely (period == failures)?","Tunnels",new long[]{60 * 1000l,10 * 60 * 1000l,60 * 60 * 1000l});
  ctx.statManager().createRateStat("tunnel.failedPartially","How many messages are sent through a tunnel that only failed partially (period == failures)?","Tunnels",new long[]{60 * 1000l,10 * 60 * 1000l,60 * 60 * 1000l});
}
