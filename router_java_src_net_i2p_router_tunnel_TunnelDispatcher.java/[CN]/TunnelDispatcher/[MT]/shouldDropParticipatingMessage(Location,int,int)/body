{
  if (length <= 0)   return false;
  int used=_context.bandwidthLimiter().getCurrentParticipatingBandwidth();
  if (used <= 0)   return false;
  int maxKBps=Math.min(_context.bandwidthLimiter().getInboundKBytesPerSecond(),_context.bandwidthLimiter().getOutboundKBytesPerSecond());
  float share=(float)_context.router().getSharePercentage();
  float maxBps=maxKBps * share * (1024f * 1.20f);
  float pctDrop=(used - maxBps) / used;
  if (pctDrop <= 0)   return false;
  double len=length;
  if (loc == Location.OBEP) {
    if (type == VariableTunnelBuildMessage.MESSAGE_TYPE || type == TunnelBuildMessage.MESSAGE_TYPE)     len/=1.5;
 else     len*=1.5;
  }
 else   if (loc == Location.IBGW) {
    if (type == VariableTunnelBuildReplyMessage.MESSAGE_TYPE || type == TunnelBuildReplyMessage.MESSAGE_TYPE)     len/=1.5 * 1.5 * 1.5;
 else     len/=1.5;
  }
  if ((int)len != 1024)   pctDrop=(float)Math.pow(pctDrop,1024d / len);
  float rand=_context.random().nextFloat();
  boolean reject=rand <= pctDrop;
  if (reject) {
    if (_log.shouldLog(Log.WARN)) {
      int availBps=(int)(((maxKBps * 1024) * share) - used);
      _log.warn("Drop part. msg. avail/max/used " + availBps + "/"+ (int)maxBps+ "/"+ used+ " %Drop = "+ pctDrop+ ' '+ loc+ ' '+ type+ ' '+ length);
    }
    _context.statManager().addRateData("tunnel.participatingMessageDropped",1);
  }
  return reject;
}
