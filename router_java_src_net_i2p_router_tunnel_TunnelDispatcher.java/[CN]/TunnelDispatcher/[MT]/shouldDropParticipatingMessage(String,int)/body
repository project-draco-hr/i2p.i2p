{
  if (length <= 0)   return false;
  RateStat rs=_context.statManager().getRate("tunnel.participatingBandwidth");
  if (rs == null)   return false;
  Rate r=rs.getRate(60 * 1000);
  if (r == null)   return false;
  long count=r.getLastEventCount() + (3 * r.getCurrentEventCount());
  int bw=0;
  if (count > 0)   bw=(int)((r.getLastTotalValue() + (3 * r.getCurrentTotalValue())) / count);
 else   bw=(int)r.getLifetimeAverageValue();
  int usedIn=Math.min(_context.router().get1sRateIn(),_context.router().get15sRateIn());
  usedIn=Math.min(usedIn,bw);
  if (usedIn <= 0)   return false;
  int usedOut=Math.min(_context.router().get1sRate(true),_context.router().get15sRate(true));
  usedOut=Math.min(usedOut,bw);
  if (usedOut <= 0)   return false;
  int used=Math.min(usedIn,usedOut);
  int maxKBps=Math.min(_context.bandwidthLimiter().getInboundKBytesPerSecond(),_context.bandwidthLimiter().getOutboundKBytesPerSecond());
  float share=(float)_context.router().getSharePercentage();
  float maxBps=maxKBps * share * 1024f* 0.95f;
  float pctDrop=(used - maxBps) / used;
  if (pctDrop <= 0)   return false;
  double len=length;
  if (type.startsWith("OBEP")) {
    if (type.equals("OBEP 21"))     len/=1.5;
 else     len*=1.5;
  }
 else   if (type.startsWith("IBGW")) {
    len/=1.5;
  }
  if ((int)len != 1024)   pctDrop=(float)Math.pow(pctDrop,1024d / len);
  float rand=_context.random().nextFloat();
  boolean reject=rand <= pctDrop;
  if (reject) {
    if (_log.shouldLog(Log.WARN)) {
      int availBps=(int)(((maxKBps * 1024) * share) - used);
      _log.warn("Drop part. msg. avail/max/used " + availBps + "/"+ (int)maxBps+ "/"+ used+ " %Drop = "+ pctDrop+ ' '+ type+ ' '+ length);
    }
    _context.statManager().addRateData("tunnel.participatingMessageDropped",1,0);
  }
  return reject;
}
