{
  Log log=getLog(ctx);
  if (log.shouldLog(Log.DEBUG))   log.debug("IV[recv] = " + Base64.encode(data,0,IV_SIZE));
  int numBlocks=(data.length - IV_SIZE) / IV_SIZE;
  int numPayloadBlocks=(data.length - IV_SIZE - 2 * IV_SIZE * (GatewayMessage.HOPS + 1)) / IV_SIZE;
  byte prev[]=new byte[IV_SIZE];
  byte cur[]=new byte[IV_SIZE];
  System.arraycopy(data,0,prev,0,IV_SIZE);
  for (int i=0; i < numBlocks; i++) {
    int off=(i + 1) * IV_SIZE;
    if (i == numPayloadBlocks) {
      if (log.shouldLog(Log.DEBUG))       log.debug("block[" + i + "].prev="+ Base64.encode(prev));
    }
    System.arraycopy(data,off,cur,0,IV_SIZE);
    ctx.aes().decryptBlock(data,off,layerKey,data,off);
    DataHelper.xor(prev,0,data,off,data,off,IV_SIZE);
    byte xf[]=prev;
    prev=cur;
    cur=xf;
  }
  ctx.aes().decryptBlock(data,0,layerKey,data,0);
  DataHelper.xor(data,0,GatewayMessage.IV_WHITENER,0,data,0,IV_SIZE);
  Hash h=ctx.sha().calculateHash(data,0,IV_SIZE);
  System.arraycopy(h.getData(),0,data,0,IV_SIZE);
  if (log.shouldLog(Log.DEBUG)) {
    log.debug("IV[send] = " + Base64.encode(data,0,IV_SIZE));
    log.debug("key = " + layerKey.toBase64());
  }
}
