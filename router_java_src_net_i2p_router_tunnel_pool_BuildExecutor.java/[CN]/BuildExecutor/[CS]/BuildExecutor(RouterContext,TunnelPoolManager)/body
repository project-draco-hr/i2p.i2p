{
  _context=ctx;
  _log=ctx.logManager().getLog(getClass());
  _manager=mgr;
  _currentlyBuilding=new Object();
  _currentlyBuildingMap=new ConcurrentHashMap(MAX_CONCURRENT_BUILDS);
  _recentlyBuildingMap=new ConcurrentHashMap(4 * MAX_CONCURRENT_BUILDS);
  _context.statManager().createRateStat("tunnel.concurrentBuilds","How many builds are going at once","Tunnels",new long[]{60 * 1000,5 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRateStat("tunnel.concurrentBuildsLagged","How many builds are going at once when we reject further builds, due to job lag (period is lag)","Tunnels",new long[]{60 * 1000,5 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRequiredRateStat("tunnel.buildExploratoryExpire","No response to our build request","Tunnels",new long[]{10 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRequiredRateStat("tunnel.buildClientExpire","No response to our build request","Tunnels",new long[]{10 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRequiredRateStat("tunnel.buildExploratorySuccess","Response time for success (ms)","Tunnels",new long[]{10 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRequiredRateStat("tunnel.buildClientSuccess","Response time for success (ms)","Tunnels",new long[]{10 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRequiredRateStat("tunnel.buildExploratoryReject","Response time for rejection (ms)","Tunnels",new long[]{10 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRequiredRateStat("tunnel.buildClientReject","Response time for rejection (ms)","Tunnels",new long[]{10 * 60 * 1000,60 * 60 * 1000});
  _context.statManager().createRequiredRateStat("tunnel.buildRequestTime","Time to build a tunnel request (ms)","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("tunnel.buildConfigTime","Time to build a tunnel request (ms)","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("tunnel.buildRequestZeroHopTime","How long it takes to build a zero hop tunnel","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("tunnel.buildFailFirstHop","How often we fail to build a OB tunnel because we can't contact the first hop","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("tunnel.buildReplySlow","Build reply late, but not too late","Tunnels",new long[]{10 * 60 * 1000});
  StatManager statMgr=_context.statManager();
  String bwTiers=RouterInfo.BW_CAPABILITY_CHARS;
  for (int i=0; i < bwTiers.length(); i++) {
    String bwTier=String.valueOf(bwTiers.charAt(i));
    statMgr.createRateStat("tunnel.tierAgree" + bwTier,"Agreed joins from " + bwTier,"Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
    statMgr.createRateStat("tunnel.tierReject" + bwTier,"Rejected joins from " + bwTier,"Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
    statMgr.createRateStat("tunnel.tierExpire" + bwTier,"Expired joins from " + bwTier,"Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  }
  statMgr.createRateStat("tunnel.tierAgreeUnknown","Agreed joins from unknown","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  statMgr.createRateStat("tunnel.tierRejectUnknown","Rejected joins from unknown","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  statMgr.createRateStat("tunnel.tierExpireUnknown","Expired joins from unknown","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
}
