{
  StringBuffer buf=null;
  if (_log.shouldLog(Log.DEBUG)) {
    buf=new StringBuffer(128);
    buf.append("Allowed: ");
  }
  int maxKBps=_context.bandwidthLimiter().getOutboundKBytesPerSecond();
  int allowed=maxKBps / 6;
  if (allowed < 2)   allowed=2;
  if (allowed > 10)   allowed=10;
  String prop=_context.getProperty("router.tunnelConcurrentBuilds");
  if (prop != null)   try {
    allowed=Integer.valueOf(prop).intValue();
  }
 catch (  NumberFormatException nfe) {
  }
  List expired=null;
  int concurrent=0;
  long expireBefore=_context.clock().now() + 10 * 60 * 1000 - BuildRequestor.REQUEST_TIMEOUT;
synchronized (_currentlyBuilding) {
    for (int i=0; i < _currentlyBuilding.size(); i++) {
      TunnelCreatorConfig cfg=(TunnelCreatorConfig)_currentlyBuilding.get(i);
      if (cfg.getExpiration() <= expireBefore) {
        _currentlyBuilding.remove(i);
        i--;
        if (expired == null)         expired=new ArrayList();
        expired.add(cfg);
      }
    }
    concurrent=_currentlyBuilding.size();
    allowed-=concurrent;
    if (buf != null)     buf.append(allowed).append(" ").append(_currentlyBuilding.toString());
  }
  if (expired != null) {
    for (int i=0; i < expired.size(); i++) {
      PooledTunnelCreatorConfig cfg=(PooledTunnelCreatorConfig)expired.get(i);
      if (_log.shouldLog(Log.INFO))       _log.info("Timed out waiting for reply asking for " + cfg);
      TunnelPool pool=cfg.getTunnelPool();
      if (pool != null)       pool.buildComplete(cfg);
      if (cfg.getDestination() == null)       _context.statManager().addRateData("tunnel.buildExploratoryExpire",1,0);
 else       _context.statManager().addRateData("tunnel.buildClientExpire",1,0);
      for (int j=0; j < cfg.getLength(); j++)       didNotReply(cfg.getReplyMessageId(),cfg.getPeer(j));
    }
  }
  _context.statManager().addRateData("tunnel.concurrentBuilds",concurrent,0);
  long lag=_context.jobQueue().getMaxLag();
  if ((lag > 2000) && (_context.router().getUptime() > 5 * 60 * 1000)) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Too lagged [" + lag + "], don't allow building");
    _context.statManager().addRateData("tunnel.concurrentBuildsLagged",concurrent,lag);
    return 0;
  }
  allowed=trimForOverload(allowed,concurrent);
  return allowed;
}
