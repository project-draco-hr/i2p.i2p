{
  int maxKBps=_context.bandwidthLimiter().getOutboundKBytesPerSecond();
  int allowed=maxKBps / 6;
  RateStat rs=_context.statManager().getRate("tunnel.buildRequestTime");
  if (rs != null) {
    Rate r=rs.getRate(60 * 1000);
    double avg=0;
    if (r != null)     avg=r.getAverageValue();
    if (avg <= 0)     avg=rs.getLifetimeAverageValue();
    if (avg > 1) {
      int throttle=(int)(75 * MAX_CONCURRENT_BUILDS / avg);
      if (throttle < allowed) {
        allowed=throttle;
        if (allowed < MAX_CONCURRENT_BUILDS && _log.shouldLog(Log.INFO))         _log.info("Throttling max builds to " + allowed + " due to avg build time of "+ ((int)avg)+ " ms");
      }
    }
  }
  if (allowed < 2)   allowed=2;
  if (allowed > MAX_CONCURRENT_BUILDS)   allowed=MAX_CONCURRENT_BUILDS;
  allowed=_context.getProperty("router.tunnelConcurrentBuilds",allowed);
  long expireBefore=_context.clock().now() + 10 * 60 * 1000 - BuildRequestor.REQUEST_TIMEOUT - GRACE_PERIOD;
  for (Iterator<PooledTunnelCreatorConfig> iter=_recentlyBuildingMap.values().iterator(); iter.hasNext(); ) {
    PooledTunnelCreatorConfig cfg=iter.next();
    if (cfg.getExpiration() <= expireBefore) {
      iter.remove();
    }
  }
  List<PooledTunnelCreatorConfig> expired=null;
  int concurrent=0;
  expireBefore=_context.clock().now() + 10 * 60 * 1000 - BuildRequestor.REQUEST_TIMEOUT;
  for (Iterator<PooledTunnelCreatorConfig> iter=_currentlyBuildingMap.values().iterator(); iter.hasNext(); ) {
    PooledTunnelCreatorConfig cfg=iter.next();
    if (cfg.getExpiration() <= expireBefore) {
      _recentlyBuildingMap.putIfAbsent(Long.valueOf(cfg.getReplyMessageId()),cfg);
      iter.remove();
      if (expired == null)       expired=new ArrayList();
      expired.add(cfg);
    }
  }
  concurrent=_currentlyBuildingMap.size();
  allowed-=concurrent;
  if (expired != null) {
    for (int i=0; i < expired.size(); i++) {
      PooledTunnelCreatorConfig cfg=expired.get(i);
      if (_log.shouldLog(Log.INFO))       _log.info("Timed out waiting for reply asking for " + cfg);
      for (int iPeer=0; iPeer < cfg.getLength(); iPeer++) {
        Hash peer=cfg.getPeer(iPeer);
        if (peer.equals(_context.routerHash()))         continue;
        RouterInfo ri=_context.netDb().lookupRouterInfoLocally(peer);
        String bwTier="Unknown";
        if (ri != null)         bwTier=ri.getBandwidthTier();
        _context.statManager().addRateData("tunnel.tierExpire" + bwTier,1,0);
        didNotReply(cfg.getReplyMessageId(),peer);
        _context.profileManager().tunnelTimedOut(peer);
      }
      TunnelPool pool=cfg.getTunnelPool();
      if (pool != null)       pool.buildComplete(cfg);
      if (cfg.getDestination() == null)       _context.statManager().addRateData("tunnel.buildExploratoryExpire",1,0);
 else       _context.statManager().addRateData("tunnel.buildClientExpire",1,0);
    }
  }
  _context.statManager().addRateData("tunnel.concurrentBuilds",concurrent,0);
  long lag=_context.jobQueue().getMaxLag();
  if ((lag > 2000) && (_context.router().getUptime() > 5 * 60 * 1000)) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Too lagged [" + lag + "], don't allow building");
    _context.statManager().addRateData("tunnel.concurrentBuildsLagged",concurrent,lag);
    return 0;
  }
  return allowed;
}
