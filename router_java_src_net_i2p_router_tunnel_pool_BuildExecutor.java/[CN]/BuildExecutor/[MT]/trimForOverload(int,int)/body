{
  int used1s=_context.router().get1sRate(true);
  int used15s=_context.router().get15sRate(true);
  int used1m=_context.router().get1mRate(true);
  int maxKBps=_context.bandwidthLimiter().getOutboundKBytesPerSecond();
  int maxBps=maxKBps * 1024;
  int overBuildLimit=maxBps - BUILD_BANDWIDTH_ESTIMATE_BYTES;
  int nearBuildLimit=maxBps - (2 * BUILD_BANDWIDTH_ESTIMATE_BYTES);
  if (Math.max(used1s,used15s) > overBuildLimit) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Overloaded, trouble building tunnels (maxKBps=" + maxKBps + ", 1s="+ used1s+ ", 15s="+ used15s+ ", 1m="+ used1m+ ")");
    if (((used1s > maxBps) && (used1s > used15s) && (used15s > nearBuildLimit)) || ((used1s > maxBps) && (used15s > overBuildLimit)) || ((used1s > overBuildLimit) && (used15s > overBuildLimit))) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Serious overload, allow building 0.");
      if (Boolean.valueOf(_context.getProperty("router.dropTunnelsOnOverload","false")).booleanValue() == true) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Requesting drop of biggest participating tunnel.");
        _context.tunnelDispatcher().dropBiggestParticipating();
      }
      return (0);
    }
 else {
      if (concurrent == 0) {
        if (_log.shouldLog(Log.WARN))         _log.warn("Mild overload, allow building 1.");
        return (1);
      }
 else {
        if (_log.shouldLog(Log.WARN))         _log.warn("Mild overload but already building " + concurrent + ", so allow 0.");
        return (0);
      }
    }
  }
  return (allowed);
}
