{
  _context=ctx;
  _log=ctx.logManager().getLog(getClass());
  _exec=exec;
  int sz=Math.min(MAX_QUEUE,Math.max(MIN_QUEUE,TunnelDispatcher.getShareBandwidth(ctx) * MIN_QUEUE / 48));
  _inboundBuildMessages=new LinkedBlockingQueue(sz);
  _context.statManager().createRateStat("tunnel.reject.10","How often we reject a tunnel probabalistically","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("tunnel.reject.20","How often we reject a tunnel because of transient overload","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("tunnel.reject.30","How often we reject a tunnel because of bandwidth overload","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("tunnel.reject.50","How often we reject a tunnel because of a critical issue (shutdown, etc)","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRequiredRateStat("tunnel.decryptRequestTime","Time to decrypt a build request (ms)","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRequiredRateStat("tunnel.rejectTimeout","Reject tunnel count (unknown next hop)","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRequiredRateStat("tunnel.rejectTimeout2","Reject tunnel count (can't contact next hop)","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRequiredRateStat("tunnel.rejectOverloaded","Delay to process rejected request (ms)","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRequiredRateStat("tunnel.acceptLoad","Delay to process accepted request (ms)","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("tunnel.dropConnLimits","Drop instead of reject due to conn limits","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRequiredRateStat("tunnel.dropLoad","Delay before dropping request (ms)?","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRequiredRateStat("tunnel.dropLoadDelay","Delay before abandoning request (ms)","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRequiredRateStat("tunnel.dropLoadBacklog","Pending request count when dropped","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRequiredRateStat("tunnel.dropLoadProactive","Delay estimate when dropped (ms)","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRequiredRateStat("tunnel.dropLoadProactiveAbort","Allowed requests during load","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("tunnel.handleRemaining","How many pending inbound requests were left on the queue after one pass?","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("tunnel.buildReplyTooSlow","How often a tunnel build reply came back after we had given up waiting for it?","Tunnels",new long[]{60 * 1000,10 * 60 * 1000});
  _context.statManager().createRateStat("tunnel.receiveRejectionProbabalistic","How often we are rejected probabalistically?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  _context.statManager().createRateStat("tunnel.receiveRejectionTransient","How often we are rejected due to transient overload?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  _context.statManager().createRateStat("tunnel.receiveRejectionBandwidth","How often we are rejected due to bandwidth overload?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  _context.statManager().createRateStat("tunnel.receiveRejectionCritical","How often we are rejected due to critical failure?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  _context.statManager().createRateStat("tunnel.corruptBuildReply","","Tunnels",new long[]{24 * 60 * 60* 1000l});
  _processor=new BuildMessageProcessor(ctx);
  _throttler=new ParticipatingThrottler(ctx);
  _buildMessageHandlerJob=new TunnelBuildMessageHandlerJob(ctx);
  _buildReplyMessageHandlerJob=new TunnelBuildReplyMessageHandlerJob(ctx);
  TunnelBuildMessageHandlerJobBuilder tbmhjb=new TunnelBuildMessageHandlerJobBuilder();
  TunnelBuildReplyMessageHandlerJobBuilder tbrmhjb=new TunnelBuildReplyMessageHandlerJobBuilder();
  ctx.inNetMessagePool().registerHandlerJobBuilder(TunnelBuildMessage.MESSAGE_TYPE,tbmhjb);
  ctx.inNetMessagePool().registerHandlerJobBuilder(TunnelBuildReplyMessage.MESSAGE_TYPE,tbrmhjb);
  ctx.inNetMessagePool().registerHandlerJobBuilder(VariableTunnelBuildMessage.MESSAGE_TYPE,tbmhjb);
  ctx.inNetMessagePool().registerHandlerJobBuilder(VariableTunnelBuildReplyMessage.MESSAGE_TYPE,tbrmhjb);
}
