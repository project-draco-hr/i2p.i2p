{
  long ourId=req.readReceiveTunnelId();
  long nextId=req.readNextTunnelId();
  boolean isInGW=req.readIsInboundGateway();
  boolean isOutEnd=req.readIsOutboundEndpoint();
  if (isInGW && isOutEnd) {
    _context.statManager().addRateData("tunnel.rejectHostile",1);
    _log.error("Dropping build request, IBGW+OBEP");
    return;
  }
  if ((!isOutEnd) && _context.routerHash().equals(nextPeer)) {
    _context.statManager().addRateData("tunnel.rejectHostile",1);
    if (_log.shouldWarn())     _log.warn("Dropping build request, we are the next hop");
    return;
  }
  if (!isInGW) {
    Hash from=state.fromHash;
    if (from == null)     from=state.from.calculateHash();
    if (_context.routerHash().equals(from)) {
      _context.statManager().addRateData("tunnel.rejectHostile",1);
      _log.error("Dropping build request, we are the previous hop");
      return;
    }
  }
  if ((!isOutEnd) && (!isInGW)) {
    Hash from=state.fromHash;
    if (from == null)     from=state.from.calculateHash();
    if (nextPeer.equals(from)) {
      _context.statManager().addRateData("tunnel.rejectHostile",1);
      if (_log.shouldLog(Log.WARN))       _log.warn("Dropping build request with the same previous and next hop");
      return;
    }
  }
  long time=req.readRequestTime();
  long now=(_context.clock().now() / (60l * 60l * 1000l)) * (60 * 60 * 1000);
  long timeDiff=now - time;
  if (timeDiff > MAX_REQUEST_AGE) {
    _context.statManager().addRateData("tunnel.rejectTooOld",1);
    if (_log.shouldLog(Log.WARN))     _log.warn("Dropping build request too old... replay attack? " + DataHelper.formatDuration(timeDiff));
    return;
  }
  if (timeDiff < 0 - MAX_REQUEST_FUTURE) {
    _context.statManager().addRateData("tunnel.rejectFuture",1);
    if (_log.shouldLog(Log.WARN))     _log.warn("Dropping build request too far in future " + DataHelper.formatDuration(0 - timeDiff));
    return;
  }
  int response;
  if (_context.router().isHidden()) {
    _context.throttle().setTunnelStatus(_x("Rejecting tunnels: Hidden mode"));
    response=TunnelHistory.TUNNEL_REJECT_BANDWIDTH;
  }
 else {
    response=_context.throttle().acceptTunnelRequest();
  }
  long recvDelay=_context.clock().now() - state.recvTime;
  if (response == 0) {
    float pDrop=((float)recvDelay) / (float)(BuildRequestor.REQUEST_TIMEOUT * 3);
    pDrop=(float)Math.pow(pDrop,16);
    if (_context.random().nextFloat() < pDrop) {
      _context.statManager().addRateData("tunnel.rejectOverloaded",recvDelay);
      _context.throttle().setTunnelStatus(_x("Rejecting tunnels: Request overload"));
      response=TunnelHistory.TUNNEL_REJECT_TRANSIENT_OVERLOAD;
    }
 else {
      _context.statManager().addRateData("tunnel.acceptLoad",recvDelay);
    }
  }
  RouterInfo ri=_context.router().getRouterInfo();
  if (response == 0) {
    if (ri == null) {
      response=TunnelHistory.TUNNEL_REJECT_BANDWIDTH;
    }
 else {
      char bw=ri.getBandwidthTier().charAt(0);
      if (bw != 'O' && bw != 'N' && bw != 'P' && bw != 'X' && ((isInGW && !_context.commSystem().haveInboundCapacity(87)) || (isOutEnd && !_context.commSystem().haveOutboundCapacity(87)))) {
        _context.statManager().addRateData("tunnel.rejectConnLimits",1);
        _context.throttle().setTunnelStatus(_x("Rejecting tunnels: Connection limit"));
        response=TunnelHistory.TUNNEL_REJECT_BANDWIDTH;
      }
    }
  }
  if (response == 0 && !isInGW) {
    Hash from=state.fromHash;
    if (from == null)     from=state.from.calculateHash();
    if (from != null && _throttler.shouldThrottle(from)) {
      if (_log.shouldLog(Log.WARN))       _log.warn("Rejecting tunnel (hop throttle), previous hop: " + from);
      _context.statManager().addRateData("tunnel.rejectHopThrottle",1);
      response=TunnelHistory.TUNNEL_REJECT_BANDWIDTH;
    }
  }
  if (response == 0 && (!isOutEnd) && _throttler.shouldThrottle(nextPeer)) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Rejecting tunnel (hop throttle), next hop: " + nextPeer);
    _context.statManager().addRateData("tunnel.rejectHopThrottle",1);
    response=TunnelHistory.TUNNEL_REJECT_BANDWIDTH;
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Responding to " + state.msg.getUniqueId() + "/"+ ourId+ " after "+ recvDelay+ " with "+ response+ " from "+ (state.fromHash != null ? state.fromHash : state.from != null ? state.from.calculateHash() : "tunnel"));
  HopConfig cfg=null;
  if (response == 0) {
    cfg=new HopConfig();
    cfg.setCreation(_context.clock().now());
    cfg.setExpiration(_context.clock().now() + 10 * 60 * 1000);
    cfg.setIVKey(req.readIVKey());
    cfg.setLayerKey(req.readLayerKey());
    if (isInGW) {
      cfg.setReceiveFrom(null);
    }
 else {
      if (state.fromHash != null) {
        cfg.setReceiveFrom(state.fromHash);
      }
 else       if (state.from != null) {
        cfg.setReceiveFrom(state.from.calculateHash());
      }
 else {
        return;
      }
    }
    cfg.setReceiveTunnelId(DataHelper.toLong(4,ourId));
    if (isOutEnd) {
      cfg.setSendTo(null);
      cfg.setSendTunnelId(null);
    }
 else {
      cfg.setSendTo(nextPeer);
      cfg.setSendTunnelId(DataHelper.toLong(4,nextId));
    }
    boolean success;
    if (isOutEnd)     success=_context.tunnelDispatcher().joinOutboundEndpoint(cfg);
 else     if (isInGW)     success=_context.tunnelDispatcher().joinInboundGateway(cfg);
 else     success=_context.tunnelDispatcher().joinParticipant(cfg);
    if (success) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("Joining " + state.msg.getUniqueId() + "/"+ cfg.getReceiveTunnel()+ "/"+ recvDelay+ " as "+ (isOutEnd ? "outbound endpoint" : isInGW ? "inbound gw" : "participant"));
    }
 else {
      response=TunnelHistory.TUNNEL_REJECT_BANDWIDTH;
      _context.statManager().addRateData("tunnel.rejectDupID",1);
      if (_log.shouldLog(Log.WARN))       _log.warn("DUP ID failure " + state.msg.getUniqueId() + "/"+ cfg.getReceiveTunnel()+ " as "+ (isOutEnd ? "outbound endpoint" : isInGW ? "inbound gw" : "participant"));
    }
  }
  if (response != 0) {
    _context.statManager().addRateData("tunnel.reject." + response,1);
    _context.messageHistory().tunnelRejected(state.fromHash,new TunnelId(ourId),nextPeer,"rejecting for " + response + ": "+ state.msg.getUniqueId()+ "/"+ ourId+ "/"+ req.readNextTunnelId()+ " delay "+ recvDelay+ " as "+ (isOutEnd ? "outbound endpoint" : isInGW ? "inbound gw" : "participant"));
  }
  if (response != 0 && (!_context.routerHash().equals(nextPeer)) && (!_context.commSystem().haveOutboundCapacity(81)) && (!_context.commSystem().isEstablished(nextPeer))) {
    _context.statManager().addRateData("tunnel.dropConnLimits",1);
    if (_log.shouldLog(Log.WARN))     _log.warn("Not sending rejection due to conn limits");
    return;
  }
  EncryptedBuildRecord reply=BuildResponseRecord.create(_context,response,req.readReplyKey(),req.readReplyIV(),state.msg.getUniqueId());
  int records=state.msg.getRecordCount();
  int ourSlot=-1;
  for (int j=0; j < records; j++) {
    if (state.msg.getRecord(j) == null) {
      ourSlot=j;
      state.msg.setRecord(j,reply);
      break;
    }
  }
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Read slot " + ourSlot + " containing our hop @ "+ _context.routerHash()+ " accepted? "+ response+ " receiving on "+ ourId+ " sending to "+ nextId+ " on "+ nextPeer+ " inGW? "+ isInGW+ " outEnd? "+ isOutEnd+ " recvDelay "+ recvDelay+ " replyMessage "+ req.readReplyMessageId()+ " replyKey "+ req.readReplyKey()+ " replyIV "+ Base64.encode(req.readReplyIV()));
  if (!isOutEnd) {
    state.msg.setUniqueId(req.readReplyMessageId());
    state.msg.setMessageExpiration(_context.clock().now() + NEXT_HOP_SEND_TIMEOUT);
    OutNetMessage msg=new OutNetMessage(_context,state.msg,state.msg.getMessageExpiration(),PRIORITY,nextPeerInfo);
    if (response == 0)     msg.setOnFailedSendJob(new TunnelBuildNextHopFailJob(_context,cfg));
    _context.outNetMessagePool().add(msg);
  }
 else {
    TunnelBuildReplyMessage replyMsg;
    if (records == TunnelBuildMessage.MAX_RECORD_COUNT)     replyMsg=new TunnelBuildReplyMessage(_context);
 else     replyMsg=new VariableTunnelBuildReplyMessage(_context,records);
    for (int i=0; i < records; i++)     replyMsg.setRecord(i,state.msg.getRecord(i));
    replyMsg.setUniqueId(req.readReplyMessageId());
    replyMsg.setMessageExpiration(_context.clock().now() + NEXT_HOP_SEND_TIMEOUT);
    TunnelGatewayMessage m=new TunnelGatewayMessage(_context);
    m.setMessage(replyMsg);
    m.setMessageExpiration(replyMsg.getMessageExpiration());
    m.setTunnelId(new TunnelId(nextId));
    if (_context.routerHash().equals(nextPeer)) {
      if (_log.shouldLog(Log.DEBUG))       _log.debug("We are the reply gateway for " + nextId + " when replying to replyMessage "+ req.readReplyMessageId());
      _context.tunnelDispatcher().dispatch(m);
    }
 else {
      OutNetMessage outMsg=new OutNetMessage(_context,m,m.getMessageExpiration(),PRIORITY,nextPeerInfo);
      if (response == 0)       outMsg.setOnFailedSendJob(new TunnelBuildNextHopFailJob(_context,cfg));
      _context.outNetMessagePool().add(outMsg);
    }
  }
}
