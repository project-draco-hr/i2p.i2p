{
  prepare(ctx,cfg);
  if (cfg.getLength() <= 1) {
    buildZeroHop(ctx,pool,cfg,exec);
    return true;
  }
  Log log=ctx.logManager().getLog(BuildRequestor.class);
  cfg.setTunnelPool(pool);
  TunnelInfo pairedTunnel=null;
  Hash farEnd=cfg.getFarEnd();
  TunnelManagerFacade mgr=ctx.tunnelManager();
  boolean isInbound=pool.getSettings().isInbound();
  if (pool.getSettings().isExploratory() || !usePairedTunnels(ctx)) {
    if (isInbound)     pairedTunnel=mgr.selectOutboundExploratoryTunnel(farEnd);
 else     pairedTunnel=mgr.selectInboundExploratoryTunnel(farEnd);
  }
 else {
    if (isInbound)     pairedTunnel=mgr.selectOutboundTunnel(pool.getSettings().getDestination(),farEnd);
 else     pairedTunnel=mgr.selectInboundTunnel(pool.getSettings().getDestination(),farEnd);
    if (pairedTunnel == null) {
      if (log.shouldLog(Log.INFO))       log.info("Couldn't find a paired tunnel for " + cfg + ", fall back on exploratory tunnels for pairing");
      if (isInbound) {
        pairedTunnel=mgr.selectOutboundExploratoryTunnel(farEnd);
        if (pairedTunnel != null && pairedTunnel.getLength() <= 1 && mgr.getOutboundSettings().getLength() + mgr.getOutboundSettings().getLengthVariance() > 0) {
          pairedTunnel=null;
        }
      }
 else {
        pairedTunnel=mgr.selectInboundExploratoryTunnel(farEnd);
        if (pairedTunnel != null && pairedTunnel.getLength() <= 1 && mgr.getInboundSettings().getLength() + mgr.getInboundSettings().getLengthVariance() > 0) {
          pairedTunnel=null;
        }
      }
    }
  }
  if (pairedTunnel == null) {
    if (log.shouldLog(Log.WARN))     log.warn("Tunnel build failed, as we couldn't find a paired tunnel for " + cfg);
    exec.buildComplete(cfg,pool);
    try {
      Thread.sleep(250);
    }
 catch (    InterruptedException ie) {
    }
    return false;
  }
  TunnelBuildMessage msg=createTunnelBuildMessage(ctx,pool,cfg,pairedTunnel,exec);
  if (msg == null) {
    if (log.shouldLog(Log.WARN))     log.warn("Tunnel build failed, as we couldn't create the tunnel build message for " + cfg);
    exec.buildComplete(cfg,pool);
    return false;
  }
  if (cfg.isInbound()) {
    if (log.shouldLog(Log.INFO))     log.info("Sending the tunnel build request " + msg.getUniqueId() + " out the tunnel "+ pairedTunnel+ " to "+ cfg.getPeer(0)+ " for "+ cfg+ " waiting for the reply of "+ cfg.getReplyMessageId());
    ctx.tunnelDispatcher().dispatchOutbound(msg,pairedTunnel.getSendTunnelId(0),cfg.getPeer(0));
  }
 else {
    if (log.shouldLog(Log.INFO))     log.info("Sending the tunnel build request directly to " + cfg.getPeer(1) + " for "+ cfg+ " waiting for the reply of "+ cfg.getReplyMessageId()+ " with msgId="+ msg.getUniqueId());
    msg.setMessageExpiration(ctx.clock().now() + BUILD_MSG_TIMEOUT + ctx.random().nextLong(20 * 1000));
    RouterInfo peer=ctx.netDb().lookupRouterInfoLocally(cfg.getPeer(1));
    if (peer == null) {
      if (log.shouldLog(Log.WARN))       log.warn("Could not find the next hop to send the outbound request to: " + cfg);
      exec.buildComplete(cfg,pool);
      return false;
    }
    OutNetMessage outMsg=new OutNetMessage(ctx,msg,ctx.clock().now() + FIRST_HOP_TIMEOUT,PRIORITY,peer);
    outMsg.setOnFailedSendJob(new TunnelBuildFirstHopFailJob(ctx,pool,cfg,exec));
    ctx.outNetMessagePool().add(outMsg);
  }
  return true;
}
