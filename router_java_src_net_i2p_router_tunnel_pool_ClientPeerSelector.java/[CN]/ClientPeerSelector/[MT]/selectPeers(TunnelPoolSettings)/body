{
  int length=getLength(settings);
  if (length < 0)   return null;
  if ((length == 0) && (settings.getLength() + settings.getLengthVariance() > 0))   return null;
  List<Hash> rv;
  if (length > 0) {
    if (shouldSelectExplicit(settings))     return selectExplicit(settings,length);
    Set<Hash> exclude=getExclude(settings.isInbound(),false);
    Set<Hash> matches=new HashSet<Hash>(length);
    if (length == 1) {
      ctx.profileOrganizer().selectFastPeers(length,exclude,matches,0);
      matches.remove(ctx.routerHash());
      rv=new ArrayList<Hash>(matches);
    }
 else {
      rv=new ArrayList<Hash>(length + 1);
      if (!settings.isInbound()) {
      }
      ctx.profileOrganizer().selectFastPeers(1,exclude,matches,settings.getRandomKey(),length == 2 ? SLICE_0_1 : SLICE_0);
      matches.remove(ctx.routerHash());
      exclude.addAll(matches);
      rv.addAll(matches);
      matches.clear();
      if (length > 2) {
        ctx.profileOrganizer().selectFastPeers(length - 2,exclude,matches,settings.getRandomKey(),SLICE_2_3);
        matches.remove(ctx.routerHash());
        if (matches.size() > 1) {
          List<Hash> ordered=new ArrayList<Hash>(matches);
          orderPeers(ordered,settings.getRandomKey());
          rv.addAll(ordered);
        }
 else {
          rv.addAll(matches);
        }
        exclude.addAll(matches);
        matches.clear();
      }
      if (settings.isInbound()) {
      }
      ctx.profileOrganizer().selectFastPeers(1,exclude,matches,settings.getRandomKey(),length == 2 ? SLICE_2_3 : SLICE_1);
      matches.remove(ctx.routerHash());
      rv.addAll(matches);
    }
  }
 else {
    rv=new ArrayList<Hash>(1);
  }
  if (settings.isInbound())   rv.add(0,ctx.routerHash());
 else   rv.add(ctx.routerHash());
  return rv;
}
