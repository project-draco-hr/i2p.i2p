{
  Log l=ctx.logManager().getLog(getClass());
  int length=getLength(settings);
  if (length < 0) {
    if (l.shouldLog(Log.DEBUG))     l.debug("Length requested is zero: " + settings);
    return null;
  }
  Set<Hash> exclude=getExclude(settings.isInbound(),true);
  exclude.add(ctx.routerHash());
  Set<Hash> moreExclude=getClosestHopExclude(settings.isInbound());
  if (moreExclude != null)   exclude.addAll(moreExclude);
  HashSet<Hash> matches=new HashSet<Hash>(length);
  if (length > 0) {
    boolean exploreHighCap=shouldPickHighCap();
    if (settings.isInbound() && (ctx.router().isHidden() || ctx.router().getRouterInfo().getAddressCount() <= 0)) {
      if (l.shouldLog(Log.INFO))       l.info("EPS SFP " + length + (settings.isInbound() ? " IB" : " OB")+ " exclude "+ exclude.size());
      ctx.profileOrganizer().selectFastPeers(length,exclude,matches);
    }
 else     if (exploreHighCap) {
      if (l.shouldLog(Log.INFO))       l.info("EPS SHCP " + length + (settings.isInbound() ? " IB" : " OB")+ " exclude "+ exclude.size());
      ctx.profileOrganizer().selectHighCapacityPeers(length,exclude,matches);
    }
 else     if (ctx.commSystem().haveHighOutboundCapacity()) {
      if (l.shouldLog(Log.INFO))       l.info("EPS SNFP " + length + (settings.isInbound() ? " IB" : " OB")+ " exclude "+ exclude.size());
      if (length > 2)       ctx.profileOrganizer().selectHighCapacityPeers(length - 2,exclude,matches);
      ctx.profileOrganizer().selectNotFailingPeers(length,exclude,matches,false);
    }
 else {
      if (l.shouldLog(Log.INFO))       l.info("EPS SANFP " + length + (settings.isInbound() ? " IB" : " OB")+ " exclude "+ exclude.size());
      ctx.profileOrganizer().selectActiveNotFailingPeers(length,exclude,matches);
    }
    matches.remove(ctx.routerHash());
  }
  ArrayList<Hash> rv=new ArrayList<Hash>(matches);
  if (rv.size() > 1)   orderPeers(rv,settings.getRandomKey());
  if (l.shouldLog(Log.DEBUG))   l.debug("EPS got " + rv.size() + ": "+ DataHelper.toString(rv));
  if (settings.isInbound())   rv.add(0,ctx.routerHash());
 else   rv.add(ctx.routerHash());
  return rv;
}
