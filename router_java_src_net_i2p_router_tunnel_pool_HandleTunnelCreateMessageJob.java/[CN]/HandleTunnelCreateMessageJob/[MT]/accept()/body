{
  byte recvId[]=new byte[4];
  getContext().random().nextBytes(recvId);
  HopConfig cfg=new HopConfig();
  long expiration=_request.getDurationSeconds() * 1000 + getContext().clock().now();
  cfg.setExpiration(expiration);
  cfg.setIVKey(_request.getIVKey());
  cfg.setLayerKey(_request.getLayerKey());
  cfg.setOptions(_request.getOptions());
  cfg.setReceiveTunnelId(recvId);
  if (_request.getIsGateway()) {
    if (_log.shouldLog(Log.INFO))     _log.info("join as inbound tunnel gateway pointing at " + _request.getNextRouter().toBase64().substring(0,4) + ":"+ _request.getNextTunnelId()+ " (nonce="+ _request.getNonce()+ ")");
    cfg.setSendTo(_request.getNextRouter());
    TunnelId id=_request.getNextTunnelId();
    if (id == null) {
      sendRejection(TunnelHistory.TUNNEL_REJECT_CRIT);
      return;
    }
    cfg.setSendTunnelId(DataHelper.toLong(4,id.getTunnelId()));
    getContext().tunnelDispatcher().joinInboundGateway(cfg);
  }
 else   if (_request.getNextRouter() == null) {
    if (_log.shouldLog(Log.INFO))     _log.info("join as outbound tunnel endpoint (nonce=" + _request.getNonce() + ")");
    getContext().tunnelDispatcher().joinOutboundEndpoint(cfg);
  }
 else {
    if (_log.shouldLog(Log.INFO))     _log.info("join as tunnel participant pointing at " + _request.getNextRouter().toBase64().substring(0,4) + ":"+ _request.getNextTunnelId()+ " (nonce="+ _request.getNonce()+ ")");
    cfg.setSendTo(_request.getNextRouter());
    TunnelId id=_request.getNextTunnelId();
    if (id == null) {
      sendRejection(TunnelHistory.TUNNEL_REJECT_CRIT);
      return;
    }
    cfg.setSendTunnelId(DataHelper.toLong(4,id.getTunnelId()));
    getContext().tunnelDispatcher().joinParticipant(cfg);
  }
  sendAcceptance(recvId);
}
