{
  super(ctx);
  _log=ctx.logManager().getLog(RequestTunnelJob.class);
  _config=cfg;
  _onCreated=onCreated;
  _onFailed=onFailed;
  _currentHop=hop;
  _currentPeer=null;
  _lookups=0;
  _lastSendTime=0;
  _isFake=isFake;
  ctx.statManager().createRateStat("tunnel.receiveRejectionProbabalistic","How often we are rejected probabalistically?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.receiveRejectionTransient","How often we are rejected due to transient overload?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.receiveRejectionBandwidth","How often we are rejected due to bandwidth overload?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.receiveRejectionCritical","How often we are rejected due to critical failure?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.buildFailure","How often we fail to build a tunnel?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  ctx.statManager().createRateStat("tunnel.buildSuccess","How often we succeed building a tunnel?","Tunnels",new long[]{10 * 60 * 1000l,60 * 60 * 1000l,24 * 60 * 60* 1000l});
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Requesting hop " + hop + " in "+ cfg);
  if (hop < 0)   throw new IllegalArgumentException("invalid endpoint hop [" + hop + "] cfg: "+ cfg);
}
