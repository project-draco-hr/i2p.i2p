{
  HopConfig nextHop=(_config.getLength() > _currentHop + 1 ? _config.getConfig(_currentHop + 1) : null);
  Hash nextRouter=(nextHop != null ? _config.getPeer(_currentHop + 1) : null);
  TunnelId nextTunnel=(nextHop != null ? nextHop.getReceiveTunnel() : null);
  TunnelInfo replyTunnel=getContext().tunnelManager().selectInboundTunnel();
  if (replyTunnel == null) {
    if (_log.shouldLog(Log.WARN))     _log.warn("No inbound tunnels to build tunnels with!");
    tunnelFail();
    return;
  }
  Hash replyGateway=replyTunnel.getPeer(0);
  SessionKey replyKey=getContext().keyGenerator().generateSessionKey();
  SessionTag replyTag=new SessionTag(true);
  TunnelCreateMessage msg=new TunnelCreateMessage(getContext());
  msg.setCertificate(new Certificate(Certificate.CERTIFICATE_TYPE_NULL,null));
  msg.setIVKey(_currentConfig.getIVKey());
  msg.setLayerKey(_currentConfig.getLayerKey());
  msg.setNonce(getContext().random().nextLong(TunnelCreateMessage.MAX_NONCE_VALUE));
  msg.setNextRouter(nextRouter);
  msg.setNextTunnelId(nextTunnel);
  msg.setReplyGateway(replyGateway);
  msg.setReplyTunnel(replyTunnel.getReceiveTunnelId(0));
  msg.setReplyKey(replyKey);
  msg.setReplyTag(replyTag);
  int duration=10 * 60;
  msg.setDurationSeconds(duration);
  long now=getContext().clock().now();
  if (_isExploratory)   msg.setMessageExpiration(now + HOP_REQUEST_TIMEOUT_EXPLORATORY);
 else   msg.setMessageExpiration(now + HOP_REQUEST_TIMEOUT_CLIENT);
  if (_currentHop == 0)   msg.setIsGateway(true);
 else   msg.setIsGateway(false);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("** Send remote request to " + peer.toBase64().substring(0,4) + " using nonce "+ msg.getNonce()+ " with replies on "+ replyTunnel);
  HashSet sessionTags=new HashSet(1);
  sessionTags.add(replyTag);
  getContext().sessionKeyManager().tagsReceived(replyKey,sessionTags);
  HashSet sentTags=new HashSet();
  SessionKey sentKey=new SessionKey();
  ReplySelector selector=new ReplySelector(msg.getNonce());
  ReplyJob onReply=new RequestReplyJob(getContext(),sentKey,sentTags);
  Job onTimeout=new RequestTimeoutJob(getContext(),msg.getNonce());
  Job j=new SendGarlicMessageJob(getContext(),msg,_currentPeer,selector,onReply,onTimeout,sentKey,sentTags);
  getContext().jobQueue().addJob(j);
  _lastSendTime=getContext().clock().now();
}
