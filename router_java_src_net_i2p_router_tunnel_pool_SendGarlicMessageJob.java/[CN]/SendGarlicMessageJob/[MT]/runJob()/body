{
  DeliveryInstructions instructions=new DeliveryInstructions();
  instructions.setDeliveryMode(DeliveryInstructions.DELIVERY_MODE_LOCAL);
  PayloadGarlicConfig payload=new PayloadGarlicConfig();
  payload.setCertificate(new Certificate(Certificate.CERTIFICATE_TYPE_NULL,null));
  payload.setId(getContext().random().nextLong(I2NPMessage.MAX_ID_VALUE));
  payload.setPayload(_payload);
  payload.setRecipient(_target);
  payload.setDeliveryInstructions(instructions);
  payload.setRequestAck(false);
  payload.setExpiration(_payload.getMessageExpiration());
  int timeout=(int)(payload.getExpiration() - getContext().clock().now());
  GarlicMessage msg=GarlicMessageBuilder.buildMessage(getContext(),payload,_sentKey,_sentTags);
  OutNetMessage dummyMessage=getContext().messageRegistry().registerPending(_replySelector,_onReply,_onTimeout,timeout);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Scheduling timeout job (" + _onTimeout + ") to be run in "+ timeout+ "ms");
  TunnelInfo out=getContext().tunnelManager().selectOutboundTunnel();
  if (out == null) {
    if (_onTimeout != null)     getContext().jobQueue().addJob(_onTimeout);
    getContext().messageRegistry().unregisterPending(dummyMessage);
    return;
  }
  TunnelId outId=out.getSendTunnelId(0);
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Dispatching the garlic request out " + outId + " targetting "+ _target.getIdentity().calculateHash().toBase64().substring(0,4));
  getContext().tunnelDispatcher().dispatchOutbound(msg,outId,_target.getIdentity().calculateHash());
}
