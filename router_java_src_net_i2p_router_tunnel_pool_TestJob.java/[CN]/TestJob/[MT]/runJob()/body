{
  if (_pool == null)   return;
  long lag=getContext().jobQueue().getMaxLag();
  if (lag > 3000) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Deferring test of " + _cfg + " due to job lag = "+ lag);
    getContext().statManager().addRateData("tunnel.testAborted",_cfg.getLength(),0);
    scheduleRetest();
    return;
  }
  if (getContext().router().gracefulShutdownInProgress())   return;
  _found=false;
  _replyTunnel=null;
  _outTunnel=null;
  if (_cfg.isInbound()) {
    _replyTunnel=_cfg;
    _outTunnel=getContext().tunnelManager().selectOutboundTunnel();
    _otherTunnel=(PooledTunnelCreatorConfig)_outTunnel;
  }
 else {
    _replyTunnel=getContext().tunnelManager().selectInboundTunnel();
    _outTunnel=_cfg;
    _otherTunnel=(PooledTunnelCreatorConfig)_replyTunnel;
  }
  if ((_replyTunnel == null) || (_outTunnel == null)) {
    if (_log.shouldLog(Log.WARN))     _log.warn("Insufficient tunnels to test " + _cfg + " with: "+ _replyTunnel+ " / "+ _outTunnel);
    getContext().statManager().addRateData("tunnel.testAborted",_cfg.getLength(),0);
    scheduleRetest();
  }
 else {
    int testPeriod=getTestPeriod();
    long testExpiration=getContext().clock().now() + testPeriod;
    DeliveryStatusMessage m=new DeliveryStatusMessage(getContext());
    m.setArrival(getContext().clock().now());
    m.setMessageExpiration(testExpiration);
    m.setMessageId(getContext().random().nextLong(I2NPMessage.MAX_ID_VALUE));
    ReplySelector sel=new ReplySelector(getContext(),m.getMessageId(),testExpiration);
    OnTestReply onReply=new OnTestReply(getContext());
    OnTestTimeout onTimeout=new OnTestTimeout(getContext());
    OutNetMessage msg=getContext().messageRegistry().registerPending(sel,onReply,onTimeout,testPeriod);
    onReply.setSentMessage(msg);
    sendTest(m);
  }
}
