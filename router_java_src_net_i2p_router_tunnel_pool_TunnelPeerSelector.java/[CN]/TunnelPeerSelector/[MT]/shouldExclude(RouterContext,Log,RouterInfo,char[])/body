{
  String cap=peer.getCapabilities();
  if (cap == null) {
    return true;
  }
  for (int j=0; j < excl.length; j++) {
    if (cap.indexOf(excl[j]) >= 0) {
      return true;
    }
  }
  int maxLen=0;
  if (cap.indexOf(FloodfillNetworkDatabaseFacade.CAPACITY_FLOODFILL) >= 0)   maxLen++;
  if (cap.indexOf(Router.CAPABILITY_REACHABLE) >= 0)   maxLen++;
  if (cap.indexOf(Router.CAPABILITY_UNREACHABLE) >= 0)   maxLen++;
  if (cap.length() <= maxLen)   return true;
  String val=peer.getOption("stat_uptime");
  if (val != null) {
    long uptimeMs=0;
    long factor=1;
    if (val.endsWith("ms")) {
      factor=1;
      val=val.substring(0,val.length() - 2);
    }
 else     if (val.endsWith("s")) {
      factor=1000l;
      val=val.substring(0,val.length() - 1);
    }
 else     if (val.endsWith("m")) {
      factor=60 * 1000l;
      val=val.substring(0,val.length() - 1);
    }
 else     if (val.endsWith("h")) {
      factor=60 * 60 * 1000l;
      val=val.substring(0,val.length() - 1);
    }
 else     if (val.endsWith("d")) {
      factor=24 * 60 * 60* 1000l;
      val=val.substring(0,val.length() - 1);
    }
    try {
      uptimeMs=Long.parseLong(val);
    }
 catch (    NumberFormatException nfe) {
    }
    uptimeMs*=factor;
    long infoAge=ctx.clock().now() - peer.getPublished();
    if (infoAge < 0) {
      return false;
    }
 else     if (infoAge > 5 * 24 * 60* 60* 1000) {
      if (ctx.router().getUptime() < DONT_EXCLUDE_PERIOD) {
        if (log.shouldLog(Log.DEBUG))         log.debug("Not excluding a long-unseen peer, since we just started up.");
        return false;
      }
 else {
        if (log.shouldLog(Log.DEBUG))         log.debug("Excluding a long-unseen peer.");
        return true;
      }
    }
 else {
      if ((infoAge + uptimeMs < 90 * 60 * 1000) && (ctx.router().getUptime() > DONT_EXCLUDE_PERIOD)) {
        return true;
      }
 else {
        return false;
      }
    }
  }
 else {
    return true;
  }
}
