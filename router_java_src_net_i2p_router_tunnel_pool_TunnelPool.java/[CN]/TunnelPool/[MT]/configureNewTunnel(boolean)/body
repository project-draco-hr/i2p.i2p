{
  TunnelPoolSettings settings=getSettings();
  List<Hash> peers=null;
  long now=_context.clock().now();
  long expiration=now + TunnelPoolSettings.DEFAULT_DURATION;
  if (!forceZeroHop) {
    int len=settings.getLengthOverride();
    if (len < 0)     len=settings.getLength();
    if (len > 0 && (!settings.isExploratory()) && _context.random().nextBoolean()) {
      len++;
synchronized (_tunnels) {
        for (        TunnelInfo ti : _tunnels) {
          if (ti.getLength() >= len && ti.getExpiration() < now + 3 * 60 * 1000 && !ti.wasReused()) {
            ti.setReused();
            len=ti.getLength();
            peers=new ArrayList<Hash>(len);
            for (int i=len - 1; i >= 0; i--) {
              peers.add(ti.getPeer(i));
            }
            break;
          }
        }
      }
    }
    if (peers == null) {
      setLengthOverride();
      peers=_peerSelector.selectPeers(settings);
    }
    if ((peers == null) || (peers.isEmpty())) {
      if (peers == null) {
        if (_log.shouldLog(Log.WARN))         _log.warn("No peers to put in the new tunnel! selectPeers returned null!  boo, hiss!");
      }
 else {
        if (_log.shouldLog(Log.WARN))         _log.warn("No peers to put in the new tunnel! selectPeers returned an empty list?!");
      }
      return null;
    }
  }
 else {
    peers=Collections.singletonList(_context.routerHash());
  }
  PooledTunnelCreatorConfig cfg=new PooledTunnelCreatorConfig(_context,peers.size(),settings.isInbound(),settings.getDestination());
  cfg.setTunnelPool(this);
  for (int i=0; i < peers.size(); i++) {
    int j=peers.size() - 1 - i;
    cfg.setPeer(j,peers.get(i));
    HopConfig hop=cfg.getConfig(j);
    hop.setCreation(now);
    hop.setExpiration(expiration);
    hop.setIVKey(_context.keyGenerator().generateSessionKey());
    hop.setLayerKey(_context.keyGenerator().generateSessionKey());
  }
  cfg.setExpiration(expiration);
  if (!settings.isInbound())   cfg.setPriority(settings.getPriority());
  if (_log.shouldLog(Log.DEBUG))   _log.debug("Config contains " + peers + ": "+ cfg);
synchronized (_inProgress) {
    _inProgress.add(cfg);
  }
  return cfg;
}
