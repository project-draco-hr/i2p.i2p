{
  out.write("<h2><a name=\"exploratory\" ></a>Exploratory tunnels (<a href=\"/configtunnels.jsp#exploratory\">config</a>):</h2>\n");
  renderPool(out,_inboundExploratory,_outboundExploratory);
  List destinations=null;
synchronized (_clientInboundPools) {
    destinations=new ArrayList(_clientInboundPools.keySet());
  }
  for (int i=0; i < destinations.size(); i++) {
    Hash client=(Hash)destinations.get(i);
    TunnelPool in=null;
    TunnelPool outPool=null;
synchronized (_clientInboundPools) {
      in=(TunnelPool)_clientInboundPools.get(client);
    }
synchronized (_clientOutboundPools) {
      outPool=(TunnelPool)_clientOutboundPools.get(client);
    }
    String name=(in != null ? in.getSettings().getDestinationNickname() : null);
    if ((name == null) && (outPool != null))     name=outPool.getSettings().getDestinationNickname();
    if (name == null)     name=client.toBase64().substring(0,4);
    out.write("<h2><a name=\"" + client.toBase64().substring(0,4) + "\" ></a>Client tunnels for "+ name);
    if (_context.clientManager().isLocal(client))     out.write(" (<a href=\"/configtunnels.jsp#" + client.toBase64().substring(0,4) + "\">config</a>):</h2>\n");
 else     out.write(" (dead):</h2>\n");
    renderPool(out,in,outPool);
  }
  List participating=_context.tunnelDispatcher().listParticipatingTunnels();
  Collections.sort(participating,new TunnelComparator());
  out.write("<h2><a name=\"participating\"></a>Participating tunnels:</h2><table border=\"1\">\n");
  out.write("<tr><th>Receive on</th><th>From</th><th>" + "Send on</th><th>To</th><th>Expiration</th>" + "<th>Usage</th><th>Rate</th><th>Role</th></tr>\n");
  long processed=0;
  RateStat rs=_context.statManager().getRate("tunnel.participatingMessageCount");
  if (rs != null)   processed=(long)rs.getRate(10 * 60 * 1000).getLifetimeTotalValue();
  int inactive=0;
  for (int i=0; i < participating.size(); i++) {
    HopConfig cfg=(HopConfig)participating.get(i);
    if (cfg.getProcessedMessagesCount() <= 0) {
      inactive++;
      continue;
    }
    out.write("<tr>");
    if (cfg.getReceiveTunnel() != null)     out.write("<td align=\"center\">" + cfg.getReceiveTunnel().getTunnelId() + "</td>");
 else     out.write("<td align=\"center\">n/a</td>");
    if (cfg.getReceiveFrom() != null)     out.write("<td align=\"right\">" + netDbLink(cfg.getReceiveFrom()) + "</td>");
 else     out.write("<td align=\"center\">&nbsp;</td>");
    if (cfg.getSendTunnel() != null)     out.write("<td align=\"center\">" + cfg.getSendTunnel().getTunnelId() + "</td>");
 else     out.write("<td align=\"center\">&nbsp;</td>");
    if (cfg.getSendTo() != null)     out.write("<td align=\"center\">" + netDbLink(cfg.getSendTo()) + "</td>");
 else     out.write("<td align=\"center\">&nbsp;</td>");
    long timeLeft=cfg.getExpiration() - _context.clock().now();
    if (timeLeft > 0)     out.write("<td align=\"center\">" + DataHelper.formatDuration(timeLeft) + "</td>");
 else     out.write("<td align=\"center\">(grace period)</td>");
    out.write("<td align=\"center\">" + cfg.getProcessedMessagesCount() + "KB</td>");
    int lifetime=(int)((_context.clock().now() - cfg.getCreation()) / 1000);
    if (lifetime <= 0)     lifetime=1;
    if (lifetime > 10 * 60)     lifetime=10 * 60;
    int bps=1024 * (int)cfg.getProcessedMessagesCount() / lifetime;
    out.write("<td align=\"center\">" + bps + "Bps</td>");
    if (cfg.getSendTo() == null)     out.write("<td align=\"center\">Outbound Endpoint</td>");
 else     if (cfg.getReceiveFrom() == null)     out.write("<td align=\"center\">Inbound Gateway</td>");
 else     out.write("<td align=\"center\">Participant</td>");
    out.write("</tr>\n");
    processed+=cfg.getProcessedMessagesCount();
  }
  out.write("</table>\n");
  out.write("<center>Inactive participating tunnels: " + inactive + "<br />\n");
  out.write("Lifetime bandwidth usage: " + DataHelper.formatSize(processed * 1024) + "B</center><br />\n");
  renderPeers(out);
}
