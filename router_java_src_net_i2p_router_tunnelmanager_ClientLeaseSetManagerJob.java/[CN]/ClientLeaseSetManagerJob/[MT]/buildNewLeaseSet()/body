{
  LeaseSet ls=new LeaseSet();
  TreeMap tunnels=new TreeMap();
  long now=getContext().clock().now();
  for (Iterator iter=_pool.getInboundTunnelIds().iterator(); iter.hasNext(); ) {
    TunnelId id=(TunnelId)iter.next();
    TunnelInfo info=_pool.getInboundTunnel(id);
    if (!info.getIsReady())     continue;
    long exp=info.getSettings().getExpiration();
    if (now + RECHECK_DELAY + REQUEST_LEASE_TIMEOUT > exp)     continue;
    RouterInfo ri=getContext().netDb().lookupRouterInfoLocally(info.getThisHop());
    if (ri == null)     continue;
    Lease lease=new Lease();
    lease.setEndDate(new Date(exp));
    lease.setRouterIdentity(ri.getIdentity());
    lease.setTunnelId(id);
    tunnels.put(new Long(0 - exp),lease);
  }
  int selected=0;
  int wanted=_pool.getClientSettings().getNumInboundTunnels();
  for (Iterator iter=tunnels.values().iterator(); iter.hasNext(); ) {
    Lease lease=(Lease)iter.next();
    if (selected < wanted) {
      ls.addLease(lease);
      selected++;
    }
 else {
      _pool.moveToInactive(lease.getTunnelId());
    }
  }
  ls.setDestination(_pool.getDestination());
  return ls;
}
