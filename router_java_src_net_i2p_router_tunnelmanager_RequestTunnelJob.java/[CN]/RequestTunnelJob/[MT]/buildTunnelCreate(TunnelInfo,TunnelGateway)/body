{
  TunnelCreateMessage msg=new TunnelCreateMessage(getContext());
  msg.setCertificate(new Certificate(Certificate.CERTIFICATE_TYPE_NULL,null));
  msg.setConfigurationKey(participant.getConfigurationKey());
  msg.setIncludeDummyTraffic(participant.getSettings().getIncludeDummy());
  msg.setMaxAvgBytesPerMin(participant.getSettings().getBytesPerMinuteAverage());
  msg.setMaxAvgMessagesPerMin(participant.getSettings().getMessagesPerMinuteAverage());
  msg.setMaxPeakBytesPerMin(participant.getSettings().getBytesPerMinutePeak());
  msg.setMaxPeakMessagesPerMin(participant.getSettings().getMessagesPerMinutePeak());
  msg.setNextRouter(participant.getNextHop());
  msg.setNextTunnelId(participant.getTunnelId());
  if (participant.getNextHop() == null)   msg.setParticipantType(TunnelCreateMessage.PARTICIPANT_TYPE_ENDPOINT);
 else   if (participant.getSigningKey() != null)   msg.setParticipantType(TunnelCreateMessage.PARTICIPANT_TYPE_GATEWAY);
 else   msg.setParticipantType(TunnelCreateMessage.PARTICIPANT_TYPE_OTHER);
  msg.setReorderMessages(participant.getSettings().getReorder());
  SessionKey replySessionKey=getContext().keyGenerator().generateSessionKey();
  SessionTag tag=new SessionTag(true);
  Set tags=new HashSet();
  tags.add(tag);
  getContext().sessionKeyManager().tagsReceived(replySessionKey,tags);
  msg.setReplyPeer(replyGateway.getGateway());
  msg.setReplyTunnel(replyGateway.getTunnelId());
  msg.setReplyKey(replySessionKey);
  msg.setReplyTag(tag);
  long duration=participant.getSettings().getExpiration() - getContext().clock().now();
  if (duration == 0)   duration=1;
  msg.setTunnelDurationSeconds(duration / 1000);
  msg.setTunnelId(participant.getTunnelId());
  msg.setTunnelKey(participant.getEncryptionKey());
  msg.setVerificationPrivateKey(participant.getSigningKey());
  msg.setVerificationPublicKey(participant.getVerificationKey());
  return msg;
}
