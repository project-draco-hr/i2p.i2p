{
  if (_log.shouldLog(Log.INFO))   _log.info("Testing inbound tunnel " + info);
  DeliveryStatusMessage msg=new DeliveryStatusMessage();
  msg.setArrival(new Date(Clock.getInstance().now()));
  msg.setMessageId(_nonce);
  TestFailedJob failureJob=new TestFailedJob();
  MessageSelector selector=new TestMessageSelector(msg.getMessageId(),info.getTunnelId().getTunnelId());
  TunnelMessage tmsg=new TunnelMessage();
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream(1024);
    msg.writeBytes(baos);
    tmsg.setData(baos.toByteArray());
    tmsg.setTunnelId(info.getTunnelId());
    JobQueue.getInstance().addJob(new SendMessageDirectJob(tmsg,info.getThisHop(),new TestSuccessfulJob(),failureJob,selector,Clock.getInstance().now() + TEST_TIMEOUT,TEST_PRIORITY));
    String bodyType=msg.getClass().getName();
    MessageHistory.getInstance().wrap(bodyType,msg.getUniqueId(),TunnelMessage.class.getName(),tmsg.getUniqueId());
  }
 catch (  IOException ioe) {
    _log.error("Error writing out the tunnel message to send to the tunnel",ioe);
    _pool.tunnelFailed(_id);
  }
catch (  DataFormatException dfe) {
    _log.error("Error writing out the tunnel message to send to the tunnel",dfe);
    _pool.tunnelFailed(_id);
  }
}
