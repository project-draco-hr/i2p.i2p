{
  SessionKey encryptionKey=_context.keyGenerator().generateSessionKey();
  Object kp[]=_context.keyGenerator().generateSigningKeypair();
  SigningPublicKey pubkey=(SigningPublicKey)kp[0];
  SigningPrivateKey privkey=(SigningPrivateKey)kp[1];
  long duration=settings.getInboundDuration();
  if (duration <= 0)   duration=DEFAULT_TUNNEL_DURATION;
  long expiration=_context.clock().now() + duration;
  TunnelSettings tunnelSettings=new TunnelSettings(_context);
  tunnelSettings.setBytesPerMinuteAverage(settings.getBytesPerMinuteInboundAverage());
  tunnelSettings.setBytesPerMinutePeak(settings.getBytesPerMinuteInboundPeak());
  tunnelSettings.setDepth(peerHashList.size() + 1);
  tunnelSettings.setExpiration(expiration);
  tunnelSettings.setIncludeDummy(settings.getIncludeDummyInbound());
  tunnelSettings.setMessagesPerMinuteAverage(settings.getMessagesPerMinuteInboundAverage());
  tunnelSettings.setMessagesPerMinutePeak(settings.getMessagesPerMinuteInboundPeak());
  tunnelSettings.setReorder(settings.getReorderInbound());
  TunnelId id=new TunnelId();
  id.setTunnelId(_context.random().nextLong(TunnelId.MAX_ID_VALUE));
  id.setType(TunnelId.TYPE_OUTBOUND);
  TunnelInfo first=new TunnelInfo(_context);
  first.setThisHop(_context.routerHash());
  first.setDestination(null);
  first.setEncryptionKey(encryptionKey);
  first.setSettings(tunnelSettings);
  first.setTunnelId(id);
  first.setVerificationKey(pubkey);
  first.setSigningKey(privkey);
  first.setConfigurationKey(_context.keyGenerator().generateSessionKey());
  TunnelInfo prev=first;
  for (int i=0; i < peerHashList.size(); i++) {
    Hash peer=(Hash)peerHashList.get(i);
    TunnelInfo cur=new TunnelInfo(_context);
    cur.setThisHop(peer);
    cur.setConfigurationKey(_context.keyGenerator().generateSessionKey());
    cur.setDestination(null);
    if (i == peerHashList.size() - 1) {
      cur.setEncryptionKey(encryptionKey);
    }
    cur.setSettings(tunnelSettings);
    cur.setTunnelId(id);
    cur.setVerificationKey(pubkey);
    prev.setNextHop(peer);
    prev.setNextHopInfo(cur);
    prev.setNextHopId(cur.getTunnelId());
    prev=cur;
  }
  return first;
}
