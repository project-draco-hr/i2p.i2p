{
  FileOutputStream fos=null;
  try {
    fos=new FileOutputStream(f);
    DataHelper.writeLong(fos,2,pool.getFreeTunnelCount());
    for (Iterator iter=pool.getFreeTunnels().iterator(); iter.hasNext(); ) {
      TunnelId id=(TunnelId)iter.next();
      TunnelInfo info=pool.getFreeTunnel(id);
      if (info != null)       info.writeBytes(fos);
    }
    DataHelper.writeLong(fos,2,pool.getOutboundTunnelCount());
    for (Iterator iter=pool.getOutboundTunnels().iterator(); iter.hasNext(); ) {
      TunnelId id=(TunnelId)iter.next();
      TunnelInfo info=pool.getOutboundTunnel(id);
      if (info != null)       info.writeBytes(fos);
    }
    DataHelper.writeLong(fos,2,pool.getParticipatingTunnels().size());
    for (Iterator iter=pool.getParticipatingTunnels().iterator(); iter.hasNext(); ) {
      TunnelId id=(TunnelId)iter.next();
      TunnelInfo info=pool.getParticipatingTunnel(id);
      if (info != null)       info.writeBytes(fos);
    }
    DataHelper.writeLong(fos,2,pool.getPendingTunnels().size());
    for (Iterator iter=pool.getPendingTunnels().iterator(); iter.hasNext(); ) {
      TunnelId id=(TunnelId)iter.next();
      TunnelInfo info=pool.getPendingTunnel(id);
      if (info != null)       info.writeBytes(fos);
    }
    DataHelper.writeLong(fos,2,pool.getClientPools().size());
    for (Iterator iter=pool.getClientPools().iterator(); iter.hasNext(); ) {
      Destination dest=(Destination)iter.next();
      ClientTunnelPool cpool=(ClientTunnelPool)pool.getClientPool(dest);
      writeClientPool(fos,cpool);
    }
    fos.flush();
  }
 catch (  IOException ioe) {
    _log.error("Error writing tunnel pool at " + f.getName(),ioe);
  }
catch (  DataFormatException dfe) {
    _log.error("Error formatting tunnels at " + f.getName(),dfe);
  }
 finally {
    if (fos != null)     try {
      fos.close();
    }
 catch (    IOException ioe) {
    }
    _log.debug("Tunnel pool state written to " + f.getName());
  }
}
