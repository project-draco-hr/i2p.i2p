{
  try {
    BufferedInputStream reader=new BufferedInputStream(in);
    String firstLine=readLine(reader);
    if (firstLine == null || firstLine.length() <= 0)     return false;
    setFirstLine(firstLine);
    HTTPStatus httpStatus=new HTTPStatus(firstLine);
    int statCode=httpStatus.getStatusCode();
    if (statCode == HTTPStatus.CONTINUE) {
      String headerLine=readLine(reader);
      while ((headerLine != null) && (0 < headerLine.length())) {
        HTTPHeader header=new HTTPHeader(headerLine);
        if (header.hasName() == true)         setHeader(header);
        headerLine=readLine(reader);
      }
      String actualFirstLine=readLine(reader);
      if ((actualFirstLine != null) && (0 < actualFirstLine.length())) {
        setFirstLine(actualFirstLine);
      }
 else {
        return true;
      }
    }
    String headerLine=readLine(reader);
    while ((headerLine != null) && (0 < headerLine.length())) {
      HTTPHeader header=new HTTPHeader(headerLine);
      if (header.hasName() == true)       setHeader(header);
      headerLine=readLine(reader);
    }
    if (onlyHeaders == true) {
      setContent("",false);
      return true;
    }
    boolean isChunkedRequest=isChunked();
    long contentLen=0;
    if (isChunkedRequest == true) {
      try {
        String chunkSizeLine=readLine(reader);
        contentLen=(chunkSizeLine != null) ? Long.parseLong(chunkSizeLine.trim(),16) : 0;
      }
 catch (      Exception e) {
      }
      ;
    }
 else     contentLen=getContentLength();
    ByteArrayOutputStream contentBuf=new ByteArrayOutputStream();
    while (0 < contentLen) {
      int chunkSize=HTTP.getChunkSize();
      byte readBuf[]=new byte[(int)(contentLen > chunkSize ? chunkSize : contentLen)];
      long readCnt=0;
      while (readCnt < contentLen) {
        try {
          long bufReadLen=contentLen - readCnt;
          if (chunkSize < bufReadLen)           bufReadLen=chunkSize;
          int readLen=reader.read(readBuf,0,(int)bufReadLen);
          if (readLen < 0)           break;
          contentBuf.write(readBuf,0,readLen);
          readCnt+=readLen;
        }
 catch (        Exception e) {
          Debug.warning(e);
          break;
        }
      }
      if (isChunkedRequest == true) {
        long skipLen=0;
        do {
          long skipCnt=reader.skip(HTTP.CRLF.length() - skipLen);
          if (skipCnt < 0)           break;
          skipLen+=skipCnt;
        }
 while (skipLen < HTTP.CRLF.length());
        try {
          String chunkSizeLine=readLine(reader);
          contentLen=Long.parseLong(new String(chunkSizeLine.getBytes(),0,chunkSizeLine.length() - 2),16);
        }
 catch (        Exception e) {
          contentLen=0;
        }
        ;
      }
 else       contentLen=0;
    }
    setContent(contentBuf.toByteArray(),false);
  }
 catch (  Exception e) {
    Debug.warning(e);
    return false;
  }
  return true;
}
