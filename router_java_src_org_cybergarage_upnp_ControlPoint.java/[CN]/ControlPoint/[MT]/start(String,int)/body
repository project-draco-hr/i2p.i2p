{
  stop();
  int retryCnt=0;
  int bindPort=getHTTPPort();
  HTTPServerList _httpServerList=getHTTPServerList();
  while (_httpServerList.open(bindPort) == false) {
    retryCnt++;
    if (UPnP.SERVER_RETRY_COUNT < retryCnt) {
      Debug.warning("Failed to open HTTP event listener port " + bindPort);
      return false;
    }
    setHTTPPort(bindPort - 1);
    bindPort=getHTTPPort();
  }
  _httpServerList.addRequestListener(this);
  _httpServerList.start();
  SSDPNotifySocketList _ssdpNotifySocketList=getSSDPNotifySocketList();
  if (_ssdpNotifySocketList.open() == false) {
    Debug.warning("Failed to open SSDP notify port 1900");
    return false;
  }
  _ssdpNotifySocketList.setControlPoint(this);
  _ssdpNotifySocketList.start();
  int _ssdpPort=getSSDPPort();
  retryCnt=0;
  SSDPSearchResponseSocketList _ssdpSearchResponseSocketList=getSSDPSearchResponseSocketList();
  while (_ssdpSearchResponseSocketList.open(_ssdpPort) == false) {
    retryCnt++;
    if (UPnP.SERVER_RETRY_COUNT < retryCnt) {
      Debug.warning("Failed to open SSDP search response port " + _ssdpPort);
      return false;
    }
    setSSDPPort(_ssdpPort - 1);
    _ssdpPort=getSSDPPort();
  }
  _ssdpSearchResponseSocketList.setControlPoint(this);
  _ssdpSearchResponseSocketList.start();
  search(target,mx);
  Disposer disposer=new Disposer(this);
  setDeviceDisposer(disposer);
  disposer.start();
  if (isNMPRMode() == true) {
    RenewSubscriber renewSub=new RenewSubscriber(this);
    setRenewSubscriber(renewSub);
    renewSub.start();
  }
  return true;
}
