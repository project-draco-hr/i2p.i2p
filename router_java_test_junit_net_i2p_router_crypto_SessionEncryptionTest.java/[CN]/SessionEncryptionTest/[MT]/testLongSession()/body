{
  Object keys[]=KeyGenerator.getInstance().generatePKIKeypair();
  PublicKey pubKey=(PublicKey)keys[0];
  PrivateKey privKey=(PrivateKey)keys[1];
  SessionKeyManager skm=new TransientSessionKeyManager(_context);
  SessionKey curKey=skm.createSession(pubKey);
  for (int i=0; i < 1000; i++) {
    Set<SessionTag> tags=null;
    SessionKey nextKey=null;
    curKey=skm.getCurrentKey(pubKey);
    SessionTag curTag=skm.consumeNextAvailableTag(pubKey,curKey);
    int availTags=skm.getAvailableTags(pubKey,curKey);
    if ((availTags < 1)) {
      tags=generateNewTags(50);
    }
    if (i % 50 == 0)     nextKey=KeyGenerator.getInstance().generateSessionKey();
    byte[] msg=("msg " + i).getBytes();
    byte emsg[]=_context.elGamalAESEngine().encrypt(msg,pubKey,curKey,tags,curTag,nextKey,64);
    byte dmsg[]=_context.elGamalAESEngine().decrypt(emsg,privKey,skm);
    assertTrue(DataHelper.eq(dmsg,msg));
    if ((tags != null) && (tags.size() > 0)) {
      if (nextKey == null) {
        TagSetHandle tsh=skm.tagsDelivered(pubKey,curKey,tags);
        skm.tagsAcked(pubKey,curKey,tsh);
      }
 else {
        TagSetHandle tsh=skm.tagsDelivered(pubKey,nextKey,tags);
        skm.tagsAcked(pubKey,nextKey,tsh);
      }
    }
  }
}
