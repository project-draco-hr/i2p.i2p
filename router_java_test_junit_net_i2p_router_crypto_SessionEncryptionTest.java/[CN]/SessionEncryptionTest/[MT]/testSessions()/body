{
  Object keys[]=KeyGenerator.getInstance().generatePKIKeypair();
  PublicKey pubKey=(PublicKey)keys[0];
  PrivateKey privKey=(PrivateKey)keys[1];
  SessionKeyManager skm=new TransientSessionKeyManager(_context);
  SessionKey curKey=skm.createSession(pubKey);
  SessionTag tag1=new SessionTag(true);
  SessionTag tag2=new SessionTag(true);
  SessionTag tag3=new SessionTag(true);
  SessionTag tag4=new SessionTag(true);
  HashSet<SessionTag> firstTags=new HashSet<SessionTag>();
  firstTags.add(tag1);
  firstTags.add(tag2);
  HashSet<SessionTag> secondTags=new HashSet<SessionTag>();
  secondTags.add(tag3);
  secondTags.add(tag4);
  byte[] msg1=DataHelper.getASCII("msg 1");
  byte[] msg2=DataHelper.getASCII("msg 2");
  byte[] msg3=DataHelper.getASCII("msg 3");
  byte[] msg4=DataHelper.getASCII("msg 4");
  byte[] msg5=DataHelper.getASCII("msg 5");
  byte emsg1[]=_context.elGamalAESEngine().encrypt(msg1,pubKey,curKey,firstTags,64);
  byte dmsg1[]=_context.elGamalAESEngine().decrypt(emsg1,privKey,skm);
  assertTrue(DataHelper.eq(dmsg1,msg1));
  TagSetHandle tsh=skm.tagsDelivered(pubKey,curKey,firstTags);
  skm.tagsAcked(pubKey,curKey,tsh);
  curKey=skm.getCurrentKey(pubKey);
  SessionTag curTag=skm.consumeNextAvailableTag(pubKey,curKey);
  assertNotNull(curTag);
  byte emsg2[]=_context.elGamalAESEngine().encrypt(msg2,pubKey,curKey,null,curTag,64);
  byte dmsg2[]=_context.elGamalAESEngine().decrypt(emsg2,privKey,skm);
  assertTrue(DataHelper.eq(dmsg2,msg2));
  curKey=skm.getCurrentKey(pubKey);
  curTag=skm.consumeNextAvailableTag(pubKey,curKey);
  assertNotNull(curTag);
  assertNotNull(curKey);
  byte emsg3[]=_context.elGamalAESEngine().encrypt(msg3,pubKey,curKey,secondTags,curTag,64);
  byte dmsg3[]=_context.elGamalAESEngine().decrypt(emsg3,privKey,skm);
  assertTrue(DataHelper.eq(dmsg3,msg3));
  tsh=skm.tagsDelivered(pubKey,curKey,secondTags);
  skm.tagsAcked(pubKey,curKey,tsh);
  curKey=skm.getCurrentKey(pubKey);
  curTag=skm.consumeNextAvailableTag(pubKey,curKey);
  assertNotNull(curTag);
  assertNotNull(curKey);
  byte emsg4[]=_context.elGamalAESEngine().encrypt(msg4,pubKey,curKey,null,curTag,64);
  byte dmsg4[]=_context.elGamalAESEngine().decrypt(emsg4,privKey,skm);
  assertTrue(DataHelper.eq(dmsg4,msg4));
  curKey=skm.getCurrentKey(pubKey);
  curTag=skm.consumeNextAvailableTag(pubKey,curKey);
  assertNotNull(curTag);
  assertNotNull(curKey);
  byte emsg5[]=_context.elGamalAESEngine().encrypt(msg5,pubKey,curKey,null,curTag,64);
  byte dmsg5[]=_context.elGamalAESEngine().decrypt(emsg5,privKey,skm);
  assertTrue(DataHelper.eq(dmsg5,msg5));
}
